

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Collections;
using System.Collections.Generic;
using Telerik.OpenAccess;
using AppFramework.ApplicationLayer.DTO;
using AppFramework.Infrastructure.Data.Repositories;
using AppFramework.Specifications;
using KMUH.FunctionLibrary.ApplicationLayer.Services;
using KMUH.EduForm.ApplicationLayer.Assemblers;
using KMUH.EduForm.ApplicationLayer.DTO;
using KMUH.EduForm.Infrastructure.Data.Repositories;
using KMUH.EduForm.DomainModel.Entities;

namespace KMUH.EduForm.ApplicationLayer.Services
{
	public partial class EduFormOperationService : IEduFormOperationService
	{
		#region IDisposable Members


		public void Dispose()
		{
			//dispose all resources
			IDisposable context = this.unitOfWork as IDisposable;
			if (context != null)
			{
				context.Dispose();
			}
		}
		#endregion IDisposable Members


		private IEduFormContextUnitOfWork unitOfWork;
		public IEduFormContextUnitOfWork UnitOfWork
		{
			get
			{
				if (this.unitOfWork == null)
				{
					string connectionStringName = string.IsNullOrEmpty(this.ConnectionStringName) ? "EduForm" : this.ConnectionStringName;
					if (System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName] == null)
						throw new ArgumentException(string.Format("Can't find the '{0}' connectionString name in app/web.config", connectionStringName));
					var connectionString = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName].ConnectionString;
					this.unitOfWork = new EduFormContext(connectionString);
					this.DbContext.ConnectionStringName = connectionStringName;
					//this.DbContext.DbmsApplicationInfo_SetModule(connectionStringName);
				}
				return this.unitOfWork;
			}
			set
			{
				this.unitOfWork = value;
			}
		}


		public string ConnectionStringName { get; set; }


		public EduFormOperationService()
		{
			DBConnStrConfig.AddConnStrToConfig("", "EduForm");
		}


		public EduFormOperationService(String DBName)
		{
			DBConnStrConfig.AddConnStrToConfig(DBName, "EduForm");
			 ConnectionStringName = DBConnStrConfig.GetConfigConnStrName(DBName, "EduForm");
		}


		public EduFormContext DbContext { get { return this.UnitOfWork as EduFormContext; } }


		public int ExecuteNonQuery(string commandText, params System.Data.Common.DbParameter[] parameters)
		{
			return this.DbContext.ExecuteNonQuery(commandText, System.Data.CommandType.Text, parameters);
		}


		public int ExecuteNonQuery(string commandText, System.Data.CommandType commandType, params System.Data.Common.DbParameter[] parameters)
		{
			return this.DbContext.ExecuteNonQuery(commandText, commandType, parameters);
		}


		public T ExecuteScalar<T>(string commandText, params System.Data.Common.DbParameter[] parameters)
		{
			return this.DbContext.ExecuteScalar<T>(commandText, System.Data.CommandType.Text, parameters);
		}


		public T ExecuteScalar<T>(string commandText, System.Data.CommandType commandType, params System.Data.Common.DbParameter[] parameters)
		{
			return this.DbContext.ExecuteScalar<T>(commandText, commandType, parameters);
		}


		
		public IEnumerable<dynamic> ExecuteQuery(string commandText, params System.Data.Common.DbParameter[] parameters)
        {
            using (System.Data.IDbConnection connection = this.DbContext.Connection)
            {
                using (System.Data.IDbCommand command = connection.CreateCommand())
                {
                    command.CommandText = commandText;

                    foreach (var parameter in parameters)
                    {
                        command.Parameters.Add(parameter);
                    }

                    using (System.Data.IDataReader reader = command.ExecuteReader())
                    {
                        Dictionary<int, KeyValuePair<int, string>> columnNames = Enumerable.Range(0, reader.FieldCount)
                                                                               .Select(x => new KeyValuePair<int, string>(x, reader.GetName(x)))
                                                                               .ToDictionary(pair => pair.Key);

                        var list = new List<dynamic>();

                        while (reader.Read())
                        {
                            dynamic entity = new System.Dynamic.ExpandoObject();
                            var expandoDict = (IDictionary<string, object>)entity;

                            Enumerable.Range(0, reader.FieldCount)
                                      .ToList()
                                      .ForEach(x => expandoDict.Add(columnNames[x].Value, reader[x]));

                            list.Add(entity);
                        }

                        return list;
                    }
                }
            }
        }


		
		public IEnumerable<T> ExecuteQuery<T>(string commandText, params System.Data.Common.DbParameter[] parameters)
        {
            return ExecuteQuery<T>(commandText, System.Data.CommandType.Text, parameters);
        }
		
		public IEnumerable<T> ExecuteQuery<T>(string commandText, System.Data.CommandType commandType, params System.Data.Common.DbParameter[] parameters)
        {
            if (parameters.Length == 0)
                return this.DbContext.ExecuteQuery<T>(commandText, commandType);
            else
                return this.DbContext.ExecuteQuery<T>(commandText, commandType, parameters);
        }


		
		public IEnumerable<T> ExecuteQueryByMultiSource<T>(List<DbConnectionSource> dbSources, string commandText, System.Data.Common.DbParameter[] dbParameters) where T : class
        {
            return ExecuteQueryByMultiSource<T>(dbSources, "", commandText, dbParameters);
        }

        public IEnumerable<T> ExecuteQueryByMultiSource<T>(List<DbConnectionSource> dbSources, string dataSourcePropertyName, string commandText, System.Data.Common.DbParameter[] dbParameters) where T : class
        {
            var multiSourceSQL = new MultiSourceSQLRepository<T>(this.UnitOfWork, dbSources);
            multiSourceSQL.DataSourcePropertyName = dataSourcePropertyName;
            return multiSourceSQL.GetAll(commandText, dbParameters);
        }


		public void FlushChanges()
		{
			this.DbContext.FlushChanges();
		}


		public void FlushChanges(bool releaseMemory)
		{
			this.DbContext.FlushChanges(releaseMemory);
		}


		public string GenerateNewIdentity(string IdentityOwner)
		{
			return this.DbContext.GenerateNewIdentity(IdentityOwner);
		}


		public DateTime GetSysDate()
		{
			return this.DbContext.GetSysDate();
		}


	}
}
#pragma warning restore 1591

