using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.IO;
using Telerik.Web.UI;
using KMU.EduActivity.ApplicationLayer.DTO;

public partial class InstanceAttachment : AuthPage
{
    private string InstanceID
    {
        get
        {
            return Request.QueryString["id"];
        }
    }

    private string Auth
    {
        get
        {
            return Request.QueryString["auth"];
        }
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        if (InstanceID == null)
        {
            Response.Write("參數傳遞錯誤!");
            return;
        }
        if (!IsPostBack)
        {
            if (Auth != null)
            {
                panAttachment.Visible = true;
                if (Auth == "U")
                {
                    panAddAttach.Visible = true;
                }
                else
                {
                    rgAttachment.AutoGenerateDeleteColumn = false;
                }

                //odsAttachment.Select();

            }
            else
            {
                Response.Write("參數傳遞錯誤!");
                return;
            }
        }
    }

    protected void ReadData()
    {
        List<FORM_INSTANCE_ATTACHMENTDto> list = service.GetFormAttachment(InstanceID);
        ViewState["CurrentFormAtt"] = list;
        rgAttachment.DataSource = list;
    }

    protected void btnUpload_Click(object sender, EventArgs e)
    {
        if (tbAttachmentName.Text.Trim() == "")
        {
            ShowMessage("輸入附件名稱!");
            tbAttachmentName.Focus();
            return;
        }

        foreach (UploadedFile file in ruploadAttachment.UploadedFiles)
        {
            byte[] bytes = new byte[file.InputStream.Length];
            file.InputStream.Read(bytes, 0, bytes.Length);
            file.InputStream.Seek(0, SeekOrigin.Begin);
            service.InsertFormAttachment(Convert.ToInt32(InstanceID), HttpUtility.HtmlEncode(file.FileName.Substring(file.FileName.LastIndexOf(@"\") + 1)), HttpUtility.HtmlEncode(tbAttachmentName.Text), bytes);
        }
        ruploadAttachment.UploadedFiles.Clear();
        ReadData();
        rgAttachment.DataBind();
    }
    protected void odsAttachment_Selecting(object sender, ObjectDataSourceSelectingEventArgs e)
    {
        e.InputParameters["instanceid"] = InstanceID;
    }
    protected void rgAttachment_ItemDataBound(object sender, GridItemEventArgs e)
    {
        if (ViewState["CurrentFormAtt"] != null)
        {
            if (e.Item is GridDataItem)
            {
                GridDataItem item = (GridDataItem)e.Item;

                string id = item.GetDataKeyValue("ATTACHMENT_ID").ToString();

                List<FORM_INSTANCE_ATTACHMENTDto> list = ViewState["CurrentFormAtt"] as List<FORM_INSTANCE_ATTACHMENTDto>;

                FORM_INSTANCE_ATTACHMENTDto att = list.Where(c => c.ATTACHMENT_ID == id).FirstOrDefault();

                LinkButton lbtn = item.FindControl("lbtnAtt") as LinkButton;
                lbtn.Text = att.Name;

                try
                {
                    ((LinkButton)item["AutoGeneratedDeleteColumn"].Controls[0]).Text = "刪除";
                }
                catch
                {
                }
            }
        }
    }
    protected void rgAttachment_DeleteCommand(object sender, GridCommandEventArgs e)
    {
        string attachmentid = (e.Item as GridDataItem).GetDataKeyValue("ATTACHMENT_ID").ToString();
        service.DeleteFormAttachment(attachmentid);
        //odsAttachment.Select();
        ReadData();
        rgAttachment.DataBind();
    }
    protected void rgAttachment_NeedDataSource(object sender, GridNeedDataSourceEventArgs e)
    {
        ReadData();
    }
    protected void lbtnAtt_Click(object sender, EventArgs e)
    {
        GridDataItem item = (sender as LinkButton).Parent.Parent as GridDataItem;
        string id = item.GetDataKeyValue("ATTACHMENT_ID").ToString();

        List<FORM_INSTANCE_ATTACHMENTDto> list = ViewState["CurrentFormAtt"] as List<FORM_INSTANCE_ATTACHMENTDto>;

        FORM_INSTANCE_ATTACHMENTDto att = list.Where(c => c.ATTACHMENT_ID == id).FirstOrDefault();

        byte[] bytes = att.ATTACHMENT;


        HttpResponse response = Response;

        response.Clear();

        //response.AppendCookie(new HttpCookie("fileDownloadToken", download_token_value_id.Value));

        response.AddHeader("Content-Type", "binary/octet-stream");

        response.AddHeader("Content-Disposition", "attachment; filename=" + HttpUtility.HtmlEncode(att.FileName.Replace(" ", "_")) + "; size=" + bytes.Length.ToString());

        response.BinaryWrite(bytes);

        response.Flush();
        response.End();
    }
}