using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using KMU.EduActivity.ApplicationLayer.DTO;
using System.IO;
using Telerik.Web.UI;
using System.Globalization;

public partial class EduStopActScheduleDoc : AuthPage
{
    private string ScheduleID
    {
        get
        {
            return Request.QueryString["ID"];
        }
    }

    private EduStopActScheduleDto CurrentSchedule
    {
        get
        {
            return Session["EduStopActScheduleDocCurrentSchedule"] as EduStopActScheduleDto;
        }
        set
        {
            Session["EduStopActScheduleDocCurrentSchedule"] = value;
        }
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        AddPostbackControl(this.ruploadAttachment);
        AddPostbackControl(this.rgAttachment);
        if (!IsPostBack)
        {
            if (ScheduleID != null)
            {
                ReadSchedule();
            }
        }
    }


    private void ReadAttachment()
    {
        List<EduStopActAttachmentDto> list = service.GetEduActAttachmentsWithoutContent(ScheduleID, false);
        ViewState["CurrentEduAtt"] = list;
        rgAttachment.DataSource = list;
    }

    private void ReadSchedule()
    {
        EduStopActScheduleDto sche = service.GetEduStopActSchedulerByID(ScheduleID);
        CurrentSchedule = sche;

        lbActName.Text = sche.ActName;
        lbActDate.Text = sche.TimeFrom.ToString("yyyy/MM/dd HH:mm") + "~" + sche.TimeTo.ToString("yyyy/MM/dd HH:mm");

        panEditAttachment.Visible = true;
        //odsAttachment.Select();
        ReadAttachment();
    }



    public List<DateTime> GetTargetDate(DateTime startDate, DateTime endDate, int weekInterval, DayOfWeek dayOfWeek)
    {
        List<DateTime> result = new List<DateTime>();
        CultureInfo info = CultureInfo.CurrentCulture;
        DateTime firstDate = DateTime.MinValue;
        DateTime firstDateInMonth = DateTime.MinValue;
        DateTime targetDate = DateTime.MinValue;
        int startMonth = 0;
        int endMonth = 0;
        int firstWeekNumber = 0;
        int targetWeekNumber = 0;
        int startweekday = 0;
        for (int x = startDate.Year; x <= endDate.Year; x++)
        {
            startMonth = (x > startDate.Year) ? 1 : startDate.Month;
            endMonth = (x < endDate.Year) ? 12 : endDate.Month;
            for (int i = startMonth; i <= endMonth; i++)
            {
                firstDateInMonth = new DateTime(x, i, 1);
                firstDate = new DateTime(firstDateInMonth.Year, 1, 1);
                startweekday = Convert.ToInt32(firstDate.DayOfWeek);
                firstWeekNumber = info.Calendar.GetWeekOfYear(firstDateInMonth, CalendarWeekRule.FirstDay, DayOfWeek.Sunday);
                targetWeekNumber = firstWeekNumber + (weekInterval - 1);
                //targetWeekNumber = firstWeekNumber + weekInterval;
                targetDate = firstDate.AddDays((targetWeekNumber - 1) * 7);
                while (targetDate.DayOfWeek != dayOfWeek)
                {
                    targetDate = targetDate.AddDays(-1);
                }
                if (targetDate >= startDate && targetDate <= endDate)
                {
                    result.Add(targetDate);
                }
            }
        }
        return result;
    }

    protected void btnUpload_Click(object sender, EventArgs e)
    {
        foreach (UploadedFile file in ruploadAttachment.UploadedFiles)
        {
            byte[] bytes = new byte[file.InputStream.Length];
            file.InputStream.Read(bytes, 0, bytes.Length);
            file.InputStream.Seek(0, SeekOrigin.Begin);
            service.InsertActAttachment(ScheduleID, file.FileName.Substring(file.FileName.LastIndexOf(@"\") + 1), bytes, false);
        }
        ruploadAttachment.UploadedFiles.Clear();
        //odsAttachment.Select();
        ReadAttachment();
        rgAttachment.DataBind();
    }
    protected void odsAttachment_Selecting(object sender, ObjectDataSourceSelectingEventArgs e)
    {
        e.InputParameters["eduStopActScheduleID"] = ScheduleID;
        e.InputParameters["isPublic"] = false;
    }
    
    protected void rgAttachment_DeleteCommand(object sender, GridCommandEventArgs e)
    {
        string attachmentid = (e.Item as GridDataItem).GetDataKeyValue("ActAttachmentID").ToString();
        service.DeleteActAttachment(attachmentid);
        //odsAttachment.Select();
        ReadAttachment();
        rgAttachment.DataBind();
    }
    protected void rgAttachment_ItemDataBound(object sender, GridItemEventArgs e)
    {
        if (e.Item is GridDataItem)
        {
            //GridDataItem item = (GridDataItem)e.Item;
            //((LinkButton)item["AutoGeneratedDeleteColumn"].Controls[0]).Text = "刪除";

            if (ViewState["CurrentEduAtt"] != null)
            {
                if (e.Item is GridDataItem)
                {
                    GridDataItem item = (GridDataItem)e.Item;

                    string id = item.GetDataKeyValue("ActAttachmentID").ToString();

                    List<EduStopActAttachmentDto> list = ViewState["CurrentEduAtt"] as List<EduStopActAttachmentDto>;

                    EduStopActAttachmentDto att = list.Where(c => c.ActAttachmentID == id).FirstOrDefault();

                    LinkButton lbtn = item.FindControl("lbtnAtt") as LinkButton;
                    
                    lbtn.Text = att.Name;

                    try
                    {
                        ((LinkButton)item["AutoGeneratedDeleteColumn"].Controls[0]).Text = "刪除";
                    }
                    catch
                    {
                    }
                }
            }

        }  
    }

    protected void lbtnAtt_Click(object sender, EventArgs e)
    {
        GridDataItem item = (sender as LinkButton).Parent.Parent as GridDataItem;
        string id = item.GetDataKeyValue("ActAttachmentID").ToString();


        EduStopActAttachmentDto att = service.GetEduActAttachment(id);

        byte[] bytes = att.Attachment;


        HttpResponse response = Response;

        
        response.Clear();


        //response.AppendCookie(new HttpCookie("fileDownloadToken", download_token_value_id.Value));

        response.AddHeader("Content-Type", "binary/octet-stream");
        response.AddHeader("Content-Disposition", "attachment; filename=" + HttpUtility.HtmlEncode(att.FileName) + "; size=" + bytes.Length.ToString());

        response.BinaryWrite(bytes);

        response.Flush();

        response.End();
    }

    protected void btnReturn_Click(object sender, EventArgs e)
    {
        Response.Redirect("EduStopActScheduleCalendar.aspx");
    }
    protected void rgAttachment_NeedDataSource(object sender, GridNeedDataSourceEventArgs e)
    {
        ReadAttachment();
    }

}