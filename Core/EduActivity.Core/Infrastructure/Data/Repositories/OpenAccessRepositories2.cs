

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Collections;
using System.Collections.Generic;
using Telerik.OpenAccess;
using KMU.EduActivity.DomainModel.Entities;

namespace KMU.EduActivity.Infrastructure.Data.Repositories
{
	public partial interface IRepository<TEntity>
	{
		void Add(TEntity entity);
		void Remove(TEntity entity);
		TEntity Get(ObjectKey objectKey);
		IQueryable<TEntity> GetAll();
		IQueryable<TEntity> Find(Expression<Func<TEntity, bool>> predicate);
		IEnumerable<TEntity> GetAll(string commandText, params System.Data.Common.DbParameter[] dbParameters);
		bool Exists();
	}


	public partial class Repository<TEntity> : IRepository<TEntity> where TEntity : class
	{
		protected IUnitOfWork unitOfWork;
		public Repository(IUnitOfWork unitOfWork)
		{
			this.unitOfWork = unitOfWork;
		}


		public void Add(TEntity entity)
		{
			this.unitOfWork.Add(entity);
		}


		public void Remove(TEntity entity)
		{
			this.unitOfWork.Delete(entity);
		}


		public virtual IQueryable<TEntity> GetAll()
		{
			return this.unitOfWork.GetAll<TEntity>();
		}


		public TEntity Get(ObjectKey objectKey)
		{
			return this.unitOfWork.GetObjectByKey<TEntity>(objectKey);
		}


		public IQueryable<TEntity> Find(Expression<Func<TEntity, bool>> predicate)
		{
			return this.unitOfWork.GetAll<TEntity>().Where(predicate);
		}


		public IEnumerable<TEntity> GetAll(string commandText, params System.Data.Common.DbParameter[] dbParameters)
		{
			var context = this.unitOfWork as OpenAccessContext;
			if (dbParameters.Length == 0)
				return context.ExecuteQuery<TEntity>(commandText);
			else
				return context.ExecuteQuery<TEntity>(commandText, dbParameters);
		}


		public bool Exists()
		{
			bool success = true;
			try
			{
				this.unitOfWork.GetAll<TEntity>().Take(0).ToList();
			}
			catch(Exception error)
			{
				Console.Error.WriteLine(error.ToString());
				success = false;
			}
			return success;
		}


	}


	public partial interface IEduTermCodeRepository : IRepository<EduTermCode>
	{
	}


	public partial class EduTermCodeRepository : Repository<EduTermCode>, IEduTermCodeRepository
	{
		public EduTermCodeRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IMemberRepository : IRepository<Member>
	{
	}


	public partial class MemberRepository : Repository<Member>, IMemberRepository
	{
		public MemberRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduTeamMemberRepository : IRepository<EduTeamMember>
	{
	}


	public partial class EduTeamMemberRepository : Repository<EduTeamMember>, IEduTeamMemberRepository
	{
		public EduTeamMemberRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduTeamRundownRepository : IRepository<EduTeamRundown>
	{
	}


	public partial class EduTeamRundownRepository : Repository<EduTeamRundown>, IEduTeamRundownRepository
	{
		public EduTeamRundownRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduTeamMemberRundownRepository : IRepository<EduTeamMemberRundown>
	{
	}


	public partial class EduTeamMemberRundownRepository : Repository<EduTeamMemberRundown>, IEduTeamMemberRundownRepository
	{
		public EduTeamMemberRundownRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduTeamRepository : IRepository<EduTeam>
	{
	}


	public partial class EduTeamRepository : Repository<EduTeam>, IEduTeamRepository
	{
		public EduTeamRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduActTopicRepository : IRepository<EduActTopic>
	{
	}


	public partial class EduActTopicRepository : Repository<EduActTopic>, IEduActTopicRepository
	{
		public EduActTopicRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduStopActScheduleRepository : IRepository<EduStopActSchedule>
	{
	}


	public partial class EduStopActScheduleRepository : Repository<EduStopActSchedule>, IEduStopActScheduleRepository
	{
		public EduStopActScheduleRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IForm_ToDo_ListRepository : IRepository<Form_ToDo_List>
	{
	}


	public partial class Form_ToDo_ListRepository : Repository<Form_ToDo_List>, IForm_ToDo_ListRepository
	{
		public Form_ToDo_ListRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduTermFormInstanceRepository : IRepository<EduTermFormInstance>
	{
	}


	public partial class EduTermFormInstanceRepository : Repository<EduTermFormInstance>, IEduTermFormInstanceRepository
	{
		public EduTermFormInstanceRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduFormTemplateTargetRepository : IRepository<EduFormTemplateTarget>
	{
	}


	public partial class EduFormTemplateTargetRepository : Repository<EduFormTemplateTarget>, IEduFormTemplateTargetRepository
	{
		public EduFormTemplateTargetRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduFormTemplateListRepository : IRepository<EduFormTemplateList>
	{
	}


	public partial class EduFormTemplateListRepository : Repository<EduFormTemplateList>, IEduFormTemplateListRepository
	{
		public EduFormTemplateListRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduStopRepository : IRepository<EduStop>
	{
	}


	public partial class EduStopRepository : Repository<EduStop>, IEduStopRepository
	{
		public EduStopRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduTermRepository : IRepository<EduTerm>
	{
	}


	public partial class EduTermRepository : Repository<EduTerm>, IEduTermRepository
	{
		public EduTermRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IV_ExpireFormInstanceRepository : IRepository<V_ExpireFormInstance>
	{
	}


	public partial class V_ExpireFormInstanceRepository : Repository<V_ExpireFormInstance>, IV_ExpireFormInstanceRepository
	{
		public V_ExpireFormInstanceRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduTeacherTypeRepository : IRepository<EduTeacherType>
	{
	}


	public partial class EduTeacherTypeRepository : Repository<EduTeacherType>, IEduTeacherTypeRepository
	{
		public EduTeacherTypeRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduRefTeacherRepository : IRepository<EduRefTeacher>
	{
	}


	public partial class EduRefTeacherRepository : Repository<EduRefTeacher>, IEduRefTeacherRepository
	{
		public EduRefTeacherRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IV_CodeRefRepository : IRepository<V_CodeRef>
	{
	}


	public partial class V_CodeRefRepository : Repository<V_CodeRef>, IV_CodeRefRepository
	{
		public V_CodeRefRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduActTargetRepository : IRepository<EduActTarget>
	{
	}


	public partial class EduActTargetRepository : Repository<EduActTarget>, IEduActTargetRepository
	{
		public EduActTargetRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IV_departmentRepository : IRepository<V_department>
	{
	}


	public partial class V_departmentRepository : Repository<V_department>, IV_departmentRepository
	{
		public V_departmentRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IV_kmujobRepository : IRepository<V_kmujob>
	{
	}


	public partial class V_kmujobRepository : Repository<V_kmujob>, IV_kmujobRepository
	{
		public V_kmujobRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduStopActAttachmentRepository : IRepository<EduStopActAttachment>
	{
	}


	public partial class EduStopActAttachmentRepository : Repository<EduStopActAttachment>, IEduStopActAttachmentRepository
	{
		public EduStopActAttachmentRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IV_MemeberRundownRepository : IRepository<V_MemeberRundown>
	{
	}


	public partial class V_MemeberRundownRepository : Repository<V_MemeberRundown>, IV_MemeberRundownRepository
	{
		public V_MemeberRundownRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IAutoEduFormTemplateTargetRepository : IRepository<AutoEduFormTemplateTarget>
	{
	}


	public partial class AutoEduFormTemplateTargetRepository : Repository<AutoEduFormTemplateTarget>, IAutoEduFormTemplateTargetRepository
	{
		public AutoEduFormTemplateTargetRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IAutoEduFormTemplateListRepository : IRepository<AutoEduFormTemplateList>
	{
	}


	public partial class AutoEduFormTemplateListRepository : Repository<AutoEduFormTemplateList>, IAutoEduFormTemplateListRepository
	{
		public AutoEduFormTemplateListRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IJobFormSettingRepository : IRepository<JobFormSetting>
	{
	}


	public partial class JobFormSettingRepository : Repository<JobFormSetting>, IJobFormSettingRepository
	{
		public JobFormSettingRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface ISchedulerLogRepository : IRepository<SchedulerLog>
	{
	}


	public partial class SchedulerLogRepository : Repository<SchedulerLog>, ISchedulerLogRepository
	{
		public SchedulerLogRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface INews_AttachmentRepository : IRepository<News_Attachment>
	{
	}


	public partial class News_AttachmentRepository : Repository<News_Attachment>, INews_AttachmentRepository
	{
		public News_AttachmentRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface INewsRepository : IRepository<News>
	{
	}


	public partial class NewsRepository : Repository<News>, INewsRepository
	{
		public NewsRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduActTypeRepository : IRepository<EduActType>
	{
	}


	public partial class EduActTypeRepository : Repository<EduActType>, IEduActTypeRepository
	{
		public EduActTypeRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IFORM_INSTANCE_ATTACHMENTRepository : IRepository<FORM_INSTANCE_ATTACHMENT>
	{
	}


	public partial class FORM_INSTANCE_ATTACHMENTRepository : Repository<FORM_INSTANCE_ATTACHMENT>, IFORM_INSTANCE_ATTACHMENTRepository
	{
		public FORM_INSTANCE_ATTACHMENTRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduActViewTargetRepository : IRepository<EduActViewTarget>
	{
	}


	public partial class EduActViewTargetRepository : Repository<EduActViewTarget>, IEduActViewTargetRepository
	{
		public EduActViewTargetRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduMenuRepository : IRepository<EduMenu>
	{
	}


	public partial class EduMenuRepository : Repository<EduMenu>, IEduMenuRepository
	{
		public EduMenuRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IAuthRoleRepository : IRepository<AuthRole>
	{
	}


	public partial class AuthRoleRepository : Repository<AuthRole>, IAuthRoleRepository
	{
		public AuthRoleRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IAuthMenuRepository : IRepository<AuthMenu>
	{
	}


	public partial class AuthMenuRepository : Repository<AuthMenu>, IAuthMenuRepository
	{
		public AuthMenuRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IAccountRoleRepository : IRepository<AccountRole>
	{
	}


	public partial class AccountRoleRepository : Repository<AccountRole>, IAccountRoleRepository
	{
		public AccountRoleRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IV_KmuEmpRepository : IRepository<V_KmuEmp>
	{
	}


	public partial class V_KmuEmpRepository : Repository<V_KmuEmp>, IV_KmuEmpRepository
	{
		public V_KmuEmpRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IFORM_INSTANCERepository : IRepository<FORM_INSTANCE>
	{
	}


	public partial class FORM_INSTANCERepository : Repository<FORM_INSTANCE>, IFORM_INSTANCERepository
	{
		public FORM_INSTANCERepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IFORM_INSTANCE_TARGETRepository : IRepository<FORM_INSTANCE_TARGET>
	{
	}


	public partial class FORM_INSTANCE_TARGETRepository : Repository<FORM_INSTANCE_TARGET>, IFORM_INSTANCE_TARGETRepository
	{
		public FORM_INSTANCE_TARGETRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IFORM_TEMPLATERepository : IRepository<FORM_TEMPLATE>
	{
	}


	public partial class FORM_TEMPLATERepository : Repository<FORM_TEMPLATE>, IFORM_TEMPLATERepository
	{
		public FORM_TEMPLATERepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IMessageBoardRepository : IRepository<MessageBoard>
	{
	}


	public partial class MessageBoardRepository : Repository<MessageBoard>, IMessageBoardRepository
	{
		public MessageBoardRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IAutoEduFormTemplateExceptRepository : IRepository<AutoEduFormTemplateExcept>
	{
	}


	public partial class AutoEduFormTemplateExceptRepository : Repository<AutoEduFormTemplateExcept>, IAutoEduFormTemplateExceptRepository
	{
		public AutoEduFormTemplateExceptRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IFORM_TEMPLATE_ELEMENTRepository : IRepository<FORM_TEMPLATE_ELEMENT>
	{
	}


	public partial class FORM_TEMPLATE_ELEMENTRepository : Repository<FORM_TEMPLATE_ELEMENT>, IFORM_TEMPLATE_ELEMENTRepository
	{
		public FORM_TEMPLATE_ELEMENTRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IFORM_INSTANCE_ELEMENTRepository : IRepository<FORM_INSTANCE_ELEMENT>
	{
	}


	public partial class FORM_INSTANCE_ELEMENTRepository : Repository<FORM_INSTANCE_ELEMENT>, IFORM_INSTANCE_ELEMENTRepository
	{
		public FORM_INSTANCE_ELEMENTRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduFormStasticPermissionRepository : IRepository<EduFormStasticPermission>
	{
	}


	public partial class EduFormStasticPermissionRepository : Repository<EduFormStasticPermission>, IEduFormStasticPermissionRepository
	{
		public EduFormStasticPermissionRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IDepSecDatumRepository : IRepository<DepSecDatum>
	{
	}


	public partial class DepSecDatumRepository : Repository<DepSecDatum>, IDepSecDatumRepository
	{
		public DepSecDatumRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface ITeachTimeTypeRepository : IRepository<TeachTimeType>
	{
	}


	public partial class TeachTimeTypeRepository : Repository<TeachTimeType>, ITeachTimeTypeRepository
	{
		public TeachTimeTypeRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface ITeachTimeRateRepository : IRepository<TeachTimeRate>
	{
	}


	public partial class TeachTimeRateRepository : Repository<TeachTimeRate>, ITeachTimeRateRepository
	{
		public TeachTimeRateRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface INewsViewTargetRepository : IRepository<NewsViewTarget>
	{
	}


	public partial class NewsViewTargetRepository : Repository<NewsViewTarget>, INewsViewTargetRepository
	{
		public NewsViewTargetRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IHealTeachTimeRepository : IRepository<HealTeachTime>
	{
	}


	public partial class HealTeachTimeRepository : Repository<HealTeachTime>, IHealTeachTimeRepository
	{
		public HealTeachTimeRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IScoreSettingJobRepository : IRepository<ScoreSettingJob>
	{
	}


	public partial class ScoreSettingJobRepository : Repository<ScoreSettingJob>, IScoreSettingJobRepository
	{
		public ScoreSettingJobRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IScoreSettingDetailRepository : IRepository<ScoreSettingDetail>
	{
	}


	public partial class ScoreSettingDetailRepository : Repository<ScoreSettingDetail>, IScoreSettingDetailRepository
	{
		public ScoreSettingDetailRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IScoreSettingRepository : IRepository<ScoreSetting>
	{
	}


	public partial class ScoreSettingRepository : Repository<ScoreSetting>, IScoreSettingRepository
	{
		public ScoreSettingRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IScoreInstanceDetailRepository : IRepository<ScoreInstanceDetail>
	{
	}


	public partial class ScoreInstanceDetailRepository : Repository<ScoreInstanceDetail>, IScoreInstanceDetailRepository
	{
		public ScoreInstanceDetailRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IScoreInstanceRepository : IRepository<ScoreInstance>
	{
	}


	public partial class ScoreInstanceRepository : Repository<ScoreInstance>, IScoreInstanceRepository
	{
		public ScoreInstanceRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IHealTeachTimeRateRepository : IRepository<HealTeachTimeRate>
	{
	}


	public partial class HealTeachTimeRateRepository : Repository<HealTeachTimeRate>, IHealTeachTimeRateRepository
	{
		public HealTeachTimeRateRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduActTypeRefRepository : IRepository<EduActTypeRef>
	{
	}


	public partial class EduActTypeRefRepository : Repository<EduActTypeRef>, IEduActTypeRefRepository
	{
		public EduActTypeRefRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduActBookingRepository : IRepository<EduActBooking>
	{
	}


	public partial class EduActBookingRepository : Repository<EduActBooking>, IEduActBookingRepository
	{
		public EduActBookingRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IElearningItemRepository : IRepository<ElearningItem>
	{
	}


	public partial class ElearningItemRepository : Repository<ElearningItem>, IElearningItemRepository
	{
		public ElearningItemRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IElearningEmpItemLogRepository : IRepository<ElearningEmpItemLog>
	{
	}


	public partial class ElearningEmpItemLogRepository : Repository<ElearningEmpItemLog>, IElearningEmpItemLogRepository
	{
		public ElearningEmpItemLogRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IElearningEmpItemRepository : IRepository<ElearningEmpItem>
	{
	}


	public partial class ElearningEmpItemRepository : Repository<ElearningEmpItem>, IElearningEmpItemRepository
	{
		public ElearningEmpItemRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IElearningClassRepository : IRepository<ElearningClass>
	{
	}


	public partial class ElearningClassRepository : Repository<ElearningClass>, IElearningClassRepository
	{
		public ElearningClassRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IElearningBookingRepository : IRepository<ElearningBooking>
	{
	}


	public partial class ElearningBookingRepository : Repository<ElearningBooking>, IElearningBookingRepository
	{
		public ElearningBookingRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IPassPortStudentApplicationItemRepository : IRepository<PassPortStudentApplicationItem>
	{
	}


	public partial class PassPortStudentApplicationItemRepository : Repository<PassPortStudentApplicationItem>, IPassPortStudentApplicationItemRepository
	{
		public PassPortStudentApplicationItemRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IPassPortJobTitleItemRepository : IRepository<PassPortJobTitleItem>
	{
	}


	public partial class PassPortJobTitleItemRepository : Repository<PassPortJobTitleItem>, IPassPortJobTitleItemRepository
	{
		public PassPortJobTitleItemRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IPassPortCheckItemRepository : IRepository<PassPortCheckItem>
	{
	}


	public partial class PassPortCheckItemRepository : Repository<PassPortCheckItem>, IPassPortCheckItemRepository
	{
		public PassPortCheckItemRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IPassPortSpecialListRepository : IRepository<PassPortSpecialList>
	{
	}


	public partial class PassPortSpecialListRepository : Repository<PassPortSpecialList>, IPassPortSpecialListRepository
	{
		public PassPortSpecialListRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IVoteTargetRepository : IRepository<VoteTarget>
	{
	}


	public partial class VoteTargetRepository : Repository<VoteTarget>, IVoteTargetRepository
	{
		public VoteTargetRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IVoteMainRepository : IRepository<VoteMain>
	{
	}


	public partial class VoteMainRepository : Repository<VoteMain>, IVoteMainRepository
	{
		public VoteMainRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IVoteJobRepository : IRepository<VoteJob>
	{
	}


	public partial class VoteJobRepository : Repository<VoteJob>, IVoteJobRepository
	{
		public VoteJobRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IVoteInstanceRepository : IRepository<VoteInstance>
	{
	}


	public partial class VoteInstanceRepository : Repository<VoteInstance>, IVoteInstanceRepository
	{
		public VoteInstanceRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IVoteInsDetRepository : IRepository<VoteInsDet>
	{
	}


	public partial class VoteInsDetRepository : Repository<VoteInsDet>, IVoteInsDetRepository
	{
		public VoteInsDetRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IVoteGroupRepository : IRepository<VoteGroup>
	{
	}


	public partial class VoteGroupRepository : Repository<VoteGroup>, IVoteGroupRepository
	{
		public VoteGroupRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IVoteGCondRepository : IRepository<VoteGCond>
	{
	}


	public partial class VoteGCondRepository : Repository<VoteGCond>, IVoteGCondRepository
	{
		public VoteGCondRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IVoteUserDefineListRepository : IRepository<VoteUserDefineList>
	{
	}


	public partial class VoteUserDefineListRepository : Repository<VoteUserDefineList>, IVoteUserDefineListRepository
	{
		public VoteUserDefineListRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IPassPortStudentApplicationItemFailLogRepository : IRepository<PassPortStudentApplicationItemFailLog>
	{
	}


	public partial class PassPortStudentApplicationItemFailLogRepository : Repository<PassPortStudentApplicationItemFailLog>, IPassPortStudentApplicationItemFailLogRepository
	{
		public PassPortStudentApplicationItemFailLogRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IPassPortJobFinalManRepository : IRepository<PassPortJobFinalMan>
	{
	}


	public partial class PassPortJobFinalManRepository : Repository<PassPortJobFinalMan>, IPassPortJobFinalManRepository
	{
		public PassPortJobFinalManRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IPassPortDocGradeRepository : IRepository<PassPortDocGrade>
	{
	}


	public partial class PassPortDocGradeRepository : Repository<PassPortDocGrade>, IPassPortDocGradeRepository
	{
		public PassPortDocGradeRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduPassportTemplateTargetRepository : IRepository<EduPassportTemplateTarget>
	{
	}


	public partial class EduPassportTemplateTargetRepository : Repository<EduPassportTemplateTarget>, IEduPassportTemplateTargetRepository
	{
		public EduPassportTemplateTargetRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduPassportTemplateItemRepository : IRepository<EduPassportTemplateItem>
	{
	}


	public partial class EduPassportTemplateItemRepository : Repository<EduPassportTemplateItem>, IEduPassportTemplateItemRepository
	{
		public EduPassportTemplateItemRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduPassportTemplateRepository : IRepository<EduPassportTemplate>
	{
	}


	public partial class EduPassportTemplateRepository : Repository<EduPassportTemplate>, IEduPassportTemplateRepository
	{
		public EduPassportTemplateRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduPassportItemDetRepository : IRepository<EduPassportItemDet>
	{
	}


	public partial class EduPassportItemDetRepository : Repository<EduPassportItemDet>, IEduPassportItemDetRepository
	{
		public EduPassportItemDetRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduPassportItemTargetRepository : IRepository<EduPassportItemTarget>
	{
	}


	public partial class EduPassportItemTargetRepository : Repository<EduPassportItemTarget>, IEduPassportItemTargetRepository
	{
		public EduPassportItemTargetRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduPassportItemRepository : IRepository<EduPassportItem>
	{
	}


	public partial class EduPassportItemRepository : Repository<EduPassportItem>, IEduPassportItemRepository
	{
		public EduPassportItemRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduPassportInstanceRepository : IRepository<EduPassportInstance>
	{
	}


	public partial class EduPassportInstanceRepository : Repository<EduPassportInstance>, IEduPassportInstanceRepository
	{
		public EduPassportInstanceRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduPassportInsItemDetRepository : IRepository<EduPassportInsItemDet>
	{
	}


	public partial class EduPassportInsItemDetRepository : Repository<EduPassportInsItemDet>, IEduPassportInsItemDetRepository
	{
		public EduPassportInsItemDetRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduPassportInsItemRepository : IRepository<EduPassportInsItem>
	{
	}


	public partial class EduPassportInsItemRepository : Repository<EduPassportInsItem>, IEduPassportInsItemRepository
	{
		public EduPassportInsItemRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IFORM_INSTANCE_TRANSLOGRepository : IRepository<FORM_INSTANCE_TRANSLOG>
	{
	}


	public partial class FORM_INSTANCE_TRANSLOGRepository : Repository<FORM_INSTANCE_TRANSLOG>, IFORM_INSTANCE_TRANSLOGRepository
	{
		public FORM_INSTANCE_TRANSLOGRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduPassportPRefRepository : IRepository<EduPassportPRef>
	{
	}


	public partial class EduPassportPRefRepository : Repository<EduPassportPRef>, IEduPassportPRefRepository
	{
		public EduPassportPRefRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduPassportInsItemRejectHiRepository : IRepository<EduPassportInsItemRejectHi>
	{
	}


	public partial class EduPassportInsItemRejectHiRepository : Repository<EduPassportInsItemRejectHi>, IEduPassportInsItemRejectHiRepository
	{
		public EduPassportInsItemRejectHiRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IFORM_TEMPLATE_GROUPRepository : IRepository<FORM_TEMPLATE_GROUP>
	{
	}


	public partial class FORM_TEMPLATE_GROUPRepository : Repository<FORM_TEMPLATE_GROUP>, IFORM_TEMPLATE_GROUPRepository
	{
		public FORM_TEMPLATE_GROUPRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IScoreSettingScoreTypeRepository : IRepository<ScoreSettingScoreType>
	{
	}


	public partial class ScoreSettingScoreTypeRepository : Repository<ScoreSettingScoreType>, IScoreSettingScoreTypeRepository
	{
		public ScoreSettingScoreTypeRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface ITeachPointRefRepository : IRepository<TeachPointRef>
	{
	}


	public partial class TeachPointRefRepository : Repository<TeachPointRef>, ITeachPointRefRepository
	{
		public TeachPointRefRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface ITeachPointItemRequireRepository : IRepository<TeachPointItemRequire>
	{
	}


	public partial class TeachPointItemRequireRepository : Repository<TeachPointItemRequire>, ITeachPointItemRequireRepository
	{
		public TeachPointItemRequireRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface ITeachPointItemRepository : IRepository<TeachPointItem>
	{
	}


	public partial class TeachPointItemRepository : Repository<TeachPointItem>, ITeachPointItemRepository
	{
		public TeachPointItemRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface ITeachPointEmpItemDatumRepository : IRepository<TeachPointEmpItemDatum>
	{
	}


	public partial class TeachPointEmpItemDatumRepository : Repository<TeachPointEmpItemDatum>, ITeachPointEmpItemDatumRepository
	{
		public TeachPointEmpItemDatumRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface ITeachPointCalcTypeRefRepository : IRepository<TeachPointCalcTypeRef>
	{
	}


	public partial class TeachPointCalcTypeRefRepository : Repository<TeachPointCalcTypeRef>, ITeachPointCalcTypeRefRepository
	{
		public TeachPointCalcTypeRefRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface ITeachPointCalcTypeRepository : IRepository<TeachPointCalcType>
	{
	}


	public partial class TeachPointCalcTypeRepository : Repository<TeachPointCalcType>, ITeachPointCalcTypeRepository
	{
		public TeachPointCalcTypeRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IMyListDetRepository : IRepository<MyListDet>
	{
	}


	public partial class MyListDetRepository : Repository<MyListDet>, IMyListDetRepository
	{
		public MyListDetRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IMyListRepository : IRepository<MyList>
	{
	}


	public partial class MyListRepository : Repository<MyList>, IMyListRepository
	{
		public MyListRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IRecordTemplateRepository : IRepository<RecordTemplate>
	{
	}


	public partial class RecordTemplateRepository : Repository<RecordTemplate>, IRecordTemplateRepository
	{
		public RecordTemplateRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IRecordInstanceRepository : IRepository<RecordInstance>
	{
	}


	public partial class RecordInstanceRepository : Repository<RecordInstance>, IRecordInstanceRepository
	{
		public RecordInstanceRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IRecordInsDetRepository : IRepository<RecordInsDet>
	{
	}


	public partial class RecordInsDetRepository : Repository<RecordInsDet>, IRecordInsDetRepository
	{
		public RecordInsDetRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IRecordInsSignInRepository : IRepository<RecordInsSignIn>
	{
	}


	public partial class RecordInsSignInRepository : Repository<RecordInsSignIn>, IRecordInsSignInRepository
	{
		public RecordInsSignInRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IRecordEduActRefRepository : IRepository<RecordEduActRef>
	{
	}


	public partial class RecordEduActRefRepository : Repository<RecordEduActRef>, IRecordEduActRefRepository
	{
		public RecordEduActRefRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduQuestionRepository : IRepository<EduQuestion>
	{
	}


	public partial class EduQuestionRepository : Repository<EduQuestion>, IEduQuestionRepository
	{
		public EduQuestionRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface ILoginLogRepository : IRepository<LoginLog>
	{
	}


	public partial class LoginLogRepository : Repository<LoginLog>, ILoginLogRepository
	{
		public LoginLogRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface ITeachPointJobItemRepository : IRepository<TeachPointJobItem>
	{
	}


	public partial class TeachPointJobItemRepository : Repository<TeachPointJobItem>, ITeachPointJobItemRepository
	{
		public TeachPointJobItemRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface ITrainingTimeRepository : IRepository<TrainingTime>
	{
	}


	public partial class TrainingTimeRepository : Repository<TrainingTime>, ITrainingTimeRepository
	{
		public TrainingTimeRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduActTypeRoleRefRepository : IRepository<EduActTypeRoleRef>
	{
	}


	public partial class EduActTypeRoleRefRepository : Repository<EduActTypeRoleRef>, IEduActTypeRoleRefRepository
	{
		public EduActTypeRoleRefRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IOSCECertRepository : IRepository<OSCECert>
	{
	}


	public partial class OSCECertRepository : Repository<OSCECert>, IOSCECertRepository
	{
		public OSCECertRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IOSCEBlockTimeRepository : IRepository<OSCEBlockTime>
	{
	}


	public partial class OSCEBlockTimeRepository : Repository<OSCEBlockTime>, IOSCEBlockTimeRepository
	{
		public OSCEBlockTimeRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IRecordInstanceRejectLogRepository : IRepository<RecordInstanceRejectLog>
	{
	}


	public partial class RecordInstanceRejectLogRepository : Repository<RecordInstanceRejectLog>, IRecordInstanceRejectLogRepository
	{
		public RecordInstanceRejectLogRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IMonthlyTeachPointCalcDatumRepository : IRepository<MonthlyTeachPointCalcDatum>
	{
	}


	public partial class MonthlyTeachPointCalcDatumRepository : Repository<MonthlyTeachPointCalcDatum>, IMonthlyTeachPointCalcDatumRepository
	{
		public MonthlyTeachPointCalcDatumRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IFormCategoryRefRepository : IRepository<FormCategoryRef>
	{
	}


	public partial class FormCategoryRefRepository : Repository<FormCategoryRef>, IFormCategoryRefRepository
	{
		public FormCategoryRefRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IFormCategoryRepository : IRepository<FormCategory>
	{
	}


	public partial class FormCategoryRepository : Repository<FormCategory>, IFormCategoryRepository
	{
		public FormCategoryRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IFORM_INSTANCE_RETURN_LOGRepository : IRepository<FORM_INSTANCE_RETURN_LOG>
	{
	}


	public partial class FORM_INSTANCE_RETURN_LOGRepository : Repository<FORM_INSTANCE_RETURN_LOG>, IFORM_INSTANCE_RETURN_LOGRepository
	{
		public FORM_INSTANCE_RETURN_LOGRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduTermFormReqTemplateDetRepository : IRepository<EduTermFormReqTemplateDet>
	{
	}


	public partial class EduTermFormReqTemplateDetRepository : Repository<EduTermFormReqTemplateDet>, IEduTermFormReqTemplateDetRepository
	{
		public EduTermFormReqTemplateDetRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduTermFormReqTemplateRepository : IRepository<EduTermFormReqTemplate>
	{
	}


	public partial class EduTermFormReqTemplateRepository : Repository<EduTermFormReqTemplate>, IEduTermFormReqTemplateRepository
	{
		public EduTermFormReqTemplateRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduTermFormReqRepository : IRepository<EduTermFormReq>
	{
	}


	public partial class EduTermFormReqRepository : Repository<EduTermFormReq>, IEduTermFormReqRepository
	{
		public EduTermFormReqRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IRecordInsReaderRepository : IRepository<RecordInsReader>
	{
	}


	public partial class RecordInsReaderRepository : Repository<RecordInsReader>, IRecordInsReaderRepository
	{
		public RecordInsReaderRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IRecordInsViewerRepository : IRepository<RecordInsViewer>
	{
	}


	public partial class RecordInsViewerRepository : Repository<RecordInsViewer>, IRecordInsViewerRepository
	{
		public RecordInsViewerRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IIKASA_MenuRepository : IRepository<IKASA_Menu>
	{
	}


	public partial class IKASA_MenuRepository : Repository<IKASA_Menu>, IIKASA_MenuRepository
	{
		public IKASA_MenuRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IIKASA_MenuParamRepository : IRepository<IKASA_MenuParam>
	{
	}


	public partial class IKASA_MenuParamRepository : Repository<IKASA_MenuParam>, IIKASA_MenuParamRepository
	{
		public IKASA_MenuParamRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IIKASA_OSCEExamStageRepository : IRepository<IKASA_OSCEExamStage>
	{
	}


	public partial class IKASA_OSCEExamStageRepository : Repository<IKASA_OSCEExamStage>, IIKASA_OSCEExamStageRepository
	{
		public IKASA_OSCEExamStageRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IIKASA_OSCEExamScoreRepository : IRepository<IKASA_OSCEExamScore>
	{
	}


	public partial class IKASA_OSCEExamScoreRepository : Repository<IKASA_OSCEExamScore>, IIKASA_OSCEExamScoreRepository
	{
		public IKASA_OSCEExamScoreRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IIKASA_OSCEExamRepository : IRepository<IKASA_OSCEExam>
	{
	}


	public partial class IKASA_OSCEExamRepository : Repository<IKASA_OSCEExam>, IIKASA_OSCEExamRepository
	{
		public IKASA_OSCEExamRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IV_hospRepository : IRepository<V_hosp>
	{
	}


	public partial class V_hospRepository : Repository<V_hosp>, IV_hospRepository
	{
		public V_hospRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduScoreRepository : IRepository<EduScore>
	{
	}


	public partial class EduScoreRepository : Repository<EduScore>, IEduScoreRepository
	{
		public EduScoreRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IIKASA_IPDDataCountRepository : IRepository<IKASA_IPDDataCount>
	{
	}


	public partial class IKASA_IPDDataCountRepository : Repository<IKASA_IPDDataCount>, IIKASA_IPDDataCountRepository
	{
		public IKASA_IPDDataCountRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IFORM_TEMPLATE_PERMISSIONRepository : IRepository<FORM_TEMPLATE_PERMISSION>
	{
	}


	public partial class FORM_TEMPLATE_PERMISSIONRepository : Repository<FORM_TEMPLATE_PERMISSION>, IFORM_TEMPLATE_PERMISSIONRepository
	{
		public FORM_TEMPLATE_PERMISSIONRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IAccountRepository : IRepository<Account>
	{
	}


	public partial class AccountRepository : Repository<Account>, IAccountRepository
	{
		public AccountRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IIKASA_MenuRefRepository : IRepository<IKASA_MenuRef>
	{
	}


	public partial class IKASA_MenuRefRepository : Repository<IKASA_MenuRef>, IIKASA_MenuRefRepository
	{
		public IKASA_MenuRefRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IIKASA_ERCaseRepository : IRepository<IKASA_ERCase>
	{
	}


	public partial class IKASA_ERCaseRepository : Repository<IKASA_ERCase>, IIKASA_ERCaseRepository
	{
		public IKASA_ERCaseRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduSentenceRepository : IRepository<EduSentence>
	{
	}


	public partial class EduSentenceRepository : Repository<EduSentence>, IEduSentenceRepository
	{
		public EduSentenceRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IIKASA_UploadFileRepository : IRepository<IKASA_UploadFile>
	{
	}


	public partial class IKASA_UploadFileRepository : Repository<IKASA_UploadFile>, IIKASA_UploadFileRepository
	{
		public IKASA_UploadFileRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IIKASA_ActUploadFileRepository : IRepository<IKASA_ActUploadFile>
	{
	}


	public partial class IKASA_ActUploadFileRepository : Repository<IKASA_ActUploadFile>, IIKASA_ActUploadFileRepository
	{
		public IKASA_ActUploadFileRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IEduSettingRepository : IRepository<EduSetting>
	{
	}


	public partial class EduSettingRepository : Repository<EduSetting>, IEduSettingRepository
	{
		public EduSettingRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IIKASA_ERCase_EvalDetRepository : IRepository<IKASA_ERCase_EvalDet>
	{
	}


	public partial class IKASA_ERCase_EvalDetRepository : Repository<IKASA_ERCase_EvalDet>, IIKASA_ERCase_EvalDetRepository
	{
		public IKASA_ERCase_EvalDetRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IIKASA_ERCase_EvalRepository : IRepository<IKASA_ERCase_Eval>
	{
	}


	public partial class IKASA_ERCase_EvalRepository : Repository<IKASA_ERCase_Eval>, IIKASA_ERCase_EvalRepository
	{
		public IKASA_ERCase_EvalRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IGoodVSDatumRepository : IRepository<GoodVSDatum>
	{
	}


	public partial class GoodVSDatumRepository : Repository<GoodVSDatum>, IGoodVSDatumRepository
	{
		public GoodVSDatumRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IGoodVSDataDeRepository : IRepository<GoodVSDataDe>
	{
	}


	public partial class GoodVSDataDeRepository : Repository<GoodVSDataDe>, IGoodVSDataDeRepository
	{
		public GoodVSDataDeRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IV_KPINormExtraFieldRepository : IRepository<V_KPINormExtraField>
	{
	}


	public partial class V_KPINormExtraFieldRepository : Repository<V_KPINormExtraField>, IV_KPINormExtraFieldRepository
	{
		public V_KPINormExtraFieldRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IV_KPINormRepository : IRepository<V_KPINorm>
	{
	}


	public partial class V_KPINormRepository : Repository<V_KPINorm>, IV_KPINormRepository
	{
		public V_KPINormRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface ITeachTimeKpiRefRepository : IRepository<TeachTimeKpiRef>
	{
	}


	public partial class TeachTimeKpiRefRepository : Repository<TeachTimeKpiRef>, ITeachTimeKpiRefRepository
	{
		public TeachTimeKpiRefRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IV_KPIRoundRepository : IRepository<V_KPIRound>
	{
	}


	public partial class V_KPIRoundRepository : Repository<V_KPIRound>, IV_KPIRoundRepository
	{
		public V_KPIRoundRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IMedicalTeachPointRepository : IRepository<MedicalTeachPoint>
	{
	}


	public partial class MedicalTeachPointRepository : Repository<MedicalTeachPoint>, IMedicalTeachPointRepository
	{
		public MedicalTeachPointRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IIKASA_ERExamRepository : IRepository<IKASA_ERExam>
	{
	}


	public partial class IKASA_ERExamRepository : Repository<IKASA_ERExam>, IIKASA_ERExamRepository
	{
		public IKASA_ERExamRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IIKASA_ERExamScoreRepository : IRepository<IKASA_ERExamScore>
	{
	}


	public partial class IKASA_ERExamScoreRepository : Repository<IKASA_ERExamScore>, IIKASA_ERExamScoreRepository
	{
		public IKASA_ERExamScoreRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


	public partial interface IIKASA_ERExamStageRepository : IRepository<IKASA_ERExamStage>
	{
	}


	public partial class IKASA_ERExamStageRepository : Repository<IKASA_ERExamStage>, IIKASA_ERExamStageRepository
	{
		public IKASA_ERExamStageRepository(IEduActivityContextUnitOfWork unitOfWork) : base(unitOfWork)
		{
		}
	}


}
#pragma warning restore 1591
