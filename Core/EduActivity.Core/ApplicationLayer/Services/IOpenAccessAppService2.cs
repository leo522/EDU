

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq.Expressions;
using System.Collections;
using System.Collections.Generic;
using AppFramework.Specifications;
using KMU.EduActivity.DomainModel.Entities;
using KMU.EduActivity.ApplicationLayer.DTO;

namespace KMU.EduActivity.ApplicationLayer.Services
{
	public partial interface IEduActivityContextService : IDisposable
	{
		#region EduTermCode CRUD Operations


		IEnumerable<EduTermCodeDto> ReadEduTermCodes();
		IEnumerable<EduTermCodeDto> ReadEduTermCodes(Expression<Func<EduTermCode, bool>> filter);
		IEnumerable<EduTermCodeDto> ReadEduTermCodes(ISpecification<EduTermCode> specification);
		IEnumerable<EduTermCodeDto> ReadEduTermCodesPaged(int startIndex, int pageSize);
		IEnumerable<EduTermCodeDto> ReadEduTermCodesFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduTermCodeDto> ReadEduTermCodesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduTermCodeDto ReadEduTermCodes(string dtoKey);
		int EduTermCodesCount();
		int EduTermCodesCountFiltered(string filterExpression);
		string CreateEduTermCode(EduTermCodeDto edutermcode, bool doSaveChanges = true);
		void UpdateEduTermCode(EduTermCodeDto edutermcode, bool doSaveChanges = true);
		void UpdateEduTermCodes(IEnumerable<EduTermCodeDto> edutermcodes, bool doSaveChanges = true);
		void DeleteEduTermCode(EduTermCodeDto edutermcode, bool doSaveChanges = true);
		void DeleteEduTermCodes(IEnumerable<EduTermCodeDto> edutermcodes, bool doSaveChanges = true);


		#endregion EduTermCode CRUD Operations


		#region Member CRUD Operations


		IEnumerable<MemberDto> ReadMembers();
		IEnumerable<MemberDto> ReadMembers(Expression<Func<Member, bool>> filter);
		IEnumerable<MemberDto> ReadMembers(ISpecification<Member> specification);
		IEnumerable<MemberDto> ReadMembersPaged(int startIndex, int pageSize);
		IEnumerable<MemberDto> ReadMembersFiltered(string sortExpression, string filterExpression);
		IEnumerable<MemberDto> ReadMembersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		MemberDto ReadMembers(string dtoKey);
		int MembersCount();
		int MembersCountFiltered(string filterExpression);
		string CreateMember(MemberDto member, bool doSaveChanges = true);
		void UpdateMember(MemberDto member, bool doSaveChanges = true);
		void UpdateMembers(IEnumerable<MemberDto> members, bool doSaveChanges = true);
		void DeleteMember(MemberDto member, bool doSaveChanges = true);
		void DeleteMembers(IEnumerable<MemberDto> members, bool doSaveChanges = true);


		#endregion Member CRUD Operations


		#region EduTeamMember CRUD Operations


		IEnumerable<EduTeamMemberDto> ReadEduTeamMembers();
		IEnumerable<EduTeamMemberDto> ReadEduTeamMembers(Expression<Func<EduTeamMember, bool>> filter);
		IEnumerable<EduTeamMemberDto> ReadEduTeamMembers(ISpecification<EduTeamMember> specification);
		IEnumerable<EduTeamMemberDto> ReadEduTeamMembersPaged(int startIndex, int pageSize);
		IEnumerable<EduTeamMemberDto> ReadEduTeamMembersFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduTeamMemberDto> ReadEduTeamMembersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduTeamMemberDto ReadEduTeamMembers(string dtoKey);
		int EduTeamMembersCount();
		int EduTeamMembersCountFiltered(string filterExpression);
		string CreateEduTeamMember(EduTeamMemberDto eduteammember, bool doSaveChanges = true);
		void UpdateEduTeamMember(EduTeamMemberDto eduteammember, bool doSaveChanges = true);
		void UpdateEduTeamMembers(IEnumerable<EduTeamMemberDto> eduteammembers, bool doSaveChanges = true);
		void DeleteEduTeamMember(EduTeamMemberDto eduteammember, bool doSaveChanges = true);
		void DeleteEduTeamMembers(IEnumerable<EduTeamMemberDto> eduteammembers, bool doSaveChanges = true);


		#endregion EduTeamMember CRUD Operations


		#region EduTeamRundown CRUD Operations


		IEnumerable<EduTeamRundownDto> ReadEduTeamRundowns();
		IEnumerable<EduTeamRundownDto> ReadEduTeamRundowns(Expression<Func<EduTeamRundown, bool>> filter);
		IEnumerable<EduTeamRundownDto> ReadEduTeamRundowns(ISpecification<EduTeamRundown> specification);
		IEnumerable<EduTeamRundownDto> ReadEduTeamRundownsPaged(int startIndex, int pageSize);
		IEnumerable<EduTeamRundownDto> ReadEduTeamRundownsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduTeamRundownDto> ReadEduTeamRundownsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduTeamRundownDto ReadEduTeamRundowns(string dtoKey);
		int EduTeamRundownsCount();
		int EduTeamRundownsCountFiltered(string filterExpression);
		string CreateEduTeamRundown(EduTeamRundownDto eduteamrundown, bool doSaveChanges = true);
		void UpdateEduTeamRundown(EduTeamRundownDto eduteamrundown, bool doSaveChanges = true);
		void UpdateEduTeamRundowns(IEnumerable<EduTeamRundownDto> eduteamrundowns, bool doSaveChanges = true);
		void DeleteEduTeamRundown(EduTeamRundownDto eduteamrundown, bool doSaveChanges = true);
		void DeleteEduTeamRundowns(IEnumerable<EduTeamRundownDto> eduteamrundowns, bool doSaveChanges = true);


		#endregion EduTeamRundown CRUD Operations


		#region EduTeamMemberRundown CRUD Operations


		IEnumerable<EduTeamMemberRundownDto> ReadEduTeamMemberRundowns();
		IEnumerable<EduTeamMemberRundownDto> ReadEduTeamMemberRundowns(Expression<Func<EduTeamMemberRundown, bool>> filter);
		IEnumerable<EduTeamMemberRundownDto> ReadEduTeamMemberRundowns(ISpecification<EduTeamMemberRundown> specification);
		IEnumerable<EduTeamMemberRundownDto> ReadEduTeamMemberRundownsPaged(int startIndex, int pageSize);
		IEnumerable<EduTeamMemberRundownDto> ReadEduTeamMemberRundownsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduTeamMemberRundownDto> ReadEduTeamMemberRundownsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduTeamMemberRundownDto ReadEduTeamMemberRundowns(string dtoKey);
		int EduTeamMemberRundownsCount();
		int EduTeamMemberRundownsCountFiltered(string filterExpression);
		string CreateEduTeamMemberRundown(EduTeamMemberRundownDto eduteammemberrundown, bool doSaveChanges = true);
		void UpdateEduTeamMemberRundown(EduTeamMemberRundownDto eduteammemberrundown, bool doSaveChanges = true);
		void UpdateEduTeamMemberRundowns(IEnumerable<EduTeamMemberRundownDto> eduteammemberrundowns, bool doSaveChanges = true);
		void DeleteEduTeamMemberRundown(EduTeamMemberRundownDto eduteammemberrundown, bool doSaveChanges = true);
		void DeleteEduTeamMemberRundowns(IEnumerable<EduTeamMemberRundownDto> eduteammemberrundowns, bool doSaveChanges = true);


		#endregion EduTeamMemberRundown CRUD Operations


		#region EduTeam CRUD Operations


		IEnumerable<EduTeamDto> ReadEduTeams();
		IEnumerable<EduTeamDto> ReadEduTeams(Expression<Func<EduTeam, bool>> filter);
		IEnumerable<EduTeamDto> ReadEduTeams(ISpecification<EduTeam> specification);
		IEnumerable<EduTeamDto> ReadEduTeamsPaged(int startIndex, int pageSize);
		IEnumerable<EduTeamDto> ReadEduTeamsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduTeamDto> ReadEduTeamsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduTeamDto ReadEduTeams(string dtoKey);
		int EduTeamsCount();
		int EduTeamsCountFiltered(string filterExpression);
		string CreateEduTeam(EduTeamDto eduteam, bool doSaveChanges = true);
		void UpdateEduTeam(EduTeamDto eduteam, bool doSaveChanges = true);
		void UpdateEduTeams(IEnumerable<EduTeamDto> eduteams, bool doSaveChanges = true);
		void DeleteEduTeam(EduTeamDto eduteam, bool doSaveChanges = true);
		void DeleteEduTeams(IEnumerable<EduTeamDto> eduteams, bool doSaveChanges = true);


		#endregion EduTeam CRUD Operations


		#region EduActTopic CRUD Operations


		IEnumerable<EduActTopicDto> ReadEduActTopics();
		IEnumerable<EduActTopicDto> ReadEduActTopics(Expression<Func<EduActTopic, bool>> filter);
		IEnumerable<EduActTopicDto> ReadEduActTopics(ISpecification<EduActTopic> specification);
		IEnumerable<EduActTopicDto> ReadEduActTopicsPaged(int startIndex, int pageSize);
		IEnumerable<EduActTopicDto> ReadEduActTopicsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduActTopicDto> ReadEduActTopicsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduActTopicDto ReadEduActTopics(string dtoKey);
		int EduActTopicsCount();
		int EduActTopicsCountFiltered(string filterExpression);
		string CreateEduActTopic(EduActTopicDto eduacttopic, bool doSaveChanges = true);
		void UpdateEduActTopic(EduActTopicDto eduacttopic, bool doSaveChanges = true);
		void UpdateEduActTopics(IEnumerable<EduActTopicDto> eduacttopics, bool doSaveChanges = true);
		void DeleteEduActTopic(EduActTopicDto eduacttopic, bool doSaveChanges = true);
		void DeleteEduActTopics(IEnumerable<EduActTopicDto> eduacttopics, bool doSaveChanges = true);


		#endregion EduActTopic CRUD Operations


		#region EduStopActSchedule CRUD Operations


		IEnumerable<EduStopActScheduleDto> ReadEduStopActSchedules();
		IEnumerable<EduStopActScheduleDto> ReadEduStopActSchedules(Expression<Func<EduStopActSchedule, bool>> filter);
		IEnumerable<EduStopActScheduleDto> ReadEduStopActSchedules(ISpecification<EduStopActSchedule> specification);
		IEnumerable<EduStopActScheduleDto> ReadEduStopActSchedulesPaged(int startIndex, int pageSize);
		IEnumerable<EduStopActScheduleDto> ReadEduStopActSchedulesFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduStopActScheduleDto> ReadEduStopActSchedulesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduStopActScheduleDto ReadEduStopActSchedules(string dtoKey);
		int EduStopActSchedulesCount();
		int EduStopActSchedulesCountFiltered(string filterExpression);
		string CreateEduStopActSchedule(EduStopActScheduleDto edustopactschedule, bool doSaveChanges = true);
		void UpdateEduStopActSchedule(EduStopActScheduleDto edustopactschedule, bool doSaveChanges = true);
		void UpdateEduStopActSchedules(IEnumerable<EduStopActScheduleDto> edustopactschedules, bool doSaveChanges = true);
		void DeleteEduStopActSchedule(EduStopActScheduleDto edustopactschedule, bool doSaveChanges = true);
		void DeleteEduStopActSchedules(IEnumerable<EduStopActScheduleDto> edustopactschedules, bool doSaveChanges = true);


		#endregion EduStopActSchedule CRUD Operations


		#region Form_ToDo_List CRUD Operations


		IEnumerable<Form_ToDo_ListDto> ReadForm_ToDo_Lists();
		IEnumerable<Form_ToDo_ListDto> ReadForm_ToDo_Lists(Expression<Func<Form_ToDo_List, bool>> filter);
		IEnumerable<Form_ToDo_ListDto> ReadForm_ToDo_Lists(ISpecification<Form_ToDo_List> specification);
		IEnumerable<Form_ToDo_ListDto> ReadForm_ToDo_ListsPaged(int startIndex, int pageSize);
		IEnumerable<Form_ToDo_ListDto> ReadForm_ToDo_ListsFiltered(string sortExpression, string filterExpression);
		IEnumerable<Form_ToDo_ListDto> ReadForm_ToDo_ListsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		Form_ToDo_ListDto ReadForm_ToDo_Lists(string dtoKey);
		int Form_ToDo_ListsCount();
		int Form_ToDo_ListsCountFiltered(string filterExpression);
		string CreateForm_ToDo_List(Form_ToDo_ListDto form_todo_list, bool doSaveChanges = true);
		void UpdateForm_ToDo_List(Form_ToDo_ListDto form_todo_list, bool doSaveChanges = true);
		void UpdateForm_ToDo_Lists(IEnumerable<Form_ToDo_ListDto> form_todo_lists, bool doSaveChanges = true);
		void DeleteForm_ToDo_List(Form_ToDo_ListDto form_todo_list, bool doSaveChanges = true);
		void DeleteForm_ToDo_Lists(IEnumerable<Form_ToDo_ListDto> form_todo_lists, bool doSaveChanges = true);


		#endregion Form_ToDo_List CRUD Operations


		#region EduTermFormInstance CRUD Operations


		IEnumerable<EduTermFormInstanceDto> ReadEduTermFormInstances();
		IEnumerable<EduTermFormInstanceDto> ReadEduTermFormInstances(Expression<Func<EduTermFormInstance, bool>> filter);
		IEnumerable<EduTermFormInstanceDto> ReadEduTermFormInstances(ISpecification<EduTermFormInstance> specification);
		IEnumerable<EduTermFormInstanceDto> ReadEduTermFormInstancesPaged(int startIndex, int pageSize);
		IEnumerable<EduTermFormInstanceDto> ReadEduTermFormInstancesFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduTermFormInstanceDto> ReadEduTermFormInstancesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduTermFormInstanceDto ReadEduTermFormInstances(string dtoKey);
		int EduTermFormInstancesCount();
		int EduTermFormInstancesCountFiltered(string filterExpression);
		string CreateEduTermFormInstance(EduTermFormInstanceDto edutermforminstance, bool doSaveChanges = true);
		void UpdateEduTermFormInstance(EduTermFormInstanceDto edutermforminstance, bool doSaveChanges = true);
		void UpdateEduTermFormInstances(IEnumerable<EduTermFormInstanceDto> edutermforminstances, bool doSaveChanges = true);
		void DeleteEduTermFormInstance(EduTermFormInstanceDto edutermforminstance, bool doSaveChanges = true);
		void DeleteEduTermFormInstances(IEnumerable<EduTermFormInstanceDto> edutermforminstances, bool doSaveChanges = true);


		#endregion EduTermFormInstance CRUD Operations


		#region EduFormTemplateTarget CRUD Operations


		IEnumerable<EduFormTemplateTargetDto> ReadEduFormTemplateTargets();
		IEnumerable<EduFormTemplateTargetDto> ReadEduFormTemplateTargets(Expression<Func<EduFormTemplateTarget, bool>> filter);
		IEnumerable<EduFormTemplateTargetDto> ReadEduFormTemplateTargets(ISpecification<EduFormTemplateTarget> specification);
		IEnumerable<EduFormTemplateTargetDto> ReadEduFormTemplateTargetsPaged(int startIndex, int pageSize);
		IEnumerable<EduFormTemplateTargetDto> ReadEduFormTemplateTargetsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduFormTemplateTargetDto> ReadEduFormTemplateTargetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduFormTemplateTargetDto ReadEduFormTemplateTargets(string dtoKey);
		int EduFormTemplateTargetsCount();
		int EduFormTemplateTargetsCountFiltered(string filterExpression);
		string CreateEduFormTemplateTarget(EduFormTemplateTargetDto eduformtemplatetarget, bool doSaveChanges = true);
		void UpdateEduFormTemplateTarget(EduFormTemplateTargetDto eduformtemplatetarget, bool doSaveChanges = true);
		void UpdateEduFormTemplateTargets(IEnumerable<EduFormTemplateTargetDto> eduformtemplatetargets, bool doSaveChanges = true);
		void DeleteEduFormTemplateTarget(EduFormTemplateTargetDto eduformtemplatetarget, bool doSaveChanges = true);
		void DeleteEduFormTemplateTargets(IEnumerable<EduFormTemplateTargetDto> eduformtemplatetargets, bool doSaveChanges = true);


		#endregion EduFormTemplateTarget CRUD Operations


		#region EduFormTemplateList CRUD Operations


		IEnumerable<EduFormTemplateListDto> ReadEduFormTemplateLists();
		IEnumerable<EduFormTemplateListDto> ReadEduFormTemplateLists(Expression<Func<EduFormTemplateList, bool>> filter);
		IEnumerable<EduFormTemplateListDto> ReadEduFormTemplateLists(ISpecification<EduFormTemplateList> specification);
		IEnumerable<EduFormTemplateListDto> ReadEduFormTemplateListsPaged(int startIndex, int pageSize);
		IEnumerable<EduFormTemplateListDto> ReadEduFormTemplateListsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduFormTemplateListDto> ReadEduFormTemplateListsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduFormTemplateListDto ReadEduFormTemplateLists(string dtoKey);
		int EduFormTemplateListsCount();
		int EduFormTemplateListsCountFiltered(string filterExpression);
		string CreateEduFormTemplateList(EduFormTemplateListDto eduformtemplatelist, bool doSaveChanges = true);
		void UpdateEduFormTemplateList(EduFormTemplateListDto eduformtemplatelist, bool doSaveChanges = true);
		void UpdateEduFormTemplateLists(IEnumerable<EduFormTemplateListDto> eduformtemplatelists, bool doSaveChanges = true);
		void DeleteEduFormTemplateList(EduFormTemplateListDto eduformtemplatelist, bool doSaveChanges = true);
		void DeleteEduFormTemplateLists(IEnumerable<EduFormTemplateListDto> eduformtemplatelists, bool doSaveChanges = true);


		#endregion EduFormTemplateList CRUD Operations


		#region EduStop CRUD Operations


		IEnumerable<EduStopDto> ReadEduStops();
		IEnumerable<EduStopDto> ReadEduStops(Expression<Func<EduStop, bool>> filter);
		IEnumerable<EduStopDto> ReadEduStops(ISpecification<EduStop> specification);
		IEnumerable<EduStopDto> ReadEduStopsPaged(int startIndex, int pageSize);
		IEnumerable<EduStopDto> ReadEduStopsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduStopDto> ReadEduStopsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduStopDto ReadEduStops(string dtoKey);
		int EduStopsCount();
		int EduStopsCountFiltered(string filterExpression);
		string CreateEduStop(EduStopDto edustop, bool doSaveChanges = true);
		void UpdateEduStop(EduStopDto edustop, bool doSaveChanges = true);
		void UpdateEduStops(IEnumerable<EduStopDto> edustops, bool doSaveChanges = true);
		void DeleteEduStop(EduStopDto edustop, bool doSaveChanges = true);
		void DeleteEduStops(IEnumerable<EduStopDto> edustops, bool doSaveChanges = true);


		#endregion EduStop CRUD Operations


		#region EduTerm CRUD Operations


		IEnumerable<EduTermDto> ReadEduTerms();
		IEnumerable<EduTermDto> ReadEduTerms(Expression<Func<EduTerm, bool>> filter);
		IEnumerable<EduTermDto> ReadEduTerms(ISpecification<EduTerm> specification);
		IEnumerable<EduTermDto> ReadEduTermsPaged(int startIndex, int pageSize);
		IEnumerable<EduTermDto> ReadEduTermsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduTermDto> ReadEduTermsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduTermDto ReadEduTerms(string dtoKey);
		int EduTermsCount();
		int EduTermsCountFiltered(string filterExpression);
		string CreateEduTerm(EduTermDto eduterm, bool doSaveChanges = true);
		void UpdateEduTerm(EduTermDto eduterm, bool doSaveChanges = true);
		void UpdateEduTerms(IEnumerable<EduTermDto> eduterms, bool doSaveChanges = true);
		void DeleteEduTerm(EduTermDto eduterm, bool doSaveChanges = true);
		void DeleteEduTerms(IEnumerable<EduTermDto> eduterms, bool doSaveChanges = true);


		#endregion EduTerm CRUD Operations


		#region V_ExpireFormInstance CRUD Operations


		IEnumerable<V_ExpireFormInstanceDto> ReadV_ExpireFormInstances();
		IEnumerable<V_ExpireFormInstanceDto> ReadV_ExpireFormInstances(Expression<Func<V_ExpireFormInstance, bool>> filter);
		IEnumerable<V_ExpireFormInstanceDto> ReadV_ExpireFormInstances(ISpecification<V_ExpireFormInstance> specification);
		IEnumerable<V_ExpireFormInstanceDto> ReadV_ExpireFormInstancesPaged(int startIndex, int pageSize);
		IEnumerable<V_ExpireFormInstanceDto> ReadV_ExpireFormInstancesFiltered(string sortExpression, string filterExpression);
		IEnumerable<V_ExpireFormInstanceDto> ReadV_ExpireFormInstancesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		V_ExpireFormInstanceDto ReadV_ExpireFormInstances(string dtoKey);
		int V_ExpireFormInstancesCount();
		int V_ExpireFormInstancesCountFiltered(string filterExpression);
		string CreateV_ExpireFormInstance(V_ExpireFormInstanceDto v_expireforminstance, bool doSaveChanges = true);
		void UpdateV_ExpireFormInstance(V_ExpireFormInstanceDto v_expireforminstance, bool doSaveChanges = true);
		void UpdateV_ExpireFormInstances(IEnumerable<V_ExpireFormInstanceDto> v_expireforminstances, bool doSaveChanges = true);
		void DeleteV_ExpireFormInstance(V_ExpireFormInstanceDto v_expireforminstance, bool doSaveChanges = true);
		void DeleteV_ExpireFormInstances(IEnumerable<V_ExpireFormInstanceDto> v_expireforminstances, bool doSaveChanges = true);


		#endregion V_ExpireFormInstance CRUD Operations


		#region EduTeacherType CRUD Operations


		IEnumerable<EduTeacherTypeDto> ReadEduTeacherTypes();
		IEnumerable<EduTeacherTypeDto> ReadEduTeacherTypes(Expression<Func<EduTeacherType, bool>> filter);
		IEnumerable<EduTeacherTypeDto> ReadEduTeacherTypes(ISpecification<EduTeacherType> specification);
		IEnumerable<EduTeacherTypeDto> ReadEduTeacherTypesPaged(int startIndex, int pageSize);
		IEnumerable<EduTeacherTypeDto> ReadEduTeacherTypesFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduTeacherTypeDto> ReadEduTeacherTypesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduTeacherTypeDto ReadEduTeacherTypes(string dtoKey);
		int EduTeacherTypesCount();
		int EduTeacherTypesCountFiltered(string filterExpression);
		string CreateEduTeacherType(EduTeacherTypeDto eduteachertype, bool doSaveChanges = true);
		void UpdateEduTeacherType(EduTeacherTypeDto eduteachertype, bool doSaveChanges = true);
		void UpdateEduTeacherTypes(IEnumerable<EduTeacherTypeDto> eduteachertypes, bool doSaveChanges = true);
		void DeleteEduTeacherType(EduTeacherTypeDto eduteachertype, bool doSaveChanges = true);
		void DeleteEduTeacherTypes(IEnumerable<EduTeacherTypeDto> eduteachertypes, bool doSaveChanges = true);


		#endregion EduTeacherType CRUD Operations


		#region EduRefTeacher CRUD Operations


		IEnumerable<EduRefTeacherDto> ReadEduRefTeachers();
		IEnumerable<EduRefTeacherDto> ReadEduRefTeachers(Expression<Func<EduRefTeacher, bool>> filter);
		IEnumerable<EduRefTeacherDto> ReadEduRefTeachers(ISpecification<EduRefTeacher> specification);
		IEnumerable<EduRefTeacherDto> ReadEduRefTeachersPaged(int startIndex, int pageSize);
		IEnumerable<EduRefTeacherDto> ReadEduRefTeachersFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduRefTeacherDto> ReadEduRefTeachersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduRefTeacherDto ReadEduRefTeachers(string dtoKey);
		int EduRefTeachersCount();
		int EduRefTeachersCountFiltered(string filterExpression);
		string CreateEduRefTeacher(EduRefTeacherDto edurefteacher, bool doSaveChanges = true);
		void UpdateEduRefTeacher(EduRefTeacherDto edurefteacher, bool doSaveChanges = true);
		void UpdateEduRefTeachers(IEnumerable<EduRefTeacherDto> edurefteachers, bool doSaveChanges = true);
		void DeleteEduRefTeacher(EduRefTeacherDto edurefteacher, bool doSaveChanges = true);
		void DeleteEduRefTeachers(IEnumerable<EduRefTeacherDto> edurefteachers, bool doSaveChanges = true);


		#endregion EduRefTeacher CRUD Operations


		#region V_CodeRef CRUD Operations


		IEnumerable<V_CodeRefDto> ReadV_CodeRefs();
		IEnumerable<V_CodeRefDto> ReadV_CodeRefs(Expression<Func<V_CodeRef, bool>> filter);
		IEnumerable<V_CodeRefDto> ReadV_CodeRefs(ISpecification<V_CodeRef> specification);
		IEnumerable<V_CodeRefDto> ReadV_CodeRefsPaged(int startIndex, int pageSize);
		IEnumerable<V_CodeRefDto> ReadV_CodeRefsFiltered(string sortExpression, string filterExpression);
		IEnumerable<V_CodeRefDto> ReadV_CodeRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		V_CodeRefDto ReadV_CodeRefs(string dtoKey);
		int V_CodeRefsCount();
		int V_CodeRefsCountFiltered(string filterExpression);
		string CreateV_CodeRef(V_CodeRefDto v_coderef, bool doSaveChanges = true);
		void UpdateV_CodeRef(V_CodeRefDto v_coderef, bool doSaveChanges = true);
		void UpdateV_CodeRefs(IEnumerable<V_CodeRefDto> v_coderefs, bool doSaveChanges = true);
		void DeleteV_CodeRef(V_CodeRefDto v_coderef, bool doSaveChanges = true);
		void DeleteV_CodeRefs(IEnumerable<V_CodeRefDto> v_coderefs, bool doSaveChanges = true);


		#endregion V_CodeRef CRUD Operations


		#region EduActTarget CRUD Operations


		IEnumerable<EduActTargetDto> ReadEduActTargets();
		IEnumerable<EduActTargetDto> ReadEduActTargets(Expression<Func<EduActTarget, bool>> filter);
		IEnumerable<EduActTargetDto> ReadEduActTargets(ISpecification<EduActTarget> specification);
		IEnumerable<EduActTargetDto> ReadEduActTargetsPaged(int startIndex, int pageSize);
		IEnumerable<EduActTargetDto> ReadEduActTargetsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduActTargetDto> ReadEduActTargetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduActTargetDto ReadEduActTargets(string dtoKey);
		int EduActTargetsCount();
		int EduActTargetsCountFiltered(string filterExpression);
		string CreateEduActTarget(EduActTargetDto eduacttarget, bool doSaveChanges = true);
		void UpdateEduActTarget(EduActTargetDto eduacttarget, bool doSaveChanges = true);
		void UpdateEduActTargets(IEnumerable<EduActTargetDto> eduacttargets, bool doSaveChanges = true);
		void DeleteEduActTarget(EduActTargetDto eduacttarget, bool doSaveChanges = true);
		void DeleteEduActTargets(IEnumerable<EduActTargetDto> eduacttargets, bool doSaveChanges = true);


		#endregion EduActTarget CRUD Operations


		#region V_department CRUD Operations


		IEnumerable<V_departmentDto> ReadV_departments();
		IEnumerable<V_departmentDto> ReadV_departments(Expression<Func<V_department, bool>> filter);
		IEnumerable<V_departmentDto> ReadV_departments(ISpecification<V_department> specification);
		IEnumerable<V_departmentDto> ReadV_departmentsPaged(int startIndex, int pageSize);
		IEnumerable<V_departmentDto> ReadV_departmentsFiltered(string sortExpression, string filterExpression);
		IEnumerable<V_departmentDto> ReadV_departmentsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		V_departmentDto ReadV_departments(string dtoKey);
		int V_departmentsCount();
		int V_departmentsCountFiltered(string filterExpression);
		string CreateV_department(V_departmentDto v_department, bool doSaveChanges = true);
		void UpdateV_department(V_departmentDto v_department, bool doSaveChanges = true);
		void UpdateV_departments(IEnumerable<V_departmentDto> v_departments, bool doSaveChanges = true);
		void DeleteV_department(V_departmentDto v_department, bool doSaveChanges = true);
		void DeleteV_departments(IEnumerable<V_departmentDto> v_departments, bool doSaveChanges = true);


		#endregion V_department CRUD Operations


		#region V_kmujob CRUD Operations


		IEnumerable<V_kmujobDto> ReadV_kmujobs();
		IEnumerable<V_kmujobDto> ReadV_kmujobs(Expression<Func<V_kmujob, bool>> filter);
		IEnumerable<V_kmujobDto> ReadV_kmujobs(ISpecification<V_kmujob> specification);
		IEnumerable<V_kmujobDto> ReadV_kmujobsPaged(int startIndex, int pageSize);
		IEnumerable<V_kmujobDto> ReadV_kmujobsFiltered(string sortExpression, string filterExpression);
		IEnumerable<V_kmujobDto> ReadV_kmujobsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		V_kmujobDto ReadV_kmujobs(string dtoKey);
		int V_kmujobsCount();
		int V_kmujobsCountFiltered(string filterExpression);
		string CreateV_kmujob(V_kmujobDto v_kmujob, bool doSaveChanges = true);
		void UpdateV_kmujob(V_kmujobDto v_kmujob, bool doSaveChanges = true);
		void UpdateV_kmujobs(IEnumerable<V_kmujobDto> v_kmujobs, bool doSaveChanges = true);
		void DeleteV_kmujob(V_kmujobDto v_kmujob, bool doSaveChanges = true);
		void DeleteV_kmujobs(IEnumerable<V_kmujobDto> v_kmujobs, bool doSaveChanges = true);


		#endregion V_kmujob CRUD Operations


		#region EduStopActAttachment CRUD Operations


		IEnumerable<EduStopActAttachmentDto> ReadEduStopActAttachments();
		IEnumerable<EduStopActAttachmentDto> ReadEduStopActAttachments(Expression<Func<EduStopActAttachment, bool>> filter);
		IEnumerable<EduStopActAttachmentDto> ReadEduStopActAttachments(ISpecification<EduStopActAttachment> specification);
		IEnumerable<EduStopActAttachmentDto> ReadEduStopActAttachmentsPaged(int startIndex, int pageSize);
		IEnumerable<EduStopActAttachmentDto> ReadEduStopActAttachmentsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduStopActAttachmentDto> ReadEduStopActAttachmentsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduStopActAttachmentDto ReadEduStopActAttachments(string dtoKey);
		int EduStopActAttachmentsCount();
		int EduStopActAttachmentsCountFiltered(string filterExpression);
		string CreateEduStopActAttachment(EduStopActAttachmentDto edustopactattachment, bool doSaveChanges = true);
		void UpdateEduStopActAttachment(EduStopActAttachmentDto edustopactattachment, bool doSaveChanges = true);
		void UpdateEduStopActAttachments(IEnumerable<EduStopActAttachmentDto> edustopactattachments, bool doSaveChanges = true);
		void DeleteEduStopActAttachment(EduStopActAttachmentDto edustopactattachment, bool doSaveChanges = true);
		void DeleteEduStopActAttachments(IEnumerable<EduStopActAttachmentDto> edustopactattachments, bool doSaveChanges = true);


		#endregion EduStopActAttachment CRUD Operations


		#region V_MemeberRundown CRUD Operations


		IEnumerable<V_MemeberRundownDto> ReadV_MemeberRundowns();
		IEnumerable<V_MemeberRundownDto> ReadV_MemeberRundowns(Expression<Func<V_MemeberRundown, bool>> filter);
		IEnumerable<V_MemeberRundownDto> ReadV_MemeberRundowns(ISpecification<V_MemeberRundown> specification);
		IEnumerable<V_MemeberRundownDto> ReadV_MemeberRundownsPaged(int startIndex, int pageSize);
		IEnumerable<V_MemeberRundownDto> ReadV_MemeberRundownsFiltered(string sortExpression, string filterExpression);
		IEnumerable<V_MemeberRundownDto> ReadV_MemeberRundownsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		V_MemeberRundownDto ReadV_MemeberRundowns(string dtoKey);
		int V_MemeberRundownsCount();
		int V_MemeberRundownsCountFiltered(string filterExpression);
		string CreateV_MemeberRundown(V_MemeberRundownDto v_memeberrundown, bool doSaveChanges = true);
		void UpdateV_MemeberRundown(V_MemeberRundownDto v_memeberrundown, bool doSaveChanges = true);
		void UpdateV_MemeberRundowns(IEnumerable<V_MemeberRundownDto> v_memeberrundowns, bool doSaveChanges = true);
		void DeleteV_MemeberRundown(V_MemeberRundownDto v_memeberrundown, bool doSaveChanges = true);
		void DeleteV_MemeberRundowns(IEnumerable<V_MemeberRundownDto> v_memeberrundowns, bool doSaveChanges = true);


		#endregion V_MemeberRundown CRUD Operations


		#region AutoEduFormTemplateTarget CRUD Operations


		IEnumerable<AutoEduFormTemplateTargetDto> ReadAutoEduFormTemplateTargets();
		IEnumerable<AutoEduFormTemplateTargetDto> ReadAutoEduFormTemplateTargets(Expression<Func<AutoEduFormTemplateTarget, bool>> filter);
		IEnumerable<AutoEduFormTemplateTargetDto> ReadAutoEduFormTemplateTargets(ISpecification<AutoEduFormTemplateTarget> specification);
		IEnumerable<AutoEduFormTemplateTargetDto> ReadAutoEduFormTemplateTargetsPaged(int startIndex, int pageSize);
		IEnumerable<AutoEduFormTemplateTargetDto> ReadAutoEduFormTemplateTargetsFiltered(string sortExpression, string filterExpression);
		IEnumerable<AutoEduFormTemplateTargetDto> ReadAutoEduFormTemplateTargetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		AutoEduFormTemplateTargetDto ReadAutoEduFormTemplateTargets(string dtoKey);
		int AutoEduFormTemplateTargetsCount();
		int AutoEduFormTemplateTargetsCountFiltered(string filterExpression);
		string CreateAutoEduFormTemplateTarget(AutoEduFormTemplateTargetDto autoeduformtemplatetarget, bool doSaveChanges = true);
		void UpdateAutoEduFormTemplateTarget(AutoEduFormTemplateTargetDto autoeduformtemplatetarget, bool doSaveChanges = true);
		void UpdateAutoEduFormTemplateTargets(IEnumerable<AutoEduFormTemplateTargetDto> autoeduformtemplatetargets, bool doSaveChanges = true);
		void DeleteAutoEduFormTemplateTarget(AutoEduFormTemplateTargetDto autoeduformtemplatetarget, bool doSaveChanges = true);
		void DeleteAutoEduFormTemplateTargets(IEnumerable<AutoEduFormTemplateTargetDto> autoeduformtemplatetargets, bool doSaveChanges = true);


		#endregion AutoEduFormTemplateTarget CRUD Operations


		#region AutoEduFormTemplateList CRUD Operations


		IEnumerable<AutoEduFormTemplateListDto> ReadAutoEduFormTemplateLists();
		IEnumerable<AutoEduFormTemplateListDto> ReadAutoEduFormTemplateLists(Expression<Func<AutoEduFormTemplateList, bool>> filter);
		IEnumerable<AutoEduFormTemplateListDto> ReadAutoEduFormTemplateLists(ISpecification<AutoEduFormTemplateList> specification);
		IEnumerable<AutoEduFormTemplateListDto> ReadAutoEduFormTemplateListsPaged(int startIndex, int pageSize);
		IEnumerable<AutoEduFormTemplateListDto> ReadAutoEduFormTemplateListsFiltered(string sortExpression, string filterExpression);
		IEnumerable<AutoEduFormTemplateListDto> ReadAutoEduFormTemplateListsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		AutoEduFormTemplateListDto ReadAutoEduFormTemplateLists(string dtoKey);
		int AutoEduFormTemplateListsCount();
		int AutoEduFormTemplateListsCountFiltered(string filterExpression);
		string CreateAutoEduFormTemplateList(AutoEduFormTemplateListDto autoeduformtemplatelist, bool doSaveChanges = true);
		void UpdateAutoEduFormTemplateList(AutoEduFormTemplateListDto autoeduformtemplatelist, bool doSaveChanges = true);
		void UpdateAutoEduFormTemplateLists(IEnumerable<AutoEduFormTemplateListDto> autoeduformtemplatelists, bool doSaveChanges = true);
		void DeleteAutoEduFormTemplateList(AutoEduFormTemplateListDto autoeduformtemplatelist, bool doSaveChanges = true);
		void DeleteAutoEduFormTemplateLists(IEnumerable<AutoEduFormTemplateListDto> autoeduformtemplatelists, bool doSaveChanges = true);


		#endregion AutoEduFormTemplateList CRUD Operations


		#region JobFormSetting CRUD Operations


		IEnumerable<JobFormSettingDto> ReadJobFormSettings();
		IEnumerable<JobFormSettingDto> ReadJobFormSettings(Expression<Func<JobFormSetting, bool>> filter);
		IEnumerable<JobFormSettingDto> ReadJobFormSettings(ISpecification<JobFormSetting> specification);
		IEnumerable<JobFormSettingDto> ReadJobFormSettingsPaged(int startIndex, int pageSize);
		IEnumerable<JobFormSettingDto> ReadJobFormSettingsFiltered(string sortExpression, string filterExpression);
		IEnumerable<JobFormSettingDto> ReadJobFormSettingsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		JobFormSettingDto ReadJobFormSettings(string dtoKey);
		int JobFormSettingsCount();
		int JobFormSettingsCountFiltered(string filterExpression);
		string CreateJobFormSetting(JobFormSettingDto jobformsetting, bool doSaveChanges = true);
		void UpdateJobFormSetting(JobFormSettingDto jobformsetting, bool doSaveChanges = true);
		void UpdateJobFormSettings(IEnumerable<JobFormSettingDto> jobformsettings, bool doSaveChanges = true);
		void DeleteJobFormSetting(JobFormSettingDto jobformsetting, bool doSaveChanges = true);
		void DeleteJobFormSettings(IEnumerable<JobFormSettingDto> jobformsettings, bool doSaveChanges = true);


		#endregion JobFormSetting CRUD Operations


		#region SchedulerLog CRUD Operations


		IEnumerable<SchedulerLogDto> ReadSchedulerLogs();
		IEnumerable<SchedulerLogDto> ReadSchedulerLogs(Expression<Func<SchedulerLog, bool>> filter);
		IEnumerable<SchedulerLogDto> ReadSchedulerLogs(ISpecification<SchedulerLog> specification);
		IEnumerable<SchedulerLogDto> ReadSchedulerLogsPaged(int startIndex, int pageSize);
		IEnumerable<SchedulerLogDto> ReadSchedulerLogsFiltered(string sortExpression, string filterExpression);
		IEnumerable<SchedulerLogDto> ReadSchedulerLogsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		SchedulerLogDto ReadSchedulerLogs(string dtoKey);
		int SchedulerLogsCount();
		int SchedulerLogsCountFiltered(string filterExpression);
		string CreateSchedulerLog(SchedulerLogDto schedulerlog, bool doSaveChanges = true);
		void UpdateSchedulerLog(SchedulerLogDto schedulerlog, bool doSaveChanges = true);
		void UpdateSchedulerLogs(IEnumerable<SchedulerLogDto> schedulerlogs, bool doSaveChanges = true);
		void DeleteSchedulerLog(SchedulerLogDto schedulerlog, bool doSaveChanges = true);
		void DeleteSchedulerLogs(IEnumerable<SchedulerLogDto> schedulerlogs, bool doSaveChanges = true);


		#endregion SchedulerLog CRUD Operations


		#region News_Attachment CRUD Operations


		IEnumerable<News_AttachmentDto> ReadNews_Attachments();
		IEnumerable<News_AttachmentDto> ReadNews_Attachments(Expression<Func<News_Attachment, bool>> filter);
		IEnumerable<News_AttachmentDto> ReadNews_Attachments(ISpecification<News_Attachment> specification);
		IEnumerable<News_AttachmentDto> ReadNews_AttachmentsPaged(int startIndex, int pageSize);
		IEnumerable<News_AttachmentDto> ReadNews_AttachmentsFiltered(string sortExpression, string filterExpression);
		IEnumerable<News_AttachmentDto> ReadNews_AttachmentsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		News_AttachmentDto ReadNews_Attachments(string dtoKey);
		int News_AttachmentsCount();
		int News_AttachmentsCountFiltered(string filterExpression);
		string CreateNews_Attachment(News_AttachmentDto news_attachment, bool doSaveChanges = true);
		void UpdateNews_Attachment(News_AttachmentDto news_attachment, bool doSaveChanges = true);
		void UpdateNews_Attachments(IEnumerable<News_AttachmentDto> news_attachments, bool doSaveChanges = true);
		void DeleteNews_Attachment(News_AttachmentDto news_attachment, bool doSaveChanges = true);
		void DeleteNews_Attachments(IEnumerable<News_AttachmentDto> news_attachments, bool doSaveChanges = true);


		#endregion News_Attachment CRUD Operations


		#region News CRUD Operations


		IEnumerable<NewsDto> ReadNews();
		IEnumerable<NewsDto> ReadNews(Expression<Func<News, bool>> filter);
		IEnumerable<NewsDto> ReadNews(ISpecification<News> specification);
		IEnumerable<NewsDto> ReadNewsPaged(int startIndex, int pageSize);
		IEnumerable<NewsDto> ReadNewsFiltered(string sortExpression, string filterExpression);
		IEnumerable<NewsDto> ReadNewsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		NewsDto ReadNews(string dtoKey);
		int NewsCount();
		int NewsCountFiltered(string filterExpression);
		string CreateNews(NewsDto news, bool doSaveChanges = true);
		void UpdateNews(NewsDto news, bool doSaveChanges = true);
		void UpdateNews(IEnumerable<NewsDto> news, bool doSaveChanges = true);
		void DeleteNews(NewsDto news, bool doSaveChanges = true);
		void DeleteNews(IEnumerable<NewsDto> news, bool doSaveChanges = true);


		#endregion News CRUD Operations


		#region EduActType CRUD Operations


		IEnumerable<EduActTypeDto> ReadEduActTypes();
		IEnumerable<EduActTypeDto> ReadEduActTypes(Expression<Func<EduActType, bool>> filter);
		IEnumerable<EduActTypeDto> ReadEduActTypes(ISpecification<EduActType> specification);
		IEnumerable<EduActTypeDto> ReadEduActTypesPaged(int startIndex, int pageSize);
		IEnumerable<EduActTypeDto> ReadEduActTypesFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduActTypeDto> ReadEduActTypesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduActTypeDto ReadEduActTypes(string dtoKey);
		int EduActTypesCount();
		int EduActTypesCountFiltered(string filterExpression);
		string CreateEduActType(EduActTypeDto eduacttype, bool doSaveChanges = true);
		void UpdateEduActType(EduActTypeDto eduacttype, bool doSaveChanges = true);
		void UpdateEduActTypes(IEnumerable<EduActTypeDto> eduacttypes, bool doSaveChanges = true);
		void DeleteEduActType(EduActTypeDto eduacttype, bool doSaveChanges = true);
		void DeleteEduActTypes(IEnumerable<EduActTypeDto> eduacttypes, bool doSaveChanges = true);


		#endregion EduActType CRUD Operations


		#region FORM_INSTANCE_ATTACHMENT CRUD Operations


		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs();
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs(Expression<Func<FORM_INSTANCE_ATTACHMENT, bool>> filter);
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs(ISpecification<FORM_INSTANCE_ATTACHMENT> specification);
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		FORM_INSTANCE_ATTACHMENTDto ReadFORM_INSTANCE_ATTACHMENTs(string dtoKey);
		int FORM_INSTANCE_ATTACHMENTsCount();
		int FORM_INSTANCE_ATTACHMENTsCountFiltered(string filterExpression);
		string CreateFORM_INSTANCE_ATTACHMENT(FORM_INSTANCE_ATTACHMENTDto form_instance_attachment, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_ATTACHMENT(FORM_INSTANCE_ATTACHMENTDto form_instance_attachment, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_ATTACHMENTs(IEnumerable<FORM_INSTANCE_ATTACHMENTDto> form_instance_attachments, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_ATTACHMENT(FORM_INSTANCE_ATTACHMENTDto form_instance_attachment, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_ATTACHMENTs(IEnumerable<FORM_INSTANCE_ATTACHMENTDto> form_instance_attachments, bool doSaveChanges = true);


		#endregion FORM_INSTANCE_ATTACHMENT CRUD Operations


		#region EduActViewTarget CRUD Operations


		IEnumerable<EduActViewTargetDto> ReadEduActViewTargets();
		IEnumerable<EduActViewTargetDto> ReadEduActViewTargets(Expression<Func<EduActViewTarget, bool>> filter);
		IEnumerable<EduActViewTargetDto> ReadEduActViewTargets(ISpecification<EduActViewTarget> specification);
		IEnumerable<EduActViewTargetDto> ReadEduActViewTargetsPaged(int startIndex, int pageSize);
		IEnumerable<EduActViewTargetDto> ReadEduActViewTargetsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduActViewTargetDto> ReadEduActViewTargetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduActViewTargetDto ReadEduActViewTargets(string dtoKey);
		int EduActViewTargetsCount();
		int EduActViewTargetsCountFiltered(string filterExpression);
		string CreateEduActViewTarget(EduActViewTargetDto eduactviewtarget, bool doSaveChanges = true);
		void UpdateEduActViewTarget(EduActViewTargetDto eduactviewtarget, bool doSaveChanges = true);
		void UpdateEduActViewTargets(IEnumerable<EduActViewTargetDto> eduactviewtargets, bool doSaveChanges = true);
		void DeleteEduActViewTarget(EduActViewTargetDto eduactviewtarget, bool doSaveChanges = true);
		void DeleteEduActViewTargets(IEnumerable<EduActViewTargetDto> eduactviewtargets, bool doSaveChanges = true);


		#endregion EduActViewTarget CRUD Operations


		#region EduMenu CRUD Operations


		IEnumerable<EduMenuDto> ReadEduMenus();
		IEnumerable<EduMenuDto> ReadEduMenus(Expression<Func<EduMenu, bool>> filter);
		IEnumerable<EduMenuDto> ReadEduMenus(ISpecification<EduMenu> specification);
		IEnumerable<EduMenuDto> ReadEduMenusPaged(int startIndex, int pageSize);
		IEnumerable<EduMenuDto> ReadEduMenusFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduMenuDto> ReadEduMenusPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduMenuDto ReadEduMenus(string dtoKey);
		int EduMenusCount();
		int EduMenusCountFiltered(string filterExpression);
		string CreateEduMenu(EduMenuDto edumenu, bool doSaveChanges = true);
		void UpdateEduMenu(EduMenuDto edumenu, bool doSaveChanges = true);
		void UpdateEduMenus(IEnumerable<EduMenuDto> edumenus, bool doSaveChanges = true);
		void DeleteEduMenu(EduMenuDto edumenu, bool doSaveChanges = true);
		void DeleteEduMenus(IEnumerable<EduMenuDto> edumenus, bool doSaveChanges = true);


		#endregion EduMenu CRUD Operations


		#region AuthRole CRUD Operations


		IEnumerable<AuthRoleDto> ReadAuthRoles();
		IEnumerable<AuthRoleDto> ReadAuthRoles(Expression<Func<AuthRole, bool>> filter);
		IEnumerable<AuthRoleDto> ReadAuthRoles(ISpecification<AuthRole> specification);
		IEnumerable<AuthRoleDto> ReadAuthRolesPaged(int startIndex, int pageSize);
		IEnumerable<AuthRoleDto> ReadAuthRolesFiltered(string sortExpression, string filterExpression);
		IEnumerable<AuthRoleDto> ReadAuthRolesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		AuthRoleDto ReadAuthRoles(string dtoKey);
		int AuthRolesCount();
		int AuthRolesCountFiltered(string filterExpression);
		string CreateAuthRole(AuthRoleDto authrole, bool doSaveChanges = true);
		void UpdateAuthRole(AuthRoleDto authrole, bool doSaveChanges = true);
		void UpdateAuthRoles(IEnumerable<AuthRoleDto> authroles, bool doSaveChanges = true);
		void DeleteAuthRole(AuthRoleDto authrole, bool doSaveChanges = true);
		void DeleteAuthRoles(IEnumerable<AuthRoleDto> authroles, bool doSaveChanges = true);


		#endregion AuthRole CRUD Operations


		#region AuthMenu CRUD Operations


		IEnumerable<AuthMenuDto> ReadAuthMenus();
		IEnumerable<AuthMenuDto> ReadAuthMenus(Expression<Func<AuthMenu, bool>> filter);
		IEnumerable<AuthMenuDto> ReadAuthMenus(ISpecification<AuthMenu> specification);
		IEnumerable<AuthMenuDto> ReadAuthMenusPaged(int startIndex, int pageSize);
		IEnumerable<AuthMenuDto> ReadAuthMenusFiltered(string sortExpression, string filterExpression);
		IEnumerable<AuthMenuDto> ReadAuthMenusPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		AuthMenuDto ReadAuthMenus(string dtoKey);
		int AuthMenusCount();
		int AuthMenusCountFiltered(string filterExpression);
		string CreateAuthMenu(AuthMenuDto authmenu, bool doSaveChanges = true);
		void UpdateAuthMenu(AuthMenuDto authmenu, bool doSaveChanges = true);
		void UpdateAuthMenus(IEnumerable<AuthMenuDto> authmenus, bool doSaveChanges = true);
		void DeleteAuthMenu(AuthMenuDto authmenu, bool doSaveChanges = true);
		void DeleteAuthMenus(IEnumerable<AuthMenuDto> authmenus, bool doSaveChanges = true);


		#endregion AuthMenu CRUD Operations


		#region AccountRole CRUD Operations


		IEnumerable<AccountRoleDto> ReadAccountRoles();
		IEnumerable<AccountRoleDto> ReadAccountRoles(Expression<Func<AccountRole, bool>> filter);
		IEnumerable<AccountRoleDto> ReadAccountRoles(ISpecification<AccountRole> specification);
		IEnumerable<AccountRoleDto> ReadAccountRolesPaged(int startIndex, int pageSize);
		IEnumerable<AccountRoleDto> ReadAccountRolesFiltered(string sortExpression, string filterExpression);
		IEnumerable<AccountRoleDto> ReadAccountRolesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		AccountRoleDto ReadAccountRoles(string dtoKey);
		int AccountRolesCount();
		int AccountRolesCountFiltered(string filterExpression);
		string CreateAccountRole(AccountRoleDto accountrole, bool doSaveChanges = true);
		void UpdateAccountRole(AccountRoleDto accountrole, bool doSaveChanges = true);
		void UpdateAccountRoles(IEnumerable<AccountRoleDto> accountroles, bool doSaveChanges = true);
		void DeleteAccountRole(AccountRoleDto accountrole, bool doSaveChanges = true);
		void DeleteAccountRoles(IEnumerable<AccountRoleDto> accountroles, bool doSaveChanges = true);


		#endregion AccountRole CRUD Operations


		#region V_KmuEmp CRUD Operations


		IEnumerable<V_KmuEmpDto> ReadV_KmuEmps();
		IEnumerable<V_KmuEmpDto> ReadV_KmuEmps(Expression<Func<V_KmuEmp, bool>> filter);
		IEnumerable<V_KmuEmpDto> ReadV_KmuEmps(ISpecification<V_KmuEmp> specification);
		IEnumerable<V_KmuEmpDto> ReadV_KmuEmpsPaged(int startIndex, int pageSize);
		IEnumerable<V_KmuEmpDto> ReadV_KmuEmpsFiltered(string sortExpression, string filterExpression);
		IEnumerable<V_KmuEmpDto> ReadV_KmuEmpsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		V_KmuEmpDto ReadV_KmuEmps(string dtoKey);
		int V_KmuEmpsCount();
		int V_KmuEmpsCountFiltered(string filterExpression);
		string CreateV_KmuEmp(V_KmuEmpDto v_kmuemp, bool doSaveChanges = true);
		void UpdateV_KmuEmp(V_KmuEmpDto v_kmuemp, bool doSaveChanges = true);
		void UpdateV_KmuEmps(IEnumerable<V_KmuEmpDto> v_kmuemps, bool doSaveChanges = true);
		void DeleteV_KmuEmp(V_KmuEmpDto v_kmuemp, bool doSaveChanges = true);
		void DeleteV_KmuEmps(IEnumerable<V_KmuEmpDto> v_kmuemps, bool doSaveChanges = true);


		#endregion V_KmuEmp CRUD Operations


		#region FORM_INSTANCE CRUD Operations


		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs();
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs(Expression<Func<FORM_INSTANCE, bool>> filter);
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs(ISpecification<FORM_INSTANCE> specification);
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		FORM_INSTANCEDto ReadFORM_INSTANCEs(string dtoKey);
		int FORM_INSTANCEsCount();
		int FORM_INSTANCEsCountFiltered(string filterExpression);
		string CreateFORM_INSTANCE(FORM_INSTANCEDto form_instance, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE(FORM_INSTANCEDto form_instance, bool doSaveChanges = true);
		void UpdateFORM_INSTANCEs(IEnumerable<FORM_INSTANCEDto> form_instances, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE(FORM_INSTANCEDto form_instance, bool doSaveChanges = true);
		void DeleteFORM_INSTANCEs(IEnumerable<FORM_INSTANCEDto> form_instances, bool doSaveChanges = true);


		#endregion FORM_INSTANCE CRUD Operations


		#region FORM_INSTANCE_TARGET CRUD Operations


		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs();
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs(Expression<Func<FORM_INSTANCE_TARGET, bool>> filter);
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs(ISpecification<FORM_INSTANCE_TARGET> specification);
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		FORM_INSTANCE_TARGETDto ReadFORM_INSTANCE_TARGETs(string dtoKey);
		int FORM_INSTANCE_TARGETsCount();
		int FORM_INSTANCE_TARGETsCountFiltered(string filterExpression);
		string CreateFORM_INSTANCE_TARGET(FORM_INSTANCE_TARGETDto form_instance_target, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_TARGET(FORM_INSTANCE_TARGETDto form_instance_target, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_TARGETs(IEnumerable<FORM_INSTANCE_TARGETDto> form_instance_targets, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_TARGET(FORM_INSTANCE_TARGETDto form_instance_target, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_TARGETs(IEnumerable<FORM_INSTANCE_TARGETDto> form_instance_targets, bool doSaveChanges = true);


		#endregion FORM_INSTANCE_TARGET CRUD Operations


		#region FORM_TEMPLATE CRUD Operations


		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs();
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs(Expression<Func<FORM_TEMPLATE, bool>> filter);
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs(ISpecification<FORM_TEMPLATE> specification);
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		FORM_TEMPLATEDto ReadFORM_TEMPLATEs(string dtoKey);
		int FORM_TEMPLATEsCount();
		int FORM_TEMPLATEsCountFiltered(string filterExpression);
		string CreateFORM_TEMPLATE(FORM_TEMPLATEDto form_template, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE(FORM_TEMPLATEDto form_template, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATEs(IEnumerable<FORM_TEMPLATEDto> form_templates, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE(FORM_TEMPLATEDto form_template, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATEs(IEnumerable<FORM_TEMPLATEDto> form_templates, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE CRUD Operations


		#region MessageBoard CRUD Operations


		IEnumerable<MessageBoardDto> ReadMessageBoards();
		IEnumerable<MessageBoardDto> ReadMessageBoards(Expression<Func<MessageBoard, bool>> filter);
		IEnumerable<MessageBoardDto> ReadMessageBoards(ISpecification<MessageBoard> specification);
		IEnumerable<MessageBoardDto> ReadMessageBoardsPaged(int startIndex, int pageSize);
		IEnumerable<MessageBoardDto> ReadMessageBoardsFiltered(string sortExpression, string filterExpression);
		IEnumerable<MessageBoardDto> ReadMessageBoardsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		MessageBoardDto ReadMessageBoards(string dtoKey);
		int MessageBoardsCount();
		int MessageBoardsCountFiltered(string filterExpression);
		string CreateMessageBoard(MessageBoardDto messageboard, bool doSaveChanges = true);
		void UpdateMessageBoard(MessageBoardDto messageboard, bool doSaveChanges = true);
		void UpdateMessageBoards(IEnumerable<MessageBoardDto> messageboards, bool doSaveChanges = true);
		void DeleteMessageBoard(MessageBoardDto messageboard, bool doSaveChanges = true);
		void DeleteMessageBoards(IEnumerable<MessageBoardDto> messageboards, bool doSaveChanges = true);


		#endregion MessageBoard CRUD Operations


		#region AutoEduFormTemplateExcept CRUD Operations


		IEnumerable<AutoEduFormTemplateExceptDto> ReadAutoEduFormTemplateExcepts();
		IEnumerable<AutoEduFormTemplateExceptDto> ReadAutoEduFormTemplateExcepts(Expression<Func<AutoEduFormTemplateExcept, bool>> filter);
		IEnumerable<AutoEduFormTemplateExceptDto> ReadAutoEduFormTemplateExcepts(ISpecification<AutoEduFormTemplateExcept> specification);
		IEnumerable<AutoEduFormTemplateExceptDto> ReadAutoEduFormTemplateExceptsPaged(int startIndex, int pageSize);
		IEnumerable<AutoEduFormTemplateExceptDto> ReadAutoEduFormTemplateExceptsFiltered(string sortExpression, string filterExpression);
		IEnumerable<AutoEduFormTemplateExceptDto> ReadAutoEduFormTemplateExceptsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		AutoEduFormTemplateExceptDto ReadAutoEduFormTemplateExcepts(string dtoKey);
		int AutoEduFormTemplateExceptsCount();
		int AutoEduFormTemplateExceptsCountFiltered(string filterExpression);
		string CreateAutoEduFormTemplateExcept(AutoEduFormTemplateExceptDto autoeduformtemplateexcept, bool doSaveChanges = true);
		void UpdateAutoEduFormTemplateExcept(AutoEduFormTemplateExceptDto autoeduformtemplateexcept, bool doSaveChanges = true);
		void UpdateAutoEduFormTemplateExcepts(IEnumerable<AutoEduFormTemplateExceptDto> autoeduformtemplateexcepts, bool doSaveChanges = true);
		void DeleteAutoEduFormTemplateExcept(AutoEduFormTemplateExceptDto autoeduformtemplateexcept, bool doSaveChanges = true);
		void DeleteAutoEduFormTemplateExcepts(IEnumerable<AutoEduFormTemplateExceptDto> autoeduformtemplateexcepts, bool doSaveChanges = true);


		#endregion AutoEduFormTemplateExcept CRUD Operations


		#region FORM_TEMPLATE_ELEMENT CRUD Operations


		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs();
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs(Expression<Func<FORM_TEMPLATE_ELEMENT, bool>> filter);
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs(ISpecification<FORM_TEMPLATE_ELEMENT> specification);
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		FORM_TEMPLATE_ELEMENTDto ReadFORM_TEMPLATE_ELEMENTs(string dtoKey);
		int FORM_TEMPLATE_ELEMENTsCount();
		int FORM_TEMPLATE_ELEMENTsCountFiltered(string filterExpression);
		string CreateFORM_TEMPLATE_ELEMENT(FORM_TEMPLATE_ELEMENTDto form_template_element, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_ELEMENT(FORM_TEMPLATE_ELEMENTDto form_template_element, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_ELEMENTs(IEnumerable<FORM_TEMPLATE_ELEMENTDto> form_template_elements, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_ELEMENT(FORM_TEMPLATE_ELEMENTDto form_template_element, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_ELEMENTs(IEnumerable<FORM_TEMPLATE_ELEMENTDto> form_template_elements, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_ELEMENT CRUD Operations


		#region FORM_INSTANCE_ELEMENT CRUD Operations


		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs();
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs(Expression<Func<FORM_INSTANCE_ELEMENT, bool>> filter);
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs(ISpecification<FORM_INSTANCE_ELEMENT> specification);
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		FORM_INSTANCE_ELEMENTDto ReadFORM_INSTANCE_ELEMENTs(string dtoKey);
		int FORM_INSTANCE_ELEMENTsCount();
		int FORM_INSTANCE_ELEMENTsCountFiltered(string filterExpression);
		string CreateFORM_INSTANCE_ELEMENT(FORM_INSTANCE_ELEMENTDto form_instance_element, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_ELEMENT(FORM_INSTANCE_ELEMENTDto form_instance_element, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_ELEMENTs(IEnumerable<FORM_INSTANCE_ELEMENTDto> form_instance_elements, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_ELEMENT(FORM_INSTANCE_ELEMENTDto form_instance_element, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_ELEMENTs(IEnumerable<FORM_INSTANCE_ELEMENTDto> form_instance_elements, bool doSaveChanges = true);


		#endregion FORM_INSTANCE_ELEMENT CRUD Operations


		#region EduFormStasticPermission CRUD Operations


		IEnumerable<EduFormStasticPermissionDto> ReadEduFormStasticPermissions();
		IEnumerable<EduFormStasticPermissionDto> ReadEduFormStasticPermissions(Expression<Func<EduFormStasticPermission, bool>> filter);
		IEnumerable<EduFormStasticPermissionDto> ReadEduFormStasticPermissions(ISpecification<EduFormStasticPermission> specification);
		IEnumerable<EduFormStasticPermissionDto> ReadEduFormStasticPermissionsPaged(int startIndex, int pageSize);
		IEnumerable<EduFormStasticPermissionDto> ReadEduFormStasticPermissionsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduFormStasticPermissionDto> ReadEduFormStasticPermissionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduFormStasticPermissionDto ReadEduFormStasticPermissions(string dtoKey);
		int EduFormStasticPermissionsCount();
		int EduFormStasticPermissionsCountFiltered(string filterExpression);
		string CreateEduFormStasticPermission(EduFormStasticPermissionDto eduformstasticpermission, bool doSaveChanges = true);
		void UpdateEduFormStasticPermission(EduFormStasticPermissionDto eduformstasticpermission, bool doSaveChanges = true);
		void UpdateEduFormStasticPermissions(IEnumerable<EduFormStasticPermissionDto> eduformstasticpermissions, bool doSaveChanges = true);
		void DeleteEduFormStasticPermission(EduFormStasticPermissionDto eduformstasticpermission, bool doSaveChanges = true);
		void DeleteEduFormStasticPermissions(IEnumerable<EduFormStasticPermissionDto> eduformstasticpermissions, bool doSaveChanges = true);


		#endregion EduFormStasticPermission CRUD Operations


		#region DepSecDatum CRUD Operations


		IEnumerable<DepSecDatumDto> ReadDepSecData();
		IEnumerable<DepSecDatumDto> ReadDepSecData(Expression<Func<DepSecDatum, bool>> filter);
		IEnumerable<DepSecDatumDto> ReadDepSecData(ISpecification<DepSecDatum> specification);
		IEnumerable<DepSecDatumDto> ReadDepSecDataPaged(int startIndex, int pageSize);
		IEnumerable<DepSecDatumDto> ReadDepSecDataFiltered(string sortExpression, string filterExpression);
		IEnumerable<DepSecDatumDto> ReadDepSecDataPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		DepSecDatumDto ReadDepSecData(string dtoKey);
		int DepSecDataCount();
		int DepSecDataCountFiltered(string filterExpression);
		string CreateDepSecDatum(DepSecDatumDto depsecdatum, bool doSaveChanges = true);
		void UpdateDepSecDatum(DepSecDatumDto depsecdatum, bool doSaveChanges = true);
		void UpdateDepSecData(IEnumerable<DepSecDatumDto> depsecdata, bool doSaveChanges = true);
		void DeleteDepSecDatum(DepSecDatumDto depsecdatum, bool doSaveChanges = true);
		void DeleteDepSecData(IEnumerable<DepSecDatumDto> depsecdata, bool doSaveChanges = true);


		#endregion DepSecDatum CRUD Operations


		#region TeachTimeType CRUD Operations


		IEnumerable<TeachTimeTypeDto> ReadTeachTimeTypes();
		IEnumerable<TeachTimeTypeDto> ReadTeachTimeTypes(Expression<Func<TeachTimeType, bool>> filter);
		IEnumerable<TeachTimeTypeDto> ReadTeachTimeTypes(ISpecification<TeachTimeType> specification);
		IEnumerable<TeachTimeTypeDto> ReadTeachTimeTypesPaged(int startIndex, int pageSize);
		IEnumerable<TeachTimeTypeDto> ReadTeachTimeTypesFiltered(string sortExpression, string filterExpression);
		IEnumerable<TeachTimeTypeDto> ReadTeachTimeTypesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		TeachTimeTypeDto ReadTeachTimeTypes(string dtoKey);
		int TeachTimeTypesCount();
		int TeachTimeTypesCountFiltered(string filterExpression);
		string CreateTeachTimeType(TeachTimeTypeDto teachtimetype, bool doSaveChanges = true);
		void UpdateTeachTimeType(TeachTimeTypeDto teachtimetype, bool doSaveChanges = true);
		void UpdateTeachTimeTypes(IEnumerable<TeachTimeTypeDto> teachtimetypes, bool doSaveChanges = true);
		void DeleteTeachTimeType(TeachTimeTypeDto teachtimetype, bool doSaveChanges = true);
		void DeleteTeachTimeTypes(IEnumerable<TeachTimeTypeDto> teachtimetypes, bool doSaveChanges = true);


		#endregion TeachTimeType CRUD Operations


		#region TeachTimeRate CRUD Operations


		IEnumerable<TeachTimeRateDto> ReadTeachTimeRates();
		IEnumerable<TeachTimeRateDto> ReadTeachTimeRates(Expression<Func<TeachTimeRate, bool>> filter);
		IEnumerable<TeachTimeRateDto> ReadTeachTimeRates(ISpecification<TeachTimeRate> specification);
		IEnumerable<TeachTimeRateDto> ReadTeachTimeRatesPaged(int startIndex, int pageSize);
		IEnumerable<TeachTimeRateDto> ReadTeachTimeRatesFiltered(string sortExpression, string filterExpression);
		IEnumerable<TeachTimeRateDto> ReadTeachTimeRatesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		TeachTimeRateDto ReadTeachTimeRates(string dtoKey);
		int TeachTimeRatesCount();
		int TeachTimeRatesCountFiltered(string filterExpression);
		string CreateTeachTimeRate(TeachTimeRateDto teachtimerate, bool doSaveChanges = true);
		void UpdateTeachTimeRate(TeachTimeRateDto teachtimerate, bool doSaveChanges = true);
		void UpdateTeachTimeRates(IEnumerable<TeachTimeRateDto> teachtimerates, bool doSaveChanges = true);
		void DeleteTeachTimeRate(TeachTimeRateDto teachtimerate, bool doSaveChanges = true);
		void DeleteTeachTimeRates(IEnumerable<TeachTimeRateDto> teachtimerates, bool doSaveChanges = true);


		#endregion TeachTimeRate CRUD Operations


		#region NewsViewTarget CRUD Operations


		IEnumerable<NewsViewTargetDto> ReadNewsViewTargets();
		IEnumerable<NewsViewTargetDto> ReadNewsViewTargets(Expression<Func<NewsViewTarget, bool>> filter);
		IEnumerable<NewsViewTargetDto> ReadNewsViewTargets(ISpecification<NewsViewTarget> specification);
		IEnumerable<NewsViewTargetDto> ReadNewsViewTargetsPaged(int startIndex, int pageSize);
		IEnumerable<NewsViewTargetDto> ReadNewsViewTargetsFiltered(string sortExpression, string filterExpression);
		IEnumerable<NewsViewTargetDto> ReadNewsViewTargetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		NewsViewTargetDto ReadNewsViewTargets(string dtoKey);
		int NewsViewTargetsCount();
		int NewsViewTargetsCountFiltered(string filterExpression);
		string CreateNewsViewTarget(NewsViewTargetDto newsviewtarget, bool doSaveChanges = true);
		void UpdateNewsViewTarget(NewsViewTargetDto newsviewtarget, bool doSaveChanges = true);
		void UpdateNewsViewTargets(IEnumerable<NewsViewTargetDto> newsviewtargets, bool doSaveChanges = true);
		void DeleteNewsViewTarget(NewsViewTargetDto newsviewtarget, bool doSaveChanges = true);
		void DeleteNewsViewTargets(IEnumerable<NewsViewTargetDto> newsviewtargets, bool doSaveChanges = true);


		#endregion NewsViewTarget CRUD Operations


		#region HealTeachTime CRUD Operations


		IEnumerable<HealTeachTimeDto> ReadHealTeachTimes();
		IEnumerable<HealTeachTimeDto> ReadHealTeachTimes(Expression<Func<HealTeachTime, bool>> filter);
		IEnumerable<HealTeachTimeDto> ReadHealTeachTimes(ISpecification<HealTeachTime> specification);
		IEnumerable<HealTeachTimeDto> ReadHealTeachTimesPaged(int startIndex, int pageSize);
		IEnumerable<HealTeachTimeDto> ReadHealTeachTimesFiltered(string sortExpression, string filterExpression);
		IEnumerable<HealTeachTimeDto> ReadHealTeachTimesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		HealTeachTimeDto ReadHealTeachTimes(string dtoKey);
		int HealTeachTimesCount();
		int HealTeachTimesCountFiltered(string filterExpression);
		string CreateHealTeachTime(HealTeachTimeDto healteachtime, bool doSaveChanges = true);
		void UpdateHealTeachTime(HealTeachTimeDto healteachtime, bool doSaveChanges = true);
		void UpdateHealTeachTimes(IEnumerable<HealTeachTimeDto> healteachtimes, bool doSaveChanges = true);
		void DeleteHealTeachTime(HealTeachTimeDto healteachtime, bool doSaveChanges = true);
		void DeleteHealTeachTimes(IEnumerable<HealTeachTimeDto> healteachtimes, bool doSaveChanges = true);


		#endregion HealTeachTime CRUD Operations


		#region ScoreSettingJob CRUD Operations


		IEnumerable<ScoreSettingJobDto> ReadScoreSettingJobs();
		IEnumerable<ScoreSettingJobDto> ReadScoreSettingJobs(Expression<Func<ScoreSettingJob, bool>> filter);
		IEnumerable<ScoreSettingJobDto> ReadScoreSettingJobs(ISpecification<ScoreSettingJob> specification);
		IEnumerable<ScoreSettingJobDto> ReadScoreSettingJobsPaged(int startIndex, int pageSize);
		IEnumerable<ScoreSettingJobDto> ReadScoreSettingJobsFiltered(string sortExpression, string filterExpression);
		IEnumerable<ScoreSettingJobDto> ReadScoreSettingJobsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		ScoreSettingJobDto ReadScoreSettingJobs(string dtoKey);
		int ScoreSettingJobsCount();
		int ScoreSettingJobsCountFiltered(string filterExpression);
		string CreateScoreSettingJob(ScoreSettingJobDto scoresettingjob, bool doSaveChanges = true);
		void UpdateScoreSettingJob(ScoreSettingJobDto scoresettingjob, bool doSaveChanges = true);
		void UpdateScoreSettingJobs(IEnumerable<ScoreSettingJobDto> scoresettingjobs, bool doSaveChanges = true);
		void DeleteScoreSettingJob(ScoreSettingJobDto scoresettingjob, bool doSaveChanges = true);
		void DeleteScoreSettingJobs(IEnumerable<ScoreSettingJobDto> scoresettingjobs, bool doSaveChanges = true);


		#endregion ScoreSettingJob CRUD Operations


		#region ScoreSettingDetail CRUD Operations


		IEnumerable<ScoreSettingDetailDto> ReadScoreSettingDetails();
		IEnumerable<ScoreSettingDetailDto> ReadScoreSettingDetails(Expression<Func<ScoreSettingDetail, bool>> filter);
		IEnumerable<ScoreSettingDetailDto> ReadScoreSettingDetails(ISpecification<ScoreSettingDetail> specification);
		IEnumerable<ScoreSettingDetailDto> ReadScoreSettingDetailsPaged(int startIndex, int pageSize);
		IEnumerable<ScoreSettingDetailDto> ReadScoreSettingDetailsFiltered(string sortExpression, string filterExpression);
		IEnumerable<ScoreSettingDetailDto> ReadScoreSettingDetailsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		ScoreSettingDetailDto ReadScoreSettingDetails(string dtoKey);
		int ScoreSettingDetailsCount();
		int ScoreSettingDetailsCountFiltered(string filterExpression);
		string CreateScoreSettingDetail(ScoreSettingDetailDto scoresettingdetail, bool doSaveChanges = true);
		void UpdateScoreSettingDetail(ScoreSettingDetailDto scoresettingdetail, bool doSaveChanges = true);
		void UpdateScoreSettingDetails(IEnumerable<ScoreSettingDetailDto> scoresettingdetails, bool doSaveChanges = true);
		void DeleteScoreSettingDetail(ScoreSettingDetailDto scoresettingdetail, bool doSaveChanges = true);
		void DeleteScoreSettingDetails(IEnumerable<ScoreSettingDetailDto> scoresettingdetails, bool doSaveChanges = true);


		#endregion ScoreSettingDetail CRUD Operations


		#region ScoreSetting CRUD Operations


		IEnumerable<ScoreSettingDto> ReadScoreSettings();
		IEnumerable<ScoreSettingDto> ReadScoreSettings(Expression<Func<ScoreSetting, bool>> filter);
		IEnumerable<ScoreSettingDto> ReadScoreSettings(ISpecification<ScoreSetting> specification);
		IEnumerable<ScoreSettingDto> ReadScoreSettingsPaged(int startIndex, int pageSize);
		IEnumerable<ScoreSettingDto> ReadScoreSettingsFiltered(string sortExpression, string filterExpression);
		IEnumerable<ScoreSettingDto> ReadScoreSettingsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		ScoreSettingDto ReadScoreSettings(string dtoKey);
		int ScoreSettingsCount();
		int ScoreSettingsCountFiltered(string filterExpression);
		string CreateScoreSetting(ScoreSettingDto scoresetting, bool doSaveChanges = true);
		void UpdateScoreSetting(ScoreSettingDto scoresetting, bool doSaveChanges = true);
		void UpdateScoreSettings(IEnumerable<ScoreSettingDto> scoresettings, bool doSaveChanges = true);
		void DeleteScoreSetting(ScoreSettingDto scoresetting, bool doSaveChanges = true);
		void DeleteScoreSettings(IEnumerable<ScoreSettingDto> scoresettings, bool doSaveChanges = true);


		#endregion ScoreSetting CRUD Operations


		#region ScoreInstanceDetail CRUD Operations


		IEnumerable<ScoreInstanceDetailDto> ReadScoreInstanceDetails();
		IEnumerable<ScoreInstanceDetailDto> ReadScoreInstanceDetails(Expression<Func<ScoreInstanceDetail, bool>> filter);
		IEnumerable<ScoreInstanceDetailDto> ReadScoreInstanceDetails(ISpecification<ScoreInstanceDetail> specification);
		IEnumerable<ScoreInstanceDetailDto> ReadScoreInstanceDetailsPaged(int startIndex, int pageSize);
		IEnumerable<ScoreInstanceDetailDto> ReadScoreInstanceDetailsFiltered(string sortExpression, string filterExpression);
		IEnumerable<ScoreInstanceDetailDto> ReadScoreInstanceDetailsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		ScoreInstanceDetailDto ReadScoreInstanceDetails(string dtoKey);
		int ScoreInstanceDetailsCount();
		int ScoreInstanceDetailsCountFiltered(string filterExpression);
		string CreateScoreInstanceDetail(ScoreInstanceDetailDto scoreinstancedetail, bool doSaveChanges = true);
		void UpdateScoreInstanceDetail(ScoreInstanceDetailDto scoreinstancedetail, bool doSaveChanges = true);
		void UpdateScoreInstanceDetails(IEnumerable<ScoreInstanceDetailDto> scoreinstancedetails, bool doSaveChanges = true);
		void DeleteScoreInstanceDetail(ScoreInstanceDetailDto scoreinstancedetail, bool doSaveChanges = true);
		void DeleteScoreInstanceDetails(IEnumerable<ScoreInstanceDetailDto> scoreinstancedetails, bool doSaveChanges = true);


		#endregion ScoreInstanceDetail CRUD Operations


		#region ScoreInstance CRUD Operations


		IEnumerable<ScoreInstanceDto> ReadScoreInstances();
		IEnumerable<ScoreInstanceDto> ReadScoreInstances(Expression<Func<ScoreInstance, bool>> filter);
		IEnumerable<ScoreInstanceDto> ReadScoreInstances(ISpecification<ScoreInstance> specification);
		IEnumerable<ScoreInstanceDto> ReadScoreInstancesPaged(int startIndex, int pageSize);
		IEnumerable<ScoreInstanceDto> ReadScoreInstancesFiltered(string sortExpression, string filterExpression);
		IEnumerable<ScoreInstanceDto> ReadScoreInstancesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		ScoreInstanceDto ReadScoreInstances(string dtoKey);
		int ScoreInstancesCount();
		int ScoreInstancesCountFiltered(string filterExpression);
		string CreateScoreInstance(ScoreInstanceDto scoreinstance, bool doSaveChanges = true);
		void UpdateScoreInstance(ScoreInstanceDto scoreinstance, bool doSaveChanges = true);
		void UpdateScoreInstances(IEnumerable<ScoreInstanceDto> scoreinstances, bool doSaveChanges = true);
		void DeleteScoreInstance(ScoreInstanceDto scoreinstance, bool doSaveChanges = true);
		void DeleteScoreInstances(IEnumerable<ScoreInstanceDto> scoreinstances, bool doSaveChanges = true);


		#endregion ScoreInstance CRUD Operations


		#region HealTeachTimeRate CRUD Operations


		IEnumerable<HealTeachTimeRateDto> ReadHealTeachTimeRates();
		IEnumerable<HealTeachTimeRateDto> ReadHealTeachTimeRates(Expression<Func<HealTeachTimeRate, bool>> filter);
		IEnumerable<HealTeachTimeRateDto> ReadHealTeachTimeRates(ISpecification<HealTeachTimeRate> specification);
		IEnumerable<HealTeachTimeRateDto> ReadHealTeachTimeRatesPaged(int startIndex, int pageSize);
		IEnumerable<HealTeachTimeRateDto> ReadHealTeachTimeRatesFiltered(string sortExpression, string filterExpression);
		IEnumerable<HealTeachTimeRateDto> ReadHealTeachTimeRatesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		HealTeachTimeRateDto ReadHealTeachTimeRates(string dtoKey);
		int HealTeachTimeRatesCount();
		int HealTeachTimeRatesCountFiltered(string filterExpression);
		string CreateHealTeachTimeRate(HealTeachTimeRateDto healteachtimerate, bool doSaveChanges = true);
		void UpdateHealTeachTimeRate(HealTeachTimeRateDto healteachtimerate, bool doSaveChanges = true);
		void UpdateHealTeachTimeRates(IEnumerable<HealTeachTimeRateDto> healteachtimerates, bool doSaveChanges = true);
		void DeleteHealTeachTimeRate(HealTeachTimeRateDto healteachtimerate, bool doSaveChanges = true);
		void DeleteHealTeachTimeRates(IEnumerable<HealTeachTimeRateDto> healteachtimerates, bool doSaveChanges = true);


		#endregion HealTeachTimeRate CRUD Operations


		#region EduActTypeRef CRUD Operations


		IEnumerable<EduActTypeRefDto> ReadEduActTypeRefs();
		IEnumerable<EduActTypeRefDto> ReadEduActTypeRefs(Expression<Func<EduActTypeRef, bool>> filter);
		IEnumerable<EduActTypeRefDto> ReadEduActTypeRefs(ISpecification<EduActTypeRef> specification);
		IEnumerable<EduActTypeRefDto> ReadEduActTypeRefsPaged(int startIndex, int pageSize);
		IEnumerable<EduActTypeRefDto> ReadEduActTypeRefsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduActTypeRefDto> ReadEduActTypeRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduActTypeRefDto ReadEduActTypeRefs(string dtoKey);
		int EduActTypeRefsCount();
		int EduActTypeRefsCountFiltered(string filterExpression);
		string CreateEduActTypeRef(EduActTypeRefDto eduacttyperef, bool doSaveChanges = true);
		void UpdateEduActTypeRef(EduActTypeRefDto eduacttyperef, bool doSaveChanges = true);
		void UpdateEduActTypeRefs(IEnumerable<EduActTypeRefDto> eduacttyperefs, bool doSaveChanges = true);
		void DeleteEduActTypeRef(EduActTypeRefDto eduacttyperef, bool doSaveChanges = true);
		void DeleteEduActTypeRefs(IEnumerable<EduActTypeRefDto> eduacttyperefs, bool doSaveChanges = true);


		#endregion EduActTypeRef CRUD Operations


		#region EduActBooking CRUD Operations


		IEnumerable<EduActBookingDto> ReadEduActBookings();
		IEnumerable<EduActBookingDto> ReadEduActBookings(Expression<Func<EduActBooking, bool>> filter);
		IEnumerable<EduActBookingDto> ReadEduActBookings(ISpecification<EduActBooking> specification);
		IEnumerable<EduActBookingDto> ReadEduActBookingsPaged(int startIndex, int pageSize);
		IEnumerable<EduActBookingDto> ReadEduActBookingsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduActBookingDto> ReadEduActBookingsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduActBookingDto ReadEduActBookings(string dtoKey);
		int EduActBookingsCount();
		int EduActBookingsCountFiltered(string filterExpression);
		string CreateEduActBooking(EduActBookingDto eduactbooking, bool doSaveChanges = true);
		void UpdateEduActBooking(EduActBookingDto eduactbooking, bool doSaveChanges = true);
		void UpdateEduActBookings(IEnumerable<EduActBookingDto> eduactbookings, bool doSaveChanges = true);
		void DeleteEduActBooking(EduActBookingDto eduactbooking, bool doSaveChanges = true);
		void DeleteEduActBookings(IEnumerable<EduActBookingDto> eduactbookings, bool doSaveChanges = true);


		#endregion EduActBooking CRUD Operations


		#region ElearningItem CRUD Operations


		IEnumerable<ElearningItemDto> ReadElearningItems();
		IEnumerable<ElearningItemDto> ReadElearningItems(Expression<Func<ElearningItem, bool>> filter);
		IEnumerable<ElearningItemDto> ReadElearningItems(ISpecification<ElearningItem> specification);
		IEnumerable<ElearningItemDto> ReadElearningItemsPaged(int startIndex, int pageSize);
		IEnumerable<ElearningItemDto> ReadElearningItemsFiltered(string sortExpression, string filterExpression);
		IEnumerable<ElearningItemDto> ReadElearningItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		ElearningItemDto ReadElearningItems(string dtoKey);
		int ElearningItemsCount();
		int ElearningItemsCountFiltered(string filterExpression);
		string CreateElearningItem(ElearningItemDto elearningitem, bool doSaveChanges = true);
		void UpdateElearningItem(ElearningItemDto elearningitem, bool doSaveChanges = true);
		void UpdateElearningItems(IEnumerable<ElearningItemDto> elearningitems, bool doSaveChanges = true);
		void DeleteElearningItem(ElearningItemDto elearningitem, bool doSaveChanges = true);
		void DeleteElearningItems(IEnumerable<ElearningItemDto> elearningitems, bool doSaveChanges = true);


		#endregion ElearningItem CRUD Operations


		#region ElearningEmpItemLog CRUD Operations


		IEnumerable<ElearningEmpItemLogDto> ReadElearningEmpItemLogs();
		IEnumerable<ElearningEmpItemLogDto> ReadElearningEmpItemLogs(Expression<Func<ElearningEmpItemLog, bool>> filter);
		IEnumerable<ElearningEmpItemLogDto> ReadElearningEmpItemLogs(ISpecification<ElearningEmpItemLog> specification);
		IEnumerable<ElearningEmpItemLogDto> ReadElearningEmpItemLogsPaged(int startIndex, int pageSize);
		IEnumerable<ElearningEmpItemLogDto> ReadElearningEmpItemLogsFiltered(string sortExpression, string filterExpression);
		IEnumerable<ElearningEmpItemLogDto> ReadElearningEmpItemLogsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		ElearningEmpItemLogDto ReadElearningEmpItemLogs(string dtoKey);
		int ElearningEmpItemLogsCount();
		int ElearningEmpItemLogsCountFiltered(string filterExpression);
		string CreateElearningEmpItemLog(ElearningEmpItemLogDto elearningempitemlog, bool doSaveChanges = true);
		void UpdateElearningEmpItemLog(ElearningEmpItemLogDto elearningempitemlog, bool doSaveChanges = true);
		void UpdateElearningEmpItemLogs(IEnumerable<ElearningEmpItemLogDto> elearningempitemlogs, bool doSaveChanges = true);
		void DeleteElearningEmpItemLog(ElearningEmpItemLogDto elearningempitemlog, bool doSaveChanges = true);
		void DeleteElearningEmpItemLogs(IEnumerable<ElearningEmpItemLogDto> elearningempitemlogs, bool doSaveChanges = true);


		#endregion ElearningEmpItemLog CRUD Operations


		#region ElearningEmpItem CRUD Operations


		IEnumerable<ElearningEmpItemDto> ReadElearningEmpItems();
		IEnumerable<ElearningEmpItemDto> ReadElearningEmpItems(Expression<Func<ElearningEmpItem, bool>> filter);
		IEnumerable<ElearningEmpItemDto> ReadElearningEmpItems(ISpecification<ElearningEmpItem> specification);
		IEnumerable<ElearningEmpItemDto> ReadElearningEmpItemsPaged(int startIndex, int pageSize);
		IEnumerable<ElearningEmpItemDto> ReadElearningEmpItemsFiltered(string sortExpression, string filterExpression);
		IEnumerable<ElearningEmpItemDto> ReadElearningEmpItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		ElearningEmpItemDto ReadElearningEmpItems(string dtoKey);
		int ElearningEmpItemsCount();
		int ElearningEmpItemsCountFiltered(string filterExpression);
		string CreateElearningEmpItem(ElearningEmpItemDto elearningempitem, bool doSaveChanges = true);
		void UpdateElearningEmpItem(ElearningEmpItemDto elearningempitem, bool doSaveChanges = true);
		void UpdateElearningEmpItems(IEnumerable<ElearningEmpItemDto> elearningempitems, bool doSaveChanges = true);
		void DeleteElearningEmpItem(ElearningEmpItemDto elearningempitem, bool doSaveChanges = true);
		void DeleteElearningEmpItems(IEnumerable<ElearningEmpItemDto> elearningempitems, bool doSaveChanges = true);


		#endregion ElearningEmpItem CRUD Operations


		#region ElearningClass CRUD Operations


		IEnumerable<ElearningClassDto> ReadElearningClasses();
		IEnumerable<ElearningClassDto> ReadElearningClasses(Expression<Func<ElearningClass, bool>> filter);
		IEnumerable<ElearningClassDto> ReadElearningClasses(ISpecification<ElearningClass> specification);
		IEnumerable<ElearningClassDto> ReadElearningClassesPaged(int startIndex, int pageSize);
		IEnumerable<ElearningClassDto> ReadElearningClassesFiltered(string sortExpression, string filterExpression);
		IEnumerable<ElearningClassDto> ReadElearningClassesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		ElearningClassDto ReadElearningClasses(string dtoKey);
		int ElearningClassesCount();
		int ElearningClassesCountFiltered(string filterExpression);
		string CreateElearningClass(ElearningClassDto elearningclass, bool doSaveChanges = true);
		void UpdateElearningClass(ElearningClassDto elearningclass, bool doSaveChanges = true);
		void UpdateElearningClasses(IEnumerable<ElearningClassDto> elearningclasses, bool doSaveChanges = true);
		void DeleteElearningClass(ElearningClassDto elearningclass, bool doSaveChanges = true);
		void DeleteElearningClasses(IEnumerable<ElearningClassDto> elearningclasses, bool doSaveChanges = true);


		#endregion ElearningClass CRUD Operations


		#region ElearningBooking CRUD Operations


		IEnumerable<ElearningBookingDto> ReadElearningBookings();
		IEnumerable<ElearningBookingDto> ReadElearningBookings(Expression<Func<ElearningBooking, bool>> filter);
		IEnumerable<ElearningBookingDto> ReadElearningBookings(ISpecification<ElearningBooking> specification);
		IEnumerable<ElearningBookingDto> ReadElearningBookingsPaged(int startIndex, int pageSize);
		IEnumerable<ElearningBookingDto> ReadElearningBookingsFiltered(string sortExpression, string filterExpression);
		IEnumerable<ElearningBookingDto> ReadElearningBookingsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		ElearningBookingDto ReadElearningBookings(string dtoKey);
		int ElearningBookingsCount();
		int ElearningBookingsCountFiltered(string filterExpression);
		string CreateElearningBooking(ElearningBookingDto elearningbooking, bool doSaveChanges = true);
		void UpdateElearningBooking(ElearningBookingDto elearningbooking, bool doSaveChanges = true);
		void UpdateElearningBookings(IEnumerable<ElearningBookingDto> elearningbookings, bool doSaveChanges = true);
		void DeleteElearningBooking(ElearningBookingDto elearningbooking, bool doSaveChanges = true);
		void DeleteElearningBookings(IEnumerable<ElearningBookingDto> elearningbookings, bool doSaveChanges = true);


		#endregion ElearningBooking CRUD Operations


		#region PassPortStudentApplicationItem CRUD Operations


		IEnumerable<PassPortStudentApplicationItemDto> ReadPassPortStudentApplicationItems();
		IEnumerable<PassPortStudentApplicationItemDto> ReadPassPortStudentApplicationItems(Expression<Func<PassPortStudentApplicationItem, bool>> filter);
		IEnumerable<PassPortStudentApplicationItemDto> ReadPassPortStudentApplicationItems(ISpecification<PassPortStudentApplicationItem> specification);
		IEnumerable<PassPortStudentApplicationItemDto> ReadPassPortStudentApplicationItemsPaged(int startIndex, int pageSize);
		IEnumerable<PassPortStudentApplicationItemDto> ReadPassPortStudentApplicationItemsFiltered(string sortExpression, string filterExpression);
		IEnumerable<PassPortStudentApplicationItemDto> ReadPassPortStudentApplicationItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		PassPortStudentApplicationItemDto ReadPassPortStudentApplicationItems(string dtoKey);
		int PassPortStudentApplicationItemsCount();
		int PassPortStudentApplicationItemsCountFiltered(string filterExpression);
		string CreatePassPortStudentApplicationItem(PassPortStudentApplicationItemDto passportstudentapplicationitem, bool doSaveChanges = true);
		void UpdatePassPortStudentApplicationItem(PassPortStudentApplicationItemDto passportstudentapplicationitem, bool doSaveChanges = true);
		void UpdatePassPortStudentApplicationItems(IEnumerable<PassPortStudentApplicationItemDto> passportstudentapplicationitems, bool doSaveChanges = true);
		void DeletePassPortStudentApplicationItem(PassPortStudentApplicationItemDto passportstudentapplicationitem, bool doSaveChanges = true);
		void DeletePassPortStudentApplicationItems(IEnumerable<PassPortStudentApplicationItemDto> passportstudentapplicationitems, bool doSaveChanges = true);


		#endregion PassPortStudentApplicationItem CRUD Operations


		#region PassPortJobTitleItem CRUD Operations


		IEnumerable<PassPortJobTitleItemDto> ReadPassPortJobTitleItems();
		IEnumerable<PassPortJobTitleItemDto> ReadPassPortJobTitleItems(Expression<Func<PassPortJobTitleItem, bool>> filter);
		IEnumerable<PassPortJobTitleItemDto> ReadPassPortJobTitleItems(ISpecification<PassPortJobTitleItem> specification);
		IEnumerable<PassPortJobTitleItemDto> ReadPassPortJobTitleItemsPaged(int startIndex, int pageSize);
		IEnumerable<PassPortJobTitleItemDto> ReadPassPortJobTitleItemsFiltered(string sortExpression, string filterExpression);
		IEnumerable<PassPortJobTitleItemDto> ReadPassPortJobTitleItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		PassPortJobTitleItemDto ReadPassPortJobTitleItems(string dtoKey);
		int PassPortJobTitleItemsCount();
		int PassPortJobTitleItemsCountFiltered(string filterExpression);
		string CreatePassPortJobTitleItem(PassPortJobTitleItemDto passportjobtitleitem, bool doSaveChanges = true);
		void UpdatePassPortJobTitleItem(PassPortJobTitleItemDto passportjobtitleitem, bool doSaveChanges = true);
		void UpdatePassPortJobTitleItems(IEnumerable<PassPortJobTitleItemDto> passportjobtitleitems, bool doSaveChanges = true);
		void DeletePassPortJobTitleItem(PassPortJobTitleItemDto passportjobtitleitem, bool doSaveChanges = true);
		void DeletePassPortJobTitleItems(IEnumerable<PassPortJobTitleItemDto> passportjobtitleitems, bool doSaveChanges = true);


		#endregion PassPortJobTitleItem CRUD Operations


		#region PassPortCheckItem CRUD Operations


		IEnumerable<PassPortCheckItemDto> ReadPassPortCheckItems();
		IEnumerable<PassPortCheckItemDto> ReadPassPortCheckItems(Expression<Func<PassPortCheckItem, bool>> filter);
		IEnumerable<PassPortCheckItemDto> ReadPassPortCheckItems(ISpecification<PassPortCheckItem> specification);
		IEnumerable<PassPortCheckItemDto> ReadPassPortCheckItemsPaged(int startIndex, int pageSize);
		IEnumerable<PassPortCheckItemDto> ReadPassPortCheckItemsFiltered(string sortExpression, string filterExpression);
		IEnumerable<PassPortCheckItemDto> ReadPassPortCheckItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		PassPortCheckItemDto ReadPassPortCheckItems(string dtoKey);
		int PassPortCheckItemsCount();
		int PassPortCheckItemsCountFiltered(string filterExpression);
		string CreatePassPortCheckItem(PassPortCheckItemDto passportcheckitem, bool doSaveChanges = true);
		void UpdatePassPortCheckItem(PassPortCheckItemDto passportcheckitem, bool doSaveChanges = true);
		void UpdatePassPortCheckItems(IEnumerable<PassPortCheckItemDto> passportcheckitems, bool doSaveChanges = true);
		void DeletePassPortCheckItem(PassPortCheckItemDto passportcheckitem, bool doSaveChanges = true);
		void DeletePassPortCheckItems(IEnumerable<PassPortCheckItemDto> passportcheckitems, bool doSaveChanges = true);


		#endregion PassPortCheckItem CRUD Operations


		#region PassPortSpecialList CRUD Operations


		IEnumerable<PassPortSpecialListDto> ReadPassPortSpecialLists();
		IEnumerable<PassPortSpecialListDto> ReadPassPortSpecialLists(Expression<Func<PassPortSpecialList, bool>> filter);
		IEnumerable<PassPortSpecialListDto> ReadPassPortSpecialLists(ISpecification<PassPortSpecialList> specification);
		IEnumerable<PassPortSpecialListDto> ReadPassPortSpecialListsPaged(int startIndex, int pageSize);
		IEnumerable<PassPortSpecialListDto> ReadPassPortSpecialListsFiltered(string sortExpression, string filterExpression);
		IEnumerable<PassPortSpecialListDto> ReadPassPortSpecialListsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		PassPortSpecialListDto ReadPassPortSpecialLists(string dtoKey);
		int PassPortSpecialListsCount();
		int PassPortSpecialListsCountFiltered(string filterExpression);
		string CreatePassPortSpecialList(PassPortSpecialListDto passportspeciallist, bool doSaveChanges = true);
		void UpdatePassPortSpecialList(PassPortSpecialListDto passportspeciallist, bool doSaveChanges = true);
		void UpdatePassPortSpecialLists(IEnumerable<PassPortSpecialListDto> passportspeciallists, bool doSaveChanges = true);
		void DeletePassPortSpecialList(PassPortSpecialListDto passportspeciallist, bool doSaveChanges = true);
		void DeletePassPortSpecialLists(IEnumerable<PassPortSpecialListDto> passportspeciallists, bool doSaveChanges = true);


		#endregion PassPortSpecialList CRUD Operations


		#region VoteTarget CRUD Operations


		IEnumerable<VoteTargetDto> ReadVoteTargets();
		IEnumerable<VoteTargetDto> ReadVoteTargets(Expression<Func<VoteTarget, bool>> filter);
		IEnumerable<VoteTargetDto> ReadVoteTargets(ISpecification<VoteTarget> specification);
		IEnumerable<VoteTargetDto> ReadVoteTargetsPaged(int startIndex, int pageSize);
		IEnumerable<VoteTargetDto> ReadVoteTargetsFiltered(string sortExpression, string filterExpression);
		IEnumerable<VoteTargetDto> ReadVoteTargetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		VoteTargetDto ReadVoteTargets(string dtoKey);
		int VoteTargetsCount();
		int VoteTargetsCountFiltered(string filterExpression);
		string CreateVoteTarget(VoteTargetDto votetarget, bool doSaveChanges = true);
		void UpdateVoteTarget(VoteTargetDto votetarget, bool doSaveChanges = true);
		void UpdateVoteTargets(IEnumerable<VoteTargetDto> votetargets, bool doSaveChanges = true);
		void DeleteVoteTarget(VoteTargetDto votetarget, bool doSaveChanges = true);
		void DeleteVoteTargets(IEnumerable<VoteTargetDto> votetargets, bool doSaveChanges = true);


		#endregion VoteTarget CRUD Operations


		#region VoteMain CRUD Operations


		IEnumerable<VoteMainDto> ReadVoteMains();
		IEnumerable<VoteMainDto> ReadVoteMains(Expression<Func<VoteMain, bool>> filter);
		IEnumerable<VoteMainDto> ReadVoteMains(ISpecification<VoteMain> specification);
		IEnumerable<VoteMainDto> ReadVoteMainsPaged(int startIndex, int pageSize);
		IEnumerable<VoteMainDto> ReadVoteMainsFiltered(string sortExpression, string filterExpression);
		IEnumerable<VoteMainDto> ReadVoteMainsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		VoteMainDto ReadVoteMains(string dtoKey);
		int VoteMainsCount();
		int VoteMainsCountFiltered(string filterExpression);
		string CreateVoteMain(VoteMainDto votemain, bool doSaveChanges = true);
		void UpdateVoteMain(VoteMainDto votemain, bool doSaveChanges = true);
		void UpdateVoteMains(IEnumerable<VoteMainDto> votemains, bool doSaveChanges = true);
		void DeleteVoteMain(VoteMainDto votemain, bool doSaveChanges = true);
		void DeleteVoteMains(IEnumerable<VoteMainDto> votemains, bool doSaveChanges = true);


		#endregion VoteMain CRUD Operations


		#region VoteJob CRUD Operations


		IEnumerable<VoteJobDto> ReadVoteJobs();
		IEnumerable<VoteJobDto> ReadVoteJobs(Expression<Func<VoteJob, bool>> filter);
		IEnumerable<VoteJobDto> ReadVoteJobs(ISpecification<VoteJob> specification);
		IEnumerable<VoteJobDto> ReadVoteJobsPaged(int startIndex, int pageSize);
		IEnumerable<VoteJobDto> ReadVoteJobsFiltered(string sortExpression, string filterExpression);
		IEnumerable<VoteJobDto> ReadVoteJobsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		VoteJobDto ReadVoteJobs(string dtoKey);
		int VoteJobsCount();
		int VoteJobsCountFiltered(string filterExpression);
		string CreateVoteJob(VoteJobDto votejob, bool doSaveChanges = true);
		void UpdateVoteJob(VoteJobDto votejob, bool doSaveChanges = true);
		void UpdateVoteJobs(IEnumerable<VoteJobDto> votejobs, bool doSaveChanges = true);
		void DeleteVoteJob(VoteJobDto votejob, bool doSaveChanges = true);
		void DeleteVoteJobs(IEnumerable<VoteJobDto> votejobs, bool doSaveChanges = true);


		#endregion VoteJob CRUD Operations


		#region VoteInstance CRUD Operations


		IEnumerable<VoteInstanceDto> ReadVoteInstances();
		IEnumerable<VoteInstanceDto> ReadVoteInstances(Expression<Func<VoteInstance, bool>> filter);
		IEnumerable<VoteInstanceDto> ReadVoteInstances(ISpecification<VoteInstance> specification);
		IEnumerable<VoteInstanceDto> ReadVoteInstancesPaged(int startIndex, int pageSize);
		IEnumerable<VoteInstanceDto> ReadVoteInstancesFiltered(string sortExpression, string filterExpression);
		IEnumerable<VoteInstanceDto> ReadVoteInstancesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		VoteInstanceDto ReadVoteInstances(string dtoKey);
		int VoteInstancesCount();
		int VoteInstancesCountFiltered(string filterExpression);
		string CreateVoteInstance(VoteInstanceDto voteinstance, bool doSaveChanges = true);
		void UpdateVoteInstance(VoteInstanceDto voteinstance, bool doSaveChanges = true);
		void UpdateVoteInstances(IEnumerable<VoteInstanceDto> voteinstances, bool doSaveChanges = true);
		void DeleteVoteInstance(VoteInstanceDto voteinstance, bool doSaveChanges = true);
		void DeleteVoteInstances(IEnumerable<VoteInstanceDto> voteinstances, bool doSaveChanges = true);


		#endregion VoteInstance CRUD Operations


		#region VoteInsDet CRUD Operations


		IEnumerable<VoteInsDetDto> ReadVoteInsDets();
		IEnumerable<VoteInsDetDto> ReadVoteInsDets(Expression<Func<VoteInsDet, bool>> filter);
		IEnumerable<VoteInsDetDto> ReadVoteInsDets(ISpecification<VoteInsDet> specification);
		IEnumerable<VoteInsDetDto> ReadVoteInsDetsPaged(int startIndex, int pageSize);
		IEnumerable<VoteInsDetDto> ReadVoteInsDetsFiltered(string sortExpression, string filterExpression);
		IEnumerable<VoteInsDetDto> ReadVoteInsDetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		VoteInsDetDto ReadVoteInsDets(string dtoKey);
		int VoteInsDetsCount();
		int VoteInsDetsCountFiltered(string filterExpression);
		string CreateVoteInsDet(VoteInsDetDto voteinsdet, bool doSaveChanges = true);
		void UpdateVoteInsDet(VoteInsDetDto voteinsdet, bool doSaveChanges = true);
		void UpdateVoteInsDets(IEnumerable<VoteInsDetDto> voteinsdets, bool doSaveChanges = true);
		void DeleteVoteInsDet(VoteInsDetDto voteinsdet, bool doSaveChanges = true);
		void DeleteVoteInsDets(IEnumerable<VoteInsDetDto> voteinsdets, bool doSaveChanges = true);


		#endregion VoteInsDet CRUD Operations


		#region VoteGroup CRUD Operations


		IEnumerable<VoteGroupDto> ReadVoteGroups();
		IEnumerable<VoteGroupDto> ReadVoteGroups(Expression<Func<VoteGroup, bool>> filter);
		IEnumerable<VoteGroupDto> ReadVoteGroups(ISpecification<VoteGroup> specification);
		IEnumerable<VoteGroupDto> ReadVoteGroupsPaged(int startIndex, int pageSize);
		IEnumerable<VoteGroupDto> ReadVoteGroupsFiltered(string sortExpression, string filterExpression);
		IEnumerable<VoteGroupDto> ReadVoteGroupsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		VoteGroupDto ReadVoteGroups(string dtoKey);
		int VoteGroupsCount();
		int VoteGroupsCountFiltered(string filterExpression);
		string CreateVoteGroup(VoteGroupDto votegroup, bool doSaveChanges = true);
		void UpdateVoteGroup(VoteGroupDto votegroup, bool doSaveChanges = true);
		void UpdateVoteGroups(IEnumerable<VoteGroupDto> votegroups, bool doSaveChanges = true);
		void DeleteVoteGroup(VoteGroupDto votegroup, bool doSaveChanges = true);
		void DeleteVoteGroups(IEnumerable<VoteGroupDto> votegroups, bool doSaveChanges = true);


		#endregion VoteGroup CRUD Operations


		#region VoteGCond CRUD Operations


		IEnumerable<VoteGCondDto> ReadVoteGConds();
		IEnumerable<VoteGCondDto> ReadVoteGConds(Expression<Func<VoteGCond, bool>> filter);
		IEnumerable<VoteGCondDto> ReadVoteGConds(ISpecification<VoteGCond> specification);
		IEnumerable<VoteGCondDto> ReadVoteGCondsPaged(int startIndex, int pageSize);
		IEnumerable<VoteGCondDto> ReadVoteGCondsFiltered(string sortExpression, string filterExpression);
		IEnumerable<VoteGCondDto> ReadVoteGCondsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		VoteGCondDto ReadVoteGConds(string dtoKey);
		int VoteGCondsCount();
		int VoteGCondsCountFiltered(string filterExpression);
		string CreateVoteGCond(VoteGCondDto votegcond, bool doSaveChanges = true);
		void UpdateVoteGCond(VoteGCondDto votegcond, bool doSaveChanges = true);
		void UpdateVoteGConds(IEnumerable<VoteGCondDto> votegconds, bool doSaveChanges = true);
		void DeleteVoteGCond(VoteGCondDto votegcond, bool doSaveChanges = true);
		void DeleteVoteGConds(IEnumerable<VoteGCondDto> votegconds, bool doSaveChanges = true);


		#endregion VoteGCond CRUD Operations


		#region VoteUserDefineList CRUD Operations


		IEnumerable<VoteUserDefineListDto> ReadVoteUserDefineLists();
		IEnumerable<VoteUserDefineListDto> ReadVoteUserDefineLists(Expression<Func<VoteUserDefineList, bool>> filter);
		IEnumerable<VoteUserDefineListDto> ReadVoteUserDefineLists(ISpecification<VoteUserDefineList> specification);
		IEnumerable<VoteUserDefineListDto> ReadVoteUserDefineListsPaged(int startIndex, int pageSize);
		IEnumerable<VoteUserDefineListDto> ReadVoteUserDefineListsFiltered(string sortExpression, string filterExpression);
		IEnumerable<VoteUserDefineListDto> ReadVoteUserDefineListsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		VoteUserDefineListDto ReadVoteUserDefineLists(string dtoKey);
		int VoteUserDefineListsCount();
		int VoteUserDefineListsCountFiltered(string filterExpression);
		string CreateVoteUserDefineList(VoteUserDefineListDto voteuserdefinelist, bool doSaveChanges = true);
		void UpdateVoteUserDefineList(VoteUserDefineListDto voteuserdefinelist, bool doSaveChanges = true);
		void UpdateVoteUserDefineLists(IEnumerable<VoteUserDefineListDto> voteuserdefinelists, bool doSaveChanges = true);
		void DeleteVoteUserDefineList(VoteUserDefineListDto voteuserdefinelist, bool doSaveChanges = true);
		void DeleteVoteUserDefineLists(IEnumerable<VoteUserDefineListDto> voteuserdefinelists, bool doSaveChanges = true);


		#endregion VoteUserDefineList CRUD Operations


		#region PassPortStudentApplicationItemFailLog CRUD Operations


		IEnumerable<PassPortStudentApplicationItemFailLogDto> ReadPassPortStudentApplicationItemFailLogs();
		IEnumerable<PassPortStudentApplicationItemFailLogDto> ReadPassPortStudentApplicationItemFailLogs(Expression<Func<PassPortStudentApplicationItemFailLog, bool>> filter);
		IEnumerable<PassPortStudentApplicationItemFailLogDto> ReadPassPortStudentApplicationItemFailLogs(ISpecification<PassPortStudentApplicationItemFailLog> specification);
		IEnumerable<PassPortStudentApplicationItemFailLogDto> ReadPassPortStudentApplicationItemFailLogsPaged(int startIndex, int pageSize);
		IEnumerable<PassPortStudentApplicationItemFailLogDto> ReadPassPortStudentApplicationItemFailLogsFiltered(string sortExpression, string filterExpression);
		IEnumerable<PassPortStudentApplicationItemFailLogDto> ReadPassPortStudentApplicationItemFailLogsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		PassPortStudentApplicationItemFailLogDto ReadPassPortStudentApplicationItemFailLogs(string dtoKey);
		int PassPortStudentApplicationItemFailLogsCount();
		int PassPortStudentApplicationItemFailLogsCountFiltered(string filterExpression);
		string CreatePassPortStudentApplicationItemFailLog(PassPortStudentApplicationItemFailLogDto passportstudentapplicationitemfaillog, bool doSaveChanges = true);
		void UpdatePassPortStudentApplicationItemFailLog(PassPortStudentApplicationItemFailLogDto passportstudentapplicationitemfaillog, bool doSaveChanges = true);
		void UpdatePassPortStudentApplicationItemFailLogs(IEnumerable<PassPortStudentApplicationItemFailLogDto> passportstudentapplicationitemfaillogs, bool doSaveChanges = true);
		void DeletePassPortStudentApplicationItemFailLog(PassPortStudentApplicationItemFailLogDto passportstudentapplicationitemfaillog, bool doSaveChanges = true);
		void DeletePassPortStudentApplicationItemFailLogs(IEnumerable<PassPortStudentApplicationItemFailLogDto> passportstudentapplicationitemfaillogs, bool doSaveChanges = true);


		#endregion PassPortStudentApplicationItemFailLog CRUD Operations


		#region PassPortJobFinalMan CRUD Operations


		IEnumerable<PassPortJobFinalManDto> ReadPassPortJobFinalMen();
		IEnumerable<PassPortJobFinalManDto> ReadPassPortJobFinalMen(Expression<Func<PassPortJobFinalMan, bool>> filter);
		IEnumerable<PassPortJobFinalManDto> ReadPassPortJobFinalMen(ISpecification<PassPortJobFinalMan> specification);
		IEnumerable<PassPortJobFinalManDto> ReadPassPortJobFinalMenPaged(int startIndex, int pageSize);
		IEnumerable<PassPortJobFinalManDto> ReadPassPortJobFinalMenFiltered(string sortExpression, string filterExpression);
		IEnumerable<PassPortJobFinalManDto> ReadPassPortJobFinalMenPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		PassPortJobFinalManDto ReadPassPortJobFinalMen(string dtoKey);
		int PassPortJobFinalMenCount();
		int PassPortJobFinalMenCountFiltered(string filterExpression);
		string CreatePassPortJobFinalMan(PassPortJobFinalManDto passportjobfinalman, bool doSaveChanges = true);
		void UpdatePassPortJobFinalMan(PassPortJobFinalManDto passportjobfinalman, bool doSaveChanges = true);
		void UpdatePassPortJobFinalMen(IEnumerable<PassPortJobFinalManDto> passportjobfinalmen, bool doSaveChanges = true);
		void DeletePassPortJobFinalMan(PassPortJobFinalManDto passportjobfinalman, bool doSaveChanges = true);
		void DeletePassPortJobFinalMen(IEnumerable<PassPortJobFinalManDto> passportjobfinalmen, bool doSaveChanges = true);


		#endregion PassPortJobFinalMan CRUD Operations


		#region PassPortDocGrade CRUD Operations


		IEnumerable<PassPortDocGradeDto> ReadPassPortDocGrades();
		IEnumerable<PassPortDocGradeDto> ReadPassPortDocGrades(Expression<Func<PassPortDocGrade, bool>> filter);
		IEnumerable<PassPortDocGradeDto> ReadPassPortDocGrades(ISpecification<PassPortDocGrade> specification);
		IEnumerable<PassPortDocGradeDto> ReadPassPortDocGradesPaged(int startIndex, int pageSize);
		IEnumerable<PassPortDocGradeDto> ReadPassPortDocGradesFiltered(string sortExpression, string filterExpression);
		IEnumerable<PassPortDocGradeDto> ReadPassPortDocGradesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		PassPortDocGradeDto ReadPassPortDocGrades(string dtoKey);
		int PassPortDocGradesCount();
		int PassPortDocGradesCountFiltered(string filterExpression);
		string CreatePassPortDocGrade(PassPortDocGradeDto passportdocgrade, bool doSaveChanges = true);
		void UpdatePassPortDocGrade(PassPortDocGradeDto passportdocgrade, bool doSaveChanges = true);
		void UpdatePassPortDocGrades(IEnumerable<PassPortDocGradeDto> passportdocgrades, bool doSaveChanges = true);
		void DeletePassPortDocGrade(PassPortDocGradeDto passportdocgrade, bool doSaveChanges = true);
		void DeletePassPortDocGrades(IEnumerable<PassPortDocGradeDto> passportdocgrades, bool doSaveChanges = true);


		#endregion PassPortDocGrade CRUD Operations


		#region EduPassportTemplateTarget CRUD Operations


		IEnumerable<EduPassportTemplateTargetDto> ReadEduPassportTemplateTargets();
		IEnumerable<EduPassportTemplateTargetDto> ReadEduPassportTemplateTargets(Expression<Func<EduPassportTemplateTarget, bool>> filter);
		IEnumerable<EduPassportTemplateTargetDto> ReadEduPassportTemplateTargets(ISpecification<EduPassportTemplateTarget> specification);
		IEnumerable<EduPassportTemplateTargetDto> ReadEduPassportTemplateTargetsPaged(int startIndex, int pageSize);
		IEnumerable<EduPassportTemplateTargetDto> ReadEduPassportTemplateTargetsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduPassportTemplateTargetDto> ReadEduPassportTemplateTargetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduPassportTemplateTargetDto ReadEduPassportTemplateTargets(string dtoKey);
		int EduPassportTemplateTargetsCount();
		int EduPassportTemplateTargetsCountFiltered(string filterExpression);
		string CreateEduPassportTemplateTarget(EduPassportTemplateTargetDto edupassporttemplatetarget, bool doSaveChanges = true);
		void UpdateEduPassportTemplateTarget(EduPassportTemplateTargetDto edupassporttemplatetarget, bool doSaveChanges = true);
		void UpdateEduPassportTemplateTargets(IEnumerable<EduPassportTemplateTargetDto> edupassporttemplatetargets, bool doSaveChanges = true);
		void DeleteEduPassportTemplateTarget(EduPassportTemplateTargetDto edupassporttemplatetarget, bool doSaveChanges = true);
		void DeleteEduPassportTemplateTargets(IEnumerable<EduPassportTemplateTargetDto> edupassporttemplatetargets, bool doSaveChanges = true);


		#endregion EduPassportTemplateTarget CRUD Operations


		#region EduPassportTemplateItem CRUD Operations


		IEnumerable<EduPassportTemplateItemDto> ReadEduPassportTemplateItems();
		IEnumerable<EduPassportTemplateItemDto> ReadEduPassportTemplateItems(Expression<Func<EduPassportTemplateItem, bool>> filter);
		IEnumerable<EduPassportTemplateItemDto> ReadEduPassportTemplateItems(ISpecification<EduPassportTemplateItem> specification);
		IEnumerable<EduPassportTemplateItemDto> ReadEduPassportTemplateItemsPaged(int startIndex, int pageSize);
		IEnumerable<EduPassportTemplateItemDto> ReadEduPassportTemplateItemsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduPassportTemplateItemDto> ReadEduPassportTemplateItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduPassportTemplateItemDto ReadEduPassportTemplateItems(string dtoKey);
		int EduPassportTemplateItemsCount();
		int EduPassportTemplateItemsCountFiltered(string filterExpression);
		string CreateEduPassportTemplateItem(EduPassportTemplateItemDto edupassporttemplateitem, bool doSaveChanges = true);
		void UpdateEduPassportTemplateItem(EduPassportTemplateItemDto edupassporttemplateitem, bool doSaveChanges = true);
		void UpdateEduPassportTemplateItems(IEnumerable<EduPassportTemplateItemDto> edupassporttemplateitems, bool doSaveChanges = true);
		void DeleteEduPassportTemplateItem(EduPassportTemplateItemDto edupassporttemplateitem, bool doSaveChanges = true);
		void DeleteEduPassportTemplateItems(IEnumerable<EduPassportTemplateItemDto> edupassporttemplateitems, bool doSaveChanges = true);


		#endregion EduPassportTemplateItem CRUD Operations


		#region EduPassportTemplate CRUD Operations


		IEnumerable<EduPassportTemplateDto> ReadEduPassportTemplates();
		IEnumerable<EduPassportTemplateDto> ReadEduPassportTemplates(Expression<Func<EduPassportTemplate, bool>> filter);
		IEnumerable<EduPassportTemplateDto> ReadEduPassportTemplates(ISpecification<EduPassportTemplate> specification);
		IEnumerable<EduPassportTemplateDto> ReadEduPassportTemplatesPaged(int startIndex, int pageSize);
		IEnumerable<EduPassportTemplateDto> ReadEduPassportTemplatesFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduPassportTemplateDto> ReadEduPassportTemplatesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduPassportTemplateDto ReadEduPassportTemplates(string dtoKey);
		int EduPassportTemplatesCount();
		int EduPassportTemplatesCountFiltered(string filterExpression);
		string CreateEduPassportTemplate(EduPassportTemplateDto edupassporttemplate, bool doSaveChanges = true);
		void UpdateEduPassportTemplate(EduPassportTemplateDto edupassporttemplate, bool doSaveChanges = true);
		void UpdateEduPassportTemplates(IEnumerable<EduPassportTemplateDto> edupassporttemplates, bool doSaveChanges = true);
		void DeleteEduPassportTemplate(EduPassportTemplateDto edupassporttemplate, bool doSaveChanges = true);
		void DeleteEduPassportTemplates(IEnumerable<EduPassportTemplateDto> edupassporttemplates, bool doSaveChanges = true);


		#endregion EduPassportTemplate CRUD Operations


		#region EduPassportItemDet CRUD Operations


		IEnumerable<EduPassportItemDetDto> ReadEduPassportItemDets();
		IEnumerable<EduPassportItemDetDto> ReadEduPassportItemDets(Expression<Func<EduPassportItemDet, bool>> filter);
		IEnumerable<EduPassportItemDetDto> ReadEduPassportItemDets(ISpecification<EduPassportItemDet> specification);
		IEnumerable<EduPassportItemDetDto> ReadEduPassportItemDetsPaged(int startIndex, int pageSize);
		IEnumerable<EduPassportItemDetDto> ReadEduPassportItemDetsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduPassportItemDetDto> ReadEduPassportItemDetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduPassportItemDetDto ReadEduPassportItemDets(string dtoKey);
		int EduPassportItemDetsCount();
		int EduPassportItemDetsCountFiltered(string filterExpression);
		string CreateEduPassportItemDet(EduPassportItemDetDto edupassportitemdet, bool doSaveChanges = true);
		void UpdateEduPassportItemDet(EduPassportItemDetDto edupassportitemdet, bool doSaveChanges = true);
		void UpdateEduPassportItemDets(IEnumerable<EduPassportItemDetDto> edupassportitemdets, bool doSaveChanges = true);
		void DeleteEduPassportItemDet(EduPassportItemDetDto edupassportitemdet, bool doSaveChanges = true);
		void DeleteEduPassportItemDets(IEnumerable<EduPassportItemDetDto> edupassportitemdets, bool doSaveChanges = true);


		#endregion EduPassportItemDet CRUD Operations


		#region EduPassportItemTarget CRUD Operations


		IEnumerable<EduPassportItemTargetDto> ReadEduPassportItemTargets();
		IEnumerable<EduPassportItemTargetDto> ReadEduPassportItemTargets(Expression<Func<EduPassportItemTarget, bool>> filter);
		IEnumerable<EduPassportItemTargetDto> ReadEduPassportItemTargets(ISpecification<EduPassportItemTarget> specification);
		IEnumerable<EduPassportItemTargetDto> ReadEduPassportItemTargetsPaged(int startIndex, int pageSize);
		IEnumerable<EduPassportItemTargetDto> ReadEduPassportItemTargetsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduPassportItemTargetDto> ReadEduPassportItemTargetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduPassportItemTargetDto ReadEduPassportItemTargets(string dtoKey);
		int EduPassportItemTargetsCount();
		int EduPassportItemTargetsCountFiltered(string filterExpression);
		string CreateEduPassportItemTarget(EduPassportItemTargetDto edupassportitemtarget, bool doSaveChanges = true);
		void UpdateEduPassportItemTarget(EduPassportItemTargetDto edupassportitemtarget, bool doSaveChanges = true);
		void UpdateEduPassportItemTargets(IEnumerable<EduPassportItemTargetDto> edupassportitemtargets, bool doSaveChanges = true);
		void DeleteEduPassportItemTarget(EduPassportItemTargetDto edupassportitemtarget, bool doSaveChanges = true);
		void DeleteEduPassportItemTargets(IEnumerable<EduPassportItemTargetDto> edupassportitemtargets, bool doSaveChanges = true);


		#endregion EduPassportItemTarget CRUD Operations


		#region EduPassportItem CRUD Operations


		IEnumerable<EduPassportItemDto> ReadEduPassportItems();
		IEnumerable<EduPassportItemDto> ReadEduPassportItems(Expression<Func<EduPassportItem, bool>> filter);
		IEnumerable<EduPassportItemDto> ReadEduPassportItems(ISpecification<EduPassportItem> specification);
		IEnumerable<EduPassportItemDto> ReadEduPassportItemsPaged(int startIndex, int pageSize);
		IEnumerable<EduPassportItemDto> ReadEduPassportItemsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduPassportItemDto> ReadEduPassportItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduPassportItemDto ReadEduPassportItems(string dtoKey);
		int EduPassportItemsCount();
		int EduPassportItemsCountFiltered(string filterExpression);
		string CreateEduPassportItem(EduPassportItemDto edupassportitem, bool doSaveChanges = true);
		void UpdateEduPassportItem(EduPassportItemDto edupassportitem, bool doSaveChanges = true);
		void UpdateEduPassportItems(IEnumerable<EduPassportItemDto> edupassportitems, bool doSaveChanges = true);
		void DeleteEduPassportItem(EduPassportItemDto edupassportitem, bool doSaveChanges = true);
		void DeleteEduPassportItems(IEnumerable<EduPassportItemDto> edupassportitems, bool doSaveChanges = true);


		#endregion EduPassportItem CRUD Operations


		#region EduPassportInstance CRUD Operations


		IEnumerable<EduPassportInstanceDto> ReadEduPassportInstances();
		IEnumerable<EduPassportInstanceDto> ReadEduPassportInstances(Expression<Func<EduPassportInstance, bool>> filter);
		IEnumerable<EduPassportInstanceDto> ReadEduPassportInstances(ISpecification<EduPassportInstance> specification);
		IEnumerable<EduPassportInstanceDto> ReadEduPassportInstancesPaged(int startIndex, int pageSize);
		IEnumerable<EduPassportInstanceDto> ReadEduPassportInstancesFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduPassportInstanceDto> ReadEduPassportInstancesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduPassportInstanceDto ReadEduPassportInstances(string dtoKey);
		int EduPassportInstancesCount();
		int EduPassportInstancesCountFiltered(string filterExpression);
		string CreateEduPassportInstance(EduPassportInstanceDto edupassportinstance, bool doSaveChanges = true);
		void UpdateEduPassportInstance(EduPassportInstanceDto edupassportinstance, bool doSaveChanges = true);
		void UpdateEduPassportInstances(IEnumerable<EduPassportInstanceDto> edupassportinstances, bool doSaveChanges = true);
		void DeleteEduPassportInstance(EduPassportInstanceDto edupassportinstance, bool doSaveChanges = true);
		void DeleteEduPassportInstances(IEnumerable<EduPassportInstanceDto> edupassportinstances, bool doSaveChanges = true);


		#endregion EduPassportInstance CRUD Operations


		#region EduPassportInsItemDet CRUD Operations


		IEnumerable<EduPassportInsItemDetDto> ReadEduPassportInsItemDets();
		IEnumerable<EduPassportInsItemDetDto> ReadEduPassportInsItemDets(Expression<Func<EduPassportInsItemDet, bool>> filter);
		IEnumerable<EduPassportInsItemDetDto> ReadEduPassportInsItemDets(ISpecification<EduPassportInsItemDet> specification);
		IEnumerable<EduPassportInsItemDetDto> ReadEduPassportInsItemDetsPaged(int startIndex, int pageSize);
		IEnumerable<EduPassportInsItemDetDto> ReadEduPassportInsItemDetsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduPassportInsItemDetDto> ReadEduPassportInsItemDetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduPassportInsItemDetDto ReadEduPassportInsItemDets(string dtoKey);
		int EduPassportInsItemDetsCount();
		int EduPassportInsItemDetsCountFiltered(string filterExpression);
		string CreateEduPassportInsItemDet(EduPassportInsItemDetDto edupassportinsitemdet, bool doSaveChanges = true);
		void UpdateEduPassportInsItemDet(EduPassportInsItemDetDto edupassportinsitemdet, bool doSaveChanges = true);
		void UpdateEduPassportInsItemDets(IEnumerable<EduPassportInsItemDetDto> edupassportinsitemdets, bool doSaveChanges = true);
		void DeleteEduPassportInsItemDet(EduPassportInsItemDetDto edupassportinsitemdet, bool doSaveChanges = true);
		void DeleteEduPassportInsItemDets(IEnumerable<EduPassportInsItemDetDto> edupassportinsitemdets, bool doSaveChanges = true);


		#endregion EduPassportInsItemDet CRUD Operations


		#region EduPassportInsItem CRUD Operations


		IEnumerable<EduPassportInsItemDto> ReadEduPassportInsItems();
		IEnumerable<EduPassportInsItemDto> ReadEduPassportInsItems(Expression<Func<EduPassportInsItem, bool>> filter);
		IEnumerable<EduPassportInsItemDto> ReadEduPassportInsItems(ISpecification<EduPassportInsItem> specification);
		IEnumerable<EduPassportInsItemDto> ReadEduPassportInsItemsPaged(int startIndex, int pageSize);
		IEnumerable<EduPassportInsItemDto> ReadEduPassportInsItemsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduPassportInsItemDto> ReadEduPassportInsItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduPassportInsItemDto ReadEduPassportInsItems(string dtoKey);
		int EduPassportInsItemsCount();
		int EduPassportInsItemsCountFiltered(string filterExpression);
		string CreateEduPassportInsItem(EduPassportInsItemDto edupassportinsitem, bool doSaveChanges = true);
		void UpdateEduPassportInsItem(EduPassportInsItemDto edupassportinsitem, bool doSaveChanges = true);
		void UpdateEduPassportInsItems(IEnumerable<EduPassportInsItemDto> edupassportinsitems, bool doSaveChanges = true);
		void DeleteEduPassportInsItem(EduPassportInsItemDto edupassportinsitem, bool doSaveChanges = true);
		void DeleteEduPassportInsItems(IEnumerable<EduPassportInsItemDto> edupassportinsitems, bool doSaveChanges = true);


		#endregion EduPassportInsItem CRUD Operations


		#region FORM_INSTANCE_TRANSLOG CRUD Operations


		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs();
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs(Expression<Func<FORM_INSTANCE_TRANSLOG, bool>> filter);
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs(ISpecification<FORM_INSTANCE_TRANSLOG> specification);
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		FORM_INSTANCE_TRANSLOGDto ReadFORM_INSTANCE_TRANSLOGs(string dtoKey);
		int FORM_INSTANCE_TRANSLOGsCount();
		int FORM_INSTANCE_TRANSLOGsCountFiltered(string filterExpression);
		string CreateFORM_INSTANCE_TRANSLOG(FORM_INSTANCE_TRANSLOGDto form_instance_translog, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_TRANSLOG(FORM_INSTANCE_TRANSLOGDto form_instance_translog, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_TRANSLOGs(IEnumerable<FORM_INSTANCE_TRANSLOGDto> form_instance_translogs, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_TRANSLOG(FORM_INSTANCE_TRANSLOGDto form_instance_translog, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_TRANSLOGs(IEnumerable<FORM_INSTANCE_TRANSLOGDto> form_instance_translogs, bool doSaveChanges = true);


		#endregion FORM_INSTANCE_TRANSLOG CRUD Operations


		#region EduPassportPRef CRUD Operations


		IEnumerable<EduPassportPRefDto> ReadEduPassportPRefs();
		IEnumerable<EduPassportPRefDto> ReadEduPassportPRefs(Expression<Func<EduPassportPRef, bool>> filter);
		IEnumerable<EduPassportPRefDto> ReadEduPassportPRefs(ISpecification<EduPassportPRef> specification);
		IEnumerable<EduPassportPRefDto> ReadEduPassportPRefsPaged(int startIndex, int pageSize);
		IEnumerable<EduPassportPRefDto> ReadEduPassportPRefsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduPassportPRefDto> ReadEduPassportPRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduPassportPRefDto ReadEduPassportPRefs(string dtoKey);
		int EduPassportPRefsCount();
		int EduPassportPRefsCountFiltered(string filterExpression);
		string CreateEduPassportPRef(EduPassportPRefDto edupassportpref, bool doSaveChanges = true);
		void UpdateEduPassportPRef(EduPassportPRefDto edupassportpref, bool doSaveChanges = true);
		void UpdateEduPassportPRefs(IEnumerable<EduPassportPRefDto> edupassportprefs, bool doSaveChanges = true);
		void DeleteEduPassportPRef(EduPassportPRefDto edupassportpref, bool doSaveChanges = true);
		void DeleteEduPassportPRefs(IEnumerable<EduPassportPRefDto> edupassportprefs, bool doSaveChanges = true);


		#endregion EduPassportPRef CRUD Operations


		#region EduPassportInsItemRejectHi CRUD Operations


		IEnumerable<EduPassportInsItemRejectHiDto> ReadEduPassportInsItemRejectHis();
		IEnumerable<EduPassportInsItemRejectHiDto> ReadEduPassportInsItemRejectHis(Expression<Func<EduPassportInsItemRejectHi, bool>> filter);
		IEnumerable<EduPassportInsItemRejectHiDto> ReadEduPassportInsItemRejectHis(ISpecification<EduPassportInsItemRejectHi> specification);
		IEnumerable<EduPassportInsItemRejectHiDto> ReadEduPassportInsItemRejectHisPaged(int startIndex, int pageSize);
		IEnumerable<EduPassportInsItemRejectHiDto> ReadEduPassportInsItemRejectHisFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduPassportInsItemRejectHiDto> ReadEduPassportInsItemRejectHisPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduPassportInsItemRejectHiDto ReadEduPassportInsItemRejectHis(string dtoKey);
		int EduPassportInsItemRejectHisCount();
		int EduPassportInsItemRejectHisCountFiltered(string filterExpression);
		string CreateEduPassportInsItemRejectHi(EduPassportInsItemRejectHiDto edupassportinsitemrejecthi, bool doSaveChanges = true);
		void UpdateEduPassportInsItemRejectHi(EduPassportInsItemRejectHiDto edupassportinsitemrejecthi, bool doSaveChanges = true);
		void UpdateEduPassportInsItemRejectHis(IEnumerable<EduPassportInsItemRejectHiDto> edupassportinsitemrejecthis, bool doSaveChanges = true);
		void DeleteEduPassportInsItemRejectHi(EduPassportInsItemRejectHiDto edupassportinsitemrejecthi, bool doSaveChanges = true);
		void DeleteEduPassportInsItemRejectHis(IEnumerable<EduPassportInsItemRejectHiDto> edupassportinsitemrejecthis, bool doSaveChanges = true);


		#endregion EduPassportInsItemRejectHi CRUD Operations


		#region FORM_TEMPLATE_GROUP CRUD Operations


		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs();
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs(Expression<Func<FORM_TEMPLATE_GROUP, bool>> filter);
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs(ISpecification<FORM_TEMPLATE_GROUP> specification);
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		FORM_TEMPLATE_GROUPDto ReadFORM_TEMPLATE_GROUPs(string dtoKey);
		int FORM_TEMPLATE_GROUPsCount();
		int FORM_TEMPLATE_GROUPsCountFiltered(string filterExpression);
		string CreateFORM_TEMPLATE_GROUP(FORM_TEMPLATE_GROUPDto form_template_group, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_GROUP(FORM_TEMPLATE_GROUPDto form_template_group, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_GROUPs(IEnumerable<FORM_TEMPLATE_GROUPDto> form_template_groups, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_GROUP(FORM_TEMPLATE_GROUPDto form_template_group, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_GROUPs(IEnumerable<FORM_TEMPLATE_GROUPDto> form_template_groups, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_GROUP CRUD Operations


		#region ScoreSettingScoreType CRUD Operations


		IEnumerable<ScoreSettingScoreTypeDto> ReadScoreSettingScoreTypes();
		IEnumerable<ScoreSettingScoreTypeDto> ReadScoreSettingScoreTypes(Expression<Func<ScoreSettingScoreType, bool>> filter);
		IEnumerable<ScoreSettingScoreTypeDto> ReadScoreSettingScoreTypes(ISpecification<ScoreSettingScoreType> specification);
		IEnumerable<ScoreSettingScoreTypeDto> ReadScoreSettingScoreTypesPaged(int startIndex, int pageSize);
		IEnumerable<ScoreSettingScoreTypeDto> ReadScoreSettingScoreTypesFiltered(string sortExpression, string filterExpression);
		IEnumerable<ScoreSettingScoreTypeDto> ReadScoreSettingScoreTypesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		ScoreSettingScoreTypeDto ReadScoreSettingScoreTypes(string dtoKey);
		int ScoreSettingScoreTypesCount();
		int ScoreSettingScoreTypesCountFiltered(string filterExpression);
		string CreateScoreSettingScoreType(ScoreSettingScoreTypeDto scoresettingscoretype, bool doSaveChanges = true);
		void UpdateScoreSettingScoreType(ScoreSettingScoreTypeDto scoresettingscoretype, bool doSaveChanges = true);
		void UpdateScoreSettingScoreTypes(IEnumerable<ScoreSettingScoreTypeDto> scoresettingscoretypes, bool doSaveChanges = true);
		void DeleteScoreSettingScoreType(ScoreSettingScoreTypeDto scoresettingscoretype, bool doSaveChanges = true);
		void DeleteScoreSettingScoreTypes(IEnumerable<ScoreSettingScoreTypeDto> scoresettingscoretypes, bool doSaveChanges = true);


		#endregion ScoreSettingScoreType CRUD Operations


		#region TeachPointRef CRUD Operations


		IEnumerable<TeachPointRefDto> ReadTeachPointRefs();
		IEnumerable<TeachPointRefDto> ReadTeachPointRefs(Expression<Func<TeachPointRef, bool>> filter);
		IEnumerable<TeachPointRefDto> ReadTeachPointRefs(ISpecification<TeachPointRef> specification);
		IEnumerable<TeachPointRefDto> ReadTeachPointRefsPaged(int startIndex, int pageSize);
		IEnumerable<TeachPointRefDto> ReadTeachPointRefsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TeachPointRefDto> ReadTeachPointRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		TeachPointRefDto ReadTeachPointRefs(string dtoKey);
		int TeachPointRefsCount();
		int TeachPointRefsCountFiltered(string filterExpression);
		string CreateTeachPointRef(TeachPointRefDto teachpointref, bool doSaveChanges = true);
		void UpdateTeachPointRef(TeachPointRefDto teachpointref, bool doSaveChanges = true);
		void UpdateTeachPointRefs(IEnumerable<TeachPointRefDto> teachpointrefs, bool doSaveChanges = true);
		void DeleteTeachPointRef(TeachPointRefDto teachpointref, bool doSaveChanges = true);
		void DeleteTeachPointRefs(IEnumerable<TeachPointRefDto> teachpointrefs, bool doSaveChanges = true);


		#endregion TeachPointRef CRUD Operations


		#region TeachPointItemRequire CRUD Operations


		IEnumerable<TeachPointItemRequireDto> ReadTeachPointItemRequires();
		IEnumerable<TeachPointItemRequireDto> ReadTeachPointItemRequires(Expression<Func<TeachPointItemRequire, bool>> filter);
		IEnumerable<TeachPointItemRequireDto> ReadTeachPointItemRequires(ISpecification<TeachPointItemRequire> specification);
		IEnumerable<TeachPointItemRequireDto> ReadTeachPointItemRequiresPaged(int startIndex, int pageSize);
		IEnumerable<TeachPointItemRequireDto> ReadTeachPointItemRequiresFiltered(string sortExpression, string filterExpression);
		IEnumerable<TeachPointItemRequireDto> ReadTeachPointItemRequiresPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		TeachPointItemRequireDto ReadTeachPointItemRequires(string dtoKey);
		int TeachPointItemRequiresCount();
		int TeachPointItemRequiresCountFiltered(string filterExpression);
		string CreateTeachPointItemRequire(TeachPointItemRequireDto teachpointitemrequire, bool doSaveChanges = true);
		void UpdateTeachPointItemRequire(TeachPointItemRequireDto teachpointitemrequire, bool doSaveChanges = true);
		void UpdateTeachPointItemRequires(IEnumerable<TeachPointItemRequireDto> teachpointitemrequires, bool doSaveChanges = true);
		void DeleteTeachPointItemRequire(TeachPointItemRequireDto teachpointitemrequire, bool doSaveChanges = true);
		void DeleteTeachPointItemRequires(IEnumerable<TeachPointItemRequireDto> teachpointitemrequires, bool doSaveChanges = true);


		#endregion TeachPointItemRequire CRUD Operations


		#region TeachPointItem CRUD Operations


		IEnumerable<TeachPointItemDto> ReadTeachPointItems();
		IEnumerable<TeachPointItemDto> ReadTeachPointItems(Expression<Func<TeachPointItem, bool>> filter);
		IEnumerable<TeachPointItemDto> ReadTeachPointItems(ISpecification<TeachPointItem> specification);
		IEnumerable<TeachPointItemDto> ReadTeachPointItemsPaged(int startIndex, int pageSize);
		IEnumerable<TeachPointItemDto> ReadTeachPointItemsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TeachPointItemDto> ReadTeachPointItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		TeachPointItemDto ReadTeachPointItems(string dtoKey);
		int TeachPointItemsCount();
		int TeachPointItemsCountFiltered(string filterExpression);
		string CreateTeachPointItem(TeachPointItemDto teachpointitem, bool doSaveChanges = true);
		void UpdateTeachPointItem(TeachPointItemDto teachpointitem, bool doSaveChanges = true);
		void UpdateTeachPointItems(IEnumerable<TeachPointItemDto> teachpointitems, bool doSaveChanges = true);
		void DeleteTeachPointItem(TeachPointItemDto teachpointitem, bool doSaveChanges = true);
		void DeleteTeachPointItems(IEnumerable<TeachPointItemDto> teachpointitems, bool doSaveChanges = true);


		#endregion TeachPointItem CRUD Operations


		#region TeachPointEmpItemDatum CRUD Operations


		IEnumerable<TeachPointEmpItemDatumDto> ReadTeachPointEmpItemData();
		IEnumerable<TeachPointEmpItemDatumDto> ReadTeachPointEmpItemData(Expression<Func<TeachPointEmpItemDatum, bool>> filter);
		IEnumerable<TeachPointEmpItemDatumDto> ReadTeachPointEmpItemData(ISpecification<TeachPointEmpItemDatum> specification);
		IEnumerable<TeachPointEmpItemDatumDto> ReadTeachPointEmpItemDataPaged(int startIndex, int pageSize);
		IEnumerable<TeachPointEmpItemDatumDto> ReadTeachPointEmpItemDataFiltered(string sortExpression, string filterExpression);
		IEnumerable<TeachPointEmpItemDatumDto> ReadTeachPointEmpItemDataPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		TeachPointEmpItemDatumDto ReadTeachPointEmpItemData(string dtoKey);
		int TeachPointEmpItemDataCount();
		int TeachPointEmpItemDataCountFiltered(string filterExpression);
		string CreateTeachPointEmpItemDatum(TeachPointEmpItemDatumDto teachpointempitemdatum, bool doSaveChanges = true);
		void UpdateTeachPointEmpItemDatum(TeachPointEmpItemDatumDto teachpointempitemdatum, bool doSaveChanges = true);
		void UpdateTeachPointEmpItemData(IEnumerable<TeachPointEmpItemDatumDto> teachpointempitemdata, bool doSaveChanges = true);
		void DeleteTeachPointEmpItemDatum(TeachPointEmpItemDatumDto teachpointempitemdatum, bool doSaveChanges = true);
		void DeleteTeachPointEmpItemData(IEnumerable<TeachPointEmpItemDatumDto> teachpointempitemdata, bool doSaveChanges = true);


		#endregion TeachPointEmpItemDatum CRUD Operations


		#region TeachPointCalcTypeRef CRUD Operations


		IEnumerable<TeachPointCalcTypeRefDto> ReadTeachPointCalcTypeRefs();
		IEnumerable<TeachPointCalcTypeRefDto> ReadTeachPointCalcTypeRefs(Expression<Func<TeachPointCalcTypeRef, bool>> filter);
		IEnumerable<TeachPointCalcTypeRefDto> ReadTeachPointCalcTypeRefs(ISpecification<TeachPointCalcTypeRef> specification);
		IEnumerable<TeachPointCalcTypeRefDto> ReadTeachPointCalcTypeRefsPaged(int startIndex, int pageSize);
		IEnumerable<TeachPointCalcTypeRefDto> ReadTeachPointCalcTypeRefsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TeachPointCalcTypeRefDto> ReadTeachPointCalcTypeRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		TeachPointCalcTypeRefDto ReadTeachPointCalcTypeRefs(string dtoKey);
		int TeachPointCalcTypeRefsCount();
		int TeachPointCalcTypeRefsCountFiltered(string filterExpression);
		string CreateTeachPointCalcTypeRef(TeachPointCalcTypeRefDto teachpointcalctyperef, bool doSaveChanges = true);
		void UpdateTeachPointCalcTypeRef(TeachPointCalcTypeRefDto teachpointcalctyperef, bool doSaveChanges = true);
		void UpdateTeachPointCalcTypeRefs(IEnumerable<TeachPointCalcTypeRefDto> teachpointcalctyperefs, bool doSaveChanges = true);
		void DeleteTeachPointCalcTypeRef(TeachPointCalcTypeRefDto teachpointcalctyperef, bool doSaveChanges = true);
		void DeleteTeachPointCalcTypeRefs(IEnumerable<TeachPointCalcTypeRefDto> teachpointcalctyperefs, bool doSaveChanges = true);


		#endregion TeachPointCalcTypeRef CRUD Operations


		#region TeachPointCalcType CRUD Operations


		IEnumerable<TeachPointCalcTypeDto> ReadTeachPointCalcTypes();
		IEnumerable<TeachPointCalcTypeDto> ReadTeachPointCalcTypes(Expression<Func<TeachPointCalcType, bool>> filter);
		IEnumerable<TeachPointCalcTypeDto> ReadTeachPointCalcTypes(ISpecification<TeachPointCalcType> specification);
		IEnumerable<TeachPointCalcTypeDto> ReadTeachPointCalcTypesPaged(int startIndex, int pageSize);
		IEnumerable<TeachPointCalcTypeDto> ReadTeachPointCalcTypesFiltered(string sortExpression, string filterExpression);
		IEnumerable<TeachPointCalcTypeDto> ReadTeachPointCalcTypesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		TeachPointCalcTypeDto ReadTeachPointCalcTypes(string dtoKey);
		int TeachPointCalcTypesCount();
		int TeachPointCalcTypesCountFiltered(string filterExpression);
		string CreateTeachPointCalcType(TeachPointCalcTypeDto teachpointcalctype, bool doSaveChanges = true);
		void UpdateTeachPointCalcType(TeachPointCalcTypeDto teachpointcalctype, bool doSaveChanges = true);
		void UpdateTeachPointCalcTypes(IEnumerable<TeachPointCalcTypeDto> teachpointcalctypes, bool doSaveChanges = true);
		void DeleteTeachPointCalcType(TeachPointCalcTypeDto teachpointcalctype, bool doSaveChanges = true);
		void DeleteTeachPointCalcTypes(IEnumerable<TeachPointCalcTypeDto> teachpointcalctypes, bool doSaveChanges = true);


		#endregion TeachPointCalcType CRUD Operations


		#region MyListDet CRUD Operations


		IEnumerable<MyListDetDto> ReadMyListDets();
		IEnumerable<MyListDetDto> ReadMyListDets(Expression<Func<MyListDet, bool>> filter);
		IEnumerable<MyListDetDto> ReadMyListDets(ISpecification<MyListDet> specification);
		IEnumerable<MyListDetDto> ReadMyListDetsPaged(int startIndex, int pageSize);
		IEnumerable<MyListDetDto> ReadMyListDetsFiltered(string sortExpression, string filterExpression);
		IEnumerable<MyListDetDto> ReadMyListDetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		MyListDetDto ReadMyListDets(string dtoKey);
		int MyListDetsCount();
		int MyListDetsCountFiltered(string filterExpression);
		string CreateMyListDet(MyListDetDto mylistdet, bool doSaveChanges = true);
		void UpdateMyListDet(MyListDetDto mylistdet, bool doSaveChanges = true);
		void UpdateMyListDets(IEnumerable<MyListDetDto> mylistdets, bool doSaveChanges = true);
		void DeleteMyListDet(MyListDetDto mylistdet, bool doSaveChanges = true);
		void DeleteMyListDets(IEnumerable<MyListDetDto> mylistdets, bool doSaveChanges = true);


		#endregion MyListDet CRUD Operations


		#region MyList CRUD Operations


		IEnumerable<MyListDto> ReadMyLists();
		IEnumerable<MyListDto> ReadMyLists(Expression<Func<MyList, bool>> filter);
		IEnumerable<MyListDto> ReadMyLists(ISpecification<MyList> specification);
		IEnumerable<MyListDto> ReadMyListsPaged(int startIndex, int pageSize);
		IEnumerable<MyListDto> ReadMyListsFiltered(string sortExpression, string filterExpression);
		IEnumerable<MyListDto> ReadMyListsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		MyListDto ReadMyLists(string dtoKey);
		int MyListsCount();
		int MyListsCountFiltered(string filterExpression);
		string CreateMyList(MyListDto mylist, bool doSaveChanges = true);
		void UpdateMyList(MyListDto mylist, bool doSaveChanges = true);
		void UpdateMyLists(IEnumerable<MyListDto> mylists, bool doSaveChanges = true);
		void DeleteMyList(MyListDto mylist, bool doSaveChanges = true);
		void DeleteMyLists(IEnumerable<MyListDto> mylists, bool doSaveChanges = true);


		#endregion MyList CRUD Operations


		#region RecordTemplate CRUD Operations


		IEnumerable<RecordTemplateDto> ReadRecordTemplates();
		IEnumerable<RecordTemplateDto> ReadRecordTemplates(Expression<Func<RecordTemplate, bool>> filter);
		IEnumerable<RecordTemplateDto> ReadRecordTemplates(ISpecification<RecordTemplate> specification);
		IEnumerable<RecordTemplateDto> ReadRecordTemplatesPaged(int startIndex, int pageSize);
		IEnumerable<RecordTemplateDto> ReadRecordTemplatesFiltered(string sortExpression, string filterExpression);
		IEnumerable<RecordTemplateDto> ReadRecordTemplatesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		RecordTemplateDto ReadRecordTemplates(string dtoKey);
		int RecordTemplatesCount();
		int RecordTemplatesCountFiltered(string filterExpression);
		string CreateRecordTemplate(RecordTemplateDto recordtemplate, bool doSaveChanges = true);
		void UpdateRecordTemplate(RecordTemplateDto recordtemplate, bool doSaveChanges = true);
		void UpdateRecordTemplates(IEnumerable<RecordTemplateDto> recordtemplates, bool doSaveChanges = true);
		void DeleteRecordTemplate(RecordTemplateDto recordtemplate, bool doSaveChanges = true);
		void DeleteRecordTemplates(IEnumerable<RecordTemplateDto> recordtemplates, bool doSaveChanges = true);


		#endregion RecordTemplate CRUD Operations


		#region RecordInstance CRUD Operations


		IEnumerable<RecordInstanceDto> ReadRecordInstances();
		IEnumerable<RecordInstanceDto> ReadRecordInstances(Expression<Func<RecordInstance, bool>> filter);
		IEnumerable<RecordInstanceDto> ReadRecordInstances(ISpecification<RecordInstance> specification);
		IEnumerable<RecordInstanceDto> ReadRecordInstancesPaged(int startIndex, int pageSize);
		IEnumerable<RecordInstanceDto> ReadRecordInstancesFiltered(string sortExpression, string filterExpression);
		IEnumerable<RecordInstanceDto> ReadRecordInstancesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		RecordInstanceDto ReadRecordInstances(string dtoKey);
		int RecordInstancesCount();
		int RecordInstancesCountFiltered(string filterExpression);
		string CreateRecordInstance(RecordInstanceDto recordinstance, bool doSaveChanges = true);
		void UpdateRecordInstance(RecordInstanceDto recordinstance, bool doSaveChanges = true);
		void UpdateRecordInstances(IEnumerable<RecordInstanceDto> recordinstances, bool doSaveChanges = true);
		void DeleteRecordInstance(RecordInstanceDto recordinstance, bool doSaveChanges = true);
		void DeleteRecordInstances(IEnumerable<RecordInstanceDto> recordinstances, bool doSaveChanges = true);


		#endregion RecordInstance CRUD Operations


		#region RecordInsDet CRUD Operations


		IEnumerable<RecordInsDetDto> ReadRecordInsDets();
		IEnumerable<RecordInsDetDto> ReadRecordInsDets(Expression<Func<RecordInsDet, bool>> filter);
		IEnumerable<RecordInsDetDto> ReadRecordInsDets(ISpecification<RecordInsDet> specification);
		IEnumerable<RecordInsDetDto> ReadRecordInsDetsPaged(int startIndex, int pageSize);
		IEnumerable<RecordInsDetDto> ReadRecordInsDetsFiltered(string sortExpression, string filterExpression);
		IEnumerable<RecordInsDetDto> ReadRecordInsDetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		RecordInsDetDto ReadRecordInsDets(string dtoKey);
		int RecordInsDetsCount();
		int RecordInsDetsCountFiltered(string filterExpression);
		string CreateRecordInsDet(RecordInsDetDto recordinsdet, bool doSaveChanges = true);
		void UpdateRecordInsDet(RecordInsDetDto recordinsdet, bool doSaveChanges = true);
		void UpdateRecordInsDets(IEnumerable<RecordInsDetDto> recordinsdets, bool doSaveChanges = true);
		void DeleteRecordInsDet(RecordInsDetDto recordinsdet, bool doSaveChanges = true);
		void DeleteRecordInsDets(IEnumerable<RecordInsDetDto> recordinsdets, bool doSaveChanges = true);


		#endregion RecordInsDet CRUD Operations


		#region RecordInsSignIn CRUD Operations


		IEnumerable<RecordInsSignInDto> ReadRecordInsSignIns();
		IEnumerable<RecordInsSignInDto> ReadRecordInsSignIns(Expression<Func<RecordInsSignIn, bool>> filter);
		IEnumerable<RecordInsSignInDto> ReadRecordInsSignIns(ISpecification<RecordInsSignIn> specification);
		IEnumerable<RecordInsSignInDto> ReadRecordInsSignInsPaged(int startIndex, int pageSize);
		IEnumerable<RecordInsSignInDto> ReadRecordInsSignInsFiltered(string sortExpression, string filterExpression);
		IEnumerable<RecordInsSignInDto> ReadRecordInsSignInsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		RecordInsSignInDto ReadRecordInsSignIns(string dtoKey);
		int RecordInsSignInsCount();
		int RecordInsSignInsCountFiltered(string filterExpression);
		string CreateRecordInsSignIn(RecordInsSignInDto recordinssignin, bool doSaveChanges = true);
		void UpdateRecordInsSignIn(RecordInsSignInDto recordinssignin, bool doSaveChanges = true);
		void UpdateRecordInsSignIns(IEnumerable<RecordInsSignInDto> recordinssignins, bool doSaveChanges = true);
		void DeleteRecordInsSignIn(RecordInsSignInDto recordinssignin, bool doSaveChanges = true);
		void DeleteRecordInsSignIns(IEnumerable<RecordInsSignInDto> recordinssignins, bool doSaveChanges = true);


		#endregion RecordInsSignIn CRUD Operations


		#region RecordEduActRef CRUD Operations


		IEnumerable<RecordEduActRefDto> ReadRecordEduActRefs();
		IEnumerable<RecordEduActRefDto> ReadRecordEduActRefs(Expression<Func<RecordEduActRef, bool>> filter);
		IEnumerable<RecordEduActRefDto> ReadRecordEduActRefs(ISpecification<RecordEduActRef> specification);
		IEnumerable<RecordEduActRefDto> ReadRecordEduActRefsPaged(int startIndex, int pageSize);
		IEnumerable<RecordEduActRefDto> ReadRecordEduActRefsFiltered(string sortExpression, string filterExpression);
		IEnumerable<RecordEduActRefDto> ReadRecordEduActRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		RecordEduActRefDto ReadRecordEduActRefs(string dtoKey);
		int RecordEduActRefsCount();
		int RecordEduActRefsCountFiltered(string filterExpression);
		string CreateRecordEduActRef(RecordEduActRefDto recordeduactref, bool doSaveChanges = true);
		void UpdateRecordEduActRef(RecordEduActRefDto recordeduactref, bool doSaveChanges = true);
		void UpdateRecordEduActRefs(IEnumerable<RecordEduActRefDto> recordeduactrefs, bool doSaveChanges = true);
		void DeleteRecordEduActRef(RecordEduActRefDto recordeduactref, bool doSaveChanges = true);
		void DeleteRecordEduActRefs(IEnumerable<RecordEduActRefDto> recordeduactrefs, bool doSaveChanges = true);


		#endregion RecordEduActRef CRUD Operations


		#region EduQuestion CRUD Operations


		IEnumerable<EduQuestionDto> ReadEduQuestions();
		IEnumerable<EduQuestionDto> ReadEduQuestions(Expression<Func<EduQuestion, bool>> filter);
		IEnumerable<EduQuestionDto> ReadEduQuestions(ISpecification<EduQuestion> specification);
		IEnumerable<EduQuestionDto> ReadEduQuestionsPaged(int startIndex, int pageSize);
		IEnumerable<EduQuestionDto> ReadEduQuestionsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduQuestionDto> ReadEduQuestionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduQuestionDto ReadEduQuestions(string dtoKey);
		int EduQuestionsCount();
		int EduQuestionsCountFiltered(string filterExpression);
		string CreateEduQuestion(EduQuestionDto eduquestion, bool doSaveChanges = true);
		void UpdateEduQuestion(EduQuestionDto eduquestion, bool doSaveChanges = true);
		void UpdateEduQuestions(IEnumerable<EduQuestionDto> eduquestions, bool doSaveChanges = true);
		void DeleteEduQuestion(EduQuestionDto eduquestion, bool doSaveChanges = true);
		void DeleteEduQuestions(IEnumerable<EduQuestionDto> eduquestions, bool doSaveChanges = true);


		#endregion EduQuestion CRUD Operations


		#region LoginLog CRUD Operations


		IEnumerable<LoginLogDto> ReadLoginLogs();
		IEnumerable<LoginLogDto> ReadLoginLogs(Expression<Func<LoginLog, bool>> filter);
		IEnumerable<LoginLogDto> ReadLoginLogs(ISpecification<LoginLog> specification);
		IEnumerable<LoginLogDto> ReadLoginLogsPaged(int startIndex, int pageSize);
		IEnumerable<LoginLogDto> ReadLoginLogsFiltered(string sortExpression, string filterExpression);
		IEnumerable<LoginLogDto> ReadLoginLogsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		LoginLogDto ReadLoginLogs(string dtoKey);
		int LoginLogsCount();
		int LoginLogsCountFiltered(string filterExpression);
		string CreateLoginLog(LoginLogDto loginlog, bool doSaveChanges = true);
		void UpdateLoginLog(LoginLogDto loginlog, bool doSaveChanges = true);
		void UpdateLoginLogs(IEnumerable<LoginLogDto> loginlogs, bool doSaveChanges = true);
		void DeleteLoginLog(LoginLogDto loginlog, bool doSaveChanges = true);
		void DeleteLoginLogs(IEnumerable<LoginLogDto> loginlogs, bool doSaveChanges = true);


		#endregion LoginLog CRUD Operations


		#region TeachPointJobItem CRUD Operations


		IEnumerable<TeachPointJobItemDto> ReadTeachPointJobItems();
		IEnumerable<TeachPointJobItemDto> ReadTeachPointJobItems(Expression<Func<TeachPointJobItem, bool>> filter);
		IEnumerable<TeachPointJobItemDto> ReadTeachPointJobItems(ISpecification<TeachPointJobItem> specification);
		IEnumerable<TeachPointJobItemDto> ReadTeachPointJobItemsPaged(int startIndex, int pageSize);
		IEnumerable<TeachPointJobItemDto> ReadTeachPointJobItemsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TeachPointJobItemDto> ReadTeachPointJobItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		TeachPointJobItemDto ReadTeachPointJobItems(string dtoKey);
		int TeachPointJobItemsCount();
		int TeachPointJobItemsCountFiltered(string filterExpression);
		string CreateTeachPointJobItem(TeachPointJobItemDto teachpointjobitem, bool doSaveChanges = true);
		void UpdateTeachPointJobItem(TeachPointJobItemDto teachpointjobitem, bool doSaveChanges = true);
		void UpdateTeachPointJobItems(IEnumerable<TeachPointJobItemDto> teachpointjobitems, bool doSaveChanges = true);
		void DeleteTeachPointJobItem(TeachPointJobItemDto teachpointjobitem, bool doSaveChanges = true);
		void DeleteTeachPointJobItems(IEnumerable<TeachPointJobItemDto> teachpointjobitems, bool doSaveChanges = true);


		#endregion TeachPointJobItem CRUD Operations


		#region TrainingTime CRUD Operations


		IEnumerable<TrainingTimeDto> ReadTrainingTimes();
		IEnumerable<TrainingTimeDto> ReadTrainingTimes(Expression<Func<TrainingTime, bool>> filter);
		IEnumerable<TrainingTimeDto> ReadTrainingTimes(ISpecification<TrainingTime> specification);
		IEnumerable<TrainingTimeDto> ReadTrainingTimesPaged(int startIndex, int pageSize);
		IEnumerable<TrainingTimeDto> ReadTrainingTimesFiltered(string sortExpression, string filterExpression);
		IEnumerable<TrainingTimeDto> ReadTrainingTimesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		TrainingTimeDto ReadTrainingTimes(string dtoKey);
		int TrainingTimesCount();
		int TrainingTimesCountFiltered(string filterExpression);
		string CreateTrainingTime(TrainingTimeDto trainingtime, bool doSaveChanges = true);
		void UpdateTrainingTime(TrainingTimeDto trainingtime, bool doSaveChanges = true);
		void UpdateTrainingTimes(IEnumerable<TrainingTimeDto> trainingtimes, bool doSaveChanges = true);
		void DeleteTrainingTime(TrainingTimeDto trainingtime, bool doSaveChanges = true);
		void DeleteTrainingTimes(IEnumerable<TrainingTimeDto> trainingtimes, bool doSaveChanges = true);


		#endregion TrainingTime CRUD Operations


		#region EduActTypeRoleRef CRUD Operations


		IEnumerable<EduActTypeRoleRefDto> ReadEduActTypeRoleRefs();
		IEnumerable<EduActTypeRoleRefDto> ReadEduActTypeRoleRefs(Expression<Func<EduActTypeRoleRef, bool>> filter);
		IEnumerable<EduActTypeRoleRefDto> ReadEduActTypeRoleRefs(ISpecification<EduActTypeRoleRef> specification);
		IEnumerable<EduActTypeRoleRefDto> ReadEduActTypeRoleRefsPaged(int startIndex, int pageSize);
		IEnumerable<EduActTypeRoleRefDto> ReadEduActTypeRoleRefsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduActTypeRoleRefDto> ReadEduActTypeRoleRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduActTypeRoleRefDto ReadEduActTypeRoleRefs(string dtoKey);
		int EduActTypeRoleRefsCount();
		int EduActTypeRoleRefsCountFiltered(string filterExpression);
		string CreateEduActTypeRoleRef(EduActTypeRoleRefDto eduacttyperoleref, bool doSaveChanges = true);
		void UpdateEduActTypeRoleRef(EduActTypeRoleRefDto eduacttyperoleref, bool doSaveChanges = true);
		void UpdateEduActTypeRoleRefs(IEnumerable<EduActTypeRoleRefDto> eduacttyperolerefs, bool doSaveChanges = true);
		void DeleteEduActTypeRoleRef(EduActTypeRoleRefDto eduacttyperoleref, bool doSaveChanges = true);
		void DeleteEduActTypeRoleRefs(IEnumerable<EduActTypeRoleRefDto> eduacttyperolerefs, bool doSaveChanges = true);


		#endregion EduActTypeRoleRef CRUD Operations


		#region OSCECert CRUD Operations


		IEnumerable<OSCECertDto> ReadOSCECerts();
		IEnumerable<OSCECertDto> ReadOSCECerts(Expression<Func<OSCECert, bool>> filter);
		IEnumerable<OSCECertDto> ReadOSCECerts(ISpecification<OSCECert> specification);
		IEnumerable<OSCECertDto> ReadOSCECertsPaged(int startIndex, int pageSize);
		IEnumerable<OSCECertDto> ReadOSCECertsFiltered(string sortExpression, string filterExpression);
		IEnumerable<OSCECertDto> ReadOSCECertsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		OSCECertDto ReadOSCECerts(string dtoKey);
		int OSCECertsCount();
		int OSCECertsCountFiltered(string filterExpression);
		string CreateOSCECert(OSCECertDto oscecert, bool doSaveChanges = true);
		void UpdateOSCECert(OSCECertDto oscecert, bool doSaveChanges = true);
		void UpdateOSCECerts(IEnumerable<OSCECertDto> oscecerts, bool doSaveChanges = true);
		void DeleteOSCECert(OSCECertDto oscecert, bool doSaveChanges = true);
		void DeleteOSCECerts(IEnumerable<OSCECertDto> oscecerts, bool doSaveChanges = true);


		#endregion OSCECert CRUD Operations


		#region OSCEBlockTime CRUD Operations


		IEnumerable<OSCEBlockTimeDto> ReadOSCEBlockTimes();
		IEnumerable<OSCEBlockTimeDto> ReadOSCEBlockTimes(Expression<Func<OSCEBlockTime, bool>> filter);
		IEnumerable<OSCEBlockTimeDto> ReadOSCEBlockTimes(ISpecification<OSCEBlockTime> specification);
		IEnumerable<OSCEBlockTimeDto> ReadOSCEBlockTimesPaged(int startIndex, int pageSize);
		IEnumerable<OSCEBlockTimeDto> ReadOSCEBlockTimesFiltered(string sortExpression, string filterExpression);
		IEnumerable<OSCEBlockTimeDto> ReadOSCEBlockTimesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		OSCEBlockTimeDto ReadOSCEBlockTimes(string dtoKey);
		int OSCEBlockTimesCount();
		int OSCEBlockTimesCountFiltered(string filterExpression);
		string CreateOSCEBlockTime(OSCEBlockTimeDto osceblocktime, bool doSaveChanges = true);
		void UpdateOSCEBlockTime(OSCEBlockTimeDto osceblocktime, bool doSaveChanges = true);
		void UpdateOSCEBlockTimes(IEnumerable<OSCEBlockTimeDto> osceblocktimes, bool doSaveChanges = true);
		void DeleteOSCEBlockTime(OSCEBlockTimeDto osceblocktime, bool doSaveChanges = true);
		void DeleteOSCEBlockTimes(IEnumerable<OSCEBlockTimeDto> osceblocktimes, bool doSaveChanges = true);


		#endregion OSCEBlockTime CRUD Operations


		#region RecordInstanceRejectLog CRUD Operations


		IEnumerable<RecordInstanceRejectLogDto> ReadRecordInstanceRejectLogs();
		IEnumerable<RecordInstanceRejectLogDto> ReadRecordInstanceRejectLogs(Expression<Func<RecordInstanceRejectLog, bool>> filter);
		IEnumerable<RecordInstanceRejectLogDto> ReadRecordInstanceRejectLogs(ISpecification<RecordInstanceRejectLog> specification);
		IEnumerable<RecordInstanceRejectLogDto> ReadRecordInstanceRejectLogsPaged(int startIndex, int pageSize);
		IEnumerable<RecordInstanceRejectLogDto> ReadRecordInstanceRejectLogsFiltered(string sortExpression, string filterExpression);
		IEnumerable<RecordInstanceRejectLogDto> ReadRecordInstanceRejectLogsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		RecordInstanceRejectLogDto ReadRecordInstanceRejectLogs(string dtoKey);
		int RecordInstanceRejectLogsCount();
		int RecordInstanceRejectLogsCountFiltered(string filterExpression);
		string CreateRecordInstanceRejectLog(RecordInstanceRejectLogDto recordinstancerejectlog, bool doSaveChanges = true);
		void UpdateRecordInstanceRejectLog(RecordInstanceRejectLogDto recordinstancerejectlog, bool doSaveChanges = true);
		void UpdateRecordInstanceRejectLogs(IEnumerable<RecordInstanceRejectLogDto> recordinstancerejectlogs, bool doSaveChanges = true);
		void DeleteRecordInstanceRejectLog(RecordInstanceRejectLogDto recordinstancerejectlog, bool doSaveChanges = true);
		void DeleteRecordInstanceRejectLogs(IEnumerable<RecordInstanceRejectLogDto> recordinstancerejectlogs, bool doSaveChanges = true);


		#endregion RecordInstanceRejectLog CRUD Operations


		#region MonthlyTeachPointCalcDatum CRUD Operations


		IEnumerable<MonthlyTeachPointCalcDatumDto> ReadMonthlyTeachPointCalcData();
		IEnumerable<MonthlyTeachPointCalcDatumDto> ReadMonthlyTeachPointCalcData(Expression<Func<MonthlyTeachPointCalcDatum, bool>> filter);
		IEnumerable<MonthlyTeachPointCalcDatumDto> ReadMonthlyTeachPointCalcData(ISpecification<MonthlyTeachPointCalcDatum> specification);
		IEnumerable<MonthlyTeachPointCalcDatumDto> ReadMonthlyTeachPointCalcDataPaged(int startIndex, int pageSize);
		IEnumerable<MonthlyTeachPointCalcDatumDto> ReadMonthlyTeachPointCalcDataFiltered(string sortExpression, string filterExpression);
		IEnumerable<MonthlyTeachPointCalcDatumDto> ReadMonthlyTeachPointCalcDataPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		MonthlyTeachPointCalcDatumDto ReadMonthlyTeachPointCalcData(string dtoKey);
		int MonthlyTeachPointCalcDataCount();
		int MonthlyTeachPointCalcDataCountFiltered(string filterExpression);
		string CreateMonthlyTeachPointCalcDatum(MonthlyTeachPointCalcDatumDto monthlyteachpointcalcdatum, bool doSaveChanges = true);
		void UpdateMonthlyTeachPointCalcDatum(MonthlyTeachPointCalcDatumDto monthlyteachpointcalcdatum, bool doSaveChanges = true);
		void UpdateMonthlyTeachPointCalcData(IEnumerable<MonthlyTeachPointCalcDatumDto> monthlyteachpointcalcdata, bool doSaveChanges = true);
		void DeleteMonthlyTeachPointCalcDatum(MonthlyTeachPointCalcDatumDto monthlyteachpointcalcdatum, bool doSaveChanges = true);
		void DeleteMonthlyTeachPointCalcData(IEnumerable<MonthlyTeachPointCalcDatumDto> monthlyteachpointcalcdata, bool doSaveChanges = true);


		#endregion MonthlyTeachPointCalcDatum CRUD Operations


		#region FormCategoryRef CRUD Operations


		IEnumerable<FormCategoryRefDto> ReadFormCategoryRefs();
		IEnumerable<FormCategoryRefDto> ReadFormCategoryRefs(Expression<Func<FormCategoryRef, bool>> filter);
		IEnumerable<FormCategoryRefDto> ReadFormCategoryRefs(ISpecification<FormCategoryRef> specification);
		IEnumerable<FormCategoryRefDto> ReadFormCategoryRefsPaged(int startIndex, int pageSize);
		IEnumerable<FormCategoryRefDto> ReadFormCategoryRefsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FormCategoryRefDto> ReadFormCategoryRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		FormCategoryRefDto ReadFormCategoryRefs(string dtoKey);
		int FormCategoryRefsCount();
		int FormCategoryRefsCountFiltered(string filterExpression);
		string CreateFormCategoryRef(FormCategoryRefDto formcategoryref, bool doSaveChanges = true);
		void UpdateFormCategoryRef(FormCategoryRefDto formcategoryref, bool doSaveChanges = true);
		void UpdateFormCategoryRefs(IEnumerable<FormCategoryRefDto> formcategoryrefs, bool doSaveChanges = true);
		void DeleteFormCategoryRef(FormCategoryRefDto formcategoryref, bool doSaveChanges = true);
		void DeleteFormCategoryRefs(IEnumerable<FormCategoryRefDto> formcategoryrefs, bool doSaveChanges = true);


		#endregion FormCategoryRef CRUD Operations


		#region FormCategory CRUD Operations


		IEnumerable<FormCategoryDto> ReadFormCategories();
		IEnumerable<FormCategoryDto> ReadFormCategories(Expression<Func<FormCategory, bool>> filter);
		IEnumerable<FormCategoryDto> ReadFormCategories(ISpecification<FormCategory> specification);
		IEnumerable<FormCategoryDto> ReadFormCategoriesPaged(int startIndex, int pageSize);
		IEnumerable<FormCategoryDto> ReadFormCategoriesFiltered(string sortExpression, string filterExpression);
		IEnumerable<FormCategoryDto> ReadFormCategoriesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		FormCategoryDto ReadFormCategories(string dtoKey);
		int FormCategoriesCount();
		int FormCategoriesCountFiltered(string filterExpression);
		string CreateFormCategory(FormCategoryDto formcategory, bool doSaveChanges = true);
		void UpdateFormCategory(FormCategoryDto formcategory, bool doSaveChanges = true);
		void UpdateFormCategories(IEnumerable<FormCategoryDto> formcategories, bool doSaveChanges = true);
		void DeleteFormCategory(FormCategoryDto formcategory, bool doSaveChanges = true);
		void DeleteFormCategories(IEnumerable<FormCategoryDto> formcategories, bool doSaveChanges = true);


		#endregion FormCategory CRUD Operations


		#region FORM_INSTANCE_RETURN_LOG CRUD Operations


		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs();
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs(Expression<Func<FORM_INSTANCE_RETURN_LOG, bool>> filter);
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs(ISpecification<FORM_INSTANCE_RETURN_LOG> specification);
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		FORM_INSTANCE_RETURN_LOGDto ReadFORM_INSTANCE_RETURN_LOGs(string dtoKey);
		int FORM_INSTANCE_RETURN_LOGsCount();
		int FORM_INSTANCE_RETURN_LOGsCountFiltered(string filterExpression);
		string CreateFORM_INSTANCE_RETURN_LOG(FORM_INSTANCE_RETURN_LOGDto form_instance_return_log, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_RETURN_LOG(FORM_INSTANCE_RETURN_LOGDto form_instance_return_log, bool doSaveChanges = true);
		void UpdateFORM_INSTANCE_RETURN_LOGs(IEnumerable<FORM_INSTANCE_RETURN_LOGDto> form_instance_return_logs, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_RETURN_LOG(FORM_INSTANCE_RETURN_LOGDto form_instance_return_log, bool doSaveChanges = true);
		void DeleteFORM_INSTANCE_RETURN_LOGs(IEnumerable<FORM_INSTANCE_RETURN_LOGDto> form_instance_return_logs, bool doSaveChanges = true);


		#endregion FORM_INSTANCE_RETURN_LOG CRUD Operations


		#region EduTermFormReqTemplateDet CRUD Operations


		IEnumerable<EduTermFormReqTemplateDetDto> ReadEduTermFormReqTemplateDets();
		IEnumerable<EduTermFormReqTemplateDetDto> ReadEduTermFormReqTemplateDets(Expression<Func<EduTermFormReqTemplateDet, bool>> filter);
		IEnumerable<EduTermFormReqTemplateDetDto> ReadEduTermFormReqTemplateDets(ISpecification<EduTermFormReqTemplateDet> specification);
		IEnumerable<EduTermFormReqTemplateDetDto> ReadEduTermFormReqTemplateDetsPaged(int startIndex, int pageSize);
		IEnumerable<EduTermFormReqTemplateDetDto> ReadEduTermFormReqTemplateDetsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduTermFormReqTemplateDetDto> ReadEduTermFormReqTemplateDetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduTermFormReqTemplateDetDto ReadEduTermFormReqTemplateDets(string dtoKey);
		int EduTermFormReqTemplateDetsCount();
		int EduTermFormReqTemplateDetsCountFiltered(string filterExpression);
		string CreateEduTermFormReqTemplateDet(EduTermFormReqTemplateDetDto edutermformreqtemplatedet, bool doSaveChanges = true);
		void UpdateEduTermFormReqTemplateDet(EduTermFormReqTemplateDetDto edutermformreqtemplatedet, bool doSaveChanges = true);
		void UpdateEduTermFormReqTemplateDets(IEnumerable<EduTermFormReqTemplateDetDto> edutermformreqtemplatedets, bool doSaveChanges = true);
		void DeleteEduTermFormReqTemplateDet(EduTermFormReqTemplateDetDto edutermformreqtemplatedet, bool doSaveChanges = true);
		void DeleteEduTermFormReqTemplateDets(IEnumerable<EduTermFormReqTemplateDetDto> edutermformreqtemplatedets, bool doSaveChanges = true);


		#endregion EduTermFormReqTemplateDet CRUD Operations


		#region EduTermFormReqTemplate CRUD Operations


		IEnumerable<EduTermFormReqTemplateDto> ReadEduTermFormReqTemplates();
		IEnumerable<EduTermFormReqTemplateDto> ReadEduTermFormReqTemplates(Expression<Func<EduTermFormReqTemplate, bool>> filter);
		IEnumerable<EduTermFormReqTemplateDto> ReadEduTermFormReqTemplates(ISpecification<EduTermFormReqTemplate> specification);
		IEnumerable<EduTermFormReqTemplateDto> ReadEduTermFormReqTemplatesPaged(int startIndex, int pageSize);
		IEnumerable<EduTermFormReqTemplateDto> ReadEduTermFormReqTemplatesFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduTermFormReqTemplateDto> ReadEduTermFormReqTemplatesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduTermFormReqTemplateDto ReadEduTermFormReqTemplates(string dtoKey);
		int EduTermFormReqTemplatesCount();
		int EduTermFormReqTemplatesCountFiltered(string filterExpression);
		string CreateEduTermFormReqTemplate(EduTermFormReqTemplateDto edutermformreqtemplate, bool doSaveChanges = true);
		void UpdateEduTermFormReqTemplate(EduTermFormReqTemplateDto edutermformreqtemplate, bool doSaveChanges = true);
		void UpdateEduTermFormReqTemplates(IEnumerable<EduTermFormReqTemplateDto> edutermformreqtemplates, bool doSaveChanges = true);
		void DeleteEduTermFormReqTemplate(EduTermFormReqTemplateDto edutermformreqtemplate, bool doSaveChanges = true);
		void DeleteEduTermFormReqTemplates(IEnumerable<EduTermFormReqTemplateDto> edutermformreqtemplates, bool doSaveChanges = true);


		#endregion EduTermFormReqTemplate CRUD Operations


		#region EduTermFormReq CRUD Operations


		IEnumerable<EduTermFormReqDto> ReadEduTermFormReqs();
		IEnumerable<EduTermFormReqDto> ReadEduTermFormReqs(Expression<Func<EduTermFormReq, bool>> filter);
		IEnumerable<EduTermFormReqDto> ReadEduTermFormReqs(ISpecification<EduTermFormReq> specification);
		IEnumerable<EduTermFormReqDto> ReadEduTermFormReqsPaged(int startIndex, int pageSize);
		IEnumerable<EduTermFormReqDto> ReadEduTermFormReqsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduTermFormReqDto> ReadEduTermFormReqsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduTermFormReqDto ReadEduTermFormReqs(string dtoKey);
		int EduTermFormReqsCount();
		int EduTermFormReqsCountFiltered(string filterExpression);
		string CreateEduTermFormReq(EduTermFormReqDto edutermformreq, bool doSaveChanges = true);
		void UpdateEduTermFormReq(EduTermFormReqDto edutermformreq, bool doSaveChanges = true);
		void UpdateEduTermFormReqs(IEnumerable<EduTermFormReqDto> edutermformreqs, bool doSaveChanges = true);
		void DeleteEduTermFormReq(EduTermFormReqDto edutermformreq, bool doSaveChanges = true);
		void DeleteEduTermFormReqs(IEnumerable<EduTermFormReqDto> edutermformreqs, bool doSaveChanges = true);


		#endregion EduTermFormReq CRUD Operations


		#region RecordInsReader CRUD Operations


		IEnumerable<RecordInsReaderDto> ReadRecordInsReaders();
		IEnumerable<RecordInsReaderDto> ReadRecordInsReaders(Expression<Func<RecordInsReader, bool>> filter);
		IEnumerable<RecordInsReaderDto> ReadRecordInsReaders(ISpecification<RecordInsReader> specification);
		IEnumerable<RecordInsReaderDto> ReadRecordInsReadersPaged(int startIndex, int pageSize);
		IEnumerable<RecordInsReaderDto> ReadRecordInsReadersFiltered(string sortExpression, string filterExpression);
		IEnumerable<RecordInsReaderDto> ReadRecordInsReadersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		RecordInsReaderDto ReadRecordInsReaders(string dtoKey);
		int RecordInsReadersCount();
		int RecordInsReadersCountFiltered(string filterExpression);
		string CreateRecordInsReader(RecordInsReaderDto recordinsreader, bool doSaveChanges = true);
		void UpdateRecordInsReader(RecordInsReaderDto recordinsreader, bool doSaveChanges = true);
		void UpdateRecordInsReaders(IEnumerable<RecordInsReaderDto> recordinsreaders, bool doSaveChanges = true);
		void DeleteRecordInsReader(RecordInsReaderDto recordinsreader, bool doSaveChanges = true);
		void DeleteRecordInsReaders(IEnumerable<RecordInsReaderDto> recordinsreaders, bool doSaveChanges = true);


		#endregion RecordInsReader CRUD Operations


		#region RecordInsViewer CRUD Operations


		IEnumerable<RecordInsViewerDto> ReadRecordInsViewers();
		IEnumerable<RecordInsViewerDto> ReadRecordInsViewers(Expression<Func<RecordInsViewer, bool>> filter);
		IEnumerable<RecordInsViewerDto> ReadRecordInsViewers(ISpecification<RecordInsViewer> specification);
		IEnumerable<RecordInsViewerDto> ReadRecordInsViewersPaged(int startIndex, int pageSize);
		IEnumerable<RecordInsViewerDto> ReadRecordInsViewersFiltered(string sortExpression, string filterExpression);
		IEnumerable<RecordInsViewerDto> ReadRecordInsViewersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		RecordInsViewerDto ReadRecordInsViewers(string dtoKey);
		int RecordInsViewersCount();
		int RecordInsViewersCountFiltered(string filterExpression);
		string CreateRecordInsViewer(RecordInsViewerDto recordinsviewer, bool doSaveChanges = true);
		void UpdateRecordInsViewer(RecordInsViewerDto recordinsviewer, bool doSaveChanges = true);
		void UpdateRecordInsViewers(IEnumerable<RecordInsViewerDto> recordinsviewers, bool doSaveChanges = true);
		void DeleteRecordInsViewer(RecordInsViewerDto recordinsviewer, bool doSaveChanges = true);
		void DeleteRecordInsViewers(IEnumerable<RecordInsViewerDto> recordinsviewers, bool doSaveChanges = true);


		#endregion RecordInsViewer CRUD Operations


		#region IKASA_Menu CRUD Operations


		IEnumerable<IKASA_MenuDto> ReadIKASA_Menus();
		IEnumerable<IKASA_MenuDto> ReadIKASA_Menus(Expression<Func<IKASA_Menu, bool>> filter);
		IEnumerable<IKASA_MenuDto> ReadIKASA_Menus(ISpecification<IKASA_Menu> specification);
		IEnumerable<IKASA_MenuDto> ReadIKASA_MenusPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_MenuDto> ReadIKASA_MenusFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_MenuDto> ReadIKASA_MenusPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IKASA_MenuDto ReadIKASA_Menus(string dtoKey);
		int IKASA_MenusCount();
		int IKASA_MenusCountFiltered(string filterExpression);
		string CreateIKASA_Menu(IKASA_MenuDto ikasa_menu, bool doSaveChanges = true);
		void UpdateIKASA_Menu(IKASA_MenuDto ikasa_menu, bool doSaveChanges = true);
		void UpdateIKASA_Menus(IEnumerable<IKASA_MenuDto> ikasa_menus, bool doSaveChanges = true);
		void DeleteIKASA_Menu(IKASA_MenuDto ikasa_menu, bool doSaveChanges = true);
		void DeleteIKASA_Menus(IEnumerable<IKASA_MenuDto> ikasa_menus, bool doSaveChanges = true);


		#endregion IKASA_Menu CRUD Operations


		#region IKASA_MenuParam CRUD Operations


		IEnumerable<IKASA_MenuParamDto> ReadIKASA_MenuParams();
		IEnumerable<IKASA_MenuParamDto> ReadIKASA_MenuParams(Expression<Func<IKASA_MenuParam, bool>> filter);
		IEnumerable<IKASA_MenuParamDto> ReadIKASA_MenuParams(ISpecification<IKASA_MenuParam> specification);
		IEnumerable<IKASA_MenuParamDto> ReadIKASA_MenuParamsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_MenuParamDto> ReadIKASA_MenuParamsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_MenuParamDto> ReadIKASA_MenuParamsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IKASA_MenuParamDto ReadIKASA_MenuParams(string dtoKey);
		int IKASA_MenuParamsCount();
		int IKASA_MenuParamsCountFiltered(string filterExpression);
		string CreateIKASA_MenuParam(IKASA_MenuParamDto ikasa_menuparam, bool doSaveChanges = true);
		void UpdateIKASA_MenuParam(IKASA_MenuParamDto ikasa_menuparam, bool doSaveChanges = true);
		void UpdateIKASA_MenuParams(IEnumerable<IKASA_MenuParamDto> ikasa_menuparams, bool doSaveChanges = true);
		void DeleteIKASA_MenuParam(IKASA_MenuParamDto ikasa_menuparam, bool doSaveChanges = true);
		void DeleteIKASA_MenuParams(IEnumerable<IKASA_MenuParamDto> ikasa_menuparams, bool doSaveChanges = true);


		#endregion IKASA_MenuParam CRUD Operations


		#region IKASA_OSCEExamStage CRUD Operations


		IEnumerable<IKASA_OSCEExamStageDto> ReadIKASA_OSCEExamStages();
		IEnumerable<IKASA_OSCEExamStageDto> ReadIKASA_OSCEExamStages(Expression<Func<IKASA_OSCEExamStage, bool>> filter);
		IEnumerable<IKASA_OSCEExamStageDto> ReadIKASA_OSCEExamStages(ISpecification<IKASA_OSCEExamStage> specification);
		IEnumerable<IKASA_OSCEExamStageDto> ReadIKASA_OSCEExamStagesPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_OSCEExamStageDto> ReadIKASA_OSCEExamStagesFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_OSCEExamStageDto> ReadIKASA_OSCEExamStagesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IKASA_OSCEExamStageDto ReadIKASA_OSCEExamStages(string dtoKey);
		int IKASA_OSCEExamStagesCount();
		int IKASA_OSCEExamStagesCountFiltered(string filterExpression);
		string CreateIKASA_OSCEExamStage(IKASA_OSCEExamStageDto ikasa_osceexamstage, bool doSaveChanges = true);
		void UpdateIKASA_OSCEExamStage(IKASA_OSCEExamStageDto ikasa_osceexamstage, bool doSaveChanges = true);
		void UpdateIKASA_OSCEExamStages(IEnumerable<IKASA_OSCEExamStageDto> ikasa_osceexamstages, bool doSaveChanges = true);
		void DeleteIKASA_OSCEExamStage(IKASA_OSCEExamStageDto ikasa_osceexamstage, bool doSaveChanges = true);
		void DeleteIKASA_OSCEExamStages(IEnumerable<IKASA_OSCEExamStageDto> ikasa_osceexamstages, bool doSaveChanges = true);


		#endregion IKASA_OSCEExamStage CRUD Operations


		#region IKASA_OSCEExamScore CRUD Operations


		IEnumerable<IKASA_OSCEExamScoreDto> ReadIKASA_OSCEExamScores();
		IEnumerable<IKASA_OSCEExamScoreDto> ReadIKASA_OSCEExamScores(Expression<Func<IKASA_OSCEExamScore, bool>> filter);
		IEnumerable<IKASA_OSCEExamScoreDto> ReadIKASA_OSCEExamScores(ISpecification<IKASA_OSCEExamScore> specification);
		IEnumerable<IKASA_OSCEExamScoreDto> ReadIKASA_OSCEExamScoresPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_OSCEExamScoreDto> ReadIKASA_OSCEExamScoresFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_OSCEExamScoreDto> ReadIKASA_OSCEExamScoresPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IKASA_OSCEExamScoreDto ReadIKASA_OSCEExamScores(string dtoKey);
		int IKASA_OSCEExamScoresCount();
		int IKASA_OSCEExamScoresCountFiltered(string filterExpression);
		string CreateIKASA_OSCEExamScore(IKASA_OSCEExamScoreDto ikasa_osceexamscore, bool doSaveChanges = true);
		void UpdateIKASA_OSCEExamScore(IKASA_OSCEExamScoreDto ikasa_osceexamscore, bool doSaveChanges = true);
		void UpdateIKASA_OSCEExamScores(IEnumerable<IKASA_OSCEExamScoreDto> ikasa_osceexamscores, bool doSaveChanges = true);
		void DeleteIKASA_OSCEExamScore(IKASA_OSCEExamScoreDto ikasa_osceexamscore, bool doSaveChanges = true);
		void DeleteIKASA_OSCEExamScores(IEnumerable<IKASA_OSCEExamScoreDto> ikasa_osceexamscores, bool doSaveChanges = true);


		#endregion IKASA_OSCEExamScore CRUD Operations


		#region IKASA_OSCEExam CRUD Operations


		IEnumerable<IKASA_OSCEExamDto> ReadIKASA_OSCEExams();
		IEnumerable<IKASA_OSCEExamDto> ReadIKASA_OSCEExams(Expression<Func<IKASA_OSCEExam, bool>> filter);
		IEnumerable<IKASA_OSCEExamDto> ReadIKASA_OSCEExams(ISpecification<IKASA_OSCEExam> specification);
		IEnumerable<IKASA_OSCEExamDto> ReadIKASA_OSCEExamsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_OSCEExamDto> ReadIKASA_OSCEExamsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_OSCEExamDto> ReadIKASA_OSCEExamsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IKASA_OSCEExamDto ReadIKASA_OSCEExams(string dtoKey);
		int IKASA_OSCEExamsCount();
		int IKASA_OSCEExamsCountFiltered(string filterExpression);
		string CreateIKASA_OSCEExam(IKASA_OSCEExamDto ikasa_osceexam, bool doSaveChanges = true);
		void UpdateIKASA_OSCEExam(IKASA_OSCEExamDto ikasa_osceexam, bool doSaveChanges = true);
		void UpdateIKASA_OSCEExams(IEnumerable<IKASA_OSCEExamDto> ikasa_osceexams, bool doSaveChanges = true);
		void DeleteIKASA_OSCEExam(IKASA_OSCEExamDto ikasa_osceexam, bool doSaveChanges = true);
		void DeleteIKASA_OSCEExams(IEnumerable<IKASA_OSCEExamDto> ikasa_osceexams, bool doSaveChanges = true);


		#endregion IKASA_OSCEExam CRUD Operations


		#region V_hosp CRUD Operations


		IEnumerable<V_hospDto> ReadV_hosps();
		IEnumerable<V_hospDto> ReadV_hosps(Expression<Func<V_hosp, bool>> filter);
		IEnumerable<V_hospDto> ReadV_hosps(ISpecification<V_hosp> specification);
		IEnumerable<V_hospDto> ReadV_hospsPaged(int startIndex, int pageSize);
		IEnumerable<V_hospDto> ReadV_hospsFiltered(string sortExpression, string filterExpression);
		IEnumerable<V_hospDto> ReadV_hospsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		V_hospDto ReadV_hosps(string dtoKey);
		int V_hospsCount();
		int V_hospsCountFiltered(string filterExpression);
		string CreateV_hosp(V_hospDto v_hosp, bool doSaveChanges = true);
		void UpdateV_hosp(V_hospDto v_hosp, bool doSaveChanges = true);
		void UpdateV_hosps(IEnumerable<V_hospDto> v_hosps, bool doSaveChanges = true);
		void DeleteV_hosp(V_hospDto v_hosp, bool doSaveChanges = true);
		void DeleteV_hosps(IEnumerable<V_hospDto> v_hosps, bool doSaveChanges = true);


		#endregion V_hosp CRUD Operations


		#region EduScore CRUD Operations


		IEnumerable<EduScoreDto> ReadEduScores();
		IEnumerable<EduScoreDto> ReadEduScores(Expression<Func<EduScore, bool>> filter);
		IEnumerable<EduScoreDto> ReadEduScores(ISpecification<EduScore> specification);
		IEnumerable<EduScoreDto> ReadEduScoresPaged(int startIndex, int pageSize);
		IEnumerable<EduScoreDto> ReadEduScoresFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduScoreDto> ReadEduScoresPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduScoreDto ReadEduScores(string dtoKey);
		int EduScoresCount();
		int EduScoresCountFiltered(string filterExpression);
		string CreateEduScore(EduScoreDto eduscore, bool doSaveChanges = true);
		void UpdateEduScore(EduScoreDto eduscore, bool doSaveChanges = true);
		void UpdateEduScores(IEnumerable<EduScoreDto> eduscores, bool doSaveChanges = true);
		void DeleteEduScore(EduScoreDto eduscore, bool doSaveChanges = true);
		void DeleteEduScores(IEnumerable<EduScoreDto> eduscores, bool doSaveChanges = true);


		#endregion EduScore CRUD Operations


		#region IKASA_IPDDataCount CRUD Operations


		IEnumerable<IKASA_IPDDataCountDto> ReadIKASA_IPDDataCounts();
		IEnumerable<IKASA_IPDDataCountDto> ReadIKASA_IPDDataCounts(Expression<Func<IKASA_IPDDataCount, bool>> filter);
		IEnumerable<IKASA_IPDDataCountDto> ReadIKASA_IPDDataCounts(ISpecification<IKASA_IPDDataCount> specification);
		IEnumerable<IKASA_IPDDataCountDto> ReadIKASA_IPDDataCountsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_IPDDataCountDto> ReadIKASA_IPDDataCountsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_IPDDataCountDto> ReadIKASA_IPDDataCountsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IKASA_IPDDataCountDto ReadIKASA_IPDDataCounts(string dtoKey);
		int IKASA_IPDDataCountsCount();
		int IKASA_IPDDataCountsCountFiltered(string filterExpression);
		string CreateIKASA_IPDDataCount(IKASA_IPDDataCountDto ikasa_ipddatacount, bool doSaveChanges = true);
		void UpdateIKASA_IPDDataCount(IKASA_IPDDataCountDto ikasa_ipddatacount, bool doSaveChanges = true);
		void UpdateIKASA_IPDDataCounts(IEnumerable<IKASA_IPDDataCountDto> ikasa_ipddatacounts, bool doSaveChanges = true);
		void DeleteIKASA_IPDDataCount(IKASA_IPDDataCountDto ikasa_ipddatacount, bool doSaveChanges = true);
		void DeleteIKASA_IPDDataCounts(IEnumerable<IKASA_IPDDataCountDto> ikasa_ipddatacounts, bool doSaveChanges = true);


		#endregion IKASA_IPDDataCount CRUD Operations


		#region FORM_TEMPLATE_PERMISSION CRUD Operations


		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs();
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs(Expression<Func<FORM_TEMPLATE_PERMISSION, bool>> filter);
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs(ISpecification<FORM_TEMPLATE_PERMISSION> specification);
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsPaged(int startIndex, int pageSize);
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsFiltered(string sortExpression, string filterExpression);
		IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		FORM_TEMPLATE_PERMISSIONDto ReadFORM_TEMPLATE_PERMISSIONs(string dtoKey);
		int FORM_TEMPLATE_PERMISSIONsCount();
		int FORM_TEMPLATE_PERMISSIONsCountFiltered(string filterExpression);
		string CreateFORM_TEMPLATE_PERMISSION(FORM_TEMPLATE_PERMISSIONDto form_template_permission, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_PERMISSION(FORM_TEMPLATE_PERMISSIONDto form_template_permission, bool doSaveChanges = true);
		void UpdateFORM_TEMPLATE_PERMISSIONs(IEnumerable<FORM_TEMPLATE_PERMISSIONDto> form_template_permissions, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_PERMISSION(FORM_TEMPLATE_PERMISSIONDto form_template_permission, bool doSaveChanges = true);
		void DeleteFORM_TEMPLATE_PERMISSIONs(IEnumerable<FORM_TEMPLATE_PERMISSIONDto> form_template_permissions, bool doSaveChanges = true);


		#endregion FORM_TEMPLATE_PERMISSION CRUD Operations


		#region Account CRUD Operations


		IEnumerable<AccountDto> ReadAccounts();
		IEnumerable<AccountDto> ReadAccounts(Expression<Func<Account, bool>> filter);
		IEnumerable<AccountDto> ReadAccounts(ISpecification<Account> specification);
		IEnumerable<AccountDto> ReadAccountsPaged(int startIndex, int pageSize);
		IEnumerable<AccountDto> ReadAccountsFiltered(string sortExpression, string filterExpression);
		IEnumerable<AccountDto> ReadAccountsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		AccountDto ReadAccounts(string dtoKey);
		int AccountsCount();
		int AccountsCountFiltered(string filterExpression);
		string CreateAccount(AccountDto account, bool doSaveChanges = true);
		void UpdateAccount(AccountDto account, bool doSaveChanges = true);
		void UpdateAccounts(IEnumerable<AccountDto> accounts, bool doSaveChanges = true);
		void DeleteAccount(AccountDto account, bool doSaveChanges = true);
		void DeleteAccounts(IEnumerable<AccountDto> accounts, bool doSaveChanges = true);


		#endregion Account CRUD Operations


		#region IKASA_MenuRef CRUD Operations


		IEnumerable<IKASA_MenuRefDto> ReadIKASA_MenuRefs();
		IEnumerable<IKASA_MenuRefDto> ReadIKASA_MenuRefs(Expression<Func<IKASA_MenuRef, bool>> filter);
		IEnumerable<IKASA_MenuRefDto> ReadIKASA_MenuRefs(ISpecification<IKASA_MenuRef> specification);
		IEnumerable<IKASA_MenuRefDto> ReadIKASA_MenuRefsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_MenuRefDto> ReadIKASA_MenuRefsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_MenuRefDto> ReadIKASA_MenuRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IKASA_MenuRefDto ReadIKASA_MenuRefs(string dtoKey);
		int IKASA_MenuRefsCount();
		int IKASA_MenuRefsCountFiltered(string filterExpression);
		string CreateIKASA_MenuRef(IKASA_MenuRefDto ikasa_menuref, bool doSaveChanges = true);
		void UpdateIKASA_MenuRef(IKASA_MenuRefDto ikasa_menuref, bool doSaveChanges = true);
		void UpdateIKASA_MenuRefs(IEnumerable<IKASA_MenuRefDto> ikasa_menurefs, bool doSaveChanges = true);
		void DeleteIKASA_MenuRef(IKASA_MenuRefDto ikasa_menuref, bool doSaveChanges = true);
		void DeleteIKASA_MenuRefs(IEnumerable<IKASA_MenuRefDto> ikasa_menurefs, bool doSaveChanges = true);


		#endregion IKASA_MenuRef CRUD Operations


		#region IKASA_ERCase CRUD Operations


		IEnumerable<IKASA_ERCaseDto> ReadIKASA_ERCases();
		IEnumerable<IKASA_ERCaseDto> ReadIKASA_ERCases(Expression<Func<IKASA_ERCase, bool>> filter);
		IEnumerable<IKASA_ERCaseDto> ReadIKASA_ERCases(ISpecification<IKASA_ERCase> specification);
		IEnumerable<IKASA_ERCaseDto> ReadIKASA_ERCasesPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_ERCaseDto> ReadIKASA_ERCasesFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_ERCaseDto> ReadIKASA_ERCasesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IKASA_ERCaseDto ReadIKASA_ERCases(string dtoKey);
		int IKASA_ERCasesCount();
		int IKASA_ERCasesCountFiltered(string filterExpression);
		string CreateIKASA_ERCase(IKASA_ERCaseDto ikasa_ercase, bool doSaveChanges = true);
		void UpdateIKASA_ERCase(IKASA_ERCaseDto ikasa_ercase, bool doSaveChanges = true);
		void UpdateIKASA_ERCases(IEnumerable<IKASA_ERCaseDto> ikasa_ercases, bool doSaveChanges = true);
		void DeleteIKASA_ERCase(IKASA_ERCaseDto ikasa_ercase, bool doSaveChanges = true);
		void DeleteIKASA_ERCases(IEnumerable<IKASA_ERCaseDto> ikasa_ercases, bool doSaveChanges = true);


		#endregion IKASA_ERCase CRUD Operations


		#region EduSentence CRUD Operations


		IEnumerable<EduSentenceDto> ReadEduSentences();
		IEnumerable<EduSentenceDto> ReadEduSentences(Expression<Func<EduSentence, bool>> filter);
		IEnumerable<EduSentenceDto> ReadEduSentences(ISpecification<EduSentence> specification);
		IEnumerable<EduSentenceDto> ReadEduSentencesPaged(int startIndex, int pageSize);
		IEnumerable<EduSentenceDto> ReadEduSentencesFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduSentenceDto> ReadEduSentencesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduSentenceDto ReadEduSentences(string dtoKey);
		int EduSentencesCount();
		int EduSentencesCountFiltered(string filterExpression);
		string CreateEduSentence(EduSentenceDto edusentence, bool doSaveChanges = true);
		void UpdateEduSentence(EduSentenceDto edusentence, bool doSaveChanges = true);
		void UpdateEduSentences(IEnumerable<EduSentenceDto> edusentences, bool doSaveChanges = true);
		void DeleteEduSentence(EduSentenceDto edusentence, bool doSaveChanges = true);
		void DeleteEduSentences(IEnumerable<EduSentenceDto> edusentences, bool doSaveChanges = true);


		#endregion EduSentence CRUD Operations


		#region IKASA_UploadFile CRUD Operations


		IEnumerable<IKASA_UploadFileDto> ReadIKASA_UploadFiles();
		IEnumerable<IKASA_UploadFileDto> ReadIKASA_UploadFiles(Expression<Func<IKASA_UploadFile, bool>> filter);
		IEnumerable<IKASA_UploadFileDto> ReadIKASA_UploadFiles(ISpecification<IKASA_UploadFile> specification);
		IEnumerable<IKASA_UploadFileDto> ReadIKASA_UploadFilesPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_UploadFileDto> ReadIKASA_UploadFilesFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_UploadFileDto> ReadIKASA_UploadFilesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IKASA_UploadFileDto ReadIKASA_UploadFiles(string dtoKey);
		int IKASA_UploadFilesCount();
		int IKASA_UploadFilesCountFiltered(string filterExpression);
		string CreateIKASA_UploadFile(IKASA_UploadFileDto ikasa_uploadfile, bool doSaveChanges = true);
		void UpdateIKASA_UploadFile(IKASA_UploadFileDto ikasa_uploadfile, bool doSaveChanges = true);
		void UpdateIKASA_UploadFiles(IEnumerable<IKASA_UploadFileDto> ikasa_uploadfiles, bool doSaveChanges = true);
		void DeleteIKASA_UploadFile(IKASA_UploadFileDto ikasa_uploadfile, bool doSaveChanges = true);
		void DeleteIKASA_UploadFiles(IEnumerable<IKASA_UploadFileDto> ikasa_uploadfiles, bool doSaveChanges = true);


		#endregion IKASA_UploadFile CRUD Operations


		#region IKASA_ActUploadFile CRUD Operations


		IEnumerable<IKASA_ActUploadFileDto> ReadIKASA_ActUploadFiles();
		IEnumerable<IKASA_ActUploadFileDto> ReadIKASA_ActUploadFiles(Expression<Func<IKASA_ActUploadFile, bool>> filter);
		IEnumerable<IKASA_ActUploadFileDto> ReadIKASA_ActUploadFiles(ISpecification<IKASA_ActUploadFile> specification);
		IEnumerable<IKASA_ActUploadFileDto> ReadIKASA_ActUploadFilesPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_ActUploadFileDto> ReadIKASA_ActUploadFilesFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_ActUploadFileDto> ReadIKASA_ActUploadFilesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IKASA_ActUploadFileDto ReadIKASA_ActUploadFiles(string dtoKey);
		int IKASA_ActUploadFilesCount();
		int IKASA_ActUploadFilesCountFiltered(string filterExpression);
		string CreateIKASA_ActUploadFile(IKASA_ActUploadFileDto ikasa_actuploadfile, bool doSaveChanges = true);
		void UpdateIKASA_ActUploadFile(IKASA_ActUploadFileDto ikasa_actuploadfile, bool doSaveChanges = true);
		void UpdateIKASA_ActUploadFiles(IEnumerable<IKASA_ActUploadFileDto> ikasa_actuploadfiles, bool doSaveChanges = true);
		void DeleteIKASA_ActUploadFile(IKASA_ActUploadFileDto ikasa_actuploadfile, bool doSaveChanges = true);
		void DeleteIKASA_ActUploadFiles(IEnumerable<IKASA_ActUploadFileDto> ikasa_actuploadfiles, bool doSaveChanges = true);


		#endregion IKASA_ActUploadFile CRUD Operations


		#region EduSetting CRUD Operations


		IEnumerable<EduSettingDto> ReadEduSettings();
		IEnumerable<EduSettingDto> ReadEduSettings(Expression<Func<EduSetting, bool>> filter);
		IEnumerable<EduSettingDto> ReadEduSettings(ISpecification<EduSetting> specification);
		IEnumerable<EduSettingDto> ReadEduSettingsPaged(int startIndex, int pageSize);
		IEnumerable<EduSettingDto> ReadEduSettingsFiltered(string sortExpression, string filterExpression);
		IEnumerable<EduSettingDto> ReadEduSettingsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		EduSettingDto ReadEduSettings(string dtoKey);
		int EduSettingsCount();
		int EduSettingsCountFiltered(string filterExpression);
		string CreateEduSetting(EduSettingDto edusetting, bool doSaveChanges = true);
		void UpdateEduSetting(EduSettingDto edusetting, bool doSaveChanges = true);
		void UpdateEduSettings(IEnumerable<EduSettingDto> edusettings, bool doSaveChanges = true);
		void DeleteEduSetting(EduSettingDto edusetting, bool doSaveChanges = true);
		void DeleteEduSettings(IEnumerable<EduSettingDto> edusettings, bool doSaveChanges = true);


		#endregion EduSetting CRUD Operations


		#region IKASA_ERCase_EvalDet CRUD Operations


		IEnumerable<IKASA_ERCase_EvalDetDto> ReadIKASA_ERCase_EvalDets();
		IEnumerable<IKASA_ERCase_EvalDetDto> ReadIKASA_ERCase_EvalDets(Expression<Func<IKASA_ERCase_EvalDet, bool>> filter);
		IEnumerable<IKASA_ERCase_EvalDetDto> ReadIKASA_ERCase_EvalDets(ISpecification<IKASA_ERCase_EvalDet> specification);
		IEnumerable<IKASA_ERCase_EvalDetDto> ReadIKASA_ERCase_EvalDetsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_ERCase_EvalDetDto> ReadIKASA_ERCase_EvalDetsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_ERCase_EvalDetDto> ReadIKASA_ERCase_EvalDetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IKASA_ERCase_EvalDetDto ReadIKASA_ERCase_EvalDets(string dtoKey);
		int IKASA_ERCase_EvalDetsCount();
		int IKASA_ERCase_EvalDetsCountFiltered(string filterExpression);
		string CreateIKASA_ERCase_EvalDet(IKASA_ERCase_EvalDetDto ikasa_ercase_evaldet, bool doSaveChanges = true);
		void UpdateIKASA_ERCase_EvalDet(IKASA_ERCase_EvalDetDto ikasa_ercase_evaldet, bool doSaveChanges = true);
		void UpdateIKASA_ERCase_EvalDets(IEnumerable<IKASA_ERCase_EvalDetDto> ikasa_ercase_evaldets, bool doSaveChanges = true);
		void DeleteIKASA_ERCase_EvalDet(IKASA_ERCase_EvalDetDto ikasa_ercase_evaldet, bool doSaveChanges = true);
		void DeleteIKASA_ERCase_EvalDets(IEnumerable<IKASA_ERCase_EvalDetDto> ikasa_ercase_evaldets, bool doSaveChanges = true);


		#endregion IKASA_ERCase_EvalDet CRUD Operations


		#region IKASA_ERCase_Eval CRUD Operations


		IEnumerable<IKASA_ERCase_EvalDto> ReadIKASA_ERCase_Evals();
		IEnumerable<IKASA_ERCase_EvalDto> ReadIKASA_ERCase_Evals(Expression<Func<IKASA_ERCase_Eval, bool>> filter);
		IEnumerable<IKASA_ERCase_EvalDto> ReadIKASA_ERCase_Evals(ISpecification<IKASA_ERCase_Eval> specification);
		IEnumerable<IKASA_ERCase_EvalDto> ReadIKASA_ERCase_EvalsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_ERCase_EvalDto> ReadIKASA_ERCase_EvalsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_ERCase_EvalDto> ReadIKASA_ERCase_EvalsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IKASA_ERCase_EvalDto ReadIKASA_ERCase_Evals(string dtoKey);
		int IKASA_ERCase_EvalsCount();
		int IKASA_ERCase_EvalsCountFiltered(string filterExpression);
		string CreateIKASA_ERCase_Eval(IKASA_ERCase_EvalDto ikasa_ercase_eval, bool doSaveChanges = true);
		void UpdateIKASA_ERCase_Eval(IKASA_ERCase_EvalDto ikasa_ercase_eval, bool doSaveChanges = true);
		void UpdateIKASA_ERCase_Evals(IEnumerable<IKASA_ERCase_EvalDto> ikasa_ercase_evals, bool doSaveChanges = true);
		void DeleteIKASA_ERCase_Eval(IKASA_ERCase_EvalDto ikasa_ercase_eval, bool doSaveChanges = true);
		void DeleteIKASA_ERCase_Evals(IEnumerable<IKASA_ERCase_EvalDto> ikasa_ercase_evals, bool doSaveChanges = true);


		#endregion IKASA_ERCase_Eval CRUD Operations


		#region GoodVSDatum CRUD Operations


		IEnumerable<GoodVSDatumDto> ReadGoodVSData();
		IEnumerable<GoodVSDatumDto> ReadGoodVSData(Expression<Func<GoodVSDatum, bool>> filter);
		IEnumerable<GoodVSDatumDto> ReadGoodVSData(ISpecification<GoodVSDatum> specification);
		IEnumerable<GoodVSDatumDto> ReadGoodVSDataPaged(int startIndex, int pageSize);
		IEnumerable<GoodVSDatumDto> ReadGoodVSDataFiltered(string sortExpression, string filterExpression);
		IEnumerable<GoodVSDatumDto> ReadGoodVSDataPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		GoodVSDatumDto ReadGoodVSData(string dtoKey);
		int GoodVSDataCount();
		int GoodVSDataCountFiltered(string filterExpression);
		string CreateGoodVSDatum(GoodVSDatumDto goodvsdatum, bool doSaveChanges = true);
		void UpdateGoodVSDatum(GoodVSDatumDto goodvsdatum, bool doSaveChanges = true);
		void UpdateGoodVSData(IEnumerable<GoodVSDatumDto> goodvsdata, bool doSaveChanges = true);
		void DeleteGoodVSDatum(GoodVSDatumDto goodvsdatum, bool doSaveChanges = true);
		void DeleteGoodVSData(IEnumerable<GoodVSDatumDto> goodvsdata, bool doSaveChanges = true);


		#endregion GoodVSDatum CRUD Operations


		#region GoodVSDataDe CRUD Operations


		IEnumerable<GoodVSDataDeDto> ReadGoodVSDataDes();
		IEnumerable<GoodVSDataDeDto> ReadGoodVSDataDes(Expression<Func<GoodVSDataDe, bool>> filter);
		IEnumerable<GoodVSDataDeDto> ReadGoodVSDataDes(ISpecification<GoodVSDataDe> specification);
		IEnumerable<GoodVSDataDeDto> ReadGoodVSDataDesPaged(int startIndex, int pageSize);
		IEnumerable<GoodVSDataDeDto> ReadGoodVSDataDesFiltered(string sortExpression, string filterExpression);
		IEnumerable<GoodVSDataDeDto> ReadGoodVSDataDesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		GoodVSDataDeDto ReadGoodVSDataDes(string dtoKey);
		int GoodVSDataDesCount();
		int GoodVSDataDesCountFiltered(string filterExpression);
		string CreateGoodVSDataDe(GoodVSDataDeDto goodvsdatade, bool doSaveChanges = true);
		void UpdateGoodVSDataDe(GoodVSDataDeDto goodvsdatade, bool doSaveChanges = true);
		void UpdateGoodVSDataDes(IEnumerable<GoodVSDataDeDto> goodvsdatades, bool doSaveChanges = true);
		void DeleteGoodVSDataDe(GoodVSDataDeDto goodvsdatade, bool doSaveChanges = true);
		void DeleteGoodVSDataDes(IEnumerable<GoodVSDataDeDto> goodvsdatades, bool doSaveChanges = true);


		#endregion GoodVSDataDe CRUD Operations


		#region V_KPINormExtraField CRUD Operations


		IEnumerable<V_KPINormExtraFieldDto> ReadV_KPINormExtraFields();
		IEnumerable<V_KPINormExtraFieldDto> ReadV_KPINormExtraFields(Expression<Func<V_KPINormExtraField, bool>> filter);
		IEnumerable<V_KPINormExtraFieldDto> ReadV_KPINormExtraFields(ISpecification<V_KPINormExtraField> specification);
		IEnumerable<V_KPINormExtraFieldDto> ReadV_KPINormExtraFieldsPaged(int startIndex, int pageSize);
		IEnumerable<V_KPINormExtraFieldDto> ReadV_KPINormExtraFieldsFiltered(string sortExpression, string filterExpression);
		IEnumerable<V_KPINormExtraFieldDto> ReadV_KPINormExtraFieldsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		V_KPINormExtraFieldDto ReadV_KPINormExtraFields(string dtoKey);
		int V_KPINormExtraFieldsCount();
		int V_KPINormExtraFieldsCountFiltered(string filterExpression);
		string CreateV_KPINormExtraField(V_KPINormExtraFieldDto v_kpinormextrafield, bool doSaveChanges = true);
		void UpdateV_KPINormExtraField(V_KPINormExtraFieldDto v_kpinormextrafield, bool doSaveChanges = true);
		void UpdateV_KPINormExtraFields(IEnumerable<V_KPINormExtraFieldDto> v_kpinormextrafields, bool doSaveChanges = true);
		void DeleteV_KPINormExtraField(V_KPINormExtraFieldDto v_kpinormextrafield, bool doSaveChanges = true);
		void DeleteV_KPINormExtraFields(IEnumerable<V_KPINormExtraFieldDto> v_kpinormextrafields, bool doSaveChanges = true);


		#endregion V_KPINormExtraField CRUD Operations


		#region V_KPINorm CRUD Operations


		IEnumerable<V_KPINormDto> ReadV_KPINorms();
		IEnumerable<V_KPINormDto> ReadV_KPINorms(Expression<Func<V_KPINorm, bool>> filter);
		IEnumerable<V_KPINormDto> ReadV_KPINorms(ISpecification<V_KPINorm> specification);
		IEnumerable<V_KPINormDto> ReadV_KPINormsPaged(int startIndex, int pageSize);
		IEnumerable<V_KPINormDto> ReadV_KPINormsFiltered(string sortExpression, string filterExpression);
		IEnumerable<V_KPINormDto> ReadV_KPINormsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		V_KPINormDto ReadV_KPINorms(string dtoKey);
		int V_KPINormsCount();
		int V_KPINormsCountFiltered(string filterExpression);
		string CreateV_KPINorm(V_KPINormDto v_kpinorm, bool doSaveChanges = true);
		void UpdateV_KPINorm(V_KPINormDto v_kpinorm, bool doSaveChanges = true);
		void UpdateV_KPINorms(IEnumerable<V_KPINormDto> v_kpinorms, bool doSaveChanges = true);
		void DeleteV_KPINorm(V_KPINormDto v_kpinorm, bool doSaveChanges = true);
		void DeleteV_KPINorms(IEnumerable<V_KPINormDto> v_kpinorms, bool doSaveChanges = true);


		#endregion V_KPINorm CRUD Operations


		#region TeachTimeKpiRef CRUD Operations


		IEnumerable<TeachTimeKpiRefDto> ReadTeachTimeKpiRefs();
		IEnumerable<TeachTimeKpiRefDto> ReadTeachTimeKpiRefs(Expression<Func<TeachTimeKpiRef, bool>> filter);
		IEnumerable<TeachTimeKpiRefDto> ReadTeachTimeKpiRefs(ISpecification<TeachTimeKpiRef> specification);
		IEnumerable<TeachTimeKpiRefDto> ReadTeachTimeKpiRefsPaged(int startIndex, int pageSize);
		IEnumerable<TeachTimeKpiRefDto> ReadTeachTimeKpiRefsFiltered(string sortExpression, string filterExpression);
		IEnumerable<TeachTimeKpiRefDto> ReadTeachTimeKpiRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		TeachTimeKpiRefDto ReadTeachTimeKpiRefs(string dtoKey);
		int TeachTimeKpiRefsCount();
		int TeachTimeKpiRefsCountFiltered(string filterExpression);
		string CreateTeachTimeKpiRef(TeachTimeKpiRefDto teachtimekpiref, bool doSaveChanges = true);
		void UpdateTeachTimeKpiRef(TeachTimeKpiRefDto teachtimekpiref, bool doSaveChanges = true);
		void UpdateTeachTimeKpiRefs(IEnumerable<TeachTimeKpiRefDto> teachtimekpirefs, bool doSaveChanges = true);
		void DeleteTeachTimeKpiRef(TeachTimeKpiRefDto teachtimekpiref, bool doSaveChanges = true);
		void DeleteTeachTimeKpiRefs(IEnumerable<TeachTimeKpiRefDto> teachtimekpirefs, bool doSaveChanges = true);


		#endregion TeachTimeKpiRef CRUD Operations


		#region V_KPIRound CRUD Operations


		IEnumerable<V_KPIRoundDto> ReadV_KPIRounds();
		IEnumerable<V_KPIRoundDto> ReadV_KPIRounds(Expression<Func<V_KPIRound, bool>> filter);
		IEnumerable<V_KPIRoundDto> ReadV_KPIRounds(ISpecification<V_KPIRound> specification);
		IEnumerable<V_KPIRoundDto> ReadV_KPIRoundsPaged(int startIndex, int pageSize);
		IEnumerable<V_KPIRoundDto> ReadV_KPIRoundsFiltered(string sortExpression, string filterExpression);
		IEnumerable<V_KPIRoundDto> ReadV_KPIRoundsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		V_KPIRoundDto ReadV_KPIRounds(string dtoKey);
		int V_KPIRoundsCount();
		int V_KPIRoundsCountFiltered(string filterExpression);
		string CreateV_KPIRound(V_KPIRoundDto v_kpiround, bool doSaveChanges = true);
		void UpdateV_KPIRound(V_KPIRoundDto v_kpiround, bool doSaveChanges = true);
		void UpdateV_KPIRounds(IEnumerable<V_KPIRoundDto> v_kpirounds, bool doSaveChanges = true);
		void DeleteV_KPIRound(V_KPIRoundDto v_kpiround, bool doSaveChanges = true);
		void DeleteV_KPIRounds(IEnumerable<V_KPIRoundDto> v_kpirounds, bool doSaveChanges = true);


		#endregion V_KPIRound CRUD Operations


		#region MedicalTeachPoint CRUD Operations


		IEnumerable<MedicalTeachPointDto> ReadMedicalTeachPoints();
		IEnumerable<MedicalTeachPointDto> ReadMedicalTeachPoints(Expression<Func<MedicalTeachPoint, bool>> filter);
		IEnumerable<MedicalTeachPointDto> ReadMedicalTeachPoints(ISpecification<MedicalTeachPoint> specification);
		IEnumerable<MedicalTeachPointDto> ReadMedicalTeachPointsPaged(int startIndex, int pageSize);
		IEnumerable<MedicalTeachPointDto> ReadMedicalTeachPointsFiltered(string sortExpression, string filterExpression);
		IEnumerable<MedicalTeachPointDto> ReadMedicalTeachPointsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		MedicalTeachPointDto ReadMedicalTeachPoints(string dtoKey);
		int MedicalTeachPointsCount();
		int MedicalTeachPointsCountFiltered(string filterExpression);
		string CreateMedicalTeachPoint(MedicalTeachPointDto medicalteachpoint, bool doSaveChanges = true);
		void UpdateMedicalTeachPoint(MedicalTeachPointDto medicalteachpoint, bool doSaveChanges = true);
		void UpdateMedicalTeachPoints(IEnumerable<MedicalTeachPointDto> medicalteachpoints, bool doSaveChanges = true);
		void DeleteMedicalTeachPoint(MedicalTeachPointDto medicalteachpoint, bool doSaveChanges = true);
		void DeleteMedicalTeachPoints(IEnumerable<MedicalTeachPointDto> medicalteachpoints, bool doSaveChanges = true);


		#endregion MedicalTeachPoint CRUD Operations


		#region IKASA_ERExam CRUD Operations


		IEnumerable<IKASA_ERExamDto> ReadIKASA_ERExams();
		IEnumerable<IKASA_ERExamDto> ReadIKASA_ERExams(Expression<Func<IKASA_ERExam, bool>> filter);
		IEnumerable<IKASA_ERExamDto> ReadIKASA_ERExams(ISpecification<IKASA_ERExam> specification);
		IEnumerable<IKASA_ERExamDto> ReadIKASA_ERExamsPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_ERExamDto> ReadIKASA_ERExamsFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_ERExamDto> ReadIKASA_ERExamsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IKASA_ERExamDto ReadIKASA_ERExams(string dtoKey);
		int IKASA_ERExamsCount();
		int IKASA_ERExamsCountFiltered(string filterExpression);
		string CreateIKASA_ERExam(IKASA_ERExamDto ikasa_erexam, bool doSaveChanges = true);
		void UpdateIKASA_ERExam(IKASA_ERExamDto ikasa_erexam, bool doSaveChanges = true);
		void UpdateIKASA_ERExams(IEnumerable<IKASA_ERExamDto> ikasa_erexams, bool doSaveChanges = true);
		void DeleteIKASA_ERExam(IKASA_ERExamDto ikasa_erexam, bool doSaveChanges = true);
		void DeleteIKASA_ERExams(IEnumerable<IKASA_ERExamDto> ikasa_erexams, bool doSaveChanges = true);


		#endregion IKASA_ERExam CRUD Operations


		#region IKASA_ERExamScore CRUD Operations


		IEnumerable<IKASA_ERExamScoreDto> ReadIKASA_ERExamScores();
		IEnumerable<IKASA_ERExamScoreDto> ReadIKASA_ERExamScores(Expression<Func<IKASA_ERExamScore, bool>> filter);
		IEnumerable<IKASA_ERExamScoreDto> ReadIKASA_ERExamScores(ISpecification<IKASA_ERExamScore> specification);
		IEnumerable<IKASA_ERExamScoreDto> ReadIKASA_ERExamScoresPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_ERExamScoreDto> ReadIKASA_ERExamScoresFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_ERExamScoreDto> ReadIKASA_ERExamScoresPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IKASA_ERExamScoreDto ReadIKASA_ERExamScores(string dtoKey);
		int IKASA_ERExamScoresCount();
		int IKASA_ERExamScoresCountFiltered(string filterExpression);
		string CreateIKASA_ERExamScore(IKASA_ERExamScoreDto ikasa_erexamscore, bool doSaveChanges = true);
		void UpdateIKASA_ERExamScore(IKASA_ERExamScoreDto ikasa_erexamscore, bool doSaveChanges = true);
		void UpdateIKASA_ERExamScores(IEnumerable<IKASA_ERExamScoreDto> ikasa_erexamscores, bool doSaveChanges = true);
		void DeleteIKASA_ERExamScore(IKASA_ERExamScoreDto ikasa_erexamscore, bool doSaveChanges = true);
		void DeleteIKASA_ERExamScores(IEnumerable<IKASA_ERExamScoreDto> ikasa_erexamscores, bool doSaveChanges = true);


		#endregion IKASA_ERExamScore CRUD Operations


		#region IKASA_ERExamStage CRUD Operations


		IEnumerable<IKASA_ERExamStageDto> ReadIKASA_ERExamStages();
		IEnumerable<IKASA_ERExamStageDto> ReadIKASA_ERExamStages(Expression<Func<IKASA_ERExamStage, bool>> filter);
		IEnumerable<IKASA_ERExamStageDto> ReadIKASA_ERExamStages(ISpecification<IKASA_ERExamStage> specification);
		IEnumerable<IKASA_ERExamStageDto> ReadIKASA_ERExamStagesPaged(int startIndex, int pageSize);
		IEnumerable<IKASA_ERExamStageDto> ReadIKASA_ERExamStagesFiltered(string sortExpression, string filterExpression);
		IEnumerable<IKASA_ERExamStageDto> ReadIKASA_ERExamStagesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
		IKASA_ERExamStageDto ReadIKASA_ERExamStages(string dtoKey);
		int IKASA_ERExamStagesCount();
		int IKASA_ERExamStagesCountFiltered(string filterExpression);
		string CreateIKASA_ERExamStage(IKASA_ERExamStageDto ikasa_erexamstage, bool doSaveChanges = true);
		void UpdateIKASA_ERExamStage(IKASA_ERExamStageDto ikasa_erexamstage, bool doSaveChanges = true);
		void UpdateIKASA_ERExamStages(IEnumerable<IKASA_ERExamStageDto> ikasa_erexamstages, bool doSaveChanges = true);
		void DeleteIKASA_ERExamStage(IKASA_ERExamStageDto ikasa_erexamstage, bool doSaveChanges = true);
		void DeleteIKASA_ERExamStages(IEnumerable<IKASA_ERExamStageDto> ikasa_erexamstages, bool doSaveChanges = true);


		#endregion IKASA_ERExamStage CRUD Operations


	}
}
#pragma warning restore 1591
