using System;
using System.Linq;
using System.Linq.Expressions;
using System.Collections;
using System.Collections.Generic;
//using KMU.EduActivity.ApplicationLayer.Assemblers;
using KMU.EduActivity.ApplicationLayer.DTO;
using KMU.EduActivity.Infrastructure.Data.Repositories;
using KMU.EduActivity.ApplicationLayer.Assemblers;
using KMU.EduActivity.DomainModel.Entities;
using System.Data;
using System.Data.Common;
using Telerik.OpenAccess.Data.Common;
using System.Threading;
using System.Globalization;
//using Oracle.DataAccess.Client;
using System.Data.OracleClient;
using System.Web;
using System.Diagnostics;
using System.Data.SqlClient;
//using AppFramework.Utilities;
using System.IO;
using AppFramework.ComLib;
using System.Web.Configuration;
//using KMU.EduActivity.DomainModel.Contracts;
//using KMU.EduActivity.DomainModel.Entities;
//using KMU.EduActivity.Infrastructure.Data.Repositories;

namespace KMU.EduActivity.ApplicationLayer.Services
{
  public class EduActivityAppService : IEduActivityAppService
  {
      #region Private Members

      //private IEduActivityContextService service =new EduActivityContextService();
      //private EduActivityContextService service = new EduActivityContextService();

      private const string MemberIDOwner = "EduAct_MemberID";
      private const string EduTeamMemberIDOwner = "EduAct_EduTeamMemberID";
      private const string EduTeamStopIDOwner = "EduAct_EduTeamStopID";
      private const string EduTermIDOwner = "EduAct_EduTermID";
      private const string EduStopActSchedulerID = "EduAct_StopActScheduleID";
      private const string EduActTopicID = "EduAct_EduActTopicID";   

      #endregion Private Members

      #region Ctor 會議記錄報告表格

      public EduActivityAppService ()
      {
      }

      #endregion Ctor 會議記錄報告表格

      #region IDisposable Members

      public void Dispose()
      {
          //dispose all resources
          //service.Dispose();
      }

      #endregion IDisposable Members

      #region IEduActivityAppService Members

      //public IEnumerable<ERPatientDto> GetPatients()
      //{
      //  return service.GetPatients();
      //}

      #region 共用

      public string GetCurrentMemeberTypeByEmpCode(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              DateTime nowdate = DateTime.Now.Date;
              MemberDto m = service.ReadMembers(c => c.IsHospMember == empcode && c.DateFrom <= nowdate && c.DateTo >= nowdate).FirstOrDefault();
              if (m != null)
              {
                  return m.MemberType;
              }
              else
              {
                  m = service.ReadMembers(c => c.IsHospMember == empcode && c.DateFrom <= nowdate).OrderByDescending(c => c.DateTo).FirstOrDefault();

                  if (m != null)
                  {
                      return m.MemberType;
                  }
                  else
                  {
                      return null;
                  }
              }
          }
      }

      public void WriteLoginLog(string empcode, bool issuccess,string clientip)
      {
//          using (EduActivityContextService service = new EduActivityContextService())
//          {
//              try
//              {
//                  LoginLog log = new LoginLog();
//                  log.EmpCode = empcode;
//                  log.LoginTime = DateTime.Now;
//                  log.IsSuccess = issuccess;
//                  log.LoginIP = clientip;


//                  string intsql = @"INSERT INTO www_EduActivity.dbo.LoginLog
//(EmpCode, LoginTime, IsSuccess, LoginIP) 
//VALUES (@EmpCode, @LoginTime, @IsSuccess, @LoginIP)
//                              ";
//                  List<SqlParameter> sqlparms = new List<SqlParameter>();
//                  sqlparms.Add(new SqlParameter("EmpCode", GetDBObject(log.EmpCode)));
//                  sqlparms.Add(new SqlParameter("LoginTime", GetDBObject(log.LoginTime)));
//                  sqlparms.Add(new SqlParameter("IsSuccess", GetDBObject(log.IsSuccess)));
//                  sqlparms.Add(new SqlParameter("LoginIP", GetDBObject(log.LoginIP)));
//                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());
                  
//                  //service.UnitOfWork.Add(log);


//                  service.UnitOfWork.SaveChanges();

//              }
//              catch
//              {

//              }
//          }

      }

      public List<MemberDto> GetTermJobMembers(string jobcode, DateTime thedate,string deptcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<MemberDto> result = new List<MemberDto>();
              var memdata = (from mem in service.UnitOfWork.Members
                             join rundown in service.UnitOfWork.EduTeamMemberRundowns
                             on mem.MemberID equals rundown.MemberID
                             join term in service.UnitOfWork.EduTerms
                             on rundown.EduTermID equals term.EduTermID
                             where term.JobCode == jobcode && term.DateFrom.Date <= thedate && term.DateTo.Date >= thedate
                             && (term.DepCode == deptcode || term.Department == deptcode)
                             select mem).Distinct().ToList();

              MemberAssembler asm = new MemberAssembler();
              result = asm.Assemble(memdata).ToList();

              return result;
          }
      }

      public List<V_KmuEmpDto> GetDeptEmp(string deptcode, string hospcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              //var list = service.UnitOfWork.Fn_GetChildDeptbyCode(deptcode, hospcode);
              //List<string> depts = list.Select(c=> c.depcode).ToList();
              //return service.ReadV_KmuEmps(c => c.Hospcode == hospcode && depts.Contains(c.Deptcode) && (c.Enddate == null || c.Enddate > DateTime.Now.AddMonths(-2))).ToList();
              return service.ReadV_KmuEmps(c => c.Loccode == deptcode && (c.Enddate == null || c.Enddate > DateTime.Now.AddMonths(-2))).ToList();
          }
      }

      public List<string> GetChildDepts(string deptcode)
      {
          return GetChildDepts(deptcode, "KMUH");
      }

      public List<string> GetChildDepts(string deptcode, string hospcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
          var list = service.UnitOfWork.Fn_GetChildDeptbyCode(deptcode, hospcode);
          List<string> depts = list.Select(c => c.depcode).ToList();
          if (!depts.Contains(deptcode))
          {
              depts.Add(deptcode);
          }
          return depts;
          }
      }

      public void WriteLog(string functionname, string msg)
      {
          WriteLog(functionname, msg, null);
      }

      public void WriteLog(string functionname, string msg, string parm)
      {
          SchedulerLogDto dto = new SchedulerLogDto();
          dto.FunctionName = functionname;
          dto.LogContent = msg;
          dto.LogTime = DateTime.Now;
          dto.LogParameter = parm;
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string intsql = @"insert into dbo.SchedulerLog (functionname,logcontent,logtime,logparameter)
                              values (@functionname,@logcontent,@logtime,@logparameter)
                              ";

              (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql,
               new SqlParameter("functionname", GetDBObject(functionname))
               , new SqlParameter("logcontent", GetDBObject(msg))
               , new SqlParameter("logtime", GetDBObject(DateTime.Now))
               , new SqlParameter("logparameter", GetDBObject(parm))
               );

              service.UnitOfWork.SaveChanges();
              //service.CreateSchedulerLog(dto);
          }
      }

      public List<AccountRoleDto> GetAuthRole(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<AccountRoleDto> list = service.ReadAccountRoles(c => c.EmpCode == empcode).ToList();

              DateTime nowdate = DateTime.Now.Date;

              int countstudent = (from mem in service.UnitOfWork.Members
                                  join mtype in service.UnitOfWork.V_CodeRefs
                                  on new { m = mem.MemberType, t = "EduAct_JobCode" } equals new { m = mtype.Code, t = mtype.CodeType }
                                  where 
                                  (mtype.Des2 != "X" || mtype.Des2 == null) && 
                                  mem.IsHospMember == empcode 
                                  && mem.DateFrom <= nowdate && mem.DateTo >= nowdate
                                  select mem
                                 ).Count();

              if (countstudent > 0)
              {
                  AccountRoleDto trole = new AccountRoleDto();
                  trole.EmpCode = empcode;
                  trole.RoleID = "Student";
                  list.Add(trole);
              }

              int counttteacher = (from mem in service.UnitOfWork.Members
                                  join mtype in service.UnitOfWork.V_CodeRefs
                                  on mem.MemberType equals mtype.Code
                                  where mtype.Des2 == "X"
                                  && mem.IsHospMember == empcode && mem.DateFrom <= nowdate && mem.DateTo >= nowdate
                                  select mem
                                 ).Count();

              if (counttteacher > 0)
              {
                  AccountRoleDto trole = new AccountRoleDto();
                  trole.EmpCode = empcode;
                  trole.RoleID = "TTeacher";
                  list.Add(trole);
              }


              if (list.Count(c => c.RoleID == "Teacher") == 0 && service.ReadEduRefTeachers(c => c.TeacherID == empcode && c.TeacherType != "Intern" && c.TeacherID != null).Count() > 0)
              {
                  AccountRoleDto trole = new AccountRoleDto();
                  trole.EmpCode = empcode;
                  trole.RoleID = "Teacher";
                  list.Add(trole);
              }

              return list;
          }
      }

      public List<EduMenuDto> GetMenu(string empcode, List<string> roles,string jobcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              if (empcode == null)
              {
                  return new List<EduMenuDto>();
              }
              else
              {
                  //List<string> roles = service.ReadAccountRoles(c => c.EmpCode == empcode).Select(c => c.RoleID).ToList();

                  List<int> auths = service.ReadAuthMenus(c =>
                      (roles.Contains(c.AuthID) && c.AuthType == "Role")
                      || (c.AuthID == empcode && c.AuthType == "Personal")
                      || (c.AuthID == jobcode && c.AuthType == "JobCode")
                      || (c.AuthType == "All")
                      ).Select(c => c.MenuID).ToList();

                  return service.ReadEduMenus(c => auths.Contains(c.MenuID)).OrderBy(c => c.DisplayOrder).ToList();
              }
          }
      }

      public List<string> GetDeptSecDeps(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string> result = service.UnitOfWork.DepSecData.Where(c => c.Emp_Code == empcode).Select(c => c.DEPT_CODE).ToList();
              return result;
          }

      }

      public IEnumerable<T> FlattenHierarchy<T>(T node,
                                   Func<T, IEnumerable<T>> getChildEnumerator)
      {
          yield return node;
          if (getChildEnumerator(node) != null)
          {
              foreach (var child in getChildEnumerator(node))
              {
                  foreach (var childOrDescendant
                            in FlattenHierarchy(child, getChildEnumerator))
                  {
                      yield return childOrDescendant;
                  }
              }
          }
      }

      public List<string> GetEmpAllTeamCode(string teamcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string> teamcodelist = new List<string>();

              EduTeamDto dto = service.ReadEduTeams(c => c.EduTeamCode == teamcode).FirstOrDefault();
              if (dto != null)
              {
                  teamcodelist.Add(dto.EduTeamCode);

                  while (dto.ParentEduTeamCode != null)
                  {
                      dto = service.ReadEduTeams(c => c.EduTeamCode == dto.ParentEduTeamCode).FirstOrDefault();
                      if (dto != null)
                      {
                          teamcodelist.Add(dto.EduTeamCode);
                      }
                      else
                      {
                          break;
                      }
                  }
              }

              return teamcodelist;
          }
      }

      public List<string> GetHierarchyTeamCode(string teamcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduTeamRepository trep = new EduTeamRepository(service.UnitOfWork);

              EduTeamMemberRepository etmrep = new EduTeamMemberRepository(service.UnitOfWork);


              List<string> teamcodelist = new List<string>();
              if (teamcode != null && teamcode != "")
              {
                  EduTeam tt = trep.Find(c => c.EduTeamCode == teamcode).FirstOrDefault();
                  if (tt != null)
                  {
                      teamcodelist = FlattenHierarchy<EduTeam>(tt, c => c.EduTeams).Select(c => c.EduTeamCode).ToList();
                  }
              }

              return teamcodelist;
          }
      }

      public string GetSerialNo(string serialowner)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string serialno = "                                                      ";

              //string guid = Guid.NewGuid().ToString();
              //serialno = guid.Substring(guid.LastIndexOf('-'));          
              EduActivityContext cont = new EduActivityContext();

              OAParameter parameterInSerialType = new OAParameter();
              parameterInSerialType.ParameterName = "inSerialType";
              parameterInSerialType.Value = "ID";


              OAParameter parameterInSerialOwner = new OAParameter();
              parameterInSerialOwner.ParameterName = "inSerialOwner";
              if (serialowner != null)
              {
                  parameterInSerialOwner.Value = serialowner;
              }
              else
              {
                  parameterInSerialOwner.DbType = DbType.String;
                  parameterInSerialOwner.Value = DBNull.Value;
              }

              OAParameter parameterOutSerialNo = new OAParameter();
              parameterOutSerialNo.ParameterName = "outSerialNo";
              parameterOutSerialNo.Direction = ParameterDirection.InputOutput;
              if (serialno != null)
              {
                  parameterOutSerialNo.Value = serialno;
              }
              else
              {
                  parameterOutSerialNo.DbType = DbType.String;
                  parameterOutSerialNo.Value = DBNull.Value;
              }
              try
              {
                  int queryResult = cont.ExecuteNonQuery("TicketCoding.dbo.[pr_get_serial_no]", CommandType.StoredProcedure, parameterInSerialType, parameterInSerialOwner, parameterOutSerialNo);
                  serialno = parameterOutSerialNo.Value == DBNull.Value
                      ? default(string)
                      : (string)parameterOutSerialNo.Value;

                  cont.SaveChanges();
                  service.UnitOfWork.SaveChanges();
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();

              }

              return serialno;
          }
      }

      public List<V_CodeRefDto> GetCodeRefs(string codetype)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadV_CodeRefs(c => c.CodeType == codetype).ToList();
          }
      }

      public static List<V_CodeRefDto> GetCodeRefsStatic(string codetype)
      {
          EduActivityContextService service = new EduActivityContextService();

          List<V_CodeRefDto> result = service.ReadV_CodeRefs(c => c.CodeType == codetype).OrderBy(c => c.ShowSeq).ToList();
          service.Dispose();
          return result;
      }

      public List<SelectKmuDoctorDto> GetKmuDoctor(string empcode, string empname)
      {

          //ApConnService.GetDBConnMethodClient serviceclient = new ApConnService.GetDBConnMethodClient();

          //string connStr = serviceclient.GetDBConnectionWithHospCode("KMUH", "ora92", "HRDataTrans_PSN").ConnectionString;

          //connStr = connStr.Replace("Provider=OraOLEDB.Oracle.1;", "");

          //OracleConnection conn = new OracleConnection(connStr);

          //OracleDataAdapter adp = new OracleDataAdapter("select a.emp_code,a.emp_name,a.dept_code,case when emp_status is null then 'KMUH' when emp_status='3' then 'KMHK' when emp_status='4' then 'KMTTH' when emp_status='5' then 'KMCH' when emp_status='6' then 'KGSH' end || b.dept_name as dept_name,a.loc_code,a.job_code, case when a.end_date is null or a.end_date >sysdate then '' else '1' end as empstatus from kmuemp a left join kmudep b on a.dept_code = b.dept_code where (a.end_date is null or a.end_date>sysdate-480 ) and (:empname = '' or emp_name like concat(CONCAT('%',:empname1),'%')) and (:empcode = '' or emp_code like Concat(CONCAT('%',:empcode1),'%'))", conn);
          //adp.SelectCommand.Parameters.AddWithValue(":empcode", empcode);
          //adp.SelectCommand.Parameters.AddWithValue(":empcode1", empcode);
          //adp.SelectCommand.Parameters.AddWithValue(":empname", empname);
          //adp.SelectCommand.Parameters.AddWithValue(":empname1", empname);
          //DataTable dt = new DataTable();
          //adp.Fill(dt);

          //List<SelectKmuDoctorDto> list = new List<SelectKmuDoctorDto>();
          //foreach (DataRow dr in dt.Rows)
          //{

          //    SelectKmuDoctorDto emp = new SelectKmuDoctorDto();
          //    emp.code = dr["emp_code"].ToString();
          //    emp.name = dr["emp_name"].ToString();
          //    emp.deptcode = dr["dept_code"].ToString();
          //    emp.deptname = dr["dept_name"].ToString();
          //    emp.displayname = emp.code + " " + emp.name + "(" + emp.deptname + ")" + dr["empstatus"].ToString().Replace("1", "(離職)");
          //    list.Add(emp);
          //}

          //return list;

          using (EduActivityContext service = new EduActivityContext())
          {

              List<SelectKmuDoctorDto> list = service.ExecuteQuery<SelectKmuDoctorDto>(@"select a.empcode as code,a.empname as name,a.deptcode as deptcode, a.hospcode + a.deptname as deptname
, a.empcode+' '+a.empname+ '('+a.deptname+')' as displayname
from V_KmuEmp a 
where (a.enddate is null or a.enddate>getdate()-480 ) 
and (@empname ='' or empname like '%'+ @empname + '%') and (@empcode ='' or empcode  like '%'+ @empcode+'%' )", new OAParameter("@empname", empname), new OAParameter("@empcode", empcode)).ToList();

              return list;
          }



          //SelectKmuDoctorRepository rep = new SelectKmuDoctorRepository(service.UnitOfWork);
          //SelectKmuDoctorAssembler asm = new SelectKmuDoctorAssembler();

          //rep.empcode = empcode;
          //rep.empname = empname;

          //return asm.Assemble(rep.GetAll()).ToList();
      }

      public V_departmentDto GetDepartment(string hospcode, string deptcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadV_departments(c => c.Hospcode == hospcode && c.Deptcode == deptcode).FirstOrDefault();
          }
      }

      public V_KmuEmpDto GetVKmuEmpByEmpCode(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == empcode).FirstOrDefault();
              return emp;
          }
      }

      #endregion

      #region 權限管理
      
      public List<AccountRoleDto> GetAccountRoles(string empcode,string roleid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var data = (from r in service.UnitOfWork.AccountRoles
                          join emp in service.UnitOfWork.V_KmuEmps
                          on r.EmpCode equals emp.Empcode
                          join role in service.UnitOfWork.AuthRoles
                          on r.RoleID equals role.RoleID
                          where
                          (empcode == null || empcode == "" || r.EmpCode == empcode)
                          &&
                          (roleid == null || roleid == "" || r.RoleID == roleid)
                          && role.AllowSetting == true
                          orderby r.EmpCode
                          select new { r, emp, role }).ToList();
              AccountRoleAssembler asm = new AccountRoleAssembler();
              List<AccountRoleDto> result = new List<AccountRoleDto>();

              foreach (var d in data)
              {
                  AccountRoleDto dto = asm.Assemble(d.r);
                  dto.EmpName = d.emp.Empname;
                  dto.RoleName = d.role.RoleName;
                  result.Add(dto);
              }

              return result;
          }
          
      }

      public string AddAccountRole(string empcode, string roleid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string result = null;

              if (service.UnitOfWork.AccountRoles.Count(c => c.EmpCode == empcode && c.RoleID == roleid) > 0)
              {
                  return "本職稱已具備本角色權限";
              }

              try
              {
                  AccountRole additem = new AccountRole();
                  additem.EmpCode = empcode;
                  additem.RoleID = roleid;
                  service.UnitOfWork.Add(additem);
                  service.UnitOfWork.SaveChanges();
              }
              catch (Exception ex)
              {
                  result = ex.Message;
              }


              return result;
          }
      }

      public string RemoveAccountRole(string empcode, string roleid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string result = null;


              try
              {
                  AccountRole additem = service.UnitOfWork.AccountRoles.Where(c => c.EmpCode == empcode && c.RoleID == roleid).FirstOrDefault();
                  if (additem != null)
                  {
                      service.UnitOfWork.Delete(additem);
                  }

                  service.UnitOfWork.SaveChanges();
              }
              catch (Exception ex)
              {
                  result = ex.Message;
              }


              return result;
          }
      }

      public List<AuthRoleDto> GetAuthRoles()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadAuthRoles(c => c.AllowSetting == true).ToList();
          }
      }

      #endregion

      #region 個人首頁

      public int CheckHasPassPortUnChecked(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              int itemcount = service.UnitOfWork.PassPortStudentApplicationItems.Count(c => c.DesignationTeacherNumber == empcode && c.CheckStatus == "1");
              return itemcount;
          }
      }

      public List<MailListDto> GetReocrdWritterDailyAlert(DateTime thedate)
      {
          EduActivityContext context = new EduActivityContext();
          string sql = @"select distinct b.empcode as EmpCode, b.empname as EmpName , b.email as Email, c.ActName+'('+ left(convert(varchar,c.TimeFrom,120),16)+'~'+ left(right(convert(varchar,c.TimeTo,120),8),5) +')' as OtherParam1 from EduActTarget a inner join V_KmuEmp b on a.TargetID = b.empcode
inner join EduStopActSchedule c on a.EduStopActScheduleID = c.EduStopActScheduleID
where a.RoleType = '008' and  a.EduStopActScheduleID in
(
select EduStopActScheduleID from EduStopActSchedule a where 
exists (select 1 from EduActTarget b where b.EduStopActScheduleID = a.EduStopActScheduleID and b.RoleType = '008' and b.TargetType = 'EmpCode' )
and not exists (select 1 from RecordEduActRef c where c.EduStopActScheduleID = a.edustopactscheduleid )
and not exists (select 1 from EduStopActAttachment d where d.EduStopActScheduleID = a.edustopactscheduleid  )
and EnableRec = 1 and convert(varchar(10),a.timefrom ,111) = '" + thedate.ToString("yyyy/MM/dd") + @"' 
and c.timefrom >= getdate()-30
)";

          

          List<MailListDto> list = context.ExecuteQuery<MailListDto>(sql).ToList();

          return list;

      }

      public List<MailListDto> GetRecordSignerAlert()
      {
          EduActivityContext context = new EduActivityContext();
          string sql = @"select distinct c.empcode as EmpCode, c.empname as EmpName , c.email as Email from RecordInsViewer a 
inner join dbo.RecordInstance b on a.InstanceID = b.InstanceID
inner join V_KmuEmp c on a.Viewer = c.empcode
where not exists (select 1 from RecordInsViewer d where d.InstanceID = a.instanceid and d.ViewOrder<a.vieworder and d.ViewStatus is null)
and a.ViewStatus is null and b.Status = '2' and (c.enddate is null or c.enddate >getdate())
and b.createdate >= getdate()-20

";


          List<MailListDto> list = context.ExecuteQuery<MailListDto>(sql).ToList();

          return list;
      }
      
      

      public List<ToDoListDto> GetToDoList(string membercode,bool displayAll)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {

          List<MemberDto> memberlist = service.ReadMembers(c => c.IsHospMember == membercode).ToList();
          List<string> termidlist = new List<string>();
          List<string> memberids = new List<string>();

          foreach (MemberDto dto in memberlist)
          {
              List<EduTeamMemberRundownDto> rundownlist = service.ReadEduTeamMemberRundowns(c => c.MemberID == dto.MemberID).ToList();

              foreach (EduTeamMemberRundownDto runddown in rundownlist)
              {
                  if (!termidlist.Contains(runddown.EduTermID))
                  {
                      termidlist.Add(runddown.EduTermID);
                  }
              }

              memberids.Add(dto.MemberID);
          }

          List<ToDoListDto> result = new List<ToDoListDto>();

          //帶入審核臨床照護資料
          int checkcount = CheckHasPassPortUnChecked(membercode);
          if (checkcount > 0)
          {
              ToDoListDto newitem = new ToDoListDto();
              newitem.EduTermName = "--";
              newitem.DeptName = "--";
              newitem.TemplateName = "<span style=\"color:blue ; font-size: 12pt;\">您有" + checkcount.ToString() + "筆待審核的臨床照護分級資料</span>";
              newitem.ActionName = "審核";
              newitem.ActionUrl = "PassPortCheckForTeacherCopy.aspx";
              result.Add(newitem);
          }

          //帶入審核護照資料
          checkcount = CheckHasEduPassportUnChecked(membercode);
          if (checkcount > 0)
          {
              ToDoListDto newitem = new ToDoListDto();
              newitem.EduTermName = "--";
              newitem.DeptName = "--";
              newitem.TemplateName = "<span style=\"color:blue ; font-size: 12pt;\">您有" + checkcount.ToString() + "筆待審核的學習護照資料</span>";
              newitem.ActionName = "審核";
              newitem.ActionUrl = "EduPassportInsItemTeacherView.aspx";
              result.Add(newitem);
          }

          var ikercheck = GetNeedSignERCase(membercode);
              if(ikercheck.Count >0)
              {
                  ToDoListDto newitem = new ToDoListDto();
                  newitem.EduTermName = "--";
                  newitem.DeptName = "--";
                  newitem.TemplateName = "<span style=\"color:blue ; font-size: 12pt;\">您有" + ikercheck.Count.ToString() + "筆待審核的急診案例</span>";
                  newitem.ActionName = "審核";
                  newitem.ActionUrl = "iKASA/main.aspx?function=152&clear=1";
                  result.Add(newitem);
              }

              EduStopActScheduleAssembler actasm = new EduStopActScheduleAssembler();

              var recorddata = actasm.Assemble(from sche in service.UnitOfWork.EduStopActSchedules
                                               where sche.EduActTargets.Count(c => c.TargetID == membercode && c.RoleType == "008" && c.TargetType == "EmpCode") > 0
                                               && service.UnitOfWork.RecordEduActRefs.Count(c => c.EduStopActScheduleID == sche.EduStopActScheduleID) == 0
                                               && sche.EduStopActAttachments.Count() == 0
                                               && sche.EnableRec != null && sche.EnableRec == true
                                               select sche);

          foreach (EduStopActScheduleDto sche in recorddata)
          {
              string title = "<span style=\"color:blue ; font-size: 12pt;\">";
              title += "(" + sche.TimeFrom.ToString("yyyy/MM/dd HH:mm");
              title += " ~ " + sche.TimeTo.ToString("HH:mm") + ")";
              title += "<b>" + sche.ActName + "</b> 的會議記錄";
              title += "</span>";

              ToDoListDto newitem = new ToDoListDto();
              newitem.EduTermName = "--";
              newitem.DeptName = "--";
              newitem.TemplateName = title;
              newitem.ActionName = "撰寫";
              newitem.ActionUrl = "RecordManage.aspx?ScheduleID=" + sche.EduStopActScheduleID;
              result.Add(newitem);
          }

          var recsigndata = from rec in service.UnitOfWork.RecordInstances
                            join view in service.UnitOfWork.RecordInsViewers
                            on rec.InstanceID equals view.InstanceID
                            where view.Viewer == membercode && service.UnitOfWork.RecordInsViewers.Count(c => c.InstanceID == rec.InstanceID && c.ViewOrder < view.ViewOrder && c.ViewStatus == null) == 0
                            && view.ViewStatus == null
                            && rec.Status == "2"
                            select new { rec, view };

          foreach (var rec in recsigndata)
          {
              string title = "<span style=\"color:blue ; font-size: 12pt;\">";
              title += "(" + rec.rec.Sdate.Value.ToString("yyyy/MM/dd HH:mm");
              title += " ~ " + rec.rec.Edate.Value.ToString("HH:mm") + ")";
              title += "<b>" + rec.rec.Title + "</b>  會議記錄須簽核";
              title += "</span>";
              ToDoListDto newitem = new ToDoListDto();
              newitem.EduTermName = "--";
              newitem.DeptName = "--";
              newitem.TemplateName = title;
              newitem.ActionName = "簽核";
              newitem.ActionUrl = "RecordEdit.aspx?InstanceID=" + rec.rec.InstanceID + "&EmpCode=" + membercode;
              result.Add(newitem);
          }

          HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();
          //List<HtmlFormUtility.FORM_INSTANCES> instances = vc.GetFormInstanceByTargetID(membercode);

          var instances = (from ins in service.UnitOfWork.FORM_INSTANCEs
                           join term in service.UnitOfWork.EduTerms
                           on ins.INHOSPID equals term.EduTermID
                           join setting in service.UnitOfWork.EduFormTemplateLists
                           on ins.INSTANCE_REMARK equals setting.FTListID
                           join dept in service.UnitOfWork.V_departments
                           on new { hospcode = "KMUH", deptcode = term.DepCode } equals new { hospcode = dept.Hospcode, deptcode = dept.Deptcode }
                           into tempdept
                           from dept in tempdept.DefaultIfEmpty()
                           join mem in service.UnitOfWork.Members
                           on ins.EvalTargetID equals mem.MemberID
                           into tempmem
                           from mem in tempmem.DefaultIfEmpty()
                           join exins in service.UnitOfWork.FORM_INSTANCEs
                           on new { parentid = ins.PARENT_INSTANCE_ID, instanceid = ins.INSTANCE_ID - 1 } equals new { parentid = exins.PARENT_INSTANCE_ID, instanceid = exins.INSTANCE_ID }
                           into tempexins
                           from exins in tempexins.DefaultIfEmpty()
                           join exemp in service.UnitOfWork.V_KmuEmps
                           on exins.TargetID equals exemp.Empcode
                           into tempexemp
                           from exemp in tempexemp.DefaultIfEmpty()
                           join nextins in service.UnitOfWork.FORM_INSTANCEs
                           on new { parentid = ins.PARENT_INSTANCE_ID, instanceid = ins.INSTANCE_ID + 1 } equals new { parentid = nextins.PARENT_INSTANCE_ID, instanceid = nextins.INSTANCE_ID }
                           into tempnextins
                           from nextins in tempnextins.DefaultIfEmpty()
                           join nextemp in service.UnitOfWork.V_KmuEmps
                           on nextins.TargetID equals nextemp.Empcode
                           into tempnextemp
                           from nextemp in tempnextemp.DefaultIfEmpty()
                           where ins.FORM_INSTANCE_TARGETs.Count(c =>
                 (c.TargetID == membercode)
                 && (c.Status == '0'
                     //&& (
                     //c.FORM_INSTANCE.ExpireDate == null
                     //||
                     //(c.FORM_INSTANCE.ExpireDate != null && c.FORM_INSTANCE.ExpireDate.Value >= DateTime.Now.Date))
                 )) > 0
                           //&& (exins == null || (exins != null && exins.Status != '0'))
                           && service.UnitOfWork.FORM_INSTANCEs.Count(c => c.PARENT_INSTANCE_ID == ins.PARENT_INSTANCE_ID && c.INSTANCE_ID < ins.INSTANCE_ID && c.Status == '0') == 0
                           orderby ins.INSTANCE_CREATE_DATETIME, ins.ExpireDate
                           select new { ins.INHOSPID, ins.TEMPLATE_ID, ins.INSTANCE_CREATE_DATETIME, ins.ExpireDate, ins.INSTANCE_ID, ins.PARENT_INSTANCE_ID, ins.INSTANCE_NAME, term, dept, mem, exemp, nextinstargetid = nextins == null ? null : nextins.TargetID, nextinstargettype = nextins == null ? null : nextins.TargetType, nextemp, setting.SendMonth });                         
          if(!displayAll)
          {
              instances = instances.Take(10);
          }       

          List<SelectVKmuempData> vkmuemps = new List<SelectVKmuempData>();
          foreach (var todo in instances.ToList())
          {
              ToDoListDto newitem = new ToDoListDto();
              if (service.UnitOfWork.EduTerms.Count(c => c.EduTermID == todo.INHOSPID) > 0)
              {
                  newitem.EduTermID = todo.INHOSPID;
                  newitem.EduTermName = todo.term.Name;
                  newitem.TemplateID = todo.TEMPLATE_ID;

                  newitem.TemplateName = todo.INSTANCE_NAME + (todo.SendMonth == null ? "" : ("(" + todo.SendMonth + "月)"));
                  newitem.BeginTime = todo.INSTANCE_CREATE_DATETIME;
                  newitem.EndTime = todo.ExpireDate;
                  newitem.DateStr = newitem.BeginTime.ToString("yyyy/MM/dd") + "~" + (newitem.EndTime.HasValue ? newitem.EndTime.Value.ToString("yyyy/MM/dd") : "--");
                  if (todo.dept != null)
                  {
                      newitem.DeptName = todo.dept.Deptname;
                  }
                  if (newitem.EndTime < DateTime.Now.Date)
                  {
                      newitem.ActionName = "逾期-可填寫";
                  }
                  else
                  {
                      newitem.ActionName = "填寫";
                  }

                  newitem.ActionUrl = "InstanceDetial.aspx?instance_id=" + todo.INSTANCE_ID.ToString() + "&edutermid=" + todo.INHOSPID;

                  if (todo.PARENT_INSTANCE_ID != null)
                  {
                      
                      if (todo.exemp != null)
                      {
                          newitem.ExTargetID = todo.exemp.Empcode;
                          newitem.ExTargetName = todo.exemp.Empname;
                      }

                      if(todo.nextinstargetid!=null)
                      {
                          if (todo.nextinstargettype == "Teacher")
                          {
                              newitem.NextTargetID = todo.nextinstargetid;
                              if (todo.nextemp != null)
                              {
                                  newitem.NextTargetName = todo.nextemp.Empname;
                              }
                          }
                      }
                  }

                  if (todo.mem != null)
                  {
                      newitem.EvalTargetID = todo.mem.IsHospMember;
                      newitem.EvalTargetName = todo.mem.IsHospMember + " - " + todo.mem.Name;
                  }
                  result.Add(newitem);
              }
          }

          //帶入需指定教師的表
          var instances2 = (from ins in service.UnitOfWork.FORM_INSTANCEs
                            join term in service.UnitOfWork.EduTerms
                            on ins.INHOSPID equals term.EduTermID
                            join dept in service.UnitOfWork.V_departments
                            on new { hospcode = "KMUH", deptcode = term.DepCode } equals new { hospcode = dept.Hospcode, deptcode = dept.Deptcode }
                            into tempdept
                            from dept in tempdept.DefaultIfEmpty()
                            join temp in service.UnitOfWork.FORM_TEMPLATEs
                            on ins.TEMPLATE_ID equals temp.TEMPLATE_ID
                            where ins.FORM_INSTANCE_TARGETs.Count(c =>
                 (
                 (memberids.Contains(c.FORM_INSTANCE.EvalTargetID))
                 && c.TargetID != membercode
                 && (c.TargetID == null || c.TargetID == "")
                 )
                 && temp.TEMPLATE_REMARK == "C"
                 && (c.Status == '0'
                 //&& (
                 //c.FORM_INSTANCE.ExpireDate == null
                 //||
                 //(c.FORM_INSTANCE.ExpireDate != null && c.FORM_INSTANCE.ExpireDate.Value >= DateTime.Now.Date))
                 )) > 0
                 select new { ins.INHOSPID,ins.TEMPLATE_ID, ins.INSTANCE_NAME, ins.INSTANCE_CREATE_DATETIME,ins.ExpireDate,ins.INSTANCE_ID, term, dept }).ToList();
                          
          foreach (var todo in instances2)
          {
              ToDoListDto newitem = new ToDoListDto();
              if (service.UnitOfWork.EduTerms.Count(c => c.EduTermID == todo.INHOSPID) > 0)
              {
                  newitem.EduTermID = todo.INHOSPID;
                  newitem.EduTermName = todo.term.Name;
                  newitem.TemplateID = todo.TEMPLATE_ID;

                  newitem.TemplateName = todo.INSTANCE_NAME;
                  newitem.BeginTime = todo.INSTANCE_CREATE_DATETIME;
                  newitem.EndTime = todo.ExpireDate;
                  newitem.DateStr = newitem.BeginTime.ToString("yyyy/MM/dd") + "~" + (newitem.EndTime.HasValue ? newitem.EndTime.Value.ToString("yyyy/MM/dd") : "--");
                  if (todo.dept != null)
                  {
                      newitem.DeptName = todo.dept.Deptname;
                  }

                  if (newitem.EndTime < DateTime.Now.Date)
                  {
                      newitem.ActionName = "選擇老師(逾期)";
                  }
                  else
                  {
                      newitem.ActionName = "選擇老師";
                  }                

                  newitem.ActionUrl = "ChoiceTeacher.aspx?instance_id=" + todo.INSTANCE_ID.ToString() + "&edutermid=" + todo.INHOSPID;
              }
              result.Add(newitem);
          }
          return result;
          }
      }

      public int GetToDoCount(string membercode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              int allcount = 0;

              List<MemberDto> memberlist = service.ReadMembers(c => c.IsHospMember == membercode).ToList();
              List<string> termidlist = new List<string>();
              List<string> memberids = new List<string>();

              foreach (MemberDto dto in memberlist)
              {
                  List<EduTeamMemberRundownDto> rundownlist = service.ReadEduTeamMemberRundowns(c => c.MemberID == dto.MemberID).ToList();

                  foreach (EduTeamMemberRundownDto runddown in rundownlist)
                  {
                      if (!termidlist.Contains(runddown.EduTermID))
                      {
                          termidlist.Add(runddown.EduTermID);
                      }
                  }

                  memberids.Add(dto.MemberID);
              }

              List<ToDoListDto> result = new List<ToDoListDto>();

              //帶入審核臨床照護資料
              allcount += CheckHasPassPortUnChecked(membercode);


              //帶入審核護照資料
              allcount += CheckHasEduPassportUnChecked(membercode);


              var recorddata = from sche in service.UnitOfWork.EduStopActSchedules
                               where sche.EduActTargets.Count(c => c.TargetID == membercode && c.RoleType == "008" && c.TargetType == "EmpCode") > 0
                               && service.UnitOfWork.RecordEduActRefs.Count(c => c.EduStopActScheduleID == sche.EduStopActScheduleID) == 0
                               && sche.EnableRec != null && sche.EnableRec == true
                               && sche.EduStopActAttachments.Count() == 0
                               select sche;
              allcount += recorddata.Count();


              var recsigndata = from rec in service.UnitOfWork.RecordInstances
                                join view in service.UnitOfWork.RecordInsViewers
                                on rec.InstanceID equals view.InstanceID
                                where view.Viewer == membercode && service.UnitOfWork.RecordInsViewers.Count(c => c.InstanceID == rec.InstanceID && c.ViewOrder < view.ViewOrder && c.ViewStatus == null) == 0
                                && view.ViewStatus == null
                                && rec.Status == "2"
                                select new { rec, view };
              allcount += recsigndata.Count();

              var instances = (from ins in service.UnitOfWork.FORM_INSTANCEs
                               where ins.FORM_INSTANCE_TARGETs.Count(c =>
                     (c.TargetID == membercode)
                     && (c.Status == '0'
                     && (
                     c.FORM_INSTANCE.ExpireDate == null
                     ||
                     (c.FORM_INSTANCE.ExpireDate != null && c.FORM_INSTANCE.ExpireDate.Value >= DateTime.Now.Date)))

                               ) > 0
                               && service.UnitOfWork.FORM_INSTANCEs.Count(c => c.PARENT_INSTANCE_ID == ins.PARENT_INSTANCE_ID && c.INSTANCE_ID == (ins.INSTANCE_ID-1) && c.Status == '0') == 0
                               orderby ins.INSTANCE_CREATE_DATETIME, ins.ExpireDate
                               select new { ins.INSTANCE_ID });

              allcount += instances.Count();

              //帶入需指定教師的表
              var instances2 = (from ins in service.UnitOfWork.FORM_INSTANCEs
                                join temp in service.UnitOfWork.FORM_TEMPLATEs
                                on ins.TEMPLATE_ID equals temp.TEMPLATE_ID
                                where ins.FORM_INSTANCE_TARGETs.Count(c =>
                     (
                     (memberids.Contains(c.FORM_INSTANCE.EvalTargetID))
                     && c.TargetID != membercode
                     && (c.TargetID == null || c.TargetID == "")
                     )
                     && temp.TEMPLATE_REMARK == "C"
                     && (c.Status == '0'
                     && (
                     c.FORM_INSTANCE.ExpireDate == null
                     ||
                     (c.FORM_INSTANCE.ExpireDate != null && c.FORM_INSTANCE.ExpireDate.Value >= DateTime.Now.Date)))

                     ) > 0
                                select new { ins.INSTANCE_ID });

              allcount += instances2.Count();


              return allcount;
          }
      }


      public int CheckHasEduPassportUnChecked(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              int count = (from i in service.UnitOfWork.EduPassportInsItems
                           where i.TTarget == empcode && i.Status == "1"
                           && i.EduPassportInstance.Status == "V"
                           select i.IItemID).Count();

              return count;
          }
      }



      public List<ToDoListDto> GetCanWriteExFormList(string empcode, bool displayAll)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  var instances = (from ins in service.UnitOfWork.FORM_INSTANCEs
                                   join term in service.UnitOfWork.EduTerms
                                   on ins.INHOSPID equals term.EduTermID
                                   join temp in service.UnitOfWork.FORM_TEMPLATEs
                                   on ins.TEMPLATE_ID equals temp.TEMPLATE_ID
                                   join setting in service.UnitOfWork.EduFormTemplateLists
                                   on ins.INSTANCE_REMARK equals setting.FTListID
                                   join dept in service.UnitOfWork.V_departments
                                   on new { hospcode = "KMUH", deptcode = term.DepCode } equals new { hospcode = dept.Hospcode, deptcode = dept.Deptcode }
                                   into tempdept
                                   from dept in tempdept.DefaultIfEmpty()
                                   join mem in service.UnitOfWork.Members
                                   on ins.EvalTargetID equals mem.MemberID
                                   into tempmem
                                   from mem in tempmem.DefaultIfEmpty()
                                   join exins in service.UnitOfWork.FORM_INSTANCEs
                                   on new { parentid = ins.PARENT_INSTANCE_ID, instanceid = ins.INSTANCE_ID - 1 } equals new { parentid = exins.PARENT_INSTANCE_ID, instanceid = exins.INSTANCE_ID }
                                   join exemp in service.UnitOfWork.V_KmuEmps
                                   on exins.TargetID equals exemp.Empcode
                                   into tempexemp
                                   from exemp in tempexemp.DefaultIfEmpty()
                                   where ins.FORM_INSTANCE_TARGETs.Count(c =>
                                    (c.TargetID == empcode)
                                    && (c.Status == '0'
                                    && (
                                    c.FORM_INSTANCE.ExpireDate == null
                                    ||
                                    (c.FORM_INSTANCE.ExpireDate != null && c.FORM_INSTANCE.ExpireDate.Value >= DateTime.Now.Date)))

                                   ) > 0
                                   && temp.ALLOW_NEXT_TARGET_EDIT == true
                                   && exins.FORM_INSTANCE_TARGETs.Count(c =>
                                   (c.TargetID != empcode)
                                   && (c.Status == '0'
                                   && (
                                    c.FORM_INSTANCE.ExpireDate == null
                                    ||
                                    (c.FORM_INSTANCE.ExpireDate != null && c.FORM_INSTANCE.ExpireDate.Value >= DateTime.Now.Date)))
                                   ) > 0

                                   //&& service.UnitOfWork.FORM_INSTANCEs.Count(c => c.PARENT_INSTANCE_ID == ins.PARENT_INSTANCE_ID && c.INSTANCE_ID < ins.INSTANCE_ID && c.Status == '0') == 0
                                   orderby ins.INSTANCE_CREATE_DATETIME, ins.ExpireDate
                                   select new { ins.INHOSPID, exins.TEMPLATE_ID, exins.INSTANCE_CREATE_DATETIME, exins.ExpireDate, exins.INSTANCE_ID, exins.PARENT_INSTANCE_ID, exins.INSTANCE_NAME, term, dept, mem, exemp, setting.SendMonth });

                  if (!displayAll)
                  {
                      instances = instances.Take(10);
                  }



                  List<ToDoListDto> result = new List<ToDoListDto>();
                  foreach (var todo in instances.ToList())
                  {

                      ToDoListDto newitem = new ToDoListDto();
                      if (service.UnitOfWork.EduTerms.Count(c => c.EduTermID == todo.INHOSPID) > 0)
                      {


                          newitem.EduTermID = todo.INHOSPID;
                          newitem.EduTermName = todo.term.Name;
                          newitem.TemplateID = todo.TEMPLATE_ID;

                          newitem.TemplateName = todo.INSTANCE_NAME + (todo.SendMonth == null ? "" : ("(" + todo.SendMonth + "月)"));
                          newitem.BeginTime = todo.INSTANCE_CREATE_DATETIME;
                          newitem.EndTime = todo.ExpireDate;
                          newitem.DateStr = newitem.BeginTime.ToString("yyyy/MM/dd") + "~" + (newitem.EndTime.HasValue ? newitem.EndTime.Value.ToString("yyyy/MM/dd") : "--");
                          if (todo.dept != null)
                          {
                              newitem.DeptName = todo.dept.Deptname;
                          }
                          newitem.ActionName = "代填";

                          newitem.ActionUrl = "InstanceDetial.aspx?instance_id=" + todo.INSTANCE_ID.ToString() + "&edutermid=" + todo.INHOSPID + "&mode=i";

                          if (todo.PARENT_INSTANCE_ID != null)
                          {

                              if (todo.exemp != null)
                              {
                                  newitem.ExTargetID = todo.exemp.Empcode;
                                  newitem.ExTargetName = todo.exemp.Empname;
                              }


                          }

                          if (todo.mem != null)
                          {
                              newitem.EvalTargetID = todo.mem.IsHospMember;
                              newitem.EvalTargetName = todo.mem.IsHospMember + " - " + todo.mem.Name;
                          }

                          result.Add(newitem);
                      }
                  }
                  return result;
              }
              catch (Exception ex)
              {
                  return null;
              }




          }
      }


      public List<ToDoListDto> GetWaitList(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {

              List<MemberDto> memberlist = service.ReadMembers(c => c.IsHospMember == empcode).ToList();
              List<string> termidlist = new List<string>();
              List<string> memberids = new List<string>();

              foreach (MemberDto dto in memberlist)
              {
                  List<EduTeamMemberRundownDto> rundownlist = service.ReadEduTeamMemberRundowns(c => c.MemberID == dto.MemberID).ToList();

                  foreach (EduTeamMemberRundownDto runddown in rundownlist)
                  {
                      if (!termidlist.Contains(runddown.EduTermID))
                      {
                          termidlist.Add(runddown.EduTermID);
                      }
                  }

                  memberids.Add(dto.MemberID);
              }

              HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();
              List<HtmlFormUtility.FORM_INSTANCES> instances = vc.GetFormInstanceByTargetID(empcode);

              List<ToDoListDto> result = new List<ToDoListDto>();

              foreach (HtmlFormUtility.FORM_INSTANCES todo in instances)
              {



                  //若前一個未填則不顯示
                  if (todo.PARENT_INSTANCE_ID != null)
                  {
                      List<HtmlFormUtility.FORM_INSTANCES> beforelist = vc.GetBeforeFormInstance(todo);

                      bool skip = false;
                      foreach (HtmlFormUtility.FORM_INSTANCES beforins in beforelist)
                      {
                          if (beforins.Status == "0")
                          {
                              skip = true;
                              break;
                          }
                      }
                      if (!skip)
                          continue;
                  }
                  else
                  {
                      continue;
                  }

                  ToDoListDto newitem = new ToDoListDto();
                  if (service.UnitOfWork.EduTerms.Count(c => c.EduTermID == todo.INHOSPID) > 0)
                  {
                      EduTermDto eduterm = service.ReadEduTerms(todo.INHOSPID);
                      newitem.INSTANCE_ID = todo.INSTANCE_ID;
                      newitem.EduTermID = todo.INHOSPID;
                      newitem.EduTermName = eduterm.Name;
                      newitem.TemplateID = todo.TEMPLATE_ID;

                      newitem.TemplateName = todo.INSTANCE_NAME;
                      newitem.BeginTime = todo.INSTANCE_CREATE_DATETIME;
                      newitem.EndTime = todo.expireDate;
                      newitem.DateStr = newitem.BeginTime.ToString("yyyy/MM/dd") + "~" + (newitem.EndTime.HasValue ? newitem.EndTime.Value.ToString("yyyy/MM/dd") : "--");
                      V_departmentDto dept = service.ReadV_departments(c => c.Deptcode == eduterm.DepCode).FirstOrDefault();
                      if (dept != null)
                      {
                          newitem.DeptName = dept.Deptname;
                      }
                      newitem.ActionName = "提醒";

                      newitem.ActionUrl = "InstanceDetial.aspx?instance_id=" + todo.INSTANCE_ID.ToString() + "&edutermid=" + todo.INHOSPID;

                      if (todo.PARENT_INSTANCE_ID != null)
                      {
                          HtmlFormUtility.FORM_INSTANCES exinstance = vc.GetExFormInstance(todo);
                          if (exinstance != null)
                          {
                              newitem.ExTargetID = exinstance.TargetID;
                              SelectVKmuempData data = ReadVKmuempData(newitem.NextTargetID);
                              if (data != null)
                              {
                                  newitem.ExTargetName = data.empcode + " - " + data.empname;
                              }
                              MemberDto dto = ReadMemberByLogin(newitem.ExTargetID);
                              if (dto != null)
                              {
                                  newitem.ExTargetName += " - " + dto.Name;
                              }
                          }


                          List<HtmlFormUtility.FORM_INSTANCES> afterlist = vc.GetAfterFormInstance(todo);
                          foreach (HtmlFormUtility.FORM_INSTANCES afterins in afterlist)
                          {
                              if (afterins.TargetType == "Teacher")
                              {
                                  newitem.NextTargetID = afterins.TargetID;
                                  SelectVKmuempData data = ReadVKmuempData(newitem.NextTargetID);
                                  if (data != null)
                                  {
                                      newitem.NextTargetName = data.empname;
                                  }
                                  break;
                              }
                          }

                      }

                      if (todo.EvalTargetID != null)
                      {
                          MemberDto dto = ReadMember(todo.EvalTargetID);
                          if (dto != null)
                          {
                              newitem.EvalTargetID = dto.IsHospMember;
                              newitem.EvalTargetName = dto.IsHospMember + " - " + dto.Name;
                          }
                      }

                      result.Add(newitem);
                  }
              }



              return result;
          }
      }

      public string AlertBeforeInstance(int instanceid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              FORM_INSTANCE ins = service.UnitOfWork.FORM_INSTANCEs.Where(c => c.INSTANCE_ID == instanceid).FirstOrDefault();

              if (ins != null && ins.PARENT_INSTANCE_ID != null)
              {
                  List<FORM_INSTANCE> setinses = service.UnitOfWork.FORM_INSTANCEs.Where(c => c.PARENT_INSTANCE_ID == ins.PARENT_INSTANCE_ID && c.INSTANCE_ID != instanceid && c.Status == '0').ToList();
                  foreach(FORM_INSTANCE setins in setinses)
                  {
                      foreach(FORM_INSTANCE_TARGET tar in setins.FORM_INSTANCE_TARGETs)
                      {
                          tar.AlertTime = null;
                      }
                  }
              }
              
              try
              {
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch(Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }

      public List<ToDoListDto> GetDoneList(string membercode,int displaymonth)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();

              //自己為填寫者的表單
              var datas = from ins in service.UnitOfWork.FORM_INSTANCEs
                        join setting in service.UnitOfWork.EduFormTemplateLists on ins.INSTANCE_REMARK equals setting.FTListID
                        join term in service.UnitOfWork.EduTerms on ins.INHOSPID equals term.EduTermID
                        join dep in service.UnitOfWork.V_departments on new { depcode = term.DepCode, hospcode = term.Hospital } equals new { depcode = dep.Deptcode, hospcode = dep.Shorthospcode }
                        into tempdep
                        from dep in tempdep.DefaultIfEmpty()
                        join member in service.UnitOfWork.Members on ins.EvalTargetID equals member.MemberID
                        into tempmem from member in tempmem.DefaultIfEmpty()
                        where ins.FORM_INSTANCE_TARGETs.Count(c => c.TargetID == membercode
                        && (displaymonth == 0 || ins.INSTANCE_CREATE_DATETIME >= DateTime.Now.Date.AddMonths((-1) * displaymonth))
                        && (c.Status != '0')) > 0
                              //||
                              //(c.Status == '0' && ins.ExpireDate != null && ins.ExpireDate.Value < DateTime.Now.Date && ins.ExpireDate.Value >= DateTime.Now.Date.AddMonths((-1)*displaymonth))
                        select new { ins.INSTANCE_ID, ins.TEMPLATE_ID, ins.PARENT_INSTANCE_ID, ins.INSTANCE_NAME, ins.INSTANCE_CREATE_DATETIME, ins.ExpireDate, ins.FORM_INSTANCE_TARGETs, ins.INHOSPID, ins.EvalTargetID, term, dep, member, setting.SendMonth };

              //List<HtmlFormUtility.FORM_INSTANCES> instances = vc.GetDoneFormInstanceByTargetID(membercode);
              List<ToDoListDto> result = new List<ToDoListDto>();
              //foreach (HtmlFormUtility.FORM_INSTANCES todo in instances)
              foreach (var todo in datas)
              {
                  ToDoListDto newitem = new ToDoListDto();
                  newitem.INSTANCE_ID = todo.INSTANCE_ID;
                  newitem.EduTermID = todo.term.EduTermID;
                  newitem.EduTermName = todo.term.Name;
                  newitem.TemplateID = todo.TEMPLATE_ID;
                  newitem.TemplateName = todo.INSTANCE_NAME + (todo.SendMonth == null ? "" : ("(" + todo.SendMonth + "月)"));
                  newitem.BeginTime = todo.INSTANCE_CREATE_DATETIME;
                  newitem.EndTime = todo.ExpireDate;
                  newitem.DateStr = newitem.BeginTime.ToString("yyyy/MM/dd") + "~" + (newitem.EndTime.HasValue ? newitem.EndTime.Value.ToString("yyyy/MM/dd") : "--");

                  if (todo.dep != null)
                  {
                      newitem.DeptName = todo.dep.Deptname;
                  }

                  FORM_INSTANCE_TARGET target = todo.FORM_INSTANCE_TARGETs.Where(c => c.TargetID == membercode).FirstOrDefault();
                  if (Convert.ToInt32( target.Status.ToString()) > Convert.ToInt32( target.TargetOrder.ToString()))
                  {
                      newitem.ActionName = "已填寫";
                      newitem.ActionUrl = "InstanceDetial.aspx?instance_id=" + todo.INSTANCE_ID.ToString() + "&edutermid=" + todo.INHOSPID + "&mode=v";
                  }
                  else
                  {
                      newitem.ActionName = "填寫";
                  }

                  if (Convert.ToInt32(target.Status.ToString()) <= Convert.ToInt32(target.TargetOrder.ToString()))
                  {
                      int? parentid = target.FORM_INSTANCE.PARENT_INSTANCE_ID;
                      if (parentid != null)
                      {
                          if (service.UnitOfWork.FORM_INSTANCEs.Count(c => c.PARENT_INSTANCE_ID == parentid.Value && c.Status == '0' && c.INSTANCE_ID < target.INSTANCE_ID) > 0)
                          {
                              newitem.ActionName = "逾期(學生未完成)";
                          }
                          else
                          {
                              newitem.ActionName = "逾期";
                          }
                      }
                      else
                      {
                          newitem.ActionName = "逾期";
                      }
                  }
                  else
                  {
                      //HtmlFormUtility.Components.HtmlForm form = new HtmlFormUtility.Components.HtmlForm();
                      //form.Query(todo.ins.INSTANCE_ID);
                      if (todo.PARENT_INSTANCE_ID != null
                          && service.UnitOfWork.FORM_INSTANCEs.Count(
                          c => c.PARENT_INSTANCE_ID == todo.PARENT_INSTANCE_ID && c.INSTANCE_ID > todo.INSTANCE_ID && c.Status != '0') > 0)
                      //if (form.IsAfterEdited)
                      {
                          newitem.ActionName = "查看";
                          newitem.ActionUrl = "InstanceDetial.aspx?instance_id=" + todo.INSTANCE_ID.ToString() + "&edutermid=" + todo.INHOSPID + "&mode=v";
                          newitem.FinalScore = vc.GetInstanceScore(todo.INSTANCE_ID);

                          bool haveRead = ReadInstance(todo.INSTANCE_ID); //判斷SQL是否有日期資料
                          newitem.HaveRead = haveRead ? "已讀" : ""; 
                      }
                      else
                      {
                          newitem.ActionName = "已完成";
                          newitem.ActionUrl = "InstanceDetial.aspx?instance_id=" + todo.INSTANCE_ID.ToString() + "&edutermid=" + todo.INHOSPID + "&mode=v";
                          newitem.FinalScore = vc.GetInstanceScore(todo.INSTANCE_ID);
                      }
                  }

                  if (todo.EvalTargetID != null)
                  {
                      //MemberDto dto = ReadMember(todo.ins.EvalTargetID);
                      if (todo.member != null)
                      {
                          newitem.EvalTargetID = todo.member.IsHospMember;
                          newitem.EvalTargetName = todo.member.IsHospMember + " - " + todo.member.Name;
                      }
                  }

                  result.Add(newitem);
              }

              //自己為評估對象的表單(顯示全部)

              datas = from ins in service.UnitOfWork.FORM_INSTANCEs
                      join setting in service.UnitOfWork.EduFormTemplateLists on ins.INSTANCE_REMARK equals setting.FTListID
                      join term in service.UnitOfWork.EduTerms on ins.INHOSPID equals term.EduTermID
                      join dep in service.UnitOfWork.V_departments on new { depcode = term.DepCode, hospcode = 'H' } equals new { depcode = dep.Deptcode, hospcode = dep.Shorthospcode.Value }
                      into tempdep
                      from dep in tempdep.DefaultIfEmpty()
                      join temp in service.UnitOfWork.FORM_TEMPLATEs on ins.TEMPLATE_ID equals temp.TEMPLATE_ID
                      join member in service.UnitOfWork.Members on ins.EvalTargetID equals member.MemberID
                      where member.IsHospMember == membercode && ins.Status != '0'
                      && (temp.DISPLAY_TO_EVALTARGET == null || temp.DISPLAY_TO_EVALTARGET == true)
                      select new { ins.INSTANCE_ID, ins.TEMPLATE_ID, ins.PARENT_INSTANCE_ID, ins.INSTANCE_NAME, ins.INSTANCE_CREATE_DATETIME, ins.ExpireDate, ins.FORM_INSTANCE_TARGETs, ins.INHOSPID, ins.EvalTargetID, term, dep, member, setting.SendMonth };
              //instances = vc.GetFormInstanceByEvalTargetId(membercode);
              //foreach (HtmlFormUtility.FORM_INSTANCES todo in instances)
             List<int> insids = new List<int>();
             foreach (var todo in datas)
             {
                 //EduTermDto term = service.ReadEduTerms(c => c.EduTermID == todo.INHOSPID).FirstOrDefault();

                 if (todo.INSTANCE_ID == 1434137)
                 {

                 }
                 //if (term != null)
                 //{
                 if (!insids.Contains(todo.INSTANCE_ID))
                 {
                     insids.Add(todo.INSTANCE_ID);
                     ToDoListDto newitem = new ToDoListDto();
                     newitem.EduTermID = todo.INHOSPID;
                     newitem.EduTermName = todo.term.Name;
                     newitem.TemplateID = todo.TEMPLATE_ID;
                     if (todo.dep != null)
                     {
                         newitem.DeptName = todo.dep.Deptname;
                     }
                     newitem.TemplateName = todo.INSTANCE_NAME;
                     newitem.BeginTime = todo.INSTANCE_CREATE_DATETIME;
                     newitem.EndTime = todo.ExpireDate;
                     newitem.DateStr = newitem.BeginTime.ToString("yyyy/MM/dd") + "~" + (newitem.EndTime.HasValue ? newitem.EndTime.Value.ToString("yyyy/MM/dd") : "--");
                     newitem.INSTANCE_ID = todo.INSTANCE_ID;
                     newitem.ActionName = "查看";

                     newitem.ActionUrl = "InstanceDetial.aspx?instance_id=" + todo.INSTANCE_ID.ToString() + "&edutermid=" + todo.INHOSPID + "&mode=v";

                     bool haveRead = ReadInstance(todo.INSTANCE_ID); //判斷SQL是否有日期資料
                     newitem.HaveRead = haveRead ? "已讀" : "";
                     //if (todo.ins.ExpireDate != null && todo.ins.ExpireDate.Value < DateTime.Now.AddMonths(-1))
                     //{
                     //    continue;
                     //}
                     result.Add(newitem);
                     //}
                 }
             }

              //自己為評估對象的表單(顯示回饋)
             datas = from ins in service.UnitOfWork.FORM_INSTANCEs
                     join setting in service.UnitOfWork.EduFormTemplateLists on ins.INSTANCE_REMARK equals setting.FTListID
                     join term in service.UnitOfWork.EduTerms on ins.INHOSPID equals term.EduTermID
                     join dep in service.UnitOfWork.V_departments on new { depcode = term.DepCode, hospcode = term.Hospital } equals new { depcode = dep.Deptcode, hospcode = dep.Shorthospcode }
                     join temp in service.UnitOfWork.FORM_TEMPLATEs on ins.TEMPLATE_ID equals temp.TEMPLATE_ID
                     join member in service.UnitOfWork.Members on ins.EvalTargetID equals member.MemberID
                     where member.IsHospMember == membercode
                     && service.UnitOfWork.FORM_TEMPLATE_GROUPs.Count(c => c.TEMPLATE_ID == temp.TEMPLATE_ID && c.TO_EVALTARGET) > 0
                     && (temp.DISPLAY_TO_EVALTARGET != null && temp.DISPLAY_TO_EVALTARGET != true)
                     select new { ins.INSTANCE_ID, ins.TEMPLATE_ID, ins.PARENT_INSTANCE_ID, ins.INSTANCE_NAME, ins.INSTANCE_CREATE_DATETIME, ins.ExpireDate, ins.FORM_INSTANCE_TARGETs, ins.INHOSPID, ins.EvalTargetID, term, dep, member, setting.SendMonth };
              //instances = vc.GetFormInstanceByEvalTargetId(membercode);
              //foreach (HtmlFormUtility.FORM_INSTANCES todo in instances)
              insids = new List<int>();
              foreach (var todo in datas.Distinct())
              {
                  //EduTermDto term = service.ReadEduTerms(c => c.EduTermID == todo.INHOSPID).FirstOrDefault();

                  //if (term != null)
                  //{

                  if (!insids.Contains(todo.INSTANCE_ID))
                  {
                      insids.Add(todo.INSTANCE_ID);

                      ToDoListDto newitem = new ToDoListDto();
                      newitem.EduTermID = todo.INHOSPID;
                      newitem.EduTermName = todo.term.Name;
                      newitem.TemplateID = todo.TEMPLATE_ID;
                      newitem.DeptName = todo.dep.Deptname;
                      newitem.TemplateName = todo.INSTANCE_NAME;
                      newitem.BeginTime = todo.INSTANCE_CREATE_DATETIME;
                      newitem.EndTime = todo.ExpireDate;
                      newitem.DateStr = newitem.BeginTime.ToString("yyyy/MM/dd") + "~" + (newitem.EndTime.HasValue ? newitem.EndTime.Value.ToString("yyyy/MM/dd") : "--");
                      newitem.INSTANCE_ID = todo.INSTANCE_ID;
                      newitem.ActionName = "看回饋";
                      newitem.ActionUrl = "EduViewFormResponse.aspx?instance_id=" + todo.INSTANCE_ID.ToString();

                      bool haveRead = ReadInstance(todo.INSTANCE_ID); //判斷SQL是否有日期資料
                      newitem.HaveRead = haveRead ? "已讀" : "";

                      result.Add(newitem);
                  }
                  //}
              }
              return result.Where(c => c.ActionName != "逾期").OrderByDescending(c => c.INSTANCE_ID).ToList();
          }
      }

      private bool ReadInstance(int instanceId) //判斷SQL是否有日期資料
      {
          using (EduActivityContextService Service = new EduActivityContextService())
          {
              ToDoListDto dtos = new ToDoListDto();

              var datas = from ins in Service.UnitOfWork.FORM_INSTANCEs
                          where ins.INSTANCE_ID == instanceId && ins.ReadDate != null
                          select ins;

              bool haveRead = datas.Any();

              return haveRead;
          }
      }

      public int GetExpireListCount(string membercode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();

              //自己為填寫者的表單
              var datas = from ins in service.UnitOfWork.FORM_INSTANCEs
                          join term in service.UnitOfWork.EduTerms on ins.INHOSPID equals term.EduTermID
                          join dep in service.UnitOfWork.V_departments on term.DepCode equals dep.Deptcode
                          join member in service.UnitOfWork.Members on ins.EvalTargetID equals member.MemberID
                          into tempmem
                          from member in tempmem.DefaultIfEmpty()
                          where
                          dep.Hospcode == "KMUH" &&
                              //剔除正式上線前資料
                          ins.INSTANCE_CREATE_DATETIME >= new DateTime(2014, 8, 1) &&
                          term.DateFrom >= new DateTime(2014, 8, 1) &&
                          ins.FORM_INSTANCE_TARGETs.Count(c =>
                          c.TargetID == membercode
                && (c.Status == '0' && ins.ExpireDate != null && ins.ExpireDate.Value < DateTime.Now.Date)) > 0
                          select new { ins.INSTANCE_ID, ins.TEMPLATE_ID, ins.INSTANCE_NAME, ins.INSTANCE_CREATE_DATETIME, ins.ExpireDate, ins.FORM_INSTANCE_TARGETs, ins.EvalTargetID, term, dep, member }
                              ;
              return datas.Count();//.Where(c => c.ActionName != "逾期").ToList();
          }
      }

      public List<ToDoListDto> GetExpireList(string membercode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              //List<EduTeamMemberRundown> memberlist = service.ReadEduTeamMemberRundowns(c => c.MemberID == membercode).ToList();

              //List<string> termidlist = new List<string>();

              //foreach (EduTeamMemberDto dto in memberlist)
              //{
              //    List<EduTeamMemberRundownDto> rundownlist = service.ReadEduTeamMemberRundowns(c => c.EduTeamMemberID == dto.EduTeamMemberID).ToList();

              //    foreach (EduTeamMemberRundownDto runddown in rundownlist)
              //    {
              //        if (!termidlist.Contains(runddown.EduTermID))
              //        {
              //            termidlist.Add(runddown.EduTermID);
              //        }
              //    }
              //}

              HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();

              //自己為填寫者的表單
              var datas = from ins in service.UnitOfWork.FORM_INSTANCEs
                          join setting in service.UnitOfWork.EduFormTemplateLists on ins.INSTANCE_REMARK equals setting.FTListID
                          join term in service.UnitOfWork.EduTerms on ins.INHOSPID equals term.EduTermID
                          join dep in service.UnitOfWork.V_departments on term.DepCode equals dep.Deptcode
                          join member in service.UnitOfWork.Members on ins.EvalTargetID equals member.MemberID
                          into tempmem
                          from member in tempmem.DefaultIfEmpty()
                          where
                          dep.Hospcode == "KMUH" &&
                              //剔除正式上線前資料
                          ins.INSTANCE_CREATE_DATETIME >= new DateTime(2014, 8, 1) &&
                          term.DateFrom >= new DateTime(2014, 8, 1) &&
                          ins.FORM_INSTANCE_TARGETs.Count(c =>
                          c.TargetID == membercode
                && (c.Status == '0' && ins.ExpireDate != null && ins.ExpireDate.Value < DateTime.Now.Date)) > 0
                          select new { ins.INSTANCE_ID,ins.TEMPLATE_ID, ins.INSTANCE_NAME, ins.INSTANCE_CREATE_DATETIME,ins.ExpireDate,ins.FORM_INSTANCE_TARGETs,ins.EvalTargetID, term, dep, member , setting.SendMonth}
                              ;

              //List<HtmlFormUtility.FORM_INSTANCES> instances = vc.GetDoneFormInstanceByTargetID(membercode);
              List<ToDoListDto> result = new List<ToDoListDto>();
              //foreach (HtmlFormUtility.FORM_INSTANCES todo in instances)
              foreach (var todo in datas)
              {
                  ToDoListDto newitem = new ToDoListDto();
                  newitem.INSTANCE_ID = todo.INSTANCE_ID;
                  newitem.EduTermID = todo.term.EduTermID;

                  newitem.EduTermName = todo.term.Name;

                  newitem.TemplateID = todo.TEMPLATE_ID;

                  newitem.TemplateName = todo.INSTANCE_NAME + (todo.SendMonth == null ? "" : ("(" + todo.SendMonth + "月)"));
                  newitem.BeginTime = todo.INSTANCE_CREATE_DATETIME;
                  newitem.EndTime = todo.ExpireDate;
                  newitem.DateStr = newitem.BeginTime.ToString("yyyy/MM/dd") + "~" + (newitem.EndTime.HasValue ? newitem.EndTime.Value.ToString("yyyy/MM/dd") : "--");

                  newitem.DeptName = todo.dep.Deptname;

                  FORM_INSTANCE_TARGET target = todo.FORM_INSTANCE_TARGETs.Where(c => c.TargetID == membercode).FirstOrDefault();

                  if (Convert.ToInt32(target.Status.ToString()) <= Convert.ToInt32(target.TargetOrder.ToString()))
                  {
                      int? parentid = target.FORM_INSTANCE.PARENT_INSTANCE_ID;
                      if (parentid != null)
                      {
                          if (service.UnitOfWork.FORM_INSTANCEs.Count(c => c.PARENT_INSTANCE_ID == parentid.Value && c.Status == '0' && c.INSTANCE_ID < target.INSTANCE_ID) > 0)
                          {
                              newitem.ActionName = "逾期(學生未完成)";
                          }
                          else
                          {
                              newitem.ActionName = "逾期";
                          }
                      }
                      else
                      {
                          newitem.ActionName = "逾期";
                      }
                  }
                  
                  if (todo.EvalTargetID != null)
                  {
                      //MemberDto dto = ReadMember(todo.EvalTargetID);
                      if (todo.member != null)
                      {
                          newitem.EvalTargetID = todo.member.IsHospMember;
                          newitem.EvalTargetName = todo.member.IsHospMember + " - " + todo.member.Name;
                      }
                  }

                  result.Add(newitem);
              }
              return result.ToList();//.Where(c => c.ActionName != "逾期").ToList();
          }
      }

      #endregion

      #region 考核表
      public void DeleteFormAttachment(string attachmentID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.DeleteFORM_INSTANCE_ATTACHMENTs(service.ReadFORM_INSTANCE_ATTACHMENTs(c => c.ATTACHMENT_ID == attachmentID));
          }
      }

      public void InsertFormAttachment(int instanceid, string filename,string attachmentname, byte[] data)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              FORM_INSTANCE_ATTACHMENTDto dto = new FORM_INSTANCE_ATTACHMENTDto();
              dto.ATTACHMENT_ID = GetSerialNo("EduAct_ActAttachmentID");
              dto.INSTANCE_ID = instanceid;
              dto.Name = attachmentname;
              dto.FileName = filename;
              dto.ATTACHMENT = data;

              service.CreateFORM_INSTANCE_ATTACHMENT(dto);
          }
      }

      public List<FORM_INSTANCE_ATTACHMENTDto> GetFormAttachment(string instanceid)
      {
          int id = Convert.ToInt32(instanceid);
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<FORM_INSTANCE_ATTACHMENTDto> list = service.ReadFORM_INSTANCE_ATTACHMENTs(c => c.INSTANCE_ID == id).ToList();
              foreach (FORM_INSTANCE_ATTACHMENTDto dto in list)
              {
                  if (dto.FileName == null)
                  {
                      dto.FileName = dto.Name;
                  }
                  if (dto.FileName.LastIndexOf(".") != -1)
                  {
                      dto.FileName = dto.Name + dto.FileName.Substring(dto.FileName.LastIndexOf("."));
                  }
                  else
                  {
                      dto.FileName = dto.Name;
                  }
              }
              return list;
          }
      }

      public static List<FORM_INSTANCE_ATTACHMENTDto> GetFormAttachments(string instanceid)
      {
          int id = Convert.ToInt32(instanceid);
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<FORM_INSTANCE_ATTACHMENTDto> list = service.ReadFORM_INSTANCE_ATTACHMENTs(c => c.INSTANCE_ID == id).ToList();
              foreach (FORM_INSTANCE_ATTACHMENTDto dto in list)
              {
                  if (dto.FileName == null)
                  {
                      dto.FileName = dto.Name;
                  }
                  if (dto.FileName.LastIndexOf(".") != -1)
                  {
                      dto.FileName = dto.Name + dto.FileName.Substring(dto.FileName.LastIndexOf("."));
                  }
                  else
                  {
                      dto.FileName = dto.Name;
                  }
              }
              return list;
          }
      }

      public EduTermDto ReadEduTermById(string edutermid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduTerms(edutermid);
          }
      }

      public void InsertEduTermFormInstance(string edutermid, int instanceid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduTermFormInstanceDto dto = new EduTermFormInstanceDto();
              dto.EduTermID = edutermid;
              dto.INSTANCE_ID = instanceid;
              service.CreateEduTermFormInstance(dto);
          }
      }

      public EduTeamMemberRundownDto GetEduTeamMemberRundownByMemberAndEduTerm(string edutermid, string memberid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduTeamMemberRundownDto dto = service.ReadEduTeamMemberRundowns(c => c.MemberID == memberid && c.EduTermID == edutermid).FirstOrDefault();
              if (dto != null)
              {
                  EduActivityContextService eservice = new EduActivityContextService();
                  List<EduRefTeacherDto> refteachers = service.ReadEduRefTeachers(c => c.EduTermID == edutermid && c.RefID == memberid ).ToList();

                  foreach(var refteacher in refteachers)
                  {
                      if(refteacher.TeacherType == "Coach")
                      {
                          SelectKmuVsRepository rep = new SelectKmuVsRepository(eservice.UnitOfWork);
                          V_KmuEmpDto vs = service.ReadV_KmuEmps(c => c.Empcode == refteacher.TeacherID).FirstOrDefault();// rep.Find(c => c.code == dto.CoachID).FirstOrDefault();
                          if (vs != null)
                          {
                              dto.CoachName = vs.Empname;
                          }
                      }

                      if (refteacher.TeacherType == "R")
                      {
                          SelectKmuVsRepository rep = new SelectKmuVsRepository(eservice.UnitOfWork);
                          V_KmuEmpDto vs = service.ReadV_KmuEmps(c => c.Empcode == refteacher.TeacherID).FirstOrDefault();// rep.Find(c => c.code == dto.CoachID).FirstOrDefault();
                          if (vs != null)
                          {
                              dto.RName = vs.Empname;
                              dto.RID = vs.Empcode;
                          }
                      }


                      if (refteacher.TeacherType == "CR")
                      {
                          SelectKmuVsRepository rep = new SelectKmuVsRepository(eservice.UnitOfWork);
                          V_KmuEmpDto vs = service.ReadV_KmuEmps(c => c.Empcode == refteacher.TeacherID).FirstOrDefault();// rep.Find(c => c.code == dto.CoachID).FirstOrDefault();
                          if (vs != null)
                          {
                              dto.CRName = vs.Empname;
                              dto.CRID = vs.Empcode;
                          }
                      }



                  }

              }
              return dto;
          }
      }

      public MemberDto ReadMember(string memberid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
          MemberDto dto = service.ReadMembers(c => c.MemberID == memberid).FirstOrDefault();
          dto = FillMembersExtraInfo(new List<MemberDto> { dto }).FirstOrDefault();
          if (dto != null)
          {
              EduTeam t = service.UnitOfWork.EduTeams.Where(c => c.EduTeamCode == dto.EduTeamCode).FirstOrDefault();
              if (t != null)
              {
                  dto.EduTeamName = t.EduTeamName;
              }
          }
          return dto;
          }
      }

      public List<EduRefTeacherDto> GetUserRolesInEduTerm(string edutermid, string empcode,string evaltargetid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduRefTeachers(c => (c.EduTermID == edutermid && c.TeacherID == empcode && c.RefID == edutermid && c.RefTable == "EduTerm")
                  || (c.EduTermID == edutermid && c.TeacherID == empcode && c.RefID == evaltargetid && c.RefTable == "EduTeamMemberRundown")).ToList();
          }
      }

      public List<HtmlFormUtility.FORM_INSTANCES> GetInstanceByRemark(string ftlistid)
      {
          HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();
          return vc.GetInstanceByRemark(ftlistid);
      }

      public EduFormTemplateListDto GetEduFormTemplateListByID(string ftlistid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduFormTemplateLists(c => c.FTListID == ftlistid).FirstOrDefault();
          }
      }

      public List<EduFormTemplateListDto> GetAllEduFormTemplateList()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduFormTemplateLists().ToList();
          }
      }

      public EduFormTemplateListDto GetEduFormTemplateList(string edutermid, string templateid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduFormTemplateLists(c => c.TEMPLATE_ID == Convert.ToInt32(templateid) && c.EduTermID == edutermid).FirstOrDefault();
          }
      }

      public List<FORM_COMPLETE_STATUS> GetFormCompleteStatus(string edutermid,string templateid)
      {
          List<FORM_COMPLETE_STATUS> result = new List<FORM_COMPLETE_STATUS>();

          List<HtmlFormUtility.FORM_INSTANCES> instances = GetInstanceByInhospid(edutermid, templateid, true);
          foreach (HtmlFormUtility.FORM_INSTANCES ins in instances)
          {
              FORM_COMPLETE_STATUS data = new FORM_COMPLETE_STATUS();
              data.statusname = ins.Status == "0" ? "未完成" : "完成";
              data.emp_code = "";
              data.emp_name = "";
              List<HtmlFormUtility.FORM_INSTANCE_TARGETS> targets = GetInstanceTargets(ins.INSTANCE_ID);
              
              foreach (HtmlFormUtility.FORM_INSTANCE_TARGETS target in targets)
              {
                  data.emp_code += target.TargetID + ",";
                  SelectVKmuempData dto = ReadVKmuempData(target.TargetID);
                  if (dto != null)
                  {
                      data.emp_name += ReadVKmuempData(target.TargetID).empname + ",";
                  }
              }
              if (targets.Count > 0)
              {

                  if (data.emp_code.Length > 0)
                  {
                      data.emp_code = data.emp_code.Substring(0, data.emp_code.Length - 1);
                  }
                  if (data.emp_name.Length > 0)
                  {
                      data.emp_name = data.emp_name.Substring(0, data.emp_name.Length - 1);
                  }
              }
              result.Add(data);
          }

          return result;
      }

      public List<HtmlFormUtility.FORM_INSTANCE_TARGETS> GetInstanceTargets(int instanceid)
      {
          HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();
          return vc.GetInstanceTargets(instanceid).OrderBy(c => c.TargetOrder).ToList();
      }


      public List<HtmlFormUtility.FORM_INSTANCES> GetInstanceByFtlistIDs(List<string> ftlistids, string templateid)
      {
          HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();

          return vc.GetFormInstanceByFtlistids(ftlistids, Convert.ToInt32(templateid));

      }

      public List<HtmlFormUtility.FORM_INSTANCES> GetInstanceByInstanceIDs(List<int> instanceids)
      {
          HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();

          return vc.GetFormInstanceByInstanceIDs(instanceids);
      }


      public List<HtmlFormUtility.FORM_INSTANCES> GetInstanceByInhospid(string edutermid,string templateid, bool withchild)
      {
          HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();
          if (withchild)
          {
              List<string> edutermids = new List<string>();//GetChildEduTermID(edutermid);
              edutermids.Add(edutermid);
              return vc.GetFormInstanceByInhospid(edutermids, Convert.ToInt32(templateid));
          }
          else
          {
              return vc.GetFormInstanceByInhospid(new List<string> { edutermid }, Convert.ToInt32(templateid));
          }
      }

      public List<string> GetChildEduTermID(string edutermid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string roundcode = service.UnitOfWork.EduTerms.Where(d => d.EduTermID == edutermid).FirstOrDefault().RoundCode;
              List<string> edutermids = service.UnitOfWork.EduTerms.Where(c => c.RoundCode.Contains(roundcode)).Select(c => c.EduTermID).ToList();
              return edutermids;
          }
      }

      public void FixTemplateName(int templateid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              FORM_TEMPLATE temp = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.TEMPLATE_ID == templateid).FirstOrDefault();
              List<FORM_TEMPLATE_ELEMENT> elements = service.UnitOfWork.FORM_TEMPLATE_ELEMENTs.Where(c => c.TEMPLATE_ID == templateid).ToList();

              HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
              doc.LoadHtml(temp.TEMPLATE_CONTENT);
              foreach (FORM_TEMPLATE_ELEMENT ele in elements)
              {
                  if (ele.CONTROL_TYPE != "radio")
                  {
                      HtmlAgilityPack.HtmlNode node = doc.GetElementbyId(ele.ID);
                      if (node.Attributes["name"].Value == "%name")
                      {
                          string html = node.OuterHtml;
                          node.Attributes["name"].Value = node.Attributes["id"].Value;
                          string rephtml = node.OuterHtml;
                          doc.DocumentNode.InnerHtml = doc.DocumentNode.InnerHtml.Replace(html, rephtml);
                      }
                  }
              }

              temp.TEMPLATE_CONTENT = doc.DocumentNode.WriteTo();
              service.UnitOfWork.SaveChanges();
          }
      }

      public void FixTemplateContent()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<FORM_TEMPLATE> temps = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.TEMPLATE_CONTENT.Contains("onclick=\"ElementClick")).ToList();

              foreach (FORM_TEMPLATE temp in temps)
              {
                  while (temp.TEMPLATE_CONTENT.Contains("onclick=\"ElementClick"))
                  {
                      string content = temp.TEMPLATE_CONTENT;
                      int firstindex = content.IndexOf("onclick=\"ElementClick");
                      int lastindex = content.IndexOf(";return false;\"");
                      lastindex = lastindex + 15;
                      int count = lastindex - firstindex;

                      content = content.Remove(firstindex, count);

                      temp.TEMPLATE_CONTENT = content;

                  }

                  string aa = temp.TEMPLATE_CONTENT;
              }
              service.UnitOfWork.SaveChanges();
          }
      }




      public void FixInstanceElements(int templateid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {

              List<FORM_TEMPLATE_ELEMENT> elements = service.UnitOfWork.FORM_TEMPLATE_ELEMENTs.Where(c => c.TEMPLATE_ID == templateid).ToList();
              List<FORM_INSTANCE> instances = service.UnitOfWork.FORM_INSTANCEs.Where(c => c.TEMPLATE_ID == templateid).ToList();



              foreach (FORM_INSTANCE ins in instances)
              {
                  HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                  doc.LoadHtml(ins.INSTANCE_CONTENT);

                  List<FORM_INSTANCE_ELEMENT> ielements = service.UnitOfWork.FORM_INSTANCE_ELEMENTs.Where(c => c.INSTANCE_ID == ins.INSTANCE_ID).ToList();

                  foreach (FORM_INSTANCE_ELEMENT ele in ielements)
                  {
                      FORM_TEMPLATE_ELEMENT tempele = elements.Where(c => c.ID == ele.ID).FirstOrDefault();
                      if (tempele != null)
                      {


                          HtmlAgilityPack.HtmlNode node = doc.GetElementbyId(ele.ID);

                          switch (tempele.CONTROL_TYPE)
                          {
                              //case "text":
                              //    if (node.Attributes["value"] != null)
                              //    {
                              //        ele.ELEMENT_VALUE = node.Attributes["value"].Value;
                              //    }
                              //    break;
                              //case "checkbox":
                              //    if (node.Attributes.Contains("checked"))
                              //    {
                              //        ele.ELEMENT_VALUE = "true";
                              //    }
                              //    else
                              //    {
                              //        ele.ELEMENT_VALUE = "false";
                              //    }
                              //    break;
                              //case "textarea":
                              //    ele.ELEMENT_VALUE = node.InnerText;
                              //    break;
                              case "select":
                                  foreach (HtmlAgilityPack.HtmlNode nn in node.SelectNodes("option"))
                                  {
                                      if (nn.Attributes.Contains("selected"))
                                      {
                                          ele.ELEMENT_VALUE = nn.Attributes["value"].Value;
                                          ele.SELECT_VALUE = nn.InnerText;
                                      }
                                  }

                                  break;
                          }


                      }
                  }


              }
              service.UnitOfWork.SaveChanges();
          }
      }

      public void FixInstanceName(int templateid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              FORM_TEMPLATE temp = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.TEMPLATE_ID == templateid).FirstOrDefault();
              List<FORM_TEMPLATE_ELEMENT> elements = service.UnitOfWork.FORM_TEMPLATE_ELEMENTs.Where(c => c.TEMPLATE_ID == templateid).ToList();
              List<FORM_INSTANCE> instances = service.UnitOfWork.FORM_INSTANCEs.Where(c => c.TEMPLATE_ID == templateid).ToList();

              foreach (FORM_INSTANCE ins in instances)
              {
                  HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                  doc.LoadHtml(ins.INSTANCE_CONTENT);

                  List<FORM_INSTANCE_ELEMENT> ielements = service.UnitOfWork.FORM_INSTANCE_ELEMENTs.Where(c => c.INSTANCE_ID == ins.INSTANCE_ID).ToList();

                  //if (temp.TEMPLATE_ID == 96)
                  //{
                  //    if (ielements.Count > 0)
                  //    {
                  //        FORM_INSTANCE_ELEMENT firstele = ielements.Where(c => c.ID == "text_0").FirstOrDefault();
                  //        if (firstele != null)
                  //        {
                  //            string value = firstele.ELEMENT_VALUE;
                  //            string[] values = value.Split(new string[] { "," }, StringSplitOptions.None);

                  //            for (int i = 0; i < 45; i++)
                  //            {
                  //                HtmlAgilityPack.HtmlNode editnode = doc.GetElementbyId("text_" + i.ToString());

                  //                string html = editnode.OuterHtml;
                  //                editnode.Attributes["value"].Value = values[i];
                  //                string rephtml = editnode.OuterHtml;
                  //                doc.DocumentNode.InnerHtml = doc.DocumentNode.InnerHtml.Replace(html, rephtml);

                  //            }
                  //        }
                  //    }

                  //}

                  if (temp.TEMPLATE_ID == 104)
                  {
                      if (ielements.Count > 0)
                      {
                          FORM_INSTANCE_ELEMENT firstele = ielements.Where(c => c.ID == "text_0").FirstOrDefault();
                          if (firstele != null)
                          {
                              string value = firstele.ELEMENT_VALUE;
                              string[] values = value.Split(new string[] { "," }, StringSplitOptions.None);
                              if (values.Length > 2)
                              {
                                  for (int i = 0; i < 16; i++)
                                  {
                                      HtmlAgilityPack.HtmlNode editnode = doc.GetElementbyId("text_" + i.ToString());

                                      string html = editnode.OuterHtml;
                                      editnode.Attributes["value"].Value = values[i];
                                      string rephtml = editnode.OuterHtml;
                                      doc.DocumentNode.InnerHtml = doc.DocumentNode.InnerHtml.Replace(html, rephtml);

                                  }
                              }
                          }
                      }

                  }


                  foreach (FORM_INSTANCE_ELEMENT ele in ielements)
                  {
                      FORM_TEMPLATE_ELEMENT tempele = elements.Where(c => c.ID == ele.ID).FirstOrDefault();
                      if (tempele != null)
                      {

                          if (tempele.CONTROL_TYPE != "radio")
                          {
                              if (ele.NAME != tempele.NAME)
                              {
                                  ele.NAME = tempele.NAME;
                              }


                              HtmlAgilityPack.HtmlNode node = doc.GetElementbyId(ele.ID);
                              if (node.Attributes["name"].Value == "%name")
                              {
                                  string html = node.OuterHtml;
                                  node.Attributes["name"].Value = node.Attributes["id"].Value;
                                  string rephtml = node.OuterHtml;
                                  doc.DocumentNode.InnerHtml = doc.DocumentNode.InnerHtml.Replace(html, rephtml);
                              }

                              switch (tempele.CONTROL_TYPE)
                              {
                                  case "text":
                                      if (node.Attributes["value"] != null)
                                      {
                                          ele.ELEMENT_VALUE = node.Attributes["value"].Value;
                                      }
                                      break;
                                  case "checkbox":
                                      if (node.Attributes.Contains("checked"))
                                      {
                                          ele.ELEMENT_VALUE = "true";
                                      }
                                      else
                                      {
                                          ele.ELEMENT_VALUE = "false";
                                      }
                                      break;
                                  case "textarea":
                                      ele.ELEMENT_VALUE = node.InnerText;
                                      break;
                              }

                          }
                      }
                  }

                  ins.INSTANCE_CONTENT = doc.DocumentNode.WriteTo();

              }
              service.UnitOfWork.SaveChanges();
          }
      }

      public List<STATISTIC_EXPEND_DATA_LIST> GetStatisticDataListByInstanceID(int instanceid,bool responseonly)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();
              List<HtmlFormUtility.STATISTIC_DATA_LIST> result = new List<HtmlFormUtility.STATISTIC_DATA_LIST>();

              result.AddRange(vc.GetStatisticDataListByInstanceID(instanceid, responseonly));

              foreach (HtmlFormUtility.STATISTIC_DATA_LIST data in result)
              {

                  if (data.EvalTargetID != null)
                  {
                      data.EvalTargetName = ReadMember(data.EvalTargetID).Name;
                  }

                  if (data.TargetID != null && data.TargetID != "")
                  {
                      foreach (string target in data.TargetID.Trim().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                      {
                          SelectVKmuempData empdata = ReadVKmuempData(target);
                          if (empdata != null)
                          {
                              data.TargetName += empdata.empname + ",";
                          }
                      }
                      if (data.TargetName != null && data.TargetName != "")
                      {
                          data.TargetName = data.TargetName.Substring(0, data.TargetName.Length - 1);
                      }
                  }
              }

              List<STATISTIC_EXPEND_DATA_LIST> list = new List<STATISTIC_EXPEND_DATA_LIST>();
              Dictionary<int, string[]> insdeplist = new Dictionary<int, string[]>();
              foreach (HtmlFormUtility.STATISTIC_DATA_LIST data in result)
              {

                  foreach (HtmlFormUtility.STATISTIC_GROUP_DATA g in data.GroupData)
                  {
                      STATISTIC_EXPEND_DATA_LIST item = new STATISTIC_EXPEND_DATA_LIST();
                      item.InstanceID = data.InstanceID;
                      item.CreateDate = data.CreateDate;
                      if (!insdeplist.ContainsKey(data.InstanceID))
                      {

                          var depdata = from ins in service.UnitOfWork.FORM_INSTANCEs
                                        join eduterm in service.UnitOfWork.EduTerms on ins.INHOSPID equals eduterm.EduTermID
                                        join deps in service.UnitOfWork.V_departments on eduterm.Department equals deps.Deptcode
                                        join hosps in service.UnitOfWork.V_CodeRefs on eduterm.Hospital.ToString() equals hosps.Code
                                        where deps.Hospcode == "KMUH" && ins.INSTANCE_ID == data.InstanceID
                                        && hosps.CodeType == "EduAct_Hospital"
                                        select new { ins, deps, eduterm, hosps };
                          if (depdata.Count() > 0)
                          {
                              var depd = depdata.FirstOrDefault();
                              string edufullname = GetEduTermFullName(depd.eduterm);
                              insdeplist.Add(depd.ins.INSTANCE_ID, new string[] { depd.deps.Deptcode, depd.deps.Deptname, edufullname, depd.hosps.Name, depd.eduterm.DateFrom.ToString("yyyy/MM/dd") + "~" + depd.eduterm.DateTo.ToString("yyyy/MM/dd") });
                              item.DeptCode = insdeplist[data.InstanceID][0];
                              item.DeptName = insdeplist[data.InstanceID][1];
                              item.EduTermFullName = insdeplist[data.InstanceID][2];
                              item.HospName = insdeplist[data.InstanceID][3];
                              item.EduTermTimeRange = insdeplist[data.InstanceID][4];
                          }
                      }
                      else
                      {
                          item.DeptCode = insdeplist[data.InstanceID][0];
                          item.DeptName = insdeplist[data.InstanceID][1];
                          item.EduTermFullName = insdeplist[data.InstanceID][2];
                          item.HospName = insdeplist[data.InstanceID][3];
                          item.EduTermTimeRange = insdeplist[data.InstanceID][4];
                      }

                      item.EvalTargetID = data.EvalTargetID;
                      item.EvalTargetName = data.EvalTargetName;
                      item.TargetID = data.CompleteStatus;
                      item.TargetName = data.TargetName;
                      item.GroupName = g.GroupName;
                      item.Value = g.Value;
                      item.StatusName = data.StatusName;
                      list.Add(item);
                  }
              }

              return list;
          }
      }

      public List<STATISTIC_EXPEND_DATA_LIST> GetQuestionStatisticDataListByTemplateID(int templateid, DateTime sdate, DateTime edate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {

              //List<string> edutermids = GetChildEduTermID(edutermid);
              //          using (EduActivityContextService service = new EduActivityContextService())
              //{

              HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();
              List<HtmlFormUtility.STATISTIC_DATA_LIST> result = new List<HtmlFormUtility.STATISTIC_DATA_LIST>();

              result.AddRange(vc.GetQuestionStatisticDataList(templateid, sdate, edate));


              List<string> empcodes = new List<string>();

              foreach (HtmlFormUtility.STATISTIC_DATA_LIST data in result)
              {
                  if (data.TargetID != null && data.TargetID != "")
                  {
                      foreach (string target in data.TargetID.Trim().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                      {
                          if (!empcodes.Contains(target))
                          {
                              empcodes.Add(target);
                          }
                      }
                  }
              }



              foreach (HtmlFormUtility.STATISTIC_DATA_LIST data in result)
              {


                  if (data.TargetID != null && data.TargetID != "")
                  {
                      foreach (string target in data.TargetID.Trim().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                      {
                          var empdata = service.ReadV_KmuEmps(c => c.Empcode == target).FirstOrDefault();
                          if (empdata != null)
                          {
                              data.TargetName += empdata.Empname + ",";
                          }
                      }
                      if (data.TargetName != null && data.TargetName != "")
                      {
                          data.TargetName = data.TargetName.Substring(0, data.TargetName.Length - 1);
                      }
                  }

              }

              List<STATISTIC_EXPEND_DATA_LIST> list = new List<STATISTIC_EXPEND_DATA_LIST>();
              Dictionary<int, string[]> insdeplist = new Dictionary<int, string[]>();
              foreach (HtmlFormUtility.STATISTIC_DATA_LIST data in result)
              {

                  foreach (HtmlFormUtility.STATISTIC_GROUP_DATA g in data.GroupData)
                  {
                      STATISTIC_EXPEND_DATA_LIST item = new STATISTIC_EXPEND_DATA_LIST();
                      item.InstanceID = data.InstanceID;
                      item.CreateDate = data.CreateDate;


                      item.EvalTargetID = data.EvalTargetID;
                      item.EvalTargetName = data.EvalTargetName;
                      item.TargetID = data.TargetID;
                      item.TargetName = data.TargetName;
                      item.GroupName = g.GroupName;
                      item.Value = g.Value;
                      item.StatusName = data.StatusName;
                      list.Add(item);
                  }
              }



              return list;
          }
      }


      public List<STATISTIC_EXPEND_DATA_LIST> GetStatisticDataListByFTListIDs(int templateid
                  , List<string> ftlistids //edutermid (課程id)
                  )
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {

              //List<string> edutermids = GetChildEduTermID(edutermid);
              //          using (EduActivityContextService service = new EduActivityContextService())
              //{

              HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();
              List<HtmlFormUtility.STATISTIC_DATA_LIST> result = new List<HtmlFormUtility.STATISTIC_DATA_LIST>();


              result = vc.GetStatisticDataListByFtlistIDs(templateid, ftlistids);
              //foreach (string ftlistid in ftlistids)
              //{
              //    result.AddRange(vc.GetStatisticDataList(templateid, ftlistid));
              //}

              List<Member> mems = (from mem in service.UnitOfWork.Members
                                   join li in result
                                   on mem.MemberID equals li.EvalTargetID
                                   select mem).ToList();

              List<string> empcodes = new List<string>();

              foreach (HtmlFormUtility.STATISTIC_DATA_LIST data in result)
              {
                  if (data.TargetID != null && data.TargetID != "")
                  {
                      foreach (string target in data.TargetID.Trim().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                      {
                          if (!empcodes.Contains(target))
                          {
                              empcodes.Add(target);
                          }
                      }
                  }
              }




              foreach (HtmlFormUtility.STATISTIC_DATA_LIST data in result)
              {
                  if (data.InstanceID == 867330)
                  {

                  }

                  if (data.EvalTargetID != null)
                  {
                      if (mems.Count(c => c.MemberID == data.EvalTargetID) > 0)
                      {
                          data.EvalTargetName = mems.Where(c => c.MemberID == data.EvalTargetID).FirstOrDefault().Name;
                          data.EvalTargetMemberCode = mems.Where(c => c.MemberID == data.EvalTargetID).FirstOrDefault().MemberCode;
                      }
                  }

                  if (data.TargetID != null)
                  {
                      var tarmem = (from mm in service.UnitOfWork.Members
                                    join rundown in service.UnitOfWork.EduTeamMemberRundowns
                                    on mm.MemberID equals rundown.MemberID
                                    where rundown.EduTermID == data.EduTermID && mm.IsHospMember == data.TargetID
                                    select mm).FirstOrDefault();
                      if (tarmem != null)
                      {
                          data.TargetMemberCode = tarmem.MemberCode;
                      }

                      var coach = (from mm in service.UnitOfWork.Members
                                   join rundown in service.UnitOfWork.EduTeamMemberRundowns
                                   on mm.MemberID equals rundown.MemberID
                                   join refteacher in service.UnitOfWork.EduRefTeachers
                                   on new { edutermid = rundown.EduTermID, memberid = mm.MemberID, ttype = "Coach" } equals new { edutermid = refteacher.EduTermID, memberid = refteacher.RefID, ttype = refteacher.TeacherType }
                                   where rundown.EduTermID == data.EduTermID && mm.IsHospMember == data.TargetID && refteacher.RefTable == "EduTeamMemberRundown"
                                   select refteacher).FirstOrDefault();
                      if (coach != null)
                      {
                          data.TargetCoach = coach.TeacherID;
                      }
                  }

                  if (data.TargetID != null && data.TargetID != "")
                  {
                      foreach (string target in data.TargetID.Trim().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                      {
                          var empdata = service.ReadV_KmuEmps(c => c.Empcode == target).FirstOrDefault();
                          if (empdata != null)
                          {
                              data.TargetName += empdata.Empname + ",";
                          }
                      }
                      if (data.TargetName != null && data.TargetName != "")
                      {
                          data.TargetName = data.TargetName.Substring(0, data.TargetName.Length - 1);
                      }

                      if (!data.TargetID.Contains(","))
                      {
                          data.TargetType = GetInstanceTargetType(data.InstanceID);
                      }
                  }

              }

              List<STATISTIC_EXPEND_DATA_LIST> list = new List<STATISTIC_EXPEND_DATA_LIST>();
              Dictionary<int, string[]> insdeplist = new Dictionary<int, string[]>();





              List<int> inslist = result.Select(c => c.InstanceID).Distinct().ToList();





              double dLoopCycle = (Convert.ToDouble(inslist.Count) / Convert.ToDouble(2000.0));
              int loopCycle = Convert.ToInt32(Math.Ceiling(dLoopCycle));
              loopCycle = loopCycle == 0 ? 1 : loopCycle;


              List<int> templist = inslist.GetRange(0, Math.Min(2000, inslist.Count));

              var depdatas = (from ins in service.UnitOfWork.FORM_INSTANCEs
                              join eduterm in service.UnitOfWork.EduTerms on ins.INHOSPID equals eduterm.EduTermID
                              join deps in service.UnitOfWork.V_departments on eduterm.Department equals deps.Deptcode
                              join hosps in service.UnitOfWork.V_CodeRefs on eduterm.Hospital.ToString() equals hosps.Code
                              where deps.Hospcode == "KMUH"
                              && templist.Contains(ins.INSTANCE_ID)
                              && hosps.CodeType == "EduAct_Hospital"
                              select new { ins.INSTANCE_ID, deps, eduterm, hosps }).ToList();

              for (int i = 1; i < loopCycle; i++)
              {
                  int rangeIndex = (i * 2000);
                  templist = inslist.GetRange(rangeIndex, Math.Min(2000, inslist.Count - rangeIndex));
                  var tempdatas = (from ins in service.UnitOfWork.FORM_INSTANCEs
                                   join eduterm in service.UnitOfWork.EduTerms on ins.INHOSPID equals eduterm.EduTermID
                                   join deps in service.UnitOfWork.V_departments on eduterm.Department equals deps.Deptcode
                                   join hosps in service.UnitOfWork.V_CodeRefs on eduterm.Hospital.ToString() equals hosps.Code
                                   where deps.Hospcode == "KMUH"
                                   && templist.Contains(ins.INSTANCE_ID)
                                   && hosps.CodeType == "EduAct_Hospital"
                                   select new { ins.INSTANCE_ID, deps, eduterm, hosps }).ToList();
                  depdatas.AddRange(tempdatas);

              }


              foreach (HtmlFormUtility.STATISTIC_DATA_LIST data in result)
              {
                  var depdata = depdatas.Where(c => c.INSTANCE_ID == data.InstanceID).FirstOrDefault();

                  foreach (HtmlFormUtility.STATISTIC_GROUP_DATA g in data.GroupData)
                  {
                      STATISTIC_EXPEND_DATA_LIST item = new STATISTIC_EXPEND_DATA_LIST();
                      item.InstanceID = data.InstanceID;
                      item.CreateDate = data.CreateDate;
                      if(depdata!= null)
                      {
                          item.SchoolSeq1 = depdata.eduterm.SchoolSeqNo1;
                          item.SchoolSeq2 = depdata.eduterm.SchoolSeqNo2;
                      }
                      if (!insdeplist.ContainsKey(data.InstanceID))
                      {
                          if (depdata != null)
                          {
                              var depd = depdata;
                              string edufullname = GetEduTermFullName(depd.eduterm);
                              insdeplist.Add(depd.INSTANCE_ID, new string[] { depd.deps.Deptcode, depd.deps.Deptname, edufullname, depd.hosps.Name, depd.eduterm.DateFrom.ToString("yyyy/MM/dd") + "~" + depd.eduterm.DateTo.ToString("yyyy/MM/dd") });
                              item.DeptCode = insdeplist[data.InstanceID][0];
                              item.DeptName = insdeplist[data.InstanceID][1];
                              item.EduTermFullName = insdeplist[data.InstanceID][2];
                              item.HospName = insdeplist[data.InstanceID][3];
                              item.EduTermTimeRange = insdeplist[data.InstanceID][4];

                          }

                      }
                      else
                      {
                          item.DeptCode = insdeplist[data.InstanceID][0];
                          item.DeptName = insdeplist[data.InstanceID][1];
                          item.EduTermFullName = insdeplist[data.InstanceID][2];
                          item.HospName = insdeplist[data.InstanceID][3];
                          item.EduTermTimeRange = insdeplist[data.InstanceID][4];
                      }
                      item.EvalTargetMemberCode = data.EvalTargetMemberCode;
                      item.TargetCoach = data.TargetCoach;
                      item.TargetMemberCode = data.TargetMemberCode;
                      item.EvalTargetID = data.EvalTargetID;
                      item.EvalTargetName = data.EvalTargetName;
                      item.TargetID = data.CompleteStatus;
                      item.TargetName = data.TargetName;
                      item.TargetType = data.TargetType;
                      item.GroupName = g.GroupName;
                      item.Value = g.Value;
                      item.StatusName = data.StatusName;
                      list.Add(item);
                  }
              }


              return list;
          }
      }

      public string GetInstanceTargetType(int instanceid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var data = (from ins in service.UnitOfWork.FORM_INSTANCEs
                          join tar in service.UnitOfWork.FORM_INSTANCE_TARGETs
                          on ins.INSTANCE_ID equals tar.INSTANCE_ID
                          join etar in service.UnitOfWork.EduFormTemplateTargets
                          on new { ftlistid = ins.INSTANCE_REMARK, tempid = ins.TEMPLATE_ID } equals new { ftlistid = etar.FTListID, tempid = etar.SubTEMPLATE_ID }
                          where ins.INSTANCE_ID == instanceid
                          select etar).FirstOrDefault();
              if(data== null)
              {
                  return null;
              }

              string typecode = null;
              if(data.TeacherType != null)
              {
                  typecode = data.TeacherType;
              }
              else
              {
                  typecode = data.RoleType;
              }
              if(typecode == "S")
              {
                  return "學生";
              }


              EduTeacherTypeDto ttype = service.ReadEduTeacherTypes(c => c.Code == typecode).FirstOrDefault();
              if(ttype == null)
              {
                  return null;
              }
              else
              {
                  return ttype.Name;
              }

          }
      }


      public List<STATISTIC_EXPEND_DATA_LIST> GetStatisticDataListByTerm(int templateid
                  , string edutermid //edutermid (課程id)
                  )
      {
          

          List<string> edutermids = GetChildEduTermID(edutermid);


          HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();
          List<HtmlFormUtility.STATISTIC_DATA_LIST> result = vc.GetStatisticDataListByInhospid(templateid, edutermids);
          foreach (HtmlFormUtility.STATISTIC_DATA_LIST data in result)
          {
              if (data.EvalTargetID != null)
              {
                  data.EvalTargetName = ReadMember(data.EvalTargetID).Name;
              }

              if (data.TargetID != null && data.TargetID != "")
              {
                  foreach (string target in data.TargetID.Trim().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                  {
                      SelectVKmuempData empdata = ReadVKmuempData(target);
                      if (empdata != null)
                      {
                          data.TargetName += empdata.empname + ",";
                      }
                  }
                  if (data.TargetName != null && data.TargetName != "")
                  {
                      data.TargetName = data.TargetName.Substring(0, data.TargetName.Length - 1);
                  }
              }
          }

          List<STATISTIC_EXPEND_DATA_LIST> list = new List<STATISTIC_EXPEND_DATA_LIST>();

          foreach (HtmlFormUtility.STATISTIC_DATA_LIST data in result)
          {
              foreach (HtmlFormUtility.STATISTIC_GROUP_DATA g in data.GroupData)
              {
                  STATISTIC_EXPEND_DATA_LIST item = new STATISTIC_EXPEND_DATA_LIST();
                  item.InstanceID = data.InstanceID;
                  item.EvalTargetID = data.EvalTargetID;
                  item.EvalTargetName = data.EvalTargetName;
                  item.TargetID = data.TargetID;
                  item.TargetName = data.TargetName;
                  item.GroupName = g.GroupName;
                  item.Value = g.Value;
                  item.StatusName = data.StatusName;
                  list.Add(item);
              }
          }


          return list;
      }

      public List<STATISTIC_EXPEND_DATA_LIST> GetStatisticDataList(int templateid
            , string instance_remark //ftlistid (表單發送id)
            )
      {

          HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();
          List<HtmlFormUtility.STATISTIC_DATA_LIST> result = vc.GetStatisticDataList(templateid, instance_remark);
          foreach (HtmlFormUtility.STATISTIC_DATA_LIST data in result)
          {
              if (data.EvalTargetID != null)
              {
                  data.EvalTargetName = ReadMember(data.EvalTargetID).Name;
              }

              if (data.TargetID != null && data.TargetID != "")
              {
                  foreach (string target in data.TargetID.Trim().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                  {
                      SelectVKmuempData empdata = ReadVKmuempData(target);
                      if (empdata != null)
                      {
                          data.TargetName += empdata.empname + ",";
                      }
                  }
                  if (data.TargetName != null && data.TargetName != "")
                  {
                      data.TargetName = data.TargetName.Substring(0, data.TargetName.Length - 1);
                  }
              }
          }

          List<STATISTIC_EXPEND_DATA_LIST> list = new List<STATISTIC_EXPEND_DATA_LIST>();

          foreach (HtmlFormUtility.STATISTIC_DATA_LIST data in result)
          {
              foreach (HtmlFormUtility.STATISTIC_GROUP_DATA g in data.GroupData)
              {
                  STATISTIC_EXPEND_DATA_LIST item = new STATISTIC_EXPEND_DATA_LIST();
                  item.EvalTargetID = data.EvalTargetID;
                  item.EvalTargetName = data.EvalTargetName;
                  item.TargetID = data.TargetID;
                  item.TargetName = data.TargetName;
                  item.GroupName = g.GroupName;
                  item.Value = g.Value;
                  item.StatusName = data.StatusName;
                  list.Add(item);
              }
          }


          return list;
      }



      public List<EduFormTemplateListDto> GetDeptEvalStasticDataRange(List<string> deptcodes, List<string> jobcodes, List<int> templateids, DateTime sdate, DateTime edate, bool split, bool expireonly)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string> alldeptcodes = new List<string>();
              if (deptcodes.Contains(""))
              {
                  alldeptcodes = null;
              }
              else
              {
                  foreach (string deptcode in deptcodes)
                  {
                      if (!alldeptcodes.Contains(deptcode))
                      {
                          alldeptcodes.Add(deptcode);
                      }

                      foreach (string rr in GetChildDepts(deptcode, "KMUH"))
                      {

                          if (!alldeptcodes.Contains(rr))
                          {
                              alldeptcodes.Add(rr);
                          }
                      }
                  }
              }
              //List<EduTerm> terms = service.UnitOfWork.EduTerms.Where(c => deptcodes.Contains(c.DepCode)  && jobcodes.Contains(c.JobCode) && c.DateFrom >= sdate && c.DateFrom <= edate).ToList();
              List<EduFormTemplateListDto> result = new List<EduFormTemplateListDto>();
              foreach (int templateid in templateids)
              {

                  FORM_TEMPLATE template = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.TEMPLATE_ID == templateid).FirstOrDefault();

                  if (template.PARENT_TEMPLATE_ID != null && templateids.Contains(template.PARENT_TEMPLATE_ID.Value) && !split)
                  {
                      continue;
                  }

                  int maintemplateid = template.PARENT_TEMPLATE_ID == null ? template.TEMPLATE_ID : template.PARENT_TEMPLATE_ID.Value;

                  bool ishead = service.UnitOfWork.FORM_TEMPLATEs.Count(c => c.PARENT_TEMPLATE_ID == template.TEMPLATE_ID) > 0;

                  int maxchildtemplateid = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.PARENT_TEMPLATE_ID == template.TEMPLATE_ID).Select(c => c.TEMPLATE_ID).Max();
                  char? hospcode = 'H';

                  var datas = (from term in service.UnitOfWork.EduTerms
                               join setting in service.UnitOfWork.EduFormTemplateLists
                               on term.EduTermID equals setting.EduTermID
                               join dep in service.UnitOfWork.V_departments
                               on new { hosp = hospcode, depcode = term.DepCode } equals new { hosp = dep.Shorthospcode, depcode = dep.Deptcode }
                               into tempdept
                               from dep in tempdept.DefaultIfEmpty()
                               where (alldeptcodes == null || alldeptcodes.Contains(term.DepCode)
                               || (term.EduTerm1 != null && alldeptcodes.Contains(term.EduTerm1.DepCode))
                               || (term.EduTerm1 != null && term.EduTerm1.EduTerm1 != null && alldeptcodes.Contains(term.EduTerm1.EduTerm1.DepCode))
                               ) && jobcodes.Contains(term.JobCode)
                               && setting.TEMPLATE_ID == maintemplateid && setting.ExecuteDate >= sdate && setting.ExecuteDate <= edate
                               select new { dep, setting.FTListID, term.DepCode }).ToList();
                  Dictionary<V_department, List<string>> datalist = new Dictionary<V_department, List<string>>();

                  foreach (var dd in datas)
                  {
                      if (dd.dep != null)
                      {
                          if (!datalist.Keys.Contains(dd.dep))
                          {
                              datalist.Add(dd.dep, new List<string> { dd.FTListID });
                          }
                          else
                          {
                              datalist[dd.dep].Add(dd.FTListID);
                          }
                      }
                      else
                      {
                          bool isexists = false;
                          V_department dept = null;
                          foreach (V_department dep in datalist.Keys)
                          {
                              if (dep.Deptcode == dd.DepCode)
                              {
                                  dept = dd.dep;
                                  isexists = true;
                                  break;
                              }
                          }

                          if (dept == null)
                          {
                              dept = new V_department();
                              dept.Depid = dd.DepCode;
                              dept.Deptcode = dd.DepCode;
                              dept.Deptname = dd.DepCode;
                          }
                          if (!isexists)
                          {
                              datalist.Add(dept, new List<string> { dd.FTListID });
                          }
                          else
                          {
                              foreach (V_department dep in datalist.Keys)
                              {
                                  if (dep.Deptcode == dd.DepCode)
                                  {
                                      datalist[dep].Add(dd.FTListID);
                                      break;
                                  }
                              }
                          }
                      }
                  }



                  List<string> permissions = service.UnitOfWork.EduFormStasticPermissions.Where(c => c.TEMPLATE_ID == templateid && c.Enable).Select(c => c.RoleID).ToList();


                  foreach (V_department dd in datalist.Keys)
                  {
                      EduFormTemplateListDto newitem = new EduFormTemplateListDto();

                      newitem = new EduFormTemplateListDto();
                      newitem.FTListIDs = new List<string>();

                      //newitem.RootEduTermID = term.EduTermID;
                      //newitem.RootEduTermName = "(" + term.EduStopCode + ")" + term.Name;
                      newitem.TEMPLATE_ID = templateid;
                      newitem.TEMPLATE_NAME = template.TEMPLATE_NAME;
                      newitem.FTListIDs = datalist[dd];
                      newitem.Des = dd.Deptcode;
                      newitem.Name = dd.Deptname;




                      double dLoopCycle = (newitem.FTListIDs.Count / 2000);
                      int loopCycle = Convert.ToInt32(Math.Ceiling(dLoopCycle));
                      loopCycle = loopCycle == 0 ? 1 : loopCycle;


                      List<string> templist = newitem.FTListIDs.GetRange(0, Math.Min(2000, newitem.FTListIDs.Count));

                      if (templist.Contains("2019090200136"))
                      {

                      }
                      if (ishead)
                      {
                          newitem.AllFormCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                              && (!expireonly || (expireonly && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now))
                              );
                          newitem.FinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                              && (!c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue || !c.FORM_INSTANCE.ExpireDate.HasValue || c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.Date <= c.FORM_INSTANCE.ExpireDate.Value)
                              );

                          //newitem.SAllCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType == "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                          //    && (!expireonly || (expireonly && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now))
                          //    );
                          //newitem.TAllCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType != "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                          //    && (!expireonly || (expireonly && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now))
                          //    );
                          //newitem.SFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType=="Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                          //    //&& (!c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue || !c.FORM_INSTANCE.ExpireDate.HasValue || c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.Date <= c.FORM_INSTANCE.ExpireDate.Value)
                          //    );
                          //newitem.TFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType != "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                          //    //&& (!c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue || !c.FORM_INSTANCE.ExpireDate.HasValue || c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.Date <= c.FORM_INSTANCE.ExpireDate.Value)
                          //    );

                          //newitem.SAllCount2 += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType == "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                          //    && (!expireonly || (expireonly && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now))
                          //    && (service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(d=> d.FORM_INSTANCE.PARENT_INSTANCE_ID == c.FORM_INSTANCE.PARENT_INSTANCE_ID && d.INSTANCE_ID< c.INSTANCE_ID && c.Status == '0' ) == 0)
                          //    );
                          //newitem.TAllCount2 += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType != "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                          //    && (!expireonly || (expireonly && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now))
                          //    && (service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(d=> d.FORM_INSTANCE.PARENT_INSTANCE_ID == c.FORM_INSTANCE.PARENT_INSTANCE_ID && d.INSTANCE_ID< c.INSTANCE_ID && c.Status == '0' ) == 0)
                          //    );



                          newitem.NotFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status == '0' && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                              && c.FORM_INSTANCE.ExpireDate.Value > DateTime.Now
                              );

                          newitem.ExpireFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                              && (c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.Date > c.FORM_INSTANCE.ExpireDate.Value)
                              );
                          newitem.ExpireNotFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status == '0' && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                              && c.FORM_INSTANCE.ExpireDate.Value <= DateTime.Now
                              );

                      }
                      else
                      {
                          newitem.AllFormCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                              && (!expireonly || (expireonly && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now))
                              );
                          newitem.FinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                              && (!c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue || !c.FORM_INSTANCE.ExpireDate.HasValue || c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.Date <= c.FORM_INSTANCE.ExpireDate.Value)
                              );

                          newitem.SAllCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType == "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                              && (!expireonly || (expireonly && ((c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now) || c.Status != '0')))
                              );
                          newitem.TAllCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType != "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                              && (!expireonly || (expireonly && ((c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now) || c.Status != '0')))
                              );
                          newitem.SFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType == "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                              //&& (!c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue || !c.FORM_INSTANCE.ExpireDate.HasValue || c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.Date <= c.FORM_INSTANCE.ExpireDate.Value)
                              );
                          newitem.TFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType != "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                              //&& (!c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue || !c.FORM_INSTANCE.ExpireDate.HasValue || c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.Date <= c.FORM_INSTANCE.ExpireDate.Value)
                              );
                          newitem.SAllCount2 += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType == "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                              && (!expireonly || (expireonly && ((c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now) || c.Status != '0')))
                              && (service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(d => d.FORM_INSTANCE.PARENT_INSTANCE_ID == c.FORM_INSTANCE.PARENT_INSTANCE_ID && d.INSTANCE_ID < c.INSTANCE_ID && d.Status == '0') == 0)
                              );
                          newitem.TAllCount2 += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType != "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                              && (!expireonly || (expireonly && ((c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now) || c.Status != '0')))
                              && (service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(d => d.FORM_INSTANCE.PARENT_INSTANCE_ID == c.FORM_INSTANCE.PARENT_INSTANCE_ID && d.INSTANCE_ID < c.INSTANCE_ID && d.Status == '0') == 0)
                              );


                          newitem.NotFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status == '0' && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                              && c.FORM_INSTANCE.ExpireDate.Value > DateTime.Now
                              );

                          newitem.ExpireFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                              && (c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.Date > c.FORM_INSTANCE.ExpireDate.Value)
                              );
                          newitem.ExpireNotFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status == '0' && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                              && c.FORM_INSTANCE.ExpireDate.Value <= DateTime.Now
                              );

                      }
                      if (newitem.FTListIDs.Contains("2019090200136"))
                      {

                      }
                      for (int i = 1; i < loopCycle; i++)
                      {
                          int rangeIndex = (i * 2000);
                          templist = newitem.FTListIDs.GetRange(rangeIndex, Math.Min(2000, newitem.FTListIDs.Count - rangeIndex));
                          if (templist.Contains("2019090200136"))
                          {

                          }
                          if (ishead)
                          {
                              newitem.AllFormCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                                  && (!expireonly || (expireonly && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now))
                                  );
                              newitem.FinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                                  && (!c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue || !c.FORM_INSTANCE.ExpireDate.HasValue || c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.Date <= c.FORM_INSTANCE.ExpireDate.Value)
                                  );
                              //newitem.SAllCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType == "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                              //    && (!expireonly || (expireonly && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now))
                              //    );
                              //newitem.TAllCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType != "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                              //    && (!expireonly || (expireonly && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now))
                              //    );
                              //newitem.SFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType == "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                              //    //&& (!c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue || !c.FORM_INSTANCE.ExpireDate.HasValue || c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.Date <= c.FORM_INSTANCE.ExpireDate.Value)
                              //    );
                              //newitem.TFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType != "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                              //    //&& (!c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue || !c.FORM_INSTANCE.ExpireDate.HasValue || c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.Date <= c.FORM_INSTANCE.ExpireDate.Value)
                              //    );
                              //newitem.SAllCount2 += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType == "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                              //    && (!expireonly || (expireonly && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now))
                              //    && (service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(d => d.FORM_INSTANCE.PARENT_INSTANCE_ID == c.FORM_INSTANCE.PARENT_INSTANCE_ID && d.INSTANCE_ID < c.INSTANCE_ID && c.Status == '0') == 0)
                              //    );
                              //newitem.TAllCount2 += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType != "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                              //    && (!expireonly || (expireonly && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now))
                              //    && (service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(d => d.FORM_INSTANCE.PARENT_INSTANCE_ID == c.FORM_INSTANCE.PARENT_INSTANCE_ID && d.INSTANCE_ID < c.INSTANCE_ID && c.Status == '0') == 0)
                              //    );

                              newitem.NotFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status == '0' && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                                  && c.FORM_INSTANCE.ExpireDate.Value > DateTime.Now
                                  );
                              newitem.ExpireFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                                  && (c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.Date > c.FORM_INSTANCE.ExpireDate.Value)
                                  );
                              newitem.ExpireNotFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status == '0' && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid
                                  && c.FORM_INSTANCE.ExpireDate.Value <= DateTime.Now
                                  );
                          }
                          else
                          {
                              newitem.AllFormCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                                  && (!expireonly || (expireonly && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now))
                                  );
                              newitem.FinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                                  && (!c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue || !c.FORM_INSTANCE.ExpireDate.HasValue || c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.Date <= c.FORM_INSTANCE.ExpireDate.Value)
                                  );
                              newitem.SAllCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType == "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                                  && (!expireonly || (expireonly && ((c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now) || c.Status != '0')))
                                  );
                              newitem.TAllCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType != "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                                  && (!expireonly || (expireonly && ((c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now) || c.Status != '0')))
                                  );
                              newitem.SFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType == "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                                  //&& (!c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue || !c.FORM_INSTANCE.ExpireDate.HasValue || c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.Date <= c.FORM_INSTANCE.ExpireDate.Value)
                                  );
                              newitem.TFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType != "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                                  //&& (!c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue || !c.FORM_INSTANCE.ExpireDate.HasValue || c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.Date <= c.FORM_INSTANCE.ExpireDate.Value)
                                  );
                              newitem.SAllCount2 += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType == "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                                  && (!expireonly || (expireonly && ((c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now) || c.Status != '0')))
                                  && (service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(d => d.FORM_INSTANCE.PARENT_INSTANCE_ID == c.FORM_INSTANCE.PARENT_INSTANCE_ID && d.INSTANCE_ID < c.INSTANCE_ID && d.Status == '0') == 0)
                                  );
                              newitem.TAllCount2 += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => c.TargetType != "Member" && templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                                  && (!expireonly || (expireonly && ((c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now) || c.Status != '0')))
                                  && (service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(d => d.FORM_INSTANCE.PARENT_INSTANCE_ID == c.FORM_INSTANCE.PARENT_INSTANCE_ID && d.INSTANCE_ID < c.INSTANCE_ID && d.Status == '0') == 0)
                                  );


                              newitem.NotFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status == '0' && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                                  && c.FORM_INSTANCE.ExpireDate.Value > DateTime.Now
                                  );
                              newitem.ExpireFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                                  && (c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.Date > c.FORM_INSTANCE.ExpireDate.Value)
                                  );
                              newitem.ExpireNotFinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status == '0' && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID
                                  && c.FORM_INSTANCE.ExpireDate.Value <= DateTime.Now
                                  );
                          }

                      }

                      newitem.StasticPermissionRoles = permissions;
                      result.Add(newitem);

                  }


              }

              return result;
          }
      }


      public List<EduFormTemplateListDto> GetEvalStasticDataRange(List<string> hospcodes, List<string> deptcodes, List<string> jobcodes, List<int> templateids, DateTime sdate, DateTime edate, bool finishonly)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string> alldeptcodes = new List<string>();
              if (deptcodes.Contains(""))
              {
                  alldeptcodes = null;
              }
              else
              {
                  foreach (string deptcode in deptcodes)
                  {
                      if (!alldeptcodes.Contains(deptcode))
                      {
                          alldeptcodes.Add(deptcode);
                      }

                      foreach (string rr in GetChildDepts(deptcode, "KMUH"))
                      {

                          if (!alldeptcodes.Contains(rr))
                          {
                              alldeptcodes.Add(rr);
                          }
                      }
                  }
              }

              //List<EduTerm> terms = service.UnitOfWork.EduTerms.Where(c => deptcodes.Contains(c.DepCode)  && jobcodes.Contains(c.JobCode) && c.DateFrom >= sdate && c.DateFrom <= edate).ToList();
              List<EduFormTemplateListDto> result = new List<EduFormTemplateListDto>();
              foreach (int templateid in templateids)
              {

                  FORM_TEMPLATE template = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.TEMPLATE_ID == templateid).FirstOrDefault();

                  int maintemplateid = template.PARENT_TEMPLATE_ID == null ? template.TEMPLATE_ID : template.PARENT_TEMPLATE_ID.Value;

                  bool ishead = service.UnitOfWork.FORM_TEMPLATEs.Count(c => c.PARENT_TEMPLATE_ID == template.TEMPLATE_ID) > 0;

                  int maxchildtemplateid = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.PARENT_TEMPLATE_ID == template.TEMPLATE_ID).Select(c => c.TEMPLATE_ID).Max();

                  var datas = (from term in service.UnitOfWork.EduTerms
                               join setting in service.UnitOfWork.EduFormTemplateLists
                               on term.EduTermID equals setting.EduTermID
                               where (alldeptcodes == null || alldeptcodes.Contains(term.DepCode)
                               || (term.EduTerm1 != null && alldeptcodes.Contains(term.EduTerm1.DepCode))
                               || (term.EduTerm1 != null && term.EduTerm1.EduTerm1 != null && alldeptcodes.Contains(term.EduTerm1.EduTerm1.DepCode))
                               ) && jobcodes.Contains(term.JobCode)
                               &&
                               (hospcodes.Contains("") || hospcodes.Contains(term.Hospital.ToString()))
                               && setting.TEMPLATE_ID == maintemplateid && setting.ExecuteDate >= sdate && setting.ExecuteDate <= edate
                               select setting.FTListID).ToList();




                  List<string> permissions = service.UnitOfWork.EduFormStasticPermissions.Where(c => c.TEMPLATE_ID == templateid && c.Enable).Select(c => c.RoleID).ToList();

                  EduFormTemplateListDto newitem = new EduFormTemplateListDto();
                  newitem = new EduFormTemplateListDto();
                  newitem.FTListIDs = new List<string>();

                  //newitem.RootEduTermID = term.EduTermID;
                  //newitem.RootEduTermName = "(" + term.EduStopCode + ")" + term.Name;
                  newitem.TEMPLATE_ID = templateid;
                  newitem.TEMPLATE_NAME = template.TEMPLATE_NAME;
                  newitem.FTListIDs = datas;




                  double dLoopCycle = (datas.Count / 2000);
                  int loopCycle = Convert.ToInt32(Math.Ceiling(dLoopCycle));
                  loopCycle = loopCycle == 0 ? 1 : loopCycle;


                  List<string> templist = datas.GetRange(0, Math.Min(2000, datas.Count));


                  if (ishead)
                  {
                      newitem.AllFormCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid);
                      newitem.FinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid);
                  }
                  else
                  {
                      newitem.AllFormCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID);
                      newitem.FinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID);
                  }

                  for (int i = 1; i < loopCycle; i++)
                  {
                      int rangeIndex = (i * 2000);
                      templist = datas.GetRange(rangeIndex, Math.Min(2000, datas.Count - rangeIndex));
                      if (ishead)
                      {
                          newitem.AllFormCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid);
                          newitem.FinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid);
                      }
                      else
                      {
                          newitem.AllFormCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID);
                          newitem.FinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => templist.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID);
                      }

                  }

                  newitem.StasticPermissionRoles = permissions;
                  result.Add(newitem);

              }

              return result;
          }
      }


      public List<EduFormTemplateListDto> GetEvalStasticDataRange(List<string> deptcodes, List<string> jobcodes, int templateid, DateTime sdate, DateTime edate, bool finishonly)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string> alldeptcodes = new List<string>();
              if (deptcodes.Contains(""))
              {
                  alldeptcodes = null;
              }
              else
              {
                  foreach (string deptcode in deptcodes)
                  {
                      if (!alldeptcodes.Contains(deptcode))
                      {
                          alldeptcodes.Add(deptcode);
                      }

                      foreach (string rr in GetChildDepts(deptcode, "KMUH"))
                      {

                          if (!alldeptcodes.Contains(rr))
                          {
                              alldeptcodes.Add(rr);
                          }
                      }
                  }
              }
              //List<EduTerm> terms = service.UnitOfWork.EduTerms.Where(c => deptcodes.Contains(c.DepCode)  && jobcodes.Contains(c.JobCode) && c.DateFrom >= sdate && c.DateFrom <= edate).ToList();



              FORM_TEMPLATE template = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.TEMPLATE_ID == templateid).FirstOrDefault();

              int maintemplateid = template.PARENT_TEMPLATE_ID == null ? template.TEMPLATE_ID : template.PARENT_TEMPLATE_ID.Value;

              bool ishead = service.UnitOfWork.FORM_TEMPLATEs.Count(c => c.PARENT_TEMPLATE_ID == template.TEMPLATE_ID) > 0;

              int maxchildtemplateid = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.PARENT_TEMPLATE_ID == template.TEMPLATE_ID).Select(c => c.TEMPLATE_ID).Max();

              var datas = (from term in service.UnitOfWork.EduTerms
                           join setting in service.UnitOfWork.EduFormTemplateLists
                           on term.EduTermID equals setting.EduTermID
                           where (alldeptcodes == null || alldeptcodes.Contains(term.DepCode)
                           || (term.EduTerm1 != null && alldeptcodes.Contains(term.EduTerm1.DepCode))
                           || (term.EduTerm1 != null && term.EduTerm1.EduTerm1 != null && alldeptcodes.Contains(term.EduTerm1.EduTerm1.DepCode))
                           ) && jobcodes.Contains(term.JobCode)
                           && setting.TEMPLATE_ID == maintemplateid && setting.ExecuteDate >= sdate && setting.ExecuteDate <= edate
                           select setting.FTListID).ToList();

              List<EduFormTemplateListDto> result = new List<EduFormTemplateListDto>();


              List<string> permissions = service.UnitOfWork.EduFormStasticPermissions.Where(c => c.TEMPLATE_ID == templateid && c.Enable).Select(c => c.RoleID).ToList();

              EduFormTemplateListDto newitem = new EduFormTemplateListDto();
              newitem = new EduFormTemplateListDto();
              newitem.FTListIDs = new List<string>();

              //newitem.RootEduTermID = term.EduTermID;
              //newitem.RootEduTermName = "(" + term.EduStopCode + ")" + term.Name;
              newitem.TEMPLATE_ID = templateid;
              newitem.TEMPLATE_NAME = template.TEMPLATE_NAME;
              newitem.FTListIDs = datas;

              if (ishead)
              {
                  newitem.AllFormCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => datas.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid);
                  newitem.FinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => datas.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == maxchildtemplateid);
              }
              else
              {
                  newitem.AllFormCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => datas.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID);
                  newitem.FinishCount += service.UnitOfWork.FORM_INSTANCE_TARGETs.Count(c => datas.Contains(c.FORM_INSTANCE.INSTANCE_REMARK) && c.Status != '0' && c.FORM_INSTANCE.TEMPLATE_ID == template.TEMPLATE_ID);
              }

              result.Add(newitem);



              //帶入可分析權限
              if (permissions.Count > 0)
              {
                  foreach (EduFormTemplateListDto dto in result)
                  {
                      dto.StasticPermissionRoles = permissions;
                  }
              }

              return result;
          }
      }


      public List<EduFormTemplateListDto> GetEvalStasticData(string edutermid, int? templateid, string hospcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduTerm term = service.UnitOfWork.EduTerms.Where(c => c.EduTermID == edutermid).FirstOrDefault();

              List<EduTerm> list = new List<EduTerm>();//service.UnitOfWork.EduTerms.Where(c => c.RoundCode.Contains(term.RoundCode)).ToList();

              list.Add(term);

              List<EduFormTemplateListDto> result = new List<EduFormTemplateListDto>();
              foreach (EduTerm t in list)
              {
                  List<EduFormTemplateListDto> templist = GetEduFormSettingList(t.EduTermID, templateid, hospcode);
                  foreach (EduFormTemplateListDto dto in templist)
                  {
                      EduFormTemplateListDto newitem = result.Where(c => c.TEMPLATE_ID == dto.TEMPLATE_ID).FirstOrDefault();

                      if (newitem == null)
                      {
                          newitem = new EduFormTemplateListDto();
                          newitem.RootEduTermID = t.EduTermID;
                          newitem.TEMPLATE_ID = dto.TEMPLATE_ID;
                          newitem.TEMPLATE_NAME = dto.TEMPLATE_NAME;
                          newitem.RootEduTermName = "(" + t.EduStopCode + ")" + t.Name;
                          result.Add(newitem);
                      }
                      newitem.AllFormCount += dto.AllFormCount;
                      newitem.FinishCount += dto.FinishCount;
                  }
              }



              //帶入可分析權限

              foreach (EduFormTemplateListDto dto in result)
              {
                  List<string> permissions = service.UnitOfWork.EduFormStasticPermissions.Where(c => c.TEMPLATE_ID == dto.TEMPLATE_ID && c.Enable).Select(c => c.RoleID).ToList();
                  if (permissions.Count > 0)
                  {
                      dto.StasticPermissionRoles = permissions;
                  }
              }

              return result;
          }
      }

      #endregion

      #region 自動發送考核表
      public List<AutoEduFormTemplateListDto> GetAutoEduFormTemplateLists(string jobcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<AutoEduFormTemplateListDto> list = service.ReadAutoEduFormTemplateLists(c => jobcode == "" || jobcode == null || c.JobCode == jobcode).ToList();
              HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();
              foreach (AutoEduFormTemplateListDto dto in list)
              {
                  dto.TemplateName = vc.SelectFormTemplate(dto.TEMPLATE_ID).TEMPLATE_NAME;
              }
              return list;
          }
      }

      public List<AutoEduFormTemplateListDto> GetAutoEduFormTemplateList(List<string> jobcodes, string deptcode, bool displayEnableOnly, string hospcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string currenteduyear = "";
              if (DateTime.Now.Month >= 8)
              {
                  currenteduyear = (DateTime.Now.Year - 1911).ToString();
              }
              else
              {
                  currenteduyear = (DateTime.Now.Year - 1911 - 1).ToString();
              }


              var datas = from aftlist in service.UnitOfWork.AutoEduFormTemplateLists
                          join template in service.UnitOfWork.FORM_TEMPLATEs
                          on aftlist.TEMPLATE_ID equals template.TEMPLATE_ID
                          where
                          template.FORM_TEMPLATE_PERMISSIONs.Count(c=> c.HOSPCODE == hospcode)>0
                          &&
                          (jobcodes == null || jobcodes.Count == 0 || jobcodes.Contains(aftlist.JobCode))
                          &&
                          (deptcode == null || deptcode == "" ||
                          (
                          service.UnitOfWork.AutoEduFormTemplateExcepts.Count(d => d.ExceptType == "Dept" && d.ExceptKey == deptcode) == 0
                          &&
                          (
                             service.UnitOfWork.AutoEduFormTemplateExcepts.Count(d => d.ExceptType == "SendDept") == 0
                             ||
                             service.UnitOfWork.AutoEduFormTemplateExcepts.Count(d => d.ExceptType == "SendDept" && d.ExceptKey == deptcode) > 0
                          )
                          )
                          )
                          &&
                          (
                             displayEnableOnly == false
                             ||
                             (
                             //(aftlist.EduYear == null || aftlist.EduYear == "" || aftlist.EduYear == currenteduyear)
                             //&&
                             (aftlist.Sdate == null || aftlist.Sdate <= DateTime.Now.Date)
                             &&
                             (aftlist.Edate == null || aftlist.Edate >= DateTime.Now.Date)

                             )
                          )
                          select new { aftlist, template };

              AutoEduFormTemplateListAssembler asm = new AutoEduFormTemplateListAssembler();
              List<AutoEduFormTemplateListDto> result = new List<AutoEduFormTemplateListDto>();

              foreach (var data in datas)
              {
                  AutoEduFormTemplateListDto dto = asm.Assemble(data.aftlist);
                  dto.TemplateName = data.template.TEMPLATE_NAME;
                  result.Add(dto);
              }
              return result;
          }
      }

      public List<AutoEduFormTemplateListDto> GetAutoEduFormTemplateLists(EduTermDto eduterm)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              int level = eduterm.RoundCode.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries).Length;
              List<AutoEduFormTemplateListDto> list = service.ReadAutoEduFormTemplateLists(c => ((eduterm.JobCode == "") || (eduterm.JobCode == null) || (c.JobCode == eduterm.JobCode)) && (c.SendFloor == null || c.SendFloor == level)).ToList();

              for (int i = 0; i < list.Count; i++)
              {
                  if(!IsAutoSend(list[i],eduterm))
                  {
                      list.RemoveAt(i);
                      i--;
                  }

                  //List<AutoEduFormTemplateExceptDto> explist = service.ReadAutoEduFormTemplateExcepts(c => c.AutoFTListID == list[i].AutoFTListID).ToList();

                  //if (explist.Count(c => c.ExceptType == "SendTerm") > 0 && explist.Count(c => c.ExceptType == "SendTerm" && c.ExceptKey == eduterm.EduTermID) == 0)
                  //{
                  //    list.RemoveAt(i);
                  //    i--;
                  //    continue;
                  //}

                  ////是否輪訓排除
                  //if (explist.Count(c => c.ExceptKey == eduterm.EduTermID && c.ExceptType == "EduTerm") > 0)
                  //{
                  //    list[i].IsSend = false;
                  //}
                  //else
                  //{
                  //    list[i].IsSend = true;
                  //}
                  
                  ////是否部門排除
                  //if (explist.Count(c => c.ExceptKey == eduterm.DepCode && c.ExceptType == "Dept") > 0)
                  //{
                  //    list.RemoveAt(i);
                  //    i--;
                  //}

                  //if(eduterm.DepCode == "7000" && explist.Count(c => c.ExceptKey == eduterm.DepCode && c.ExceptType == "SendDept") == 0)
                  //{
                  //    list.RemoveAt(i);
                  //    i--;
                  //}

              }

              HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();
              foreach (AutoEduFormTemplateListDto dto in list)
              {
                  dto.TemplateName = vc.SelectFormTemplate(dto.TEMPLATE_ID).TEMPLATE_NAME;
              }

              return list;
          }
      }


      public AutoEduFormTemplateListDto GetAutoEduFormTemplateList(string autoftlistid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              AutoEduFormTemplateListDto dto = service.ReadAutoEduFormTemplateLists(autoftlistid);

              dto.JobName = service.ReadV_CodeRefs(c => c.Code == dto.JobCode && c.CodeType == "EduAct_JobSerial").FirstOrDefault().Name;

              return dto;
          }
      }

      public List<AutoEduFormTemplateTargetDto> GetAutoEduFormTemplateTargets(string autoftlistid)
      {

          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadAutoEduFormTemplateTargets(c => c.AutoFTListID == autoftlistid).ToList();
          }
      }

      public string DeleteAutoEduFormSetting(string autoftlistid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string result = null;
              service.DeleteAutoEduFormTemplateTargets(service.ReadAutoEduFormTemplateTargets(c => c.AutoFTListID == autoftlistid), false);
              service.DeleteAutoEduFormTemplateList(service.ReadAutoEduFormTemplateLists(autoftlistid), false);

              try
              {
                  service.UnitOfWork.SaveChanges();
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  result = ex.Message;
              }

              return result;
          }
      }

      #region 自動發送表單(新版)


      public void AutoCreateFormInstance(DateTime date)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              DateTime bdate = date.AddYears(-50);
              var data = from tlist in service.UnitOfWork.EduFormTemplateLists
                         join term in service.UnitOfWork.EduTerms
                         on tlist.EduTermID equals term.EduTermID
                         where service.UnitOfWork.EduTeamMemberRundowns.Count(c=> c.EduTermID == term.EduTermID)>0
                         && ((tlist.ExecuteDate <= date && tlist.ExecuteDate > bdate) ) && tlist.Status == null
                         select tlist;
              EduFormTemplateListAssembler asm = new EduFormTemplateListAssembler();

              List<EduFormTemplateListDto> list = asm.Assemble(data.ToList()).ToList(); //service.ReadEduFormTemplateLists(c => c.ExecuteDate <= date && c.ExecuteDate > bdate && c.Status == null).ToList();
              foreach (EduFormTemplateListDto ftlist in list)
              {
                  if (ftlist.FTListID != "2023060300606")
                  {
                      //continue;
                  }
                  //if (ftlist.EduTermID != "20210829000000000153")
                  //{
                  //    continue;
                  //}
                  try
                  {
                      if (service.UnitOfWork.EduTerms.Count(c => c.EduTermID == ftlist.EduTermID) > 0)
                      {

                          CreateEduForm(ftlist.FTListID);

                      }
                  }
                  catch (Exception ex)
                  {
                      WriteLog("AutoCreateFormInstance", "設定序號：" + ftlist.FTListID + "發送失敗，" + ex.Message);
                  }
              }
          }

      }

      public void CreateEduForm(string ftlistid)
      {
          //測試
          //if (ftlistid != "2016080170007")
          //{
          //    return;
          //}

          using (EduActivityContextService service = new EduActivityContextService())
          {
              


              bool haserror = false;

              EduFormTemplateList main = service.UnitOfWork.EduFormTemplateLists.Where(c => c.FTListID == ftlistid).FirstOrDefault();
              List<EduFormTemplateTarget> targets = service.UnitOfWork.EduFormTemplateTargets.Where(c => c.FTListID == ftlistid).ToList();
              HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();
              HtmlFormUtility.FORM_TEMPLATES template = vc.GetFormTemplateById(main.TEMPLATE_ID);

          
              int datediff = 0;
              //if (main.ExecuteDate.Date < DateTime.Now.Date)
              //{
              //    datediff = Math.Abs(new TimeSpan(main.ExecuteDate.Date.Ticks - DateTime.Now.Date.Ticks).Days);
              //}



              List<HtmlFormUtility.FORM_TEMPLATES> childtemplates = vc.GetFormTemplateByParentId(template.TEMPLATE_ID);

              if (!template.IsMultiTargetForm)
              {
                  #region 一般處理
                  if (childtemplates.Count == 0)
                  {

                      #region 單一表單

                      foreach (EduFormTemplateTarget target in targets)
                      {
                          //if (target.ExpireDate != null)
                          //{
                          //    target.ExpireDate = target.ExpireDate.Value.AddDays(datediff);
                          //}

                          string targettype = "";
                          if (target.RoleType == "T")
                          {
                              targettype = target.TeacherType;
                          }
                          else
                          {
                              targettype = target.RoleType;
                          }

                          #region 學生

                          if (targettype == "S")
                          {
                              var members = (from rr in service.UnitOfWork.EduTeamMemberRundowns
                                             join mm in service.UnitOfWork.Members
                                             on new { MemberID = rr.MemberID } equals new { MemberID = mm.MemberID }
                                             where rr.EduTermID == main.EduTermID && (main.UDStudent == "" || main.UDStudent == null || mm.IsHospMember == main.UDStudent)
                                             select new { rr.EduTermID, rr.MemberID, mm.IsHospMember, mm.Name }
                                             ).ToList();
                              if (members.Count() == 0)
                              {
                                  //WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + main.EduTermID + ",沒有學員,無法發送");
                                  haserror = true;
                                  return;
                              }

                              foreach (var member in members)
                              {
                                  try
                                  {

                                      if (service.UnitOfWork.FORM_INSTANCEs.Count(c => c.INHOSPID == member.EduTermID && c.INSTANCE_REMARK == main.FTListID && c.TargetID == member.IsHospMember) >= members.Count(c => c.IsHospMember == member.IsHospMember))
                                      {
                                          WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",對象：" + member.IsHospMember + member.Name + ",已有發送資料將不發送");

                                          WriteLog("表單自動發送", "設定序號：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",對象：" + member.IsHospMember + member.Name + ",已有發送資料將不發送");
                                          continue;
                                      }
                                      HtmlFormUtility.FORM_INSTANCES newinstance = new HtmlFormUtility.FORM_INSTANCES();
                                      newinstance.CREATER = main.Creater;
                                      if (target.ExpireDate != null)
                                      {
                                          newinstance.expireDate = target.ExpireDate.Value.AddDays(datediff);
                                      }
                                      newinstance.INHOSPID = member.EduTermID;
                                      newinstance.INSTANCE_CONTENT = template.TEMPLATE_CONTENT;
                                      newinstance.INSTANCE_CREATE_DATETIME = DateTime.Now;
                                      newinstance.INSTANCE_NAME = template.TEMPLATE_NAME;
                                      newinstance.INSTANCE_REMARK = main.FTListID;
                                      if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                      {
                                          newinstance.TargetID = target.UserDefineTargetID;
                                      }
                                      else
                                      {
                                          newinstance.TargetID = member.IsHospMember;
                                      }
                                      newinstance.TargetType = "Member";
                                      newinstance.TEMPLATE_ID = template.TEMPLATE_ID;
                                      newinstance.Status = "0";


                                      HtmlFormUtility.Components.ProcessComponent comp = new HtmlFormUtility.Components.ProcessComponent();
                                      newinstance.INSTANCE_ID = comp.CreateFormInstance(newinstance);

                                      FORM_INSTANCE_TARGET newtarget = new FORM_INSTANCE_TARGET();
                                      newtarget.INSTANCE_ID = newinstance.INSTANCE_ID;
                                      newtarget.Status = '0';
                                      if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                      {
                                          newtarget.TargetID = target.UserDefineTargetID;
                                      }
                                      else
                                      {
                                          newtarget.TargetID = member.IsHospMember;
                                      }

                                      newtarget.TargetOrder = 0;
                                      newtarget.TargetType = "Member";
                                      service.UnitOfWork.Add(newtarget);
                                      service.UnitOfWork.SaveChanges();
                                  }
                                  catch (Exception ex)
                                  {
                                      WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",對象：" + member.IsHospMember + member.Name + "," + ex.Message);
                                      haserror = true;
                                  }
                              }
                          }
                          #endregion
                          #region 老師
                          else
                          {
                              if ((main.EachStudent.HasValue && main.EachStudent.Value == true) || (!main.EachStudent.HasValue))
                              {
                                  var members = (from rr in service.UnitOfWork.EduTeamMemberRundowns
                                                 join mm in service.UnitOfWork.Members
                                                 on new { MemberID = rr.MemberID } equals new { MemberID = mm.MemberID }
                                                 where rr.EduTermID == main.EduTermID && (main.UDStudent == "" || main.UDStudent == null || mm.IsHospMember == main.UDStudent)
                                                 select new { rr.EduTermID, rr.MemberID, mm.IsHospMember, mm.Name }
                                                 );

                                  if (members.Count() == 0)
                                  {
                                      //WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + main.EduTermID + ",沒有學員,無法發送");
                                      haserror = true;
                                      return;
                                  }

                                  //List<EduRefTeacher> teachersettingslist = new List<EduRefTeacher>();

                                  string edutermid = "";
                                  foreach (var member in members.ToList())
                                  {
                                      List<EduRefTeacher> settings = GetMemberRefTeacher(targettype, member.EduTermID, member.MemberID, service, template.TEMPLATE_REMARK);
                                      if (settings.Count == 0)
                                      {
                                          WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + main.EduTermID + ",教師設定不完全無法發送");
                                          haserror = true;
                                          return;
                                          //teachersettingslist.Add(settings);
                                      }

                                      switch (main.SendOrderSetting)
                                      {
                                          case "first":
                                              settings = new List<EduRefTeacher>() { settings.FirstOrDefault() };
                                              break;
                                          case "after1":
                                              if (settings.Count > 1)
                                              {
                                                  settings.RemoveAt(0);
                                              }
                                              else
                                              {
                                                  settings = new List<EduRefTeacher>();
                                              }
                                              break;
                                          case "all":
                                              break;
                                          default:
                                              settings = new List<EduRefTeacher>() { settings.FirstOrDefault() };
                                              break;
                                      }



                                      if (edutermid != "" && edutermid != settings.FirstOrDefault().EduTermID)
                                      {
                                          WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + main.EduTermID + ",教師設定不完全無法發送");
                                          haserror = true;
                                          return;
                                      }
                                      edutermid = settings.FirstOrDefault().EduTermID;
                                  }


                                  foreach (var member in members.ToList())
                                  {
                                      string teacherid = "";
                                      try
                                      {
                                          List<EduRefTeacher> teachersettings = GetMemberRefTeacher(targettype, member.EduTermID, member.MemberID, service, template.TEMPLATE_REMARK);//teachersettingslist.Where(c => (c.RefID == member.MemberID && c.RefTable == "EduTeamMemberRundown") || (c.RefID == member.EduTermID && c.RefTable == "EduTerm")).FirstOrDefault();


                                          if (teachersettings.Count > 0)
                                          {

                                              switch (main.SendOrderSetting)
                                              {
                                                  case "first":
                                                      teachersettings = new List<EduRefTeacher>() { teachersettings.FirstOrDefault() };
                                                      break;
                                                  case "after1":
                                                      if (teachersettings.Count > 1)
                                                      {
                                                          teachersettings.RemoveAt(0);
                                                      }
                                                      else
                                                      {
                                                          teachersettings = new List<EduRefTeacher>();
                                                      }
                                                      break;
                                                  case "all":
                                                      break;
                                                  default:
                                                      teachersettings = new List<EduRefTeacher>() { teachersettings.FirstOrDefault() };
                                                      break;
                                              }

                                              foreach (EduRefTeacher tsetting in teachersettings)
                                              {

                                                  if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                                  {
                                                      teacherid = target.UserDefineTargetID;
                                                  }
                                                  else
                                                  {
                                                      teacherid = tsetting.TeacherID;
                                                  }


                                                  if (service.UnitOfWork.FORM_INSTANCEs.Count(c => c.INHOSPID == member.EduTermID && c.INSTANCE_REMARK == main.FTListID && c.TargetID == teacherid && c.EvalTargetID == member.MemberID) >= teachersettings.Count(c => c.TeacherID == tsetting.TeacherID))
                                                  {
                                                      WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",對象：" + teacherid + ",考核對象：" + member.IsHospMember + member.Name + ",已有發送資料將不發送");

                                                      WriteLog("表單自動發送", "設定序號：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",對象：" + teacherid + ",考核對象：" + member.IsHospMember + member.Name + ",已有發送資料將不發送");
                                                      continue;
                                                  }

                                                  HtmlFormUtility.FORM_INSTANCES newinstance = new HtmlFormUtility.FORM_INSTANCES();
                                                  newinstance.CREATER = main.Creater;
                                                  if (target.ExpireDate != null)
                                                  {
                                                      newinstance.expireDate = target.ExpireDate.Value.AddDays(datediff);
                                                  }
                                                  newinstance.INHOSPID = member.EduTermID;
                                                  newinstance.INSTANCE_CONTENT = template.TEMPLATE_CONTENT;
                                                  newinstance.INSTANCE_CREATE_DATETIME = DateTime.Now;
                                                  newinstance.INSTANCE_NAME = template.TEMPLATE_NAME;
                                                  newinstance.INSTANCE_REMARK = main.FTListID;
                                                  newinstance.TargetID = teacherid;
                                                  newinstance.TargetType = target.RoleType.Replace("T", "Teacher");
                                                  newinstance.TEMPLATE_ID = template.TEMPLATE_ID;
                                                  newinstance.EvalTargetID = member.MemberID;
                                                  newinstance.Status = "0";


                                                  HtmlFormUtility.Components.ProcessComponent comp = new HtmlFormUtility.Components.ProcessComponent();
                                                  newinstance.INSTANCE_ID = comp.CreateFormInstance(newinstance);


                                                  FORM_INSTANCE_TARGET newtarget = new FORM_INSTANCE_TARGET();
                                                  newtarget.INSTANCE_ID = newinstance.INSTANCE_ID;
                                                  newtarget.Status = '0';
                                                  newtarget.TargetID = teacherid;
                                                  newtarget.TargetOrder = 0;
                                                  newtarget.TargetType = target.RoleType.Replace("T", "Teacher");
                                                  newtarget.TargetSource = tsetting.EduTermID;
                                                  service.UnitOfWork.Add(newtarget);
                                                  service.UnitOfWork.SaveChanges();
                                              }
                                          }
                                          else
                                          {
                                              WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + ",考核對象為設定教師" + targettype + ",未設定教師無法發送");
                                              haserror = true;
                                          }

                                      }
                                      catch (Exception ex)
                                      {
                                          WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",對象：" + teacherid + ",考核對象：" + member.IsHospMember + member.Name + "," + ex.Message);
                                          haserror = true;
                                      }
                                  }
                              }
                              else
                              {
                                  List<EduRefTeacher> teachersettings = GetTeachers(targettype, main.EduTermID, service);


                                  foreach (EduRefTeacher teachersetting in teachersettings)
                                  {
                                      HtmlFormUtility.FORM_INSTANCES newinstance = new HtmlFormUtility.FORM_INSTANCES();
                                      newinstance.CREATER = main.Creater;
                                      if (target.ExpireDate != null)
                                      {
                                          newinstance.expireDate = target.ExpireDate.Value.AddDays(datediff);
                                      }
                                      newinstance.INHOSPID = main.EduTermID;
                                      newinstance.INSTANCE_CONTENT = template.TEMPLATE_CONTENT;
                                      newinstance.INSTANCE_CREATE_DATETIME = DateTime.Now;
                                      newinstance.INSTANCE_NAME = template.TEMPLATE_NAME;
                                      newinstance.INSTANCE_REMARK = main.FTListID;

                                      if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                      {
                                          newinstance.TargetID = target.UserDefineTargetID;
                                      }
                                      else
                                      {
                                          newinstance.TargetID = teachersetting.TeacherID;
                                      }


                                      newinstance.TargetType = target.RoleType.Replace("T", "Teacher");
                                      newinstance.TEMPLATE_ID = template.TEMPLATE_ID;

                                      HtmlFormUtility.Components.ProcessComponent comp = new HtmlFormUtility.Components.ProcessComponent();
                                      newinstance.INSTANCE_ID = comp.CreateFormInstance(newinstance);


                                      FORM_INSTANCE_TARGET newtarget = new FORM_INSTANCE_TARGET();
                                      newtarget.INSTANCE_ID = newinstance.INSTANCE_ID;
                                      newtarget.Status = '0';
                                      if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                      {
                                          newtarget.TargetID = target.UserDefineTargetID;
                                          newtarget.TargetSource = main.EduTermID;
                                      }
                                      else
                                      {
                                          newtarget.TargetID = teachersetting.TeacherID;
                                          newtarget.TargetSource = teachersetting.EduTermID;
                                      }

                                      newtarget.TargetOrder = 0;
                                      newtarget.TargetType = target.RoleType.Replace("T", "Teacher");
                                      
                                      service.UnitOfWork.Add(newtarget);
                                      service.UnitOfWork.SaveChanges();
                                  }
                              }
                          }
                          #endregion
                      }

                      #endregion

                  }
                  else
                  {
                      #region 多表單

                      //很多人
                      if (template.IS_USER_DEFINE_TARGET || childtemplates.Count>2)
                      {
                          var members = ((from rr in service.UnitOfWork.EduTeamMemberRundowns
                                          join mm in service.UnitOfWork.Members
                                          on new { MemberID = rr.MemberID } equals new { MemberID = mm.MemberID }
                                          where rr.EduTermID == main.EduTermID && (main.UDStudent == "" || main.UDStudent == null || mm.IsHospMember == main.UDStudent)
                                          select new { rr.EduTermID, rr.MemberID, mm.IsHospMember, mm.Name }
                                                 )).ToList();
                          if (members.Count() == 0)
                          {
                              //WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + main.EduTermID + ",沒有學員,無法發送");
                              haserror = true;
                              return;
                          }


                          string edutermid = "";
                          foreach (var member in members)
                          {
                              foreach (EduFormTemplateTarget target in targets.Where(c=> c.RoleType!="S"))
                              {
                                  if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                  {
                                      continue;
                                  }
                                  string targettype = target.RoleType;
                                  string tremark = service.ReadFORM_TEMPLATEs(c => c.TEMPLATE_ID == target.SubTEMPLATE_ID).Select(c => c.TEMPLATE_REMARK).FirstOrDefault();
                                  List<EduRefTeacher> settings = GetMemberRefTeacher(targettype, member.EduTermID, member.MemberID, service, tremark);

                                  if (settings.Count == 0 )
                                  {
                                      WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + main.EduTermID + ",教師設定不完全無法發送");
                                      haserror = true;
                                      return;
                                  }
                                  settings = new List<EduRefTeacher>() { settings.FirstOrDefault() };

                                  if (edutermid != "" && edutermid != settings.FirstOrDefault().EduTermID)
                                  {
                                      WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + main.EduTermID + ",教師設定不完全無法發送");
                                      haserror = true;
                                      return;
                                  }
                                  edutermid = settings.FirstOrDefault().EduTermID;

                              }
                          }

                          string udstarget = null;
                          if (targets.Count(c => c.RoleType == "S") > 0)
                          {
                              var target = targets.Where(c => c.RoleType == "S").FirstOrDefault();

                              if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                              {
                                  udstarget = target.UserDefineTargetID;
                              }
                          }


                          foreach (var member in members.Where(c=> udstarget == null || c.IsHospMember == udstarget) )
                          {


                                      if (service.UnitOfWork.FORM_INSTANCEs.Count(c => c.INHOSPID == member.EduTermID && c.INSTANCE_REMARK == main.FTListID && c.TargetID == member.IsHospMember && c.PARENT_INSTANCE_ID == null) > 0)
                                      {
                                          WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + ",已有發送資料將不發送");

                                          WriteLog("表單自動發送", "設定序號：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + ",已有發送資料將不發送");
                                          continue;
                                      }

                                      #region 建立頭檔
                                      HtmlFormUtility.FORM_INSTANCES headerinstance = new HtmlFormUtility.FORM_INSTANCES();
                                      headerinstance.CREATER = main.Creater;
                                      headerinstance.expireDate = null;
                                      headerinstance.INHOSPID = member.EduTermID;
                                      headerinstance.INSTANCE_CONTENT = template.TEMPLATE_CONTENT;
                                      headerinstance.INSTANCE_CREATE_DATETIME = DateTime.Now;
                                      headerinstance.INSTANCE_NAME = template.TEMPLATE_NAME;
                                      headerinstance.INSTANCE_REMARK = main.FTListID;
                                      headerinstance.TargetID = member.IsHospMember;
                                      headerinstance.TargetType = "Member";
                                      headerinstance.Status = "0";
                                      headerinstance.TEMPLATE_ID = template.TEMPLATE_ID;
                                      headerinstance.EvalTargetID = member.MemberID;

                                      HtmlFormUtility.Components.ProcessComponent comp = new HtmlFormUtility.Components.ProcessComponent();
                                      headerinstance.INSTANCE_ID = comp.CreateFormInstance(headerinstance);

                                      #endregion



                                      foreach (EduFormTemplateTarget tt in targets)
                                      {


                                          #region 學生
                                          if (tt.RoleType == "S")
                                          {
                                              HtmlFormUtility.FORM_INSTANCES instanceS = new HtmlFormUtility.FORM_INSTANCES();
                                              FORM_INSTANCE_TARGET targetS = new FORM_INSTANCE_TARGET();

                                              EduFormTemplateTarget target = tt;
                                              if (target != null)
                                              {

                                                  FORM_TEMPLATE subtemplate = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.TEMPLATE_ID == target.SubTEMPLATE_ID).FirstOrDefault();
                                                  if (subtemplate != null)
                                                  {
                                                      instanceS.CREATER = main.Creater;
                                                      if (target.ExpireDate != null)
                                                      {
                                                          instanceS.expireDate = target.ExpireDate.Value.AddDays(datediff);
                                                      }
                                                      instanceS.INHOSPID = member.EduTermID;
                                                      instanceS.INSTANCE_CONTENT = subtemplate.TEMPLATE_CONTENT;
                                                      instanceS.INSTANCE_CREATE_DATETIME = DateTime.Now;
                                                      instanceS.INSTANCE_NAME = subtemplate.TEMPLATE_NAME;
                                                      instanceS.INSTANCE_REMARK = main.FTListID;
                                                      if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                                      {
                                                          instanceS.TargetID = target.UserDefineTargetID;
                                                          headerinstance.TargetID = target.UserDefineTargetID;
                                                          var udmember = members.Where(c => c.IsHospMember == target.UserDefineTargetID).FirstOrDefault();
                                                          if (udmember != null)
                                                          {
                                                              headerinstance.EvalTargetID = udmember.MemberID;
                                                          }
                                                      }
                                                      else
                                                      {
                                                          instanceS.TargetID = member.IsHospMember;
                                                      }

                                                      instanceS.TargetType = "Member";
                                                      instanceS.TEMPLATE_ID = subtemplate.TEMPLATE_ID;
                                                      instanceS.Status = "0";
                                                      instanceS.PARENT_INSTANCE_ID = headerinstance.INSTANCE_ID;

                                                      instanceS.INSTANCE_ID = comp.CreateFormInstance(instanceS);

                                                      targetS.INSTANCE_ID = instanceS.INSTANCE_ID;
                                                      targetS.Status = '0';
                                                      if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                                      {
                                                          targetS.TargetID = target.UserDefineTargetID;
                                                      }
                                                      else
                                                      {
                                                          targetS.TargetID = member.IsHospMember;
                                                      }

                                                      targetS.TargetOrder = 0;
                                                      targetS.TargetType = "Member";
                                                      service.UnitOfWork.Add(targetS);
                                                      service.UnitOfWork.SaveChanges();
                                                  }
                                                  else
                                                  {
                                                      service.UnitOfWork.Delete(headerinstance);
                                                      service.UnitOfWork.SaveChanges();
                                                      WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + "，找不到學生子表單template，無法發送");
                                                      haserror = true;
                                                  }
                                              }
                                              else
                                              {
                                                  service.UnitOfWork.Delete(headerinstance);
                                                  service.UnitOfWork.SaveChanges();
                                                  WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + "，設定資料不包含學生設定，無法發送");
                                                  haserror = true;
                                              }

                                          }
                                          #endregion


                                          #region 老師
                                          if (tt.RoleType != "S")
                                          {


                                              HtmlFormUtility.FORM_INSTANCES instanceT = new HtmlFormUtility.FORM_INSTANCES();
                                              FORM_INSTANCE_TARGET targetT = new FORM_INSTANCE_TARGET();

                                              EduFormTemplateTarget target = tt;
                                              if (target != null)
                                              {
                                                  
                                                  FORM_TEMPLATE subtemplate = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.TEMPLATE_ID == target.SubTEMPLATE_ID).FirstOrDefault();

                                                  if (subtemplate != null)
                                                  {
                                                      EduRefTeacher tsetting = GetMemberRefTeacher(tt.RoleType, member.EduTermID, member.MemberID, service, subtemplate.TEMPLATE_REMARK).FirstOrDefault();

                                                      instanceT.CREATER = main.Creater;
                                                      if (target.ExpireDate != null)
                                                      {
                                                          instanceT.expireDate = target.ExpireDate.Value.AddDays(datediff);
                                                      }
                                                      instanceT.INHOSPID = member.EduTermID;
                                                      instanceT.INSTANCE_CONTENT = subtemplate.TEMPLATE_CONTENT;
                                                      instanceT.INSTANCE_CREATE_DATETIME = DateTime.Now;
                                                      instanceT.INSTANCE_NAME = subtemplate.TEMPLATE_NAME;
                                                      instanceT.INSTANCE_REMARK = main.FTListID;

                                                      if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                                      {
                                                          instanceT.TargetID = target.UserDefineTargetID;
                                                      }
                                                      else
                                                      {
                                                          instanceT.TargetID = tsetting.TeacherID;
                                                      }


                                                      instanceT.TargetType = "Teacher";
                                                      instanceT.TEMPLATE_ID = subtemplate.TEMPLATE_ID;
                                                      instanceT.PARENT_INSTANCE_ID = headerinstance.INSTANCE_ID;
                                                      instanceT.EvalTargetID = headerinstance.EvalTargetID; //member.MemberID;
                                                      instanceT.Status = "0";
                                                      instanceT.INSTANCE_ID = comp.CreateFormInstance(instanceT);

                                                      targetT.INSTANCE_ID = instanceT.INSTANCE_ID;
                                                      targetT.Status = '0';
                                                      if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                                      {
                                                          targetT.TargetID = target.UserDefineTargetID;
                                                          targetT.TargetSource = member.EduTermID;
                                                      }
                                                      else
                                                      {
                                                          targetT.TargetID = tsetting.TeacherID;
                                                          targetT.TargetSource = tsetting.EduTermID;
                                                      }


                                                      targetT.TargetOrder = 0;
                                                      targetT.TargetType = "Teacher";
                                                      
                                                      service.UnitOfWork.Add(targetT);
                                                      service.UnitOfWork.SaveChanges();
                                                  }
                                                  else
                                                  {
                                                      service.UnitOfWork.Delete(headerinstance);
                                                      service.UnitOfWork.SaveChanges();
                                                      WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + ",考核對象為設定教師" + tt.RoleType + "，找不到教師子表單template，無法發送");
                                                      haserror = true;
                                                  }
                                              }
                                              else
                                              {
                                                  service.UnitOfWork.Delete(headerinstance);
                                                  service.UnitOfWork.SaveChanges();
                                                  WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + ",考核對象為設定教師" + tt.RoleType + "，設定資料不包含教師設定，無法發送");
                                                  haserror = true;
                                              }

                                          }
                                          #endregion
                                      }

                          }
                      }
                      //兩個人
                      else
                      {

                          string targettype = "";

                          string udteacher = null;

                          foreach (EduFormTemplateTarget target in targets)
                          {
                              if (target.RoleType == "T")
                              {
                                  targettype = target.TeacherType;
                                  if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                  {
                                      udteacher = target.UserDefineTargetID;
                                  }
                              }
                              //if(target.ExpireDate!=null)
                              //{
                              //    target.ExpireDate = target.ExpireDate.Value.AddDays(datediff);
                              //}
                          }
                          var members = (from rr in service.UnitOfWork.EduTeamMemberRundowns
                                         join mm in service.UnitOfWork.Members
                                         on new { MemberID = rr.MemberID } equals new { MemberID = mm.MemberID }
                                         where rr.EduTermID == main.EduTermID
                                         select new { rr.EduTermID, rr.MemberID, mm.IsHospMember, mm.Name }
                                                 ).ToList();
                          if (members.Count() == 0)
                          {
                              //WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + main.EduTermID + ",沒有學員,無法發送");
                              haserror = true;
                              return;
                          }


                          string edutermid = "";
                          foreach (var member in members)
                          {
                              List<EduRefTeacher> settings = GetMemberRefTeacher(targettype, member.EduTermID, member.MemberID, service, template.TEMPLATE_REMARK);

                              if (settings.Count == 0 && udteacher == null)
                              {
                                  WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + main.EduTermID + ",教師設定不完全無法發送");
                                  haserror = true;
                                  return;
                              }

                              switch (main.SendOrderSetting)
                              {
                                  case "first":
                                      settings = new List<EduRefTeacher>() { settings.FirstOrDefault() };
                                      break;
                                  case "after1":
                                      if (settings.Count > 1)
                                      {
                                          settings.RemoveAt(0);
                                      }
                                      else
                                      {
                                          settings = new List<EduRefTeacher>();
                                      }
                                      break;
                                  case "all":

                                      break;
                                  default:
                                      settings = new List<EduRefTeacher>() { settings.FirstOrDefault() };
                                      break;
                              }


                              if (udteacher == null)
                              {
                                  if (edutermid != "" && edutermid != settings.FirstOrDefault().EduTermID)
                                  {
                                      WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + main.EduTermID + ",教師設定不完全無法發送");
                                      haserror = true;
                                      return;
                                  }
                                  edutermid = settings.FirstOrDefault().EduTermID;
                              }
                              else
                              {
                                  edutermid = main.EduTermID;
                              }
                          }



                          foreach (var member in members)
                          {
                              List<EduRefTeacher> teachersettings = GetMemberRefTeacher(targettype, member.EduTermID, member.MemberID, service, template.TEMPLATE_REMARK);//teachersettingslist.Where(c => (c.RefID == member.MemberID && c.RefTable == "EduTeamMemberRundown") || (c.RefID == member.EduTermID && c.RefTable == "EduTerm")).FirstOrDefault(); //

                              EduFormTemplateTarget starget = targets.Where(c => c.RoleType == "S").FirstOrDefault();
                              if (starget.UserDefineTargetID != null && starget.UserDefineTargetID != "")
                              {
                                  if (member.IsHospMember != starget.UserDefineTargetID)
                                  {
                                      continue;
                                  }
                              }

                              if (udteacher != null)
                              {
                                  teachersettings = new List<EduRefTeacher>();
                                  EduRefTeacher t = new EduRefTeacher();
                                  t.EduTermID = member.EduTermID;
                                  t.RefID = member.MemberID;
                                  t.TeacherType = targettype;
                                  t.RefTable = "EduTeamMemberRundown";
                                  t.TeacherID = udteacher;

                                  teachersettings.Add(t);
                              }

                              switch (main.SendOrderSetting)
                              {
                                  case "first":
                                      teachersettings = new List<EduRefTeacher>() { teachersettings.FirstOrDefault() };
                                      break;
                                  case "after1":
                                      if (teachersettings.Count > 1)
                                      {
                                          teachersettings.RemoveAt(0);
                                      }
                                      else
                                      {
                                          teachersettings = new List<EduRefTeacher>();
                                      }
                                      break;
                                  case "all":
                                      break;
                                  default:
                                      teachersettings = new List<EduRefTeacher>() { teachersettings.FirstOrDefault() };
                                      break;
                              }

                              if (teachersettings.Count > 0)
                              {

                                  foreach (EduRefTeacher tsetting in teachersettings)
                                  {

                                      if (service.UnitOfWork.FORM_INSTANCEs.Count(c => c.INHOSPID == member.EduTermID && c.INSTANCE_REMARK == main.FTListID && (c.TargetID == tsetting.TeacherID || tsetting.TeacherID == "" || tsetting.TeacherID == null) && c.EvalTargetID == member.MemberID) >= teachersettings.Count(c => c.TeacherID == tsetting.TeacherID))
                                      {
                                          WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",對象：" + tsetting.TeacherID + ",考核對象：" + member.IsHospMember + member.Name + ",已有發送資料將不發送");

                                          WriteLog("表單自動發送", "設定序號：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",對象：" + tsetting.TeacherID + ",考核對象：" + member.IsHospMember + member.Name + ",已有發送資料將不發送");
                                          continue;
                                      }

                                      #region 建立頭檔
                                      HtmlFormUtility.FORM_INSTANCES headerinstance = new HtmlFormUtility.FORM_INSTANCES();
                                      headerinstance.CREATER = main.Creater;
                                      headerinstance.expireDate = null;
                                      headerinstance.INHOSPID = member.EduTermID;
                                      headerinstance.INSTANCE_CONTENT = template.TEMPLATE_CONTENT;
                                      headerinstance.INSTANCE_CREATE_DATETIME = DateTime.Now;
                                      headerinstance.INSTANCE_NAME = template.TEMPLATE_NAME;
                                      headerinstance.INSTANCE_REMARK = main.FTListID;
                                      headerinstance.TargetID = member.IsHospMember;
                                      headerinstance.TargetType = "Member";
                                      headerinstance.Status = "0";
                                      headerinstance.TEMPLATE_ID = template.TEMPLATE_ID;
                                      HtmlFormUtility.Components.ProcessComponent comp = new HtmlFormUtility.Components.ProcessComponent();
                                      headerinstance.INSTANCE_ID = comp.CreateFormInstance(headerinstance);

                                      #endregion



                                      foreach (EduFormTemplateTarget tt in targets)
                                      {


                                          #region 學生
                                          if (tt.RoleType == "S")
                                          {

                                              HtmlFormUtility.FORM_INSTANCES instanceS = new HtmlFormUtility.FORM_INSTANCES();
                                              FORM_INSTANCE_TARGET targetS = new FORM_INSTANCE_TARGET();

                                              EduFormTemplateTarget target = targets.Where(c => c.RoleType == "S").FirstOrDefault();
                                              if (target != null)
                                              {

                                                  FORM_TEMPLATE subtemplate = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.TEMPLATE_ID == target.SubTEMPLATE_ID).FirstOrDefault();
                                                  if (subtemplate != null)
                                                  {
                                                      instanceS.CREATER = main.Creater;
                                                      if (target.ExpireDate != null)
                                                      {
                                                          instanceS.expireDate = target.ExpireDate.Value.AddDays(datediff);
                                                      }
                                                      instanceS.INHOSPID = member.EduTermID;
                                                      instanceS.INSTANCE_CONTENT = subtemplate.TEMPLATE_CONTENT;
                                                      instanceS.INSTANCE_CREATE_DATETIME = DateTime.Now;
                                                      instanceS.INSTANCE_NAME = subtemplate.TEMPLATE_NAME;
                                                      instanceS.INSTANCE_REMARK = main.FTListID;
                                                      if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                                      {
                                                          instanceS.TargetID = target.UserDefineTargetID;
                                                      }
                                                      else
                                                      {
                                                          instanceS.TargetID = member.IsHospMember;
                                                      }

                                                      instanceS.TargetType = "Member";
                                                      instanceS.TEMPLATE_ID = subtemplate.TEMPLATE_ID;
                                                      instanceS.Status = "0";
                                                      instanceS.PARENT_INSTANCE_ID = headerinstance.INSTANCE_ID;

                                                      instanceS.INSTANCE_ID = comp.CreateFormInstance(instanceS);


                                                      targetS.INSTANCE_ID = instanceS.INSTANCE_ID;
                                                      targetS.Status = '0';
                                                      if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                                      {
                                                          targetS.TargetID = target.UserDefineTargetID;
                                                      }
                                                      else
                                                      {
                                                          targetS.TargetID = member.IsHospMember;
                                                      }

                                                      targetS.TargetOrder = 0;
                                                      targetS.TargetType = "Member";
                                                      service.UnitOfWork.Add(targetS);
                                                      service.UnitOfWork.SaveChanges();
                                                  }
                                                  else
                                                  {
                                                      service.UnitOfWork.Delete(headerinstance);
                                                      service.UnitOfWork.SaveChanges();
                                                      WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + ",考核對象為設定教師" + targettype + "，找不到學生子表單template，無法發送");
                                                      haserror = true;
                                                  }
                                              }
                                              else
                                              {
                                                  service.UnitOfWork.Delete(headerinstance);
                                                  service.UnitOfWork.SaveChanges();
                                                  WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + ",考核對象為設定教師" + targettype + "，設定資料不包含學生設定，無法發送");
                                                  haserror = true;
                                              }

                                          }
                                          #endregion


                                          #region 老師
                                          if (tt.RoleType == "T")
                                          {



                                              HtmlFormUtility.FORM_INSTANCES instanceT = new HtmlFormUtility.FORM_INSTANCES();
                                              FORM_INSTANCE_TARGET targetT = new FORM_INSTANCE_TARGET();

                                              EduFormTemplateTarget target = targets.Where(c => c.RoleType == "T").FirstOrDefault();
                                              if (target != null)
                                              {
                                                  FORM_TEMPLATE subtemplate = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.TEMPLATE_ID == target.SubTEMPLATE_ID).FirstOrDefault();
                                                  if (subtemplate != null)
                                                  {
                                                      instanceT.CREATER = main.Creater;
                                                      if (target.ExpireDate != null)
                                                      {
                                                          instanceT.expireDate = target.ExpireDate.Value.AddDays(datediff);
                                                      }
                                                      instanceT.INHOSPID = member.EduTermID;
                                                      instanceT.INSTANCE_CONTENT = subtemplate.TEMPLATE_CONTENT;
                                                      instanceT.INSTANCE_CREATE_DATETIME = DateTime.Now;
                                                      instanceT.INSTANCE_NAME = subtemplate.TEMPLATE_NAME;
                                                      instanceT.INSTANCE_REMARK = main.FTListID;

                                                      if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                                      {
                                                          instanceT.TargetID = target.UserDefineTargetID;
                                                      }
                                                      else
                                                      {
                                                          instanceT.TargetID = tsetting.TeacherID;
                                                      }


                                                      instanceT.TargetType = "Teacher";
                                                      instanceT.TEMPLATE_ID = subtemplate.TEMPLATE_ID;
                                                      instanceT.PARENT_INSTANCE_ID = headerinstance.INSTANCE_ID;
                                                      instanceT.EvalTargetID = member.MemberID;
                                                      instanceT.Status = "0";

                                                      instanceT.INSTANCE_ID = comp.CreateFormInstance(instanceT);

                                                      targetT.INSTANCE_ID = instanceT.INSTANCE_ID;
                                                      targetT.Status = '0';
                                                      if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                                      {
                                                          targetT.TargetID = target.UserDefineTargetID;
                                                          targetT.TargetSource = member.EduTermID;
                                                      }
                                                      else
                                                      {
                                                          targetT.TargetID = tsetting.TeacherID;
                                                          targetT.TargetSource = tsetting.EduTermID;
                                                      }


                                                      targetT.TargetOrder = 0;
                                                      targetT.TargetType = "Teacher";
                                                      
                                                      service.UnitOfWork.Add(targetT);
                                                      service.UnitOfWork.SaveChanges();
                                                  }
                                                  else
                                                  {
                                                      service.UnitOfWork.Delete(headerinstance);
                                                      service.UnitOfWork.SaveChanges();
                                                      WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + ",考核對象為設定教師" + targettype + "，找不到教師子表單template，無法發送");
                                                      haserror = true;
                                                  }
                                              }
                                              else
                                              {
                                                  service.UnitOfWork.Delete(headerinstance);
                                                  service.UnitOfWork.SaveChanges();
                                                  WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + ",考核對象為設定教師" + targettype + "，設定資料不包含教師設定，無法發送");
                                                  haserror = true;
                                              }

                                          }
                                          #endregion
                                      }




                                  }

                              }
                              else
                              {
                                  WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + ",考核對象為設定教師" + targettype + "，未設定老師，無法發送");
                                  haserror = true;
                              }
                          }
                      }
                      
                      

                      #endregion
                      
                  }
                  #endregion
              }
              else
              {
                  #region 多對象

                  if ((main.EachStudent.HasValue && main.EachStudent.Value == true) || (!main.EachStudent.HasValue))
                  {
                      var members = (from rr in service.UnitOfWork.EduTeamMemberRundowns
                                     join mm in service.UnitOfWork.Members
                                     on new { MemberID = rr.MemberID } equals new { MemberID = mm.MemberID }
                                     where rr.EduTermID == main.EduTermID
                                     select new { rr.EduTermID, rr.MemberID, mm.IsHospMember, mm.Name }
                                     );

                      if (members.Count() == 0)
                      {
                          //WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + main.EduTermID + ",沒有學員,無法發送");
                          haserror = true;
                          return;
                      }


                      List<EduRefTeacher> teachersettingslist = new List<EduRefTeacher>();

                      foreach (var member in members)
                      {
                          foreach (EduFormTemplateTarget target in targets)
                          {
                              EduRefTeacher settings = GetMemberRefTeacher(target.RoleType, member.EduTermID, member.MemberID, service).FirstOrDefault();
                              if (settings != null)
                              {
                                  teachersettingslist.Add(settings);
                              }     
                          }
                      }

                      if (teachersettingslist.Count != members.Count() * targets.Count)
                      {
                          WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + main.EduTermID + ",教師設定不完全無法發送");
                          haserror = true;
                          return;
                      }

                      if (teachersettingslist.Select(c => c.EduTermID).Distinct().Count() > 2)
                      {
                          WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + main.EduTermID + ",教師設定不完全無法發送");
                          haserror = true;
                          return;
                      }

                      //foreach (EduFormTemplateTarget target in targets)
                      //{
                      //    if (target.ExpireDate != null)
                      //    {
                      //        target.ExpireDate = target.ExpireDate.Value.AddDays(datediff);
                      //    }
                      //}


                      foreach (var member in members)
                      {
                          try
                          {
                              bool checksetting = true;

                              foreach (EduFormTemplateTarget target in targets)
                              {
                                  EduRefTeacher teachersettings = GetMemberRefTeacher(target.RoleType, member.EduTermID, member.MemberID, service).FirstOrDefault();
                                  if (teachersettings == null)
                                  {
                                      checksetting = false;
                                  }
                              }

                              if (checksetting)
                              {
                                  if (service.UnitOfWork.FORM_INSTANCEs.Count(c => c.INHOSPID == member.EduTermID && c.INSTANCE_REMARK == main.FTListID && c.EvalTargetID == member.MemberID) > 0)
                                  {
                                      WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + ",已有發送資料將不發送");

                                      WriteLog("表單自動發送", "設定序號：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + ",已有發送資料將不發送");
                                      continue;
                                  }


                                  HtmlFormUtility.FORM_INSTANCES newinstance = new HtmlFormUtility.FORM_INSTANCES();
                                  newinstance.CREATER = main.Creater;
                                  if (targets.FirstOrDefault().ExpireDate != null)
                                  {
                                      newinstance.expireDate = targets.FirstOrDefault().ExpireDate.Value.AddDays(datediff);
                                  }
                                  newinstance.INHOSPID = member.EduTermID;
                                  newinstance.INSTANCE_CONTENT = template.TEMPLATE_CONTENT;
                                  newinstance.INSTANCE_CREATE_DATETIME = DateTime.Now;
                                  newinstance.INSTANCE_NAME = template.TEMPLATE_NAME;
                                  newinstance.INSTANCE_REMARK = main.FTListID;
                                  newinstance.TargetID = null;
                                  newinstance.TargetType = null;
                                  newinstance.TEMPLATE_ID = template.TEMPLATE_ID;
                                  newinstance.EvalTargetID = member.MemberID;
                                  newinstance.Status = "0";
                                  HtmlFormUtility.Components.ProcessComponent comp = new HtmlFormUtility.Components.ProcessComponent();
                                  newinstance.INSTANCE_ID = comp.CreateFormInstance(newinstance);

                                  foreach (EduFormTemplateTarget target in targets)
                                  {

                                      EduRefTeacher teachersettings = GetMemberRefTeacher(target.RoleType, member.EduTermID, member.MemberID, service).FirstOrDefault();
                                      if (teachersettings != null)
                                      {
                                          FORM_INSTANCE_TARGET newtarget = new FORM_INSTANCE_TARGET();
                                          newtarget.INSTANCE_ID = newinstance.INSTANCE_ID;
                                          newtarget.Status = '0';
                                          if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                          {
                                              newtarget.TargetID = target.UserDefineTargetID;
                                              newtarget.TargetSource = member.EduTermID;
                                          }
                                          else
                                          {
                                              newtarget.TargetID = teachersettings.TeacherID;
                                              newtarget.TargetSource = teachersettings.EduTermID;
                                          }
                                          
                                          newtarget.TargetOrder = 0;
                                          newtarget.TargetType = target.RoleType;
                                          
                                          service.UnitOfWork.Add(newtarget);
                                          service.UnitOfWork.SaveChanges();
                                      }
                                      else
                                      {
                                          WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + ",設定教師" + target.RoleType + "，設定資料不包含教師設定，無法發送");
                                          haserror = true;
                                      }

                                  }



                              }
                              else
                              {
                                  WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + ",教師未設定,無法發送");
                                  haserror = true;
                              }

                          }
                          catch (Exception ex)
                          {
                              WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + "," + ex.Message);
                              haserror = true;
                          }
                      }
                  }
                  else
                  {
                      //List<EduRefTeacher> teachersettings = GetTeachers(targettype, main.EduTermID);
                      //foreach (EduRefTeacher teachersetting in teachersettings)
                      //{
                      //    FORM_INSTANCE newinstance = new FORM_INSTANCE();
                      //    newinstance.CREATER = main.Creater;
                      //    newinstance.ExpireDate = target.ExpireDate;
                      //    newinstance.INHOSPID = main.EduTermID;
                      //    newinstance.INSTANCE_CONTENT = template.TEMPLATE_CONTENT;
                      //    newinstance.INSTANCE_CREATE_DATETIME = DateTime.Now;
                      //    newinstance.INSTANCE_NAME = template.TEMPLATE_NAME;
                      //    newinstance.INSTANCE_REMARK = main.FTListID;
                      //    newinstance.TargetID = teachersetting.TeacherID;
                      //    newinstance.TargetType = target.RoleType.Replace("T", "Teacher");
                      //    newinstance.TEMPLATE_ID = template.TEMPLATE_ID;
                      //    service.UnitOfWork.Add(newinstance);
                      //    service.UnitOfWork.SaveChanges();

                      //    FORM_INSTANCE_TARGET newtarget = new FORM_INSTANCE_TARGET();
                      //    newtarget.INSTANCE_ID = newinstance.INSTANCE_ID;
                      //    newtarget.Status = '0';
                      //    newtarget.TargetID = teachersetting.TeacherID;
                      //    newtarget.TargetOrder = 0;
                      //    newtarget.TargetType = target.RoleType.Replace("T", "Teacher");
                      //    service.UnitOfWork.Add(newtarget);
                      //    service.UnitOfWork.SaveChanges();
                      //}
                  }

                  #endregion
              }

              if (!haserror)
              {
                  main.Status = 'V';
                  service.UnitOfWork.SaveChanges();
              }
          }
      }


      public void CreateEduFormFix(string ftlistid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {

              bool haserror = false;

              EduFormTemplateList main = service.UnitOfWork.EduFormTemplateLists.Where(c => c.FTListID == ftlistid).FirstOrDefault();
              List<EduFormTemplateTarget> targets = service.UnitOfWork.EduFormTemplateTargets.Where(c => c.FTListID == ftlistid).ToList();
              HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();
              HtmlFormUtility.FORM_TEMPLATES template = vc.GetFormTemplateById(main.TEMPLATE_ID);


              int datediff = 0;

              List<HtmlFormUtility.FORM_TEMPLATES> childtemplates = vc.GetFormTemplateByParentId(template.TEMPLATE_ID);

              if (!template.IsMultiTargetForm)
              {
                  #region 一般處理

                  {
                      #region 多表單

                      //很多人
                      if (template.IS_USER_DEFINE_TARGET || childtemplates.Count > 2)
                      {
                          var members = ((from rr in service.UnitOfWork.EduTeamMemberRundowns
                                          join mm in service.UnitOfWork.Members
                                          on new { MemberID = rr.MemberID } equals new { MemberID = mm.MemberID }
                                          where rr.EduTermID == main.EduTermID && (main.UDStudent == "" || main.UDStudent == null || mm.IsHospMember == main.UDStudent)
                                          select new { rr.EduTermID, rr.MemberID, mm.IsHospMember, mm.Name }
                                                 )).ToList();
                          if (members.Count() == 0)
                          {
                              //WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + main.EduTermID + ",沒有學員,無法發送");
                              haserror = true;
                              return;
                          }


                          string edutermid = "";
                          foreach (var member in members)
                          {
                              foreach (EduFormTemplateTarget target in targets.Where(c => c.RoleType != "S"))
                              {
                                  if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                  {
                                      continue;
                                  }
                                  string targettype = target.RoleType;
                                  string tremark = service.ReadFORM_TEMPLATEs(c => c.TEMPLATE_ID == target.SubTEMPLATE_ID).Select(c => c.TEMPLATE_REMARK).FirstOrDefault();
                                  List<EduRefTeacher> settings = GetMemberRefTeacher(targettype, member.EduTermID, member.MemberID, service, tremark);

                                  if (settings.Count == 0)
                                  {
                                      WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + main.EduTermID + ",教師設定不完全無法發送");
                                      haserror = true;
                                      return;
                                  }
                                  settings = new List<EduRefTeacher>() { settings.FirstOrDefault() };

                                  if (edutermid != "" && edutermid != settings.FirstOrDefault().EduTermID)
                                  {
                                      WriteLog("CreateEduForm", "設定序號：" + main.FTListID + ",課程代碼：" + main.EduTermID + ",教師設定不完全無法發送");
                                      haserror = true;
                                      return;
                                  }
                                  edutermid = settings.FirstOrDefault().EduTermID;

                              }
                          }

                          string udstarget = null;
                          if (targets.Count(c => c.RoleType == "S") > 0)
                          {
                              var target = targets.Where(c => c.RoleType == "S").FirstOrDefault();

                              if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                              {
                                  udstarget = target.UserDefineTargetID;
                              }
                          }


                          foreach (var member in members.Where(c => udstarget == null || c.IsHospMember == udstarget))
                          {

                              FORM_INSTANCE checkheaderinstance = service.UnitOfWork.FORM_INSTANCEs.Where(c => c.INHOSPID == member.EduTermID && c.INSTANCE_REMARK == main.FTListID && c.TargetID == member.IsHospMember && c.PARENT_INSTANCE_ID == null).FirstOrDefault();


                              HtmlFormUtility.FORM_INSTANCES headerinstance = new HtmlFormUtility.FORM_INSTANCES();
                              if (checkheaderinstance != null)
                              {

                                  headerinstance = vc.GetFormInstanceByInstanceIDs(new List<int>() { checkheaderinstance.INSTANCE_ID }).FirstOrDefault();
                              }
                              else
                              {
                                  #region 建立頭檔
                                  headerinstance.CREATER = main.Creater;
                                  headerinstance.expireDate = null;
                                  headerinstance.INHOSPID = member.EduTermID;
                                  headerinstance.INSTANCE_CONTENT = template.TEMPLATE_CONTENT;
                                  headerinstance.INSTANCE_CREATE_DATETIME = DateTime.Now;
                                  headerinstance.INSTANCE_NAME = template.TEMPLATE_NAME;
                                  headerinstance.INSTANCE_REMARK = main.FTListID;
                                  headerinstance.TargetID = member.IsHospMember;
                                  headerinstance.TargetType = "Member";
                                  headerinstance.Status = "0";
                                  headerinstance.TEMPLATE_ID = template.TEMPLATE_ID;
                                  headerinstance.EvalTargetID = member.MemberID;

                                  HtmlFormUtility.Components.ProcessComponent comp = new HtmlFormUtility.Components.ProcessComponent();
                                  headerinstance.INSTANCE_ID = comp.CreateFormInstance(headerinstance);

                                  #endregion
                              }


                              foreach (EduFormTemplateTarget tt in targets)
                              {
                                  if (service.UnitOfWork.FORM_INSTANCEs.Count(c => c.INSTANCE_REMARK == ftlistid && c.PARENT_INSTANCE_ID == headerinstance.INSTANCE_ID && c.TEMPLATE_ID == tt.SubTEMPLATE_ID) > 0)
                                  {
                                      continue;
                                  }

                                  #region 學生
                                  if (tt.RoleType == "S")
                                  {
                                      FORM_INSTANCE instanceS = new FORM_INSTANCE();
                                      FORM_INSTANCE_TARGET targetS = new FORM_INSTANCE_TARGET();

                                      EduFormTemplateTarget target = tt;
                                      if (target != null)
                                      {

                                          FORM_TEMPLATE subtemplate = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.TEMPLATE_ID == target.SubTEMPLATE_ID).FirstOrDefault();
                                          if (subtemplate != null)
                                          {
                                              instanceS.CREATER = main.Creater;
                                              if (target.ExpireDate != null)
                                              {
                                                  instanceS.ExpireDate = target.ExpireDate.Value.AddDays(datediff);
                                              }
                                              instanceS.INHOSPID = member.EduTermID;
                                              instanceS.INSTANCE_CONTENT = subtemplate.TEMPLATE_CONTENT;
                                              instanceS.INSTANCE_CREATE_DATETIME = DateTime.Now;
                                              instanceS.INSTANCE_NAME = subtemplate.TEMPLATE_NAME;
                                              instanceS.INSTANCE_REMARK = main.FTListID;
                                              if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                              {
                                                  instanceS.TargetID = target.UserDefineTargetID;
                                                  headerinstance.TargetID = target.UserDefineTargetID;
                                                  var udmember = members.Where(c => c.IsHospMember == target.UserDefineTargetID).FirstOrDefault();
                                                  if (udmember != null)
                                                  {
                                                      headerinstance.EvalTargetID = udmember.MemberID;
                                                  }
                                              }
                                              else
                                              {
                                                  instanceS.TargetID = member.IsHospMember;
                                              }

                                              instanceS.TargetType = "Member";
                                              instanceS.TEMPLATE_ID = subtemplate.TEMPLATE_ID;
                                              instanceS.Status = '0';
                                              instanceS.PARENT_INSTANCE_ID = headerinstance.INSTANCE_ID;
                                              service.UnitOfWork.Add(instanceS);
                                              service.UnitOfWork.SaveChanges();


                                              targetS.INSTANCE_ID = instanceS.INSTANCE_ID;
                                              targetS.Status = '0';
                                              if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                              {
                                                  targetS.TargetID = target.UserDefineTargetID;
                                              }
                                              else
                                              {
                                                  targetS.TargetID = member.IsHospMember;
                                              }

                                              targetS.TargetOrder = 0;
                                              targetS.TargetType = "Member";
                                              service.UnitOfWork.Add(targetS);
                                              service.UnitOfWork.SaveChanges();
                                          }
                                          else
                                          {
                                              service.UnitOfWork.Delete(headerinstance);
                                              service.UnitOfWork.SaveChanges();
                                              WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + "，找不到學生子表單template，無法發送");
                                              haserror = true;
                                          }
                                      }
                                      else
                                      {
                                          service.UnitOfWork.Delete(headerinstance);
                                          service.UnitOfWork.SaveChanges();
                                          WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + "，設定資料不包含學生設定，無法發送");
                                          haserror = true;
                                      }

                                  }
                                  #endregion


                                  #region 老師
                                  if (tt.RoleType != "S")
                                  {







                                      HtmlFormUtility.FORM_INSTANCES instanceT = new HtmlFormUtility.FORM_INSTANCES();
                                      FORM_INSTANCE_TARGET targetT = new FORM_INSTANCE_TARGET();

                                      EduFormTemplateTarget target = tt;
                                      if (target != null)
                                      {

                                          FORM_TEMPLATE subtemplate = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.TEMPLATE_ID == target.SubTEMPLATE_ID).FirstOrDefault();

                                          if (subtemplate != null)
                                          {
                                              EduRefTeacher tsetting = GetMemberRefTeacher(tt.RoleType, member.EduTermID, member.MemberID, service, subtemplate.TEMPLATE_REMARK).FirstOrDefault();

                                              instanceT.CREATER = main.Creater;
                                              if (target.ExpireDate != null)
                                              {
                                                  instanceT.expireDate = target.ExpireDate.Value.AddDays(datediff);
                                              }
                                              instanceT.INHOSPID = member.EduTermID;
                                              instanceT.INSTANCE_CONTENT = subtemplate.TEMPLATE_CONTENT;
                                              instanceT.INSTANCE_CREATE_DATETIME = DateTime.Now;
                                              instanceT.INSTANCE_NAME = subtemplate.TEMPLATE_NAME;
                                              instanceT.INSTANCE_REMARK = main.FTListID;

                                              if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                              {
                                                  instanceT.TargetID = target.UserDefineTargetID;
                                              }
                                              else
                                              {
                                                  instanceT.TargetID = tsetting.TeacherID;
                                              }


                                              instanceT.TargetType = "Teacher";
                                              instanceT.TEMPLATE_ID = subtemplate.TEMPLATE_ID;
                                              instanceT.PARENT_INSTANCE_ID = headerinstance.INSTANCE_ID;
                                              instanceT.EvalTargetID = headerinstance.EvalTargetID; //member.MemberID;
                                              instanceT.Status = "0";
                                              HtmlFormUtility.Components.ProcessComponent comp = new HtmlFormUtility.Components.ProcessComponent();
                                              instanceT.INSTANCE_ID = comp.CreateFormInstance(instanceT);


                                              targetT.INSTANCE_ID = instanceT.INSTANCE_ID;
                                              targetT.Status = '0';
                                              if (target.UserDefineTargetID != null && target.UserDefineTargetID != "")
                                              {
                                                  targetT.TargetID = target.UserDefineTargetID;
                                                  targetT.TargetSource = member.EduTermID;
                                              }
                                              else
                                              {
                                                  targetT.TargetID = tsetting.TeacherID;
                                                  targetT.TargetSource = tsetting.EduTermID;
                                              }


                                              targetT.TargetOrder = 0;
                                              targetT.TargetType = "Teacher";
                                              


                                              service.UnitOfWork.Add(targetT);
                                              service.UnitOfWork.SaveChanges();
                                          }
                                          else
                                          {
                                              service.UnitOfWork.Delete(headerinstance);
                                              service.UnitOfWork.SaveChanges();
                                              WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + ",考核對象為設定教師" + tt.RoleType + "，找不到教師子表單template，無法發送");
                                              haserror = true;
                                          }
                                      }
                                      else
                                      {
                                          service.UnitOfWork.Delete(headerinstance);
                                          service.UnitOfWork.SaveChanges();
                                          WriteLog("CreateEduForm", "發送失敗：" + main.FTListID + ",課程代碼：" + member.EduTermID + ",考核對象：" + member.IsHospMember + member.Name + ",考核對象為設定教師" + tt.RoleType + "，設定資料不包含教師設定，無法發送");
                                          haserror = true;
                                      }

                                  }
                                  #endregion
                              }

                          }
                      }


                      #endregion

                  }
                  #endregion
              }

              if (!haserror)
              {
                  main.Status = 'V';
                  service.UnitOfWork.SaveChanges();
              }
          }
      }


      private List<EduRefTeacher> GetMemberRefTeacher(string teachertype, string edutermid, string memberid, EduActivityContextService service)
      {
          return GetMemberRefTeacher(teachertype, edutermid, memberid, service, null);
      }

      private List<EduRefTeacher> GetMemberRefTeacher(string teachertype, string edutermid, string memberid, EduActivityContextService service, string tremark)
      {
          if (tremark == "C")
          {
              EduRefTeacher newt = new EduRefTeacher();
              newt.CreateDate = DateTime.Now;
              newt.EduTermID = edutermid;
              newt.RefID = edutermid;
              newt.RefTable = "EduTerm";
              newt.TeacherID = "";
              newt.TeacherType = teachertype;
              //service.UnitOfWork.Add(newt);
              //service.UnitOfWork.SaveChanges();

              return new List<EduRefTeacher>() { newt };
          }

          if (tremark == "X")
          {
              EduRefTeacher newt = new EduRefTeacher();
              newt.CreateDate = DateTime.Now;
              newt.EduTermID = edutermid;
              newt.RefID = edutermid;
              newt.RefTable = "EduTerm";
              newt.TeacherID = "X";
              newt.TeacherType = teachertype;
              //service.UnitOfWork.Add(newt);
              //service.UnitOfWork.SaveChanges();

              return new List<EduRefTeacher>() { newt };
          }

          List<EduRefTeacher> teachersettings = service.UnitOfWork.EduRefTeachers.Where(c =>
                  c.EduTermID == edutermid
                  && c.TeacherType == teachertype
                  && (
                  (c.RefTable == "EduTerm" && c.RefID == edutermid)
                  || (c.RefTable == "EduTeamMemberRundown" && c.RefID == memberid)
                  )
                  && (c.TeacherID != "" || tremark == "Y") && c.TeacherID != null
                  ).OrderBy(c => c.RefTable).ThenBy(c => c.TeacherOrder).ToList();

          if (teachersettings.Count > 0)
          {
              if (teachersettings.Select(c => c.RefTable).Distinct().Count() > 1)
              {
                  string reftable = teachersettings.Select(c => c.RefTable).FirstOrDefault();
                  teachersettings = teachersettings.Where(c => c.RefTable == reftable).ToList();
              }

              return teachersettings;
          }
          else
          {
              if (tremark == "Y")
              {
                  EduRefTeacher newt = new EduRefTeacher();
                  newt.CreateDate = DateTime.Now;
                  newt.EduTermID = edutermid;
                  newt.RefID = edutermid;
                  newt.RefTable = "EduTerm";
                  newt.TeacherID = "";
                  newt.TeacherType = teachertype;


                  string intsql = @"INSERT INTO www_EduActivity.dbo.EduRefTeachers
(TeacherID, TeacherType, RefID, RefTable, EduTermID, CreateDate, CreateEmp, TeacherOrder) 
VALUES (@TeacherID, @TeacherType, @RefID, @RefTable, @EduTermID, @CreateDate, @CreateEmp, @TeacherOrder)
 ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("TeacherID", GetDBObject(newt.TeacherID)));
                  sqlparms.Add(new SqlParameter("TeacherType", GetDBObject(newt.TeacherType)));
                  sqlparms.Add(new SqlParameter("RefID", GetDBObject(newt.RefID)));
                  sqlparms.Add(new SqlParameter("RefTable", GetDBObject(newt.RefTable)));
                  sqlparms.Add(new SqlParameter("EduTermID", GetDBObject(newt.EduTermID)));
                  sqlparms.Add(new SqlParameter("CreateDate", GetDBObject(newt.CreateDate)));
                  sqlparms.Add(new SqlParameter("CreateEmp", GetDBObject(newt.CreateEmp)));
                  sqlparms.Add(new SqlParameter("TeacherOrder", GetDBObject(newt.TeacherOrder)));
                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());
                                                      
                    

                  //service.UnitOfWork.Add(newt);
                  service.UnitOfWork.SaveChanges();

                  return new List<EduRefTeacher>() { newt };
              }
              else
              {
                  EduTerm term = service.UnitOfWork.EduTerms.Where(c => c.EduTermID == edutermid).FirstOrDefault();

                  if (term.DepCode == "3400" && term.JobCode == "DCLK")
                  {
                      return new List<EduRefTeacher>();
                  }

                  if (term != null)
                  {


                      EduTerm tempterm = term.EduTerm1;
                      while (tempterm != null)
                      {
                          if ((tempterm.DepCode == term.DepCode && tempterm.Hospital == term.Hospital) || ((tempterm.EduStopCode.Contains("PGY") || tempterm.EduStopCode.Contains("CK01") || tempterm.EduStopCode.Contains("CK02")) && tempterm.Hospital == term.Hospital))
                          {
                              teachersettings = service.UnitOfWork.EduRefTeachers.Where(c =>
                                                c.EduTermID == tempterm.EduTermID
                                                && c.TeacherType == teachertype
                                                && (
                                                (c.RefTable == "EduTerm" && c.RefID == tempterm.EduTermID)
                                                || (c.RefTable == "EduTeamMemberRundown" && c.RefID == memberid)
                                                )
                                                && (c.TeacherID != "" || tremark == "Y") && c.TeacherID != null
                                                ).OrderBy(c => c.RefTable).ThenBy(c => c.TeacherOrder).ToList();
                              if (teachersettings.Count > 0)
                              {
                                  if (teachersettings.Select(c => c.RefTable).Distinct().Count() > 1)
                                  {
                                      string reftable = teachersettings.Select(c => c.RefTable).FirstOrDefault();
                                      teachersettings = teachersettings.Where(c => c.RefTable == reftable).ToList();
                                  }
                                  return teachersettings;

                              }
                              else
                              {
                                  tempterm = tempterm.EduTerm1;
                              }
                          }
                          else
                          {
                              tempterm = tempterm.EduTerm1;
                          }
                      }
                  }
              }
          }

          return new List<EduRefTeacher>();
      }


      private List<EduRefTeacher> GetTeachers(string teachertype, string edutermid, EduActivityContextService service)
      {

          List<EduRefTeacher> teachersettings = service.UnitOfWork.EduRefTeachers.Where(c =>
              c.EduTermID == edutermid
              && c.TeacherType == teachertype
              && c.TeacherID != "" && c.TeacherID != null
              ).OrderBy(c => c.RefTable).ToList();

          return teachersettings;

      }


      #endregion

      #region 產生動態sql


      private void SetTeacherSql(string teachertype, string EduTermID, ref string teachersqlsingle, ref string teachersqlmulti, string udteacherid, AutoEduFormTemplateListDto setting)
      {

          switch (teachertype)
          {
              case "DeptTeacher":
              case "EBM":
                  if (setting.EachStudent.Value)
                  {
                      teachersqlsingle = @"select isnull(isnull(b.TeacherID1,b.TeacherID2),b.TeacherID3) as TeacherID,a.MemberID from EduTeamMemberRundown a inner join v_EduTermRefTeachers b on a.EduTermID = b.EduTermID 
                                    and TeacherType = '" + teachertype + @"' and isnull(isnull(RefTable1,RefTable2),RefTable3) ='EduTerm'
                                    where b.EduTermID = '" + EduTermID + @"'";
                      if (udteacherid != null)
                      {
                          teachersqlsingle = teachersqlsingle.Replace("isnull(isnull(b.TeacherID1,b.TeacherID2),b.TeacherID3)", "'" + udteacherid + "' ");
                      }
                  }
                  else
                  {
                      teachersqlsingle = @"select distinct isnull(isnull(TeacherID1,TeacherID2),TeacherID3) as TeacherID,null
                                    from v_EduTermRefTeachers
                                    where TeacherType = '" + teachertype + "' and isnull(isnull(RefTable1,RefTable2),RefTable3)='EduTerm' and EduTermID = '" + EduTermID + @"'";
                      if (udteacherid != null)
                      {
                          teachersqlsingle = teachersqlsingle.Replace("isnull(isnull(TeacherID1,TeacherID2),TeacherID3)", "'" + udteacherid + "' ");
                      }
                  }
                  teachersqlmulti = @"select distinct isnull(isnull(TeacherID1,TeacherID2),TeacherID3) as TeacherID
                                    from v_EduTermRefTeachers
                                    where TeacherType = '" + teachertype + "' and isnull(isnull(RefTable1,RefTable2),RefTable3)='EduTerm' and EduTermID = '" + EduTermID + @"'";
                  if (udteacherid != null)
                  {
                      teachersqlmulti = teachersqlmulti.Replace("isnull(isnull(TeacherID1,TeacherID2),TeacherID3)", "'" + udteacherid + "' ");
                  }
                  break;
              case "CR":
              case "R":
                 if (setting.EachStudent.Value)
                  {
                      teachersqlsingle = @"select TeacherID,a.MemberID from EduTeamMemberRundown a inner join EduRefTeachers b on a.EduTermID = b.EduTermID 
                                    and TeacherType = '" + teachertype + @"' and (RefTable='EduTerm' or (reftable='EduTeamMemberRundown' and a.MemberID = b.RefID))
                                    where b.EduTermID = '" + EduTermID + @"' and teacherid!='' ";
                      if (udteacherid != null)
                      {
                          teachersqlsingle = teachersqlsingle.Replace("TeacherID", "'" + udteacherid + "' as TeacherID");
                      }
                  }
                  else
                  {
                      teachersqlsingle = @"select distinct TeacherID,null
                                    from EduRefTeachers
                                    where TeacherType = '" + teachertype + "' and (RefTable='EduTerm' or reftable='EduTeamMemberRundown') and EduTermID = '" + EduTermID + @"' and teacherid!=''";
                      if (udteacherid != null)
                      {
                          teachersqlsingle = teachersqlsingle.Replace("TeacherID", "'" + udteacherid + "' as TeacherID");
                      }
                  }
                  teachersqlmulti = @"select distinct TeacherID
                                    from EduRefTeachers
                                    where TeacherType = '" + teachertype + "' and (RefTable='EduTerm' or reftable='EduTeamMemberRundown') and EduTermID = '" + EduTermID + @"' and teacherid!='' ";
                  if (udteacherid != null)
                  {
                      teachersqlmulti = teachersqlmulti.Replace("TeacherID", "'" + udteacherid + "' as TeacherID");
                  }
                  break;
              case "VS":
              case "Coach":
              case "LifeTeacher":
              case "Intern":
              case "NURSE":
              case "ExamTeacher":
                  if (setting.EachStudent.Value)
                  {

                      teachersqlsingle = @"select TeacherID ,refid as MemberID from EduRefTeachers 
                                    where TeacherType = '" + teachertype + "' and RefTable='EduTeamMemberRundown' and EduTermID = '" + EduTermID + @"' and teacherid!=''";
                      if (udteacherid != null)
                      {
                          teachersqlsingle = teachersqlsingle.Replace("TeacherID", "'" + udteacherid + "' as TeacherID");
                      }
                  }
                  else
                  {
                      teachersqlsingle = @"select distinct TeacherID ,null from EduRefTeachers 
                                    where TeacherType = '" + teachertype + "' and RefTable='EduTeamMemberRundown' and EduTermID = '" + EduTermID + @"'  and teacherid!=''";
                      if (udteacherid != null)
                      {
                          teachersqlsingle = teachersqlsingle.Replace("TeacherID", "'" + udteacherid + "' as TeacherID");
                      }
                  }
                  teachersqlmulti = @"select top 1 TeacherID
                                    from EduRefTeachers 
                                    where TeacherType = '" + teachertype + "' and RefTable='EduTeamMemberRundown' and edutermid='" + EduTermID + @"' and refid = (select max(a.MemberID) from [Member] a inner join EduTeamMemberRundown b on a.MemberID = b.MemberID
                                    where a.isHospMember = @id and b.EduTermID = '" + EduTermID + "')  and teacherid!='' order by edurefteacherid desc ";
                  if (udteacherid != null)
                  {
                      teachersqlmulti = "select '" + udteacherid + "'";
                  }
                  break;
              case "xxx":

                  break;
          }
      }

      private void SetTeacherSqlMultiTarget(string teachertype,string EduTermID, ref string teachersqlsingle, string udid)
      {
          string teacherstr = "";
          if (udid != null)
          {
              teacherstr = " distinct '" + udid + "' as TeacherID ";
          }
          else
          {
              teacherstr = " TeacherID ";
          }

          switch (teachertype)
          {
              case "DeptTeacher":
              case "EBM":
                  if (teachersqlsingle != "")
                  {
                      teachersqlsingle += " union all ";
                  }

                  if (udid != null)
                  {
                      teachersqlsingle += @"
select distinct '" + udid + @"' as TeacherID
  ,@instanceid as InstanceID
  ,0 as TargetOrder
  ,'0' as Status
  ,'" + teachertype + @"' as TargetType
";
                  }
                  else
                  {
                      teachersqlsingle += @"
select isnull(isnull(TeacherID1,TeacherID2),TeacherID3) as TeacherID
  ,@instanceid as InstanceID
  ,0 as TargetOrder
  ,'0' as Status
  ,'" + teachertype + @"' as TargetType

from
v_EduTermRefTeachers
where edutermid='" + EduTermID + @"'
and isnull(isnull(RefTable1,RefTable2),RefTable3)='EduTerm'
and TeacherType = '" + teachertype + @"'
";
                  }


                  break;
              case "CR":
              case "R":
                  if (teachersqlsingle != "")
                  {
                      teachersqlsingle += " union all ";
                  }

                  if (udid != null)
                  {
                      teachersqlsingle += @"
select distinct '" + udid + @"' as TeacherID
  ,@instanceid as InstanceID
  ,0 as TargetOrder
  ,'0' as Status
  ,'" + teachertype + @"' as TargetType
";
                  }
                  else
                  {
                      teachersqlsingle += @"
select isnull(isnull(TeacherID1,TeacherID2),TeacherID3) as TeacherID
  ,@instanceid as InstanceID
  ,0 as TargetOrder
  ,'0' as Status
  ,'" + teachertype + @"' as TargetType

from
v_EduTermRefTeachers
where edutermid='" + EduTermID + @"'
and isnull(isnull(RefTable1,RefTable2),RefTable3) in ('EduTerm','EduTeamMemberRundown')
and TeacherType = '" + teachertype + @"'
";
                  }


                  break;

              case "VS":
              case "Coach":
              case "LifeTeacher":
              case "Intern":
              case "NURSE":
              case "ExamTeacher":

                  if (teachersqlsingle != "")
                  {
                      teachersqlsingle += " union all ";
                  }

                  if (udid != null)
                  {
                      teachersqlsingle += @"
select distinct '" + udid + @"' as TeacherID
  ,@instanceid as InstanceID
  ,0 as TargetOrder
  ,'0' as Status
  ,'" + teachertype + @"' as TargetType

";
                  }
                  else
                  {
                      teachersqlsingle += @"
select TeacherID
  ,@instanceid as InstanceID
  ,0 as TargetOrder
  ,'0' as Status
  ,'" + teachertype + @"' as TargetType

from
edurefteachers
where edutermid='" + EduTermID + @"'
and refid = @idstudent
and RefTable='EduTeamMemberRundown'
and TeacherType = '" + teachertype + @"'
";
                  }



                  break;
          }
      }

      private string GetExpireDayStr(AutoEduFormTemplateTargetDto item, EduTermDto eduterm,DateTime senddate)
      {
          string expiredate = "null";
          if (item.ExpireDays.HasValue)
          {
              switch (item.ExpireDaysType)
              {
                  case "AfterSend":
                      expiredate = "'" + senddate.AddDays(item.ExpireDays.Value).ToString("yyyy/MM/dd") + "'";
                      break;
                  case "after":
                      expiredate = "'" + eduterm.DateFrom.AddDays(item.ExpireDays.Value).ToString("yyyy/MM/dd") + "'";
                      break;
                  case "before":
                      expiredate = "'" + eduterm.DateTo.AddDays((-1) * item.ExpireDays.Value).ToString("yyyy/MM/dd") + "'";
                      break;
                  case "AfterCourse":
                      expiredate = "'" + eduterm.DateTo.AddDays(item.ExpireDays.Value).ToString("yyyy/MM/dd") + "'";
                      break;
              }
          }
          else
          {
              expiredate = "null";
          }
          return expiredate;
      }

      public string GenerateSql(string listid,DateTime senddate,EduTermDto eduterm, AutoEduFormTemplateListDto headersetting, List<AutoEduFormTemplateTargetDto> targetsetting)
      {

          
          string EduTermID = eduterm.EduTermID;
          //用inhospid存edutermid
          string tempparentsql = "";
          string sql = @"
BEGIN TRY
BEGIN TRANSACTION
declare @id varchar(20)
declare @instanceid int
";

          string teachersqlmulti = "";
          string teachersqlsingle = "";
          string parentidstr = "";
          string expiredatestr = "null";
          if (!headersetting.MultiTarget.Value)
          {
              #region 一般處理
              string udteacherid = null;
              string teachertype = null;
              foreach (AutoEduFormTemplateTargetDto item in targetsetting)
              {
                  if (item.RoleType == "T")
                  {
                      if (item.UserDefineTargetID != null)
                      {
                          udteacherid = item.UserDefineTargetID;
                      }
                      teachertype = item.TeacherType;
                  }
              }

              if (teachertype == null)
              {
                  teachertype = headersetting.TeacherType;
              }

              SetTeacherSql(teachertype, EduTermID, ref teachersqlsingle, ref teachersqlmulti, udteacherid, headersetting);

              #region 單筆
              //單筆
              if (targetsetting.Count(c => c.SubTEMPLATE_ID != headersetting.TEMPLATE_ID) == 0)
              {
                  //沒有parent
                  parentidstr = "null";

                  foreach (AutoEduFormTemplateTargetDto item in targetsetting)
                  {
                      expiredatestr = GetExpireDayStr(item, eduterm, senddate);
                      
                      #region 老師
                      if (item.RoleType == "T") //教師
                      {
                          sql += @"
declare @idstudent varchar(20)
declare cur cursor local for " + teachersqlsingle
      + @"open cur

fetch next from cur into @id,@idstudent
while(@@fetch_status <>-1)
begin
insert into FORM_INSTANCES (
   TEMPLATE_ID
  ,INSTANCE_NAME
  ,INSTANCE_CREATE_DATETIME
  ,INSTANCE_ALTER_DATETIME
  ,INSTANCE_REMARK
  ,INSTANCE_CONTENT
  ,INHOSPID
  ,CREATER
  ,expireDate
  ,TargetType
  ,TargetID
  ,Status
  ,PARENT_INSTANCE_ID
  ,EvalTargetID
)
(select 
  TEMPLATE_ID as TEMPLATE_ID
  ,TEMPLATE_NAME as INSTANCE_NAME
  ,getdate() as INSTANCE_CREATE_DATETIME
  ,null as INSTANCE_ALTER_DATETIME
  ,'" + listid + @"' as INSTANCE_REMARK
  ,TEMPLATE_CONTENT as INSTANCE_CONTENT
  ,'" + EduTermID + @"' as INHOSPID
  ,'" + headersetting.Creater+ @"' as CREATER
  ," + expiredatestr + @" as expireDate
  ,'Teacher' as TargetType
  ,@id as TargetID
  ,'0' as Status
  ," + parentidstr + @" as PARENT_INSTANCE_ID
  ,@idstudent
from FORM_TEMPLATES
where TEMPLATE_ID = " + item.SubTEMPLATE_ID.ToString() + @")

select @instanceid = max(scope_identity())

insert into FORM_INSTANCE_TARGETS (
   TargetID
  ,INSTANCE_ID
  ,TargetOrder
  ,Status
  ,TargetType
) values (
   @id
  ,@instanceid
  ,0
  ,'0'
  ,'Teacher')

fetch next from cur into @id,@idstudent
end
close cur
deallocate cur
";
                      }
                      #endregion

                      #region 學生
                      else if (item.RoleType == "S") //學生
                      {
                          string studentfield = "";
                          if (item.UserDefineTargetID != null && item.UserDefineTargetID != "")
                          {
                              studentfield = " distinct '" + item.UserDefineTargetID.Trim() + "' as ishospmember";
                          }
                          else
                          {
                              studentfield = "d.ishospmember";
                          }



                          sql += @"
declare cur cursor local for 
select " + studentfield + @" from eduteammemberrundown b 
inner join eduterm c on b.EduTermID = c.EduTermID
inner join member d on b.MemberID = d.MemberID
where c.EduTermID = '" + EduTermID + @"'

open cur

fetch next from cur into @id
while(@@fetch_status <>-1)
begin
insert into FORM_INSTANCES (
   TEMPLATE_ID
  ,INSTANCE_NAME
  ,INSTANCE_CREATE_DATETIME
  ,INSTANCE_ALTER_DATETIME
  ,INSTANCE_REMARK
  ,INSTANCE_CONTENT
  ,INHOSPID
  ,CREATER
  ,expireDate
  ,TargetType
  ,TargetID
  ,Status
  ,PARENT_INSTANCE_ID
)
(select 
  TEMPLATE_ID as TEMPLATE_ID
  ,TEMPLATE_NAME as INSTANCE_NAME
  ,getdate() as INSTANCE_CREATE_DATETIME
  ,null as INSTANCE_ALTER_DATETIME
  ,'" + listid + @"' as INSTANCE_REMARK
  ,TEMPLATE_CONTENT as INSTANCE_CONTENT
  ,'" + EduTermID + @"' as INHOSPID
  ,'"+headersetting.Creater+@"' as CREATER
  ," + expiredatestr + @" as expireDate
  ,'Member' as TargetType
  ,@id as TargetID
  ,'0' as Status
  ," + parentidstr + @" as PARENT_INSTANCE_ID
from FORM_TEMPLATES
where TEMPLATE_ID = " + item.SubTEMPLATE_ID.ToString() + @")

select @instanceid = max(scope_identity())

insert into FORM_INSTANCE_TARGETS (
   TargetID
  ,INSTANCE_ID
  ,TargetOrder
  ,Status
  ,TargetType
) values (
   @id
  ,@instanceid
  ,0
  ,'0'
  ,'Member')


fetch next from cur into @id
end
close cur
deallocate cur
";
                      }
                      #endregion
                  }

              }
              #endregion
              #region 多筆
              //多筆
              else
              {
                  #region 新增頭
                  parentidstr = "@parentid";

                  //insert parent
                  tempparentsql += @"

if ("+teachersqlmulti+@") is not null
                                    begin

insert into FORM_INSTANCES (
   TEMPLATE_ID
  ,INSTANCE_NAME
  ,INSTANCE_CREATE_DATETIME
  ,INSTANCE_ALTER_DATETIME
  ,INSTANCE_REMARK
  ,INSTANCE_CONTENT
  ,INHOSPID
  ,CREATER
  ,expireDate
  ,TargetType
  ,TargetID
  ,Status
  ,PARENT_INSTANCE_ID
)
(select 
  TEMPLATE_ID as TEMPLATE_ID
  ,TEMPLATE_NAME as INSTANCE_NAME
  ,getdate() as INSTANCE_CREATE_DATETIME
  ,null as INSTANCE_ALTER_DATETIME
  ,'" + listid + @"' as INSTANCE_REMARK
  ,'' as INSTANCE_CONTENT
  ,'" + EduTermID + @"' as INHOSPID
  ,'"+headersetting.Creater+@"' as CREATER
  ,null as expireDate
  ,null as TargetType
  ,null as TargetID
  ,'0' as Status
  ,null as PARENT_INSTANCE_ID
from FORM_TEMPLATES
where TEMPLATE_ID = " + headersetting.TEMPLATE_ID.ToString()
                      
                      + @");

select @parentid = max(scope_identity())

";

                  //parent id
                  sql += @"
declare @parentid int
";
                  #endregion

                  AutoEduFormTemplateTargetDto setting = targetsetting.Where(c => c.RoleType == "S").FirstOrDefault();
                  AutoEduFormTemplateTargetDto settingt = targetsetting.Where(c => c.RoleType == "T").FirstOrDefault();

                  string studentfield = "";

                  foreach (AutoEduFormTemplateTargetDto item in targetsetting)
                  {

                      if (item.RoleType == "S")
                      {
                          if (item.UserDefineTargetID != null && item.UserDefineTargetID != "")
                          {
                              studentfield = " distinct '" + item.UserDefineTargetID.Trim() + "' as ishospmember";
                          }
                          else
                          {
                              studentfield = "d.ishospmember";
                          }
                      }

                      if (item.RoleType == "T")
                      {
                          if (item.UserDefineTargetID != null && item.UserDefineTargetID != "")
                          {
                              teachersqlmulti = teachersqlmulti.Replace("TeacherID", "'" + item.UserDefineTargetID.Trim() + "'");
                          }
                      }
                  }

                  sql += @"
declare cur cursor local for 
select " + studentfield + @" from eduteammemberrundown b
inner join eduterm c on b.EduTermID = c.EduTermID
inner join member d on b.MemberID = d.MemberID
where c.EduTermID = '" + EduTermID + @"'

open cur

fetch next from cur into @id
while(@@fetch_status <>-1)
begin";

                  expiredatestr = GetExpireDayStr(setting, eduterm, senddate);

                  sql += tempparentsql;
                  #region 學生
                  //新增學生
                  sql += @"
insert into FORM_INSTANCES (
   TEMPLATE_ID
  ,INSTANCE_NAME
  ,INSTANCE_CREATE_DATETIME
  ,INSTANCE_ALTER_DATETIME
  ,INSTANCE_REMARK
  ,INSTANCE_CONTENT
  ,INHOSPID
  ,CREATER
  ,expireDate
  ,TargetType
  ,TargetID
  ,Status
  ,PARENT_INSTANCE_ID
)
(select 
  TEMPLATE_ID as TEMPLATE_ID
  ,TEMPLATE_NAME as INSTANCE_NAME
  ,getdate() as INSTANCE_CREATE_DATETIME
  ,null as INSTANCE_ALTER_DATETIME
  ,'" + listid + @"' as INSTANCE_REMARK
  ,TEMPLATE_CONTENT as INSTANCE_CONTENT
  ,'" + EduTermID + @"' as INHOSPID
  ,'"+headersetting.Creater+@"' as CREATER
  ," + expiredatestr + @" as expireDate
  ,'Member' as TargetType
  ,@id as TargetID
  ,'0' as Status
  ," + parentidstr + @" as PARENT_INSTANCE_ID
from FORM_TEMPLATES
where TEMPLATE_ID = " + setting.SubTEMPLATE_ID.ToString() + @")

select @instanceid = max(scope_identity())

insert into FORM_INSTANCE_TARGETS (
   TargetID
  ,INSTANCE_ID
  ,TargetOrder
  ,Status
  ,TargetType
) values (
   @id
  ,@instanceid
  ,0
  ,'0'
  ,'Member')

";
                  #endregion

                  #region 老師

                  //新增老師

                  expiredatestr = GetExpireDayStr(settingt, eduterm, senddate);
                  sql += @"
insert into FORM_INSTANCES (
   TEMPLATE_ID
  ,INSTANCE_NAME
  ,INSTANCE_CREATE_DATETIME
  ,INSTANCE_ALTER_DATETIME
  ,INSTANCE_REMARK
  ,INSTANCE_CONTENT
  ,INHOSPID
  ,CREATER
  ,expireDate
  ,TargetType
  ,TargetID
  ,Status
  ,PARENT_INSTANCE_ID
  ,EvalTargetID
)
(select 
  TEMPLATE_ID as TEMPLATE_ID
  ,TEMPLATE_NAME as INSTANCE_NAME
  ,getdate() as INSTANCE_CREATE_DATETIME
  ,null as INSTANCE_ALTER_DATETIME
  ,'" + listid + @"' as INSTANCE_REMARK
  ,TEMPLATE_CONTENT as INSTANCE_CONTENT
  ,'" + EduTermID + @"' as INHOSPID
  ,'"+headersetting.Creater+@"' as CREATER
  ," + expiredatestr + @" as expireDate
  ,'Teacher' as TargetType
  ,(" + teachersqlmulti +
                  @") as TargetID
  ,'0' as Status
  ," + parentidstr + @" as PARENT_INSTANCE_ID
  , (select top 1 b.memberid from eduteammemberrundown b
inner join eduterm c on b.EduTermID = c.EduTermID
inner join member d on b.MemberID = d.MemberID
where c.EduTermID = '" + EduTermID + @"' and d.isHospMember = @id)
from FORM_TEMPLATES
where TEMPLATE_ID = " + settingt.SubTEMPLATE_ID.ToString() + @")

select @instanceid = max(scope_identity())

insert into FORM_INSTANCE_TARGETS (
   TargetID
  ,INSTANCE_ID
  ,TargetOrder
  ,Status
  ,TargetType
) values (
   (" + teachersqlmulti +
                  @")
  ,@instanceid
  ,0
  ,'0'
  ,'Teacher')


";


                  #endregion

                  sql += @"
end
fetch next from cur into @id
end
close cur
deallocate cur
";

              }
              #endregion
              #endregion
          }
          else
          {
              #region 多target處理
              //沒有parent
              parentidstr = "null";

              //DateTime? expiredate = null;
              string templateID = "";

              string targetsql = "";

              foreach (AutoEduFormTemplateTargetDto item in targetsetting)
              {
                  string teacherid = null;
                  if (item.UserDefineTargetID != null && item.UserDefineTargetID.Trim() != "")
                  {
                      teacherid = item.UserDefineTargetID.Trim();
                  }

                  SetTeacherSqlMultiTarget(item.RoleType, EduTermID, ref targetsql, teacherid);

                  //if (item.ExpireDays.HasValue)
                  //{
                  //    expiredate = senddate.AddDays(item.ExpireDays.Value);
                  //}
                  //else
                  //{
                  //    expiredate = null;
                  //}

                  expiredatestr = GetExpireDayStr(item, eduterm, senddate);

                  templateID = item.SubTEMPLATE_ID.ToString();
              }


              sql += @"
declare @idstudent varchar(20)
declare cur cursor local for  
select MemberID from EduTeamMemberRundown where edutermid = '" + EduTermID + @"'
open cur

fetch next from cur into @idstudent
while(@@fetch_status <>-1)
begin
insert into FORM_INSTANCES (
   TEMPLATE_ID
  ,INSTANCE_NAME
  ,INSTANCE_CREATE_DATETIME
  ,INSTANCE_ALTER_DATETIME
  ,INSTANCE_REMARK
  ,INSTANCE_CONTENT
  ,INHOSPID
  ,CREATER
  ,expireDate
  ,TargetType
  ,TargetID
  ,Status
  ,PARENT_INSTANCE_ID
  ,EvalTargetID
)
(select 
  TEMPLATE_ID as TEMPLATE_ID
  ,TEMPLATE_NAME as INSTANCE_NAME
  ,getdate() as INSTANCE_CREATE_DATETIME
  ,null as INSTANCE_ALTER_DATETIME
  ,'" + listid + @"' as INSTANCE_REMARK
  ,TEMPLATE_CONTENT as INSTANCE_CONTENT
  ,'" + EduTermID + @"' as INHOSPID
  ,'"+headersetting.Creater+@"' as CREATER
  ," + expiredatestr + @" as expireDate
  ,null as TargetType
  ,null as TargetID
  ,'0' as Status
  ," + parentidstr + @" as PARENT_INSTANCE_ID
  ,@idstudent as EvalTargetID
from FORM_TEMPLATES
where TEMPLATE_ID = " + templateID + @")

select @instanceid = max(scope_identity())

insert into FORM_INSTANCE_TARGETS (
   TargetID
  ,INSTANCE_ID
  ,TargetOrder
  ,Status
  ,TargetType
) (" + targetsql + @")

fetch next from cur into @idstudent
end
close cur
deallocate cur
";

              #endregion
          }



          sql += @"
COMMIT TRANSACTION;
 END TRY
 BEGIN CATCH
 
 PRINT ERROR_NUMBER();
 PRINT ERROR_MESSAGE();
 ROLLBACK TRANSACTION;
 END CATCH;
";
          return sql;
      }
      #endregion

      public List<AutoEduFormTemplateExceptDto> GetAutoEduFormSettingExceptListDept(string autoftlistid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<AutoEduFormTemplateExceptDto> list = service.ReadAutoEduFormTemplateExcepts(c => c.AutoFTListID == autoftlistid && c.ExceptType == "Dept").ToList();
              foreach (AutoEduFormTemplateExceptDto dto in list)
              {
                  V_department dept = service.UnitOfWork.V_departments.Where(c => c.Hospcode == "KMUH" && c.Deptcode == dto.ExceptKey).FirstOrDefault();
                  if (dept != null)
                  {
                      dto.ExceptName = dept.Deptname;
                  }
              }
          

              return list;
          }
      }

      public List<AutoEduFormTemplateExceptDto> GetAutoEduFormSettingSendMonth(string autoftlistid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<AutoEduFormTemplateExceptDto> list = service.ReadAutoEduFormTemplateExcepts(c => c.AutoFTListID == autoftlistid && c.ExceptType == "SendMonth").ToList();
              return list;
          }
      }


      public List<AutoEduFormTemplateExceptDto> GetAutoEduFormSettingSendDept(string autoftlistid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<AutoEduFormTemplateExceptDto> list = service.ReadAutoEduFormTemplateExcepts(c => c.AutoFTListID == autoftlistid && c.ExceptType == "SendDept").ToList();
              foreach (AutoEduFormTemplateExceptDto dto in list)
              {
                  V_department dept = service.UnitOfWork.V_departments.Where(c => c.Hospcode == "KMUH" && c.Deptcode == dto.ExceptKey).FirstOrDefault();
                  if (dept != null)
                  {
                      dto.ExceptName = dept.Deptname;
                  }
              }


              return list;
          }
      }

      public List<AutoEduFormTemplateExceptDto> GetAutoEduFormSettingSendTermList(string autoftlistid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<AutoEduFormTemplateExceptDto> list = service.ReadAutoEduFormTemplateExcepts(c => c.AutoFTListID == autoftlistid && c.ExceptType == "SendTerm").ToList();
              foreach (AutoEduFormTemplateExceptDto dto in list)
              {
                  EduTerm term = service.UnitOfWork.EduTerms.Where(c => c.EduTermID == dto.ExceptKey).FirstOrDefault();
                  if (term != null)
                  {
                      dto.ExceptName = GetEduTermFullName(term);
                  }
              }


              return list;
          }
      }

      public List<AutoEduFormTemplateExceptDto> GetAutoEduFormSettingNoSendTermList(string autoftlistid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<AutoEduFormTemplateExceptDto> list = service.ReadAutoEduFormTemplateExcepts(c => c.AutoFTListID == autoftlistid && c.ExceptType == "EduTerm").ToList();
              foreach (AutoEduFormTemplateExceptDto dto in list)
              {
                  EduTerm term = service.UnitOfWork.EduTerms.Where(c => c.EduTermID == dto.ExceptKey).FirstOrDefault();
                  if (term != null)
                  {
                      dto.ExceptName = GetEduTermFullName(term);
                  }
              }


              return list;
          }
      }


      public void InsertAutoEduFormSettingExpectListEduTerm(string autoftlistid, string edutermid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              if (service.UnitOfWork.AutoEduFormTemplateExcepts.Count(c => c.AutoFTListID == autoftlistid && c.ExceptType == "EduTerm" && c.ExceptKey == edutermid) == 0)
              {
                  AutoEduFormTemplateExcept exp = new AutoEduFormTemplateExcept();
                  exp.AutoFTListID = autoftlistid;
                  exp.ExceptKey = edutermid;
                  exp.ExceptType = "EduTerm";
                  service.UnitOfWork.Add(exp);
                  service.UnitOfWork.SaveChanges();
              }
          }
      }

      public void DeleteAutoEduFormSettingExpectListEduTerm(string autoftlistid, string edutermid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {

              AutoEduFormTemplateExcept exp = service.UnitOfWork.AutoEduFormTemplateExcepts.Where(c => c.AutoFTListID == autoftlistid && c.ExceptType == "EduTerm" && c.ExceptKey == edutermid).FirstOrDefault();
              if (exp != null)
              {
                  service.UnitOfWork.Delete(exp);
                  service.UnitOfWork.SaveChanges();
              }
          }
      }


      public string SaveAutoEduFormSettingExceptList(string autoftlistid, List<SelectGroupTypeDto> exceptlist)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string result = null;
              try
              {
                  service.DeleteAutoEduFormTemplateExcepts(service.ReadAutoEduFormTemplateExcepts(c => c.AutoFTListID == autoftlistid && c.ExceptType == "Dept"));
                  foreach (SelectGroupTypeDto dto in exceptlist)
                  {
                      AutoEduFormTemplateExceptDto newitem = new AutoEduFormTemplateExceptDto();
                      newitem.AutoFTListID = autoftlistid;
                      newitem.ExceptType = "Dept";
                      newitem.ExceptKey = dto.code;
                      service.CreateAutoEduFormTemplateExcept(newitem);
                  }


                  return result;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }

          }
      }

      public string SaveAutoEduFormSettingSendDeptList(string autoftlistid, List<SelectGroupTypeDto> sendlist)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string result = null;
              try
              {
                  service.DeleteAutoEduFormTemplateExcepts(service.ReadAutoEduFormTemplateExcepts(c => c.AutoFTListID == autoftlistid && c.ExceptType == "SendDept"));
                  foreach (SelectGroupTypeDto dto in sendlist)
                  {
                      AutoEduFormTemplateExceptDto newitem = new AutoEduFormTemplateExceptDto();
                      newitem.AutoFTListID = autoftlistid;
                      newitem.ExceptType = "SendDept";
                      newitem.ExceptKey = dto.code;
                      service.CreateAutoEduFormTemplateExcept(newitem);
                  }


                  return result;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }

          }
      }


      public string SaveAutoEduFormSettingSendTermList(string autoftlistid, List<EduTermDto> sendTermlist)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string result = null;
              try
              {
                  service.DeleteAutoEduFormTemplateExcepts(service.ReadAutoEduFormTemplateExcepts(c => c.AutoFTListID == autoftlistid && c.ExceptType == "SendTerm"));
                  foreach (EduTermDto dto in sendTermlist)
                  {
                      AutoEduFormTemplateExceptDto newitem = new AutoEduFormTemplateExceptDto();
                      newitem.AutoFTListID = autoftlistid;
                      newitem.ExceptType = "SendTerm";
                      newitem.ExceptKey = dto.EduTermID;
                      service.CreateAutoEduFormTemplateExcept(newitem);
                  }
                  

                  return result;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }

          }
      }


      public string SaveAutoEduFormSettingNoSendTermList(string autoftlistid, List<EduTermDto> noSendTermlist)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string result = null;
              try
              {
                  service.DeleteAutoEduFormTemplateExcepts(service.ReadAutoEduFormTemplateExcepts(c => c.AutoFTListID == autoftlistid && c.ExceptType == "EduTerm"));
                  foreach (string edutermid in noSendTermlist.Select(c=> c.EduTermID).Distinct())
                  {
                      AutoEduFormTemplateExceptDto newitem = new AutoEduFormTemplateExceptDto();
                      newitem.AutoFTListID = autoftlistid;
                      newitem.ExceptType = "EduTerm";
                      newitem.ExceptKey = edutermid;
                      service.CreateAutoEduFormTemplateExcept(newitem);
                  }


                  return result;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }

          }
      }

      public string SaveAutoEduFormSettingSendMonthList(string autoftlistid, List<AutoEduFormTemplateExceptDto> sendMonthList)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string result = null;
              try
              {
                  service.DeleteAutoEduFormTemplateExcepts(service.ReadAutoEduFormTemplateExcepts(c => c.AutoFTListID == autoftlistid && c.ExceptType == "SendMonth"));
                  foreach (AutoEduFormTemplateExceptDto dto in sendMonthList)
                  {
                      AutoEduFormTemplateExceptDto newitem = new AutoEduFormTemplateExceptDto();
                      newitem.AutoFTListID = autoftlistid;
                      newitem.ExceptType = "SendMonth";
                      newitem.ExceptKey = dto.ExceptKey;
                      service.CreateAutoEduFormTemplateExcept(newitem);
                  }


                  return result;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }

          }
      }


      public string SaveAutoEduFormSetting(AutoEduFormTemplateListDto listdto, List<AutoEduFormTemplateTargetDto> targets)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string result = null;

              AutoEduFormTemplateListDto checklist = service.ReadAutoEduFormTemplateLists(c => c.AutoFTListID == listdto.AutoFTListID).FirstOrDefault();
              if (checklist != null)
              {
                  service.DeleteAutoEduFormTemplateTargets(service.ReadAutoEduFormTemplateTargets(c => c.AutoFTListID == checklist.AutoFTListID), false);
                  checklist.EduYear = listdto.EduYear;
                  checklist.DateShift = listdto.DateShift;
                  checklist.SendFloor = listdto.SendFloor;
                  checklist.DateShiftType = listdto.DateShiftType;
                  checklist.Des = listdto.Des;
                  checklist.EachStudent = listdto.EachStudent;
                  checklist.JobCode = listdto.JobCode;
                  checklist.SettingName = listdto.SettingName;
                  checklist.TEMPLATE_ID = listdto.TEMPLATE_ID;
                  checklist.TeacherType = listdto.TeacherType;
                  checklist.SendOrderSetting = listdto.SendOrderSetting;
                  checklist.Sdate = listdto.Sdate;
                  checklist.Edate = listdto.Edate;
                  service.UpdateAutoEduFormTemplateList(checklist, false);
              }
              else
              {
                  service.CreateAutoEduFormTemplateList(listdto, false);
              }


              foreach (AutoEduFormTemplateTargetDto dto in targets)
              {
                  service.CreateAutoEduFormTemplateTarget(dto, false);
              }

              try
              {
                  service.UnitOfWork.SaveChanges();
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  result = ex.Message;
              }
              return result;
          }
      }


      public string AutoSendFormByID(string autoftlistid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  string result = null;

                  List<AutoEduFormTemplateListDto> settings = service.ReadAutoEduFormTemplateLists(c => c.AutoFTListID == autoftlistid).ToList();



                  List<EduTermDto> eduterms = service.ReadEduTerms(c => c.JobCode == settings.FirstOrDefault().JobCode && c.DateFrom <= DateTime.Now.Date && c.DateFrom >= new DateTime(2015, 1, 1)).ToList();
                  //eduterms = eduterms.Where(c => c.EduTermID == "20190118000000000005").ToList();
                  Dictionary<string, List<AutoEduFormTemplateExceptDto>> excepts = new Dictionary<string, List<AutoEduFormTemplateExceptDto>>();
                  foreach (EduTermDto dto in eduterms)
                  {

                      foreach (AutoEduFormTemplateListDto sett in settings.Where(c => c.JobCode == dto.JobCode))
                      {

                          if (service.ReadEduFormTemplateLists(c => c.TEMPLATE_ID == sett.TEMPLATE_ID && c.EduTermID == dto.EduTermID && c.AutoFTListID == sett.AutoFTListID).Count() > 0)
                          {
                              continue;
                          }

                          List<AutoEduFormTemplateExceptDto> explist = null;
                          if (!excepts.ContainsKey(sett.AutoFTListID))
                          {
                              explist = service.ReadAutoEduFormTemplateExcepts(c => c.AutoFTListID == sett.AutoFTListID).ToList();
                              excepts.Add(sett.AutoFTListID, explist);
                          }
                          else
                          {
                              explist = excepts[sett.AutoFTListID];
                          }

                          if (explist.Count(c => c.ExceptType == "SendMonth") > 0
                              && explist.Count(c => c.ExceptType == "SendMonth" && c.ExceptKey == dto.DateFrom.Month.ToString()) == 0)
                          {
                              continue;
                          }


                          if (explist.Count(c => c.ExceptType == "SendTerm") > 0 && explist.Count(c => c.ExceptType == "SendTerm" && c.ExceptKey == dto.EduTermID) == 0)
                          {
                              //WriteLog("表單自動發送", "不發送:" + "課程(" + dto.EduStopCode + ")" + dto.Name + ",設定代號:" + sett.AutoFTListID + ",本發送設定之指定課程不包含本課程,不發送", dto.EduTermID);
                              continue;
                          }

                          if (explist.Count(c => c.ExceptType == "EduTerm" && c.ExceptKey == dto.EduTermID) > 0
                              || explist.Count(c => c.ExceptType == "Dept" && c.ExceptKey == dto.DepCode) > 0)
                          {
                              //WriteLog("表單自動發送", "不發送:" + "課程(" + dto.EduStopCode + ")" + dto.Name + ",設定代號:" + sett.AutoFTListID + ",已設定為排除,不發送", dto.EduTermID);
                              continue;
                          }


                          if (explist.Count(c => c.ExceptType == "SendDept") > 0)
                          {
                              bool checksenddept = false;
                              foreach (AutoEduFormTemplateExceptDto senddep in explist.Where(c => c.ExceptType == "SendDept"))
                              {
                                  List<string> depcodes = GetChildDepts(senddep.ExceptKey);
                                  if (depcodes.Contains(dto.DepCode))
                                  {
                                      checksenddept = true;
                                      break;
                                  }
                              }

                              if (!checksenddept)
                              {
                                  continue;
                              }
                          }

                          //AutoEduFormTemplateListDto sett = settings.Where(c => c.JobCode == dto.JobCode).FirstOrDefault();
                          if (sett != null)
                          {
                              int floor = dto.RoundCode.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries).Length;


                              if (sett.SendFloor != null && sett.SendFloor.Value != floor)
                              {
                                  continue;
                              }

                              if (service.ReadEduFormTemplateLists(c => c.EduTermID == dto.EduTermID && c.AutoFTListID == sett.AutoFTListID).Count() == 0)
                              {
                                  DateTime senddate;
                                  if (sett.DateShiftType == "after")
                                  {

                                      senddate = dto.DateFrom.AddDays(sett.DateShift.Value);
                                  }
                                  else
                                  {
                                      senddate = dto.DateTo.AddDays((-1) * sett.DateShift.Value);
                                  }

                                  if (senddate.Date <= DateTime.Now.Date)
                                  {
                                      List<AutoEduFormTemplateTargetDto> targetsett = service.ReadAutoEduFormTemplateTargets(c => c.AutoFTListID == sett.AutoFTListID).ToList();

                                      bool setok = true;
                                      //foreach (AutoEduFormTemplateTargetDto target in targetsett)
                                      //{
                                      //    if (target.RoleType == "T")
                                      //    {
                                      //        bool check = CheckTeacherSetting(target.TeacherType, dto.EduTermID);
                                      //        setok = setok && check;
                                      //    }
                                      //    else if (target.RoleType != "T" && target.RoleType != "S")
                                      //    {
                                      //        bool check = CheckTeacherSetting(target.RoleType, dto.EduTermID);
                                      //        setok = setok && check;
                                      //    }
                                      //}

                                      if (setok)// && senddate.Date>=DateTime.Now.Date)
                                      {

                                          int templateId = sett.TEMPLATE_ID;
                                          string name = sett.SettingName;
                                          string listid = GetSerialNo("EduAct_EduFTListID");
                                          EduFormTemplateListDto newitem = new EduFormTemplateListDto();
                                          newitem.FTListID = listid;

                                          newitem.ExecuteDate = senddate.Date;

                                          newitem.TEMPLATE_ID = templateId;
                                          newitem.EduTermID = dto.EduTermID;
                                          newitem.Name = name;
                                          newitem.AutoFTListID = sett.AutoFTListID;
                                          newitem.EachStudent = sett.EachStudent;

                                          newitem.Creater = dto.Creater;

                                          //newitem.CreateSQL = GenerateSql(listid, senddate, dto, sett, targetsett);



                                          List<EduFormTemplateTargetDto> tlist = new List<EduFormTemplateTargetDto>();


                                          foreach (AutoEduFormTemplateTargetDto item in targetsett)
                                          {
                                              string targetid = GetSerialNo("EduAct_EduFTTargetID");

                                              EduFormTemplateTargetDto tdto = new EduFormTemplateTargetDto();
                                              DateTime? expdate = null;
                                              if (item.ExpireDays.HasValue)
                                              {
                                                  switch (item.ExpireDaysType.ToLower())
                                                  {
                                                      case "aftercourse":
                                                          expdate = dto.DateTo.AddDays(item.ExpireDays.Value);
                                                          break;
                                                      case "aftersend":
                                                          expdate = senddate.AddDays(item.ExpireDays.Value);
                                                          break;
                                                      case "after":
                                                          expdate = dto.DateFrom.AddDays(item.ExpireDays.Value);
                                                          break;
                                                      case "before":
                                                          expdate = dto.DateTo.AddDays((-1) * item.ExpireDays.Value);
                                                          break;
                                                  }
                                                  
                                              }

                                              tdto.FTTargetID = targetid;
                                              tdto.FTListID = listid;
                                              tdto.ExpireDate = expdate;
                                              tdto.RoleType = item.RoleType;
                                              tdto.SubTEMPLATE_ID = item.SubTEMPLATE_ID;
                                              tdto.UserDefineTargetID = (item.UserDefineTargetID == "" || item.UserDefineTargetID == null) ? null : item.UserDefineTargetID;
                                              if (item.RoleType == "T")
                                              {
                                                  tdto.TeacherType = item.TeacherType;
                                              }
                                              tlist.Add(tdto);
                                          }

                                          WriteLog("AutoSendForm", "寫入資料:FTListID=" + newitem.FTListID);

                                          string msg = SaveEduFormSetting(newitem, tlist, false, service);
                                          WriteLog("表單自動發送", "發送成功:" + "課程(" + dto.EduStopCode + ")" + dto.Name, dto.EduTermID);

                                          if (msg != null)
                                          {
                                              result = msg;
                                          }
                                      }
                                      else
                                      {
                                          result = "課程(" + dto.EduStopCode + ")" + dto.Name + "教師尚未完成設定";
                                          WriteLog("表單自動發送", "發送失敗:" + result, dto.EduTermID);
                                      }
                                  }
                              }
                          }
                      }
                  }

                  return result;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }

      }

      public bool IsAutoSend(AutoEduFormTemplateListDto sett, EduTermDto dto)
      {

          return IsAutoSend(sett, dto, null);
      }

      public bool IsAutoSend(AutoEduFormTemplateListDto sett, EduTermDto dto,DateTime? thedate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var permiss = from p in service.UnitOfWork.FORM_TEMPLATE_PERMISSIONs
                            join h in service.UnitOfWork.V_hosps
                            on p.HOSPCODE equals h.Unitcode
                            where p.TEMPLATE_ID == sett.TEMPLATE_ID
                            select new { p, h };
              string hosp = dto.Hospital.HasValue ? dto.Hospital.Value.ToString() : "";
              if (permiss.Count(c => c.h.Hospshortcode == hosp) == 0)
              {
                  return false;
              }

    
          List<AutoEduFormTemplateExceptDto> explist = service.ReadAutoEduFormTemplateExcepts(c => c.AutoFTListID == sett.AutoFTListID).ToList();


          DateTime evaldate = thedate == null ? DateTime.Now.Date : thedate.Value;
          if (sett.Edate != null && explist.Count(c => c.ExceptType == "SendMonth") == 0)
              {
                  if (dto.DateFrom > sett.Edate.Value)
                  {
                      return false;
                  }
              }

              if (sett.Sdate != null && explist.Count(c => c.ExceptType == "SendMonth") == 0)
              {
                  if (dto.DateFrom < sett.Sdate.Value)
                  {
                      return false;
                  }
              }


              if (sett.EduYear != null && sett.EduYear != "")
              {
                  if (dto.EduYear != sett.EduYear)
                  {
                      return false;
                  }
              }


              

              List<string> months = new List<string>();
              DateTime sdate = dto.DateFrom;
              while (sdate < dto.DateTo)
              {
                  months.Add(sdate.Month.ToString());
                  sdate = sdate.AddMonths(1);
              }

              if (explist.Count(c => c.ExceptType == "SendMonth") > 0
                  && (explist.Count(c => c.ExceptType == "SendMonth" && months.Contains(c.ExceptKey)) == 0 || explist.Count(c => c.ExceptType == "SendMonth" && c.ExceptKey == evaldate.Month.ToString()) == 0))
              {
                  return false;
              }


              if (explist.Count(c => c.ExceptType == "SendTerm") > 0 && explist.Count(c => c.ExceptType == "SendTerm" && c.ExceptKey == dto.EduTermID) == 0)
              {
                  //WriteLog("表單自動發送", "不發送:" + "課程(" + dto.EduStopCode + ")" + dto.Name + ",設定代號:" + sett.AutoFTListID + ",本發送設定之指定課程不包含本課程,不發送", dto.EduTermID);
                  return false;
              }

              if (explist.Count(c => c.ExceptType == "SendTerm") > 0 && explist.Count(c => c.ExceptType == "SendTerm" && c.ExceptKey == dto.EduTermID) > 0)
              {
                  return true;
              }

              if (explist.Count(c => c.ExceptType == "EduTerm" && c.ExceptKey == dto.EduTermID) > 0
                  || explist.Count(c => c.ExceptType == "Dept" && c.ExceptKey == dto.DepCode) > 0)
              {

                  //WriteLog("表單自動發送", "不發送:" + "課程(" + dto.EduStopCode + ")" + dto.Name + ",設定代號:" + sett.AutoFTListID + ",已設定為排除,不發送", dto.EduTermID);
                  return false;
              }
              //資訊室特別處理
              if (dto.DepCode == "7000" && explist.Count(c => c.ExceptType == "SendDept" && c.ExceptKey == "7000") == 0)
              {
                  return false;
              }

              if (explist.Count(c => c.ExceptType == "SendDept") > 0)
              {
                  bool checksenddept = false;
                  foreach (AutoEduFormTemplateExceptDto senddep in explist.Where(c => c.ExceptType == "SendDept"))
                  {
                      List<string> depcodes = GetChildDepts(senddep.ExceptKey);
                      if (depcodes.Contains(dto.DepCode) || dto.DepCode == senddep.ExceptKey)
                      {
                          checksenddept = true;
                          break;
                      }
                  }

                  if (!checksenddept)
                  {
                      return false;
                  }
              }

              int floor = dto.RoundCode.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries).Length;

              if (sett.SendFloor != null && sett.SendFloor.Value != floor)
              {
                  return false;
              }

              return true;
          }
      }

      public string AutoSendForm(DateTime date)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  ///DateTime d = new DateTime(2021,4,15);

                  string result = null;

                  string[] test = new string[] { "20230603000000000071" };

                  List<string> jobcodes = service.ReadAutoEduFormTemplateLists(c => (c.Sdate == null || c.Sdate <= date) && (c.Edate == null || c.Edate >= date)).Select(c => c.JobCode).Distinct().ToList();

                  //string[] test = new string[] { "2017113002", "2017113003", "2017113004", "2017113005" };
                  List<EduTermDto> eduterms = service.ReadEduTerms(c => (

                      (c.DateFrom <= date 
                      && c.DateTo.AddDays(5) >= date
                      && jobcodes.Contains(c.JobCode)
                      //&& test.Contains(c.EduTermID)
                      //&& c.EduStopCode.StartsWith("111DCLK") 
                      )

                      
                          //&& c.DateFrom>new DateTime(2021,10,1)
                      //  c.DateTo >= d
                  //    && 
                  //c.EduTermID == "20210510000000001271" 
                      )).ToList();
                  
                  //eduterms = eduterms.Where(c => c.EduStopCode.StartsWith("105TPY2")).ToList();
                  //eduterms = eduterms.GroupBy(c => new { c.EduTermID, c.EduYear }).Select(k => k.First()).ToList(); 
                  List<string> jobcodelist = new List<string>();
                  foreach (EduTermDto term in eduterms)
                  {
                      if (!jobcodelist.Contains(term.JobCode))
                      {
                          jobcodelist.Add(term.JobCode);
                      }
                  }


                  List<AutoEduFormTemplateListDto> settings = service.ReadAutoEduFormTemplateLists(c => jobcodelist.Contains(c.JobCode) && (c.Sdate == null || c.Sdate <= date) && (c.Edate == null || c.Edate >= date)).ToList();

                  //settings = service.ReadAutoEduFormTemplateLists(c => c.AutoFTListID == "2022092404").ToList();

                  //AutoEduFormTemplateExceptAssembler expasm = new AutoEduFormTemplateExceptAssembler();
                  //List<AutoEduFormTemplateExceptDto> explistall = expasm.Assemble((from exp in service.UnitOfWork.AutoEduFormTemplateExcepts
                  //                                                                 join sett in settings
                  //                                                                 on exp.AutoFTListID equals sett.AutoFTListID
                  //                                                                 select exp).ToList()).ToList();
                  //AutoEduFormTemplateTargetAssembler targetasm = new AutoEduFormTemplateTargetAssembler();
                  //List<AutoEduFormTemplateTargetDto> targetlistall = targetasm.Assemble((from tar in service.UnitOfWork.AutoEduFormTemplateTargets
                  //                                                                       join sett in settings
                  //                                                                       on tar.AutoFTListID equals sett.AutoFTListID
                  //                                                                       select tar).ToList()).ToList();
                      

                  foreach (EduTermDto dto in eduterms)
                  {

                      foreach (AutoEduFormTemplateListDto sett in settings.Where(c => c.JobCode == dto.JobCode && (c.EduYear == null || c.EduYear == "" || c.EduYear == dto.EduYear ) &&
                          (c.Edate == null || c.Edate>= date )
                          ))
                      {


                          //if (!(sett.SettingName == "中醫-住院醫師 自我評估及導師訪談表"))
                          //{
                          //    continue;
                          //}

                          //if (!(dto.EduTermID == "20170612000000000000"))
                          //{
                          //    continue;
                          //}

                          //if (sett.AutoFTListID != "2021081219")
                          //{
                          //    continue;
                          //}
                          if(sett.TEMPLATE_ID == 300)
                          {

                          }
                          if (!IsAutoSend(sett, dto, date))
                          {
                              continue;
                          }

                          //AutoEduFormTemplateListDto sett = settings.Where(c => c.JobCode == dto.JobCode).FirstOrDefault();
                          if (sett != null)
                          {

                              DateTime senddate;
                              DateTime datefrom;
                              DateTime dateto;

                              List<AutoEduFormTemplateExceptDto> explist = service.ReadAutoEduFormTemplateExcepts(c => c.AutoFTListID == sett.AutoFTListID).ToList(); //explistall.Where(c => c.AutoFTListID == sett.AutoFTListID).ToList();

                              bool checkexists = false;
                              string sendmonth = null;
                              if (explist.Count(c => c.ExceptType == "SendMonth") > 0)
                              {
                                  if (sett.DateShiftType == "after")
                                  {

                                      senddate = new DateTime(date.Year, date.Month, 1).AddDays(sett.DateShift.Value);
                                  }
                                  else
                                  {
                                      senddate = new DateTime(date.Year, date.Month, 1).AddMonths(1).AddDays(-1).AddDays((-1) * sett.DateShift.Value);
                                  }
                                  if (senddate.Date < dto.DateFrom.Date || senddate.Date > dto.DateTo.Date)
                                  {
                                      continue;
                                  }
                                  dateto = new DateTime(date.Year, date.Month, 1).AddMonths(1).AddDays(-1);
                                  datefrom = new DateTime(date.Year, date.Month, 1);

                                  sendmonth = senddate.ToString("yyyyMM");
                                  checkexists = service.UnitOfWork.EduFormTemplateLists.Count(c => c.EduTermID == dto.EduTermID && c.AutoFTListID == sett.AutoFTListID && c.SendMonth == sendmonth) == 0;
                                  

                              }
                              else
                              {
                                  
                                  checkexists = service.UnitOfWork.EduFormTemplateLists.Count(c => c.EduTermID == dto.EduTermID && c.AutoFTListID == sett.AutoFTListID) == 0;
                                  if (sett.DateShiftType == "after")
                                  {

                                      senddate = dto.DateFrom.AddDays(sett.DateShift.Value);
                                  }
                                  else
                                  {
                                      senddate = dto.DateTo.AddDays((-1) * sett.DateShift.Value);
                                  }
                                  dateto = dto.DateTo;
                                  datefrom = dto.DateFrom;
                              }

                              if (checkexists)
                              {


                                  if (senddate.Date <= date.Date)
                                  {
                                      List<AutoEduFormTemplateTargetDto> targetsett = service.ReadAutoEduFormTemplateTargets(c => c.AutoFTListID == sett.AutoFTListID).OrderBy(c => c.SubTEMPLATE_ID).ThenBy(c => c.AutoFTTargetID).ToList();// targetlistall.Where(c => c.AutoFTListID == sett.AutoFTListID).OrderBy(c => c.SubTEMPLATE_ID).ThenBy(c => c.AutoFTTargetID).ToList();

                                      bool setok = true;
                                      //foreach (AutoEduFormTemplateTargetDto target in targetsett)
                                      //{
                                      //    if (target.RoleType == "T")
                                      //    {
                                      //        bool check = CheckTeacherSetting(target.TeacherType, dto.EduTermID);
                                      //        setok = setok && check;
                                      //    }
                                      //    else if (target.RoleType != "T" && target.RoleType != "S")
                                      //    {
                                      //        bool check = CheckTeacherSetting(target.RoleType, dto.EduTermID);
                                      //        setok = setok && check;
                                      //    }
                                      //}

                                      if (setok)// && senddate.Date>=DateTime.Now.Date)
                                      {

                                          int templateId = sett.TEMPLATE_ID;
                                          string name = sett.SettingName;
                                          string listid = GetSerialNo("EduAct_EduFTListID");
                                          EduFormTemplateListDto newitem = new EduFormTemplateListDto();
                                          newitem.FTListID = listid;

                                          newitem.ExecuteDate = senddate.Date;

                                          newitem.TEMPLATE_ID = templateId;
                                          newitem.EduTermID = dto.EduTermID;
                                          newitem.Name = name;
                                          newitem.AutoFTListID = sett.AutoFTListID;
                                          newitem.EachStudent = sett.EachStudent;

                                          newitem.Creater = dto.Creater;

                                          //newitem.CreateSQL = GenerateSql(listid, senddate, dto, sett, targetsett);
                                          newitem.SendOrderSetting = sett.SendOrderSetting;
                                          newitem.SendMonth = sendmonth;

                                          List<EduFormTemplateTargetDto> tlist = new List<EduFormTemplateTargetDto>();


                                          foreach (AutoEduFormTemplateTargetDto item in targetsett)
                                          {
                                              string targetid = GetSerialNo("EduAct_EduFTTargetID");

                                              EduFormTemplateTargetDto tdto = new EduFormTemplateTargetDto();
                                              DateTime? expdate = null;
                                              if (item.ExpireDays.HasValue)
                                              {
                                                  switch (item.ExpireDaysType.ToLower())
                                                  {
                                                      case "aftercourse":
                                                          expdate = dateto.AddDays(item.ExpireDays.Value);
                                                          break;
                                                      case "aftersend":
                                                          expdate = senddate.AddDays(item.ExpireDays.Value);
                                                          break;
                                                      case "after":
                                                          expdate = datefrom.AddDays(item.ExpireDays.Value);
                                                          break;
                                                      case "before":
                                                          expdate = dateto.AddDays((-1) * item.ExpireDays.Value);
                                                          break;
                                                  }
                                                  
                                              }

                                              tdto.FTTargetID = targetid;
                                              tdto.FTListID = listid;
                                              tdto.ExpireDate = expdate;
                                              tdto.RoleType = item.RoleType;
                                              tdto.SubTEMPLATE_ID = item.SubTEMPLATE_ID;
                                              tdto.UserDefineTargetID = (item.UserDefineTargetID == "" || item.UserDefineTargetID == null) ? null : item.UserDefineTargetID;
                                              if (item.RoleType == "T")
                                              {
                                                  tdto.TeacherType = item.TeacherType;
                                              }
                                              tlist.Add(tdto);
                                          }

                                          //WriteLog("AutoSendForm", "寫入資料:FTListID=" + newitem.FTListID);

                                          string msg = SaveEduFormSetting(newitem, tlist, false, service);
                                          //WriteLog("表單自動發送", "發送成功:" + "課程(" + dto.EduStopCode + ")" + dto.Name, dto.EduTermID);

                                          if (msg != null)
                                          {
                                              result = msg;
                                          }
                                      }
                                      else
                                      {
                                          result = "課程(" + dto.EduStopCode + ")" + dto.Name + "教師尚未完成設定";
                                          //WriteLog("表單自動發送", "發送失敗:" + result, dto.EduTermID);
                                      }
                                  }
                              }
                          }

                      }
                      GC.Collect();
                      GC.WaitForPendingFinalizers();
                      GC.WaitForFullGCComplete();
                  }

                  return result;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      private bool CheckTeacherSetting(string teachertype,string edutermid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              if (service.ReadEduRefTeachers(c => c.EduTermID == edutermid && c.TeacherType == teachertype && c.TeacherID != null && c.TeacherID != "").Count() == 0)
              {
                  return false;
              }


              switch (teachertype)
              {
                  case "DeptTeacher":
                  case "EBM":
                  case "CR":
                  case "R":

                      break;
                  case "VS":
                  case "Coach":
                      break;
              }


              return true;
          }
      }

      #endregion

      #region login

      public SelectVKmuemp GetVKmuemp(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              Thread.CurrentThread.CurrentCulture = new CultureInfo("zh-TW");
              SelectVKmuempRepository rep = new SelectVKmuempRepository(service.UnitOfWork);

              rep.empcode = empcode;
              rep.password = null;
              SelectVKmuemp emp = rep.GetAll().FirstOrDefault();
              if (emp != null)
              {
                  return emp;
              }
              else
              {
                  return null;
              }
          }
      }

      public AccountDto ReadSystemAccount(string empcode, string password)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              DateTime nowdate = DateTime.Now.Date;
              AccountDto acc = service.ReadAccounts(c => (c.Status == null) && c.Empcode == empcode && c.Pwd == password && (c.Sdate == null || (c.Sdate.HasValue && c.Sdate.Value <= nowdate)) && (c.Edate == null || (c.Edate.HasValue && c.Edate.Value >= nowdate))).FirstOrDefault();
              return acc;
          }
      }

      public List<AccountDto> QuerySystemAccount(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              DateTime nowdate = DateTime.Now.Date;
              List<AccountDto> acc = service.ReadAccounts(c => c.Status == null && (c.Empcode == empcode || empcode == null || empcode == "") &&  (c.Edate == null || (c.Edate.HasValue && c.Edate.Value >= nowdate))).ToList();
              return acc;
          }

      }


      public string DeleteSystemAccount(List<int> ids)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<Account> data = service.UnitOfWork.Accounts.Where(c => ids.Contains(c.ID)).ToList();

              foreach (var d in data)
              {
                  d.Status = 'X';
              }
              try
              {
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }


      public List<string[]> ImportSystemAccount(DataTable dt, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string[]> result = new List<string[]>();
              try
              {
                  int rowcount = 0;

                  foreach (DataRow dr in dt.Rows)
                  {
                      string color = "black";
                      string msg = "已上傳完成";
                      string inempcode = dr["員工編號"].ToString();
                      rowcount++;

                      if (inempcode != "")
                      {

                          Account data = new Account();
                          data.Empcode = inempcode;
                          data.Pwd = dr["登入密碼"].ToString();
                          data.Empname = dr["姓名"].ToString();
                          data.Deptcode = dr["部門代號"].ToString();
                          data.Hospcode = dr["院區"].ToString();
                          if(dr["有效起日"].ToString()!= "")
                          {
                              try
                              {
                                  data.Sdate = DateTime.ParseExact(dr["有效起日"].ToString(), "yyyyMMdd", CultureInfo.CurrentCulture);
                              }
                              catch
                              {
                                  msg = "第" + rowcount.ToString() + "行:職員編號：" + inempcode + "上傳失敗:有效起日欄位格式錯誤";
                                  color = "red";
                                  continue;
                              }
                          }

                          if (dr["有效迄日"].ToString() != "")
                          {
                              try
                              {
                                  data.Edate = DateTime.ParseExact(dr["有效迄日"].ToString(), "yyyyMMdd", CultureInfo.CurrentCulture);
                              }
                              catch
                              {
                                  msg = "第" + rowcount.ToString() + "行:職員編號：" + inempcode + "上傳失敗:有效迄日欄位格式錯誤";
                                  color = "red";
                                  continue;
                              }
                          }

                          data.Creater = empcode;
                          data.CreateDate = DateTime.Now;



                          string intsql = @"INSERT INTO www_EduActivity.dbo.Accounts
(empcode, pwd, empname, deptcode, hospcode, status, sdate, edate, Creater, CreateDate) 
VALUES (@empcode, @pwd, @empname, @deptcode, @hospcode, @status, @sdate, @edate, @Creater, @CreateDate)

                              ";

                          List<SqlParameter> sqlparms = new List<SqlParameter>();
                          sqlparms.Add(new SqlParameter("empcode", GetDBObject(data.Empcode)));
                          sqlparms.Add(new SqlParameter("pwd", GetDBObject(data.Pwd)));
                          sqlparms.Add(new SqlParameter("empname", GetDBObject(data.Empname)));
                          sqlparms.Add(new SqlParameter("deptcode", GetDBObject(data.Deptcode)));
                          sqlparms.Add(new SqlParameter("hospcode", GetDBObject(data.Hospcode)));
                          sqlparms.Add(new SqlParameter("status", GetDBObject(data.Status)));
                          sqlparms.Add(new SqlParameter("sdate", GetDBObject(data.Sdate)));
                          sqlparms.Add(new SqlParameter("edate", GetDBObject(data.Edate)));
                          sqlparms.Add(new SqlParameter("Creater", GetDBObject(data.Creater)));
                          sqlparms.Add(new SqlParameter("CreateDate", GetDBObject(data.CreateDate)));

                          (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());
                          

                          //service.UnitOfWork.Add(data);


                          try
                          {
                              service.UnitOfWork.SaveChanges();
                              color = "black";
                              msg = "第" + rowcount.ToString() + "行:職員編號" + inempcode + "，匯入成功";
                          }
                          catch (Exception ex)
                          {
                              service.UnitOfWork.ClearChanges();
                              msg = "第" + rowcount.ToString() + "行:職員編號：" + inempcode + "上傳失敗:" + ex.Message;
                              color = "red";
                          }


                      }
                      else
                      {

                          color = "red";
                          msg = "第" + rowcount.ToString() + "行:職員編號" + inempcode + "空白";
                          result.Add(new string[] { msg, color });
                          continue;

                      }

                      result.Add(new string[] { msg, color });
                  }
              }
              catch (Exception ex)
              {
                  result.Clear();
                  result.Add(new string[] { "檔案格式錯誤，請確認第一欄欄位名稱是否與範例相同:" + ex.Message, "red" });
              }
              finally
              {
                  service.UnitOfWork.ClearChanges();
              }
              return result;
          }
      }


      public string ImportSystemAccount(List<AccountDto> importlist)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              
              try
              {
                  foreach (var acc in importlist)
                  {
                      service.CreateAccount(acc, false);
                  }
                  service.UnitOfWork.SaveChanges();
                  return null;

              }
              catch(Exception ex)
              {
                  return ex.Message;
              }
          }
      }


      public AccountDto GetSystemAccountData(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              AccountDto acc = service.ReadAccounts(c => c.Empcode == empcode).FirstOrDefault();
              return acc;
          }
      }

      public SelectVKmuemp ReadVKmuemp(string empcode, string password, bool withcheck)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              Thread.CurrentThread.CurrentCulture = new CultureInfo("zh-TW");
              bool checkresult = !withcheck;
              if (withcheck)
              {

                  


                  //同步有問題時切換抓oracle
                  //ApConnService.GetDBConnMethodClient serviceclient = new ApConnService.GetDBConnMethodClient();

                  //string connStr = serviceclient.GetDBConnectionWithHospCode("KMUH", "ora92", "HRDataTrans_PSN").ConnectionString;

                  //connStr = connStr.Replace("Provider=OraOLEDB.Oracle.1;", "");

                  //OracleConnection conn = new OracleConnection(connStr);

                  //OracleDataAdapter adp = new OracleDataAdapter("select emp_code,emp_name,dept_code,loc_code,job_code from kmuemp where emp_code = :empcode",conn);
                  //adp.SelectCommand.Parameters.AddWithValue(":empcode", empcode);
                  //DataTable dt = new DataTable();
                  //adp.Fill(dt);

                  //if (dt.Rows.Count > 0)
                  //{

                  //    SelectVKmuemp emp = new SelectVKmuemp();
                  //    emp.empcode = dt.Rows[0]["emp_code"].ToString();
                  //    emp.empname = dt.Rows[0]["emp_name"].ToString();
                  //    emp.deptcode = dt.Rows[0]["dept_code"].ToString();
                  //    emp.loccode = dt.Rows[0]["loc_code"].ToString();
                  //    emp.jobcode = dt.Rows[0]["job_code"].ToString();
                  //    return emp;
                  //}
                  //else
                  //{
                  //    return null;
                  //}
                  PasswordService.PasswordServiceWCFServiceClient serviceclient = new PasswordService.PasswordServiceWCFServiceClient();
                  PasswordService.ValidatePasswordClass input = new PasswordService.ValidatePasswordClass();
                  input.EmpCode = empcode;
                  input.Password = password;
                  PasswordService.ValidatePasswordReturnCollect coll = serviceclient.ValidatePassword(input);
                  //ApConnService.CheckPwdMethodClient serviceclient = new ApConnService.CheckPwdMethodClient();
                  //ApConnService.ValidatePWDReturnCollect coll = serviceclient.CheckPassword(empcode, password, "EduActivity", HttpContext.Current.Request.UserHostAddress);
                  checkresult = coll.CheckResult;
              }
              if (checkresult)
              {
                  SelectVKmuempRepository rep = new SelectVKmuempRepository(service.UnitOfWork);

                  rep.empcode = empcode;
                  rep.password = password;
                  SelectVKmuemp emp = rep.GetAll().FirstOrDefault();
                  if (emp != null)
                  {
                      return emp;
                  }
                  else
                  {
                      return null;
                  }
              }
              else
              {
                  return null;
              }
          }
      }

      public MemberDto ReadMemberByLogin(string account)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadMembers(c => c.IsHospMember == account).FirstOrDefault();
          }
      }



      public SelectVKmuempData ReadVKmuempData(string empcode)
      {
          if (empcode != null)
          {
              ApConnService.GetDBConnMethodClient serviceclient = new ApConnService.GetDBConnMethodClient();

              string connStr = serviceclient.GetDBConnectionWithHospCode("KMUH", "ora92", "HRDataTrans_PSN").ConnectionString;

              connStr = connStr.Replace("Provider=OraOLEDB.Oracle.1;", "");

              OracleConnection conn = new OracleConnection(connStr);

              OracleDataAdapter adp = new OracleDataAdapter("select a.emp_code,a.emp_name,a.dept_code,a.loc_code,a.job_code,b.job_name from kmuemp a left join kmujob b on a.job_code = b.job_code_x where a.emp_code = :empcode or a.emp_code_7 = :empcode", conn);
              adp.SelectCommand.Parameters.AddWithValue(":empcode", empcode);
              DataTable dt = new DataTable();
              adp.Fill(dt);

              if (dt.Rows.Count > 0)
              {

                  SelectVKmuempData emp = new SelectVKmuempData();
                  emp.empcode = dt.Rows[0]["emp_code"].ToString();
                  emp.empname = dt.Rows[0]["emp_name"].ToString();
                  emp.deptcode = dt.Rows[0]["dept_code"].ToString();
                  emp.loccode = dt.Rows[0]["loc_code"].ToString();
                  emp.jobcode = dt.Rows[0]["job_code"].ToString();
                  emp.jobname = dt.Rows[0]["job_name"].ToString();
                  return emp;
              }
              else
              {
                  return null;
              }
          }
          else
          {
              return null;
          }



          //SelectVKmuempDataRepository rep = new SelectVKmuempDataRepository(service.UnitOfWork);
          
          //rep.empcode = empcode;
          //SelectVKmuempData emp = rep.GetAll().FirstOrDefault();

          //if (emp != null)
          //{
          //    return emp;
          //}
          //else
          //{
          //    return null;
          //}
      }

      #endregion

      #region 組別設定

      public List<EduTeamDto> ReadEduTeams()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduTeams(c => c.Status == 'V').OrderBy(c => c.DisplayOrder).ToList();
          }
      }

      public void UpdateEduTeam(EduTeamDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.UpdateEduTeam(dto);
          }
      }

      public void InsertEduTeam(EduTeamDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.CreateEduTeam(dto);
          }
      }

      public void DeleteEduTeam(EduTeamDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.DeleteEduTeam(dto);
          }
      }

      public EduTeamDto ReadEduTeamsByCode(string code)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  return service.ReadEduTeams(code);
              }
              catch
              {
                  return null;
              }
          }
      }
      #endregion

      #region 學生名單維護

      public List<MemberDto> ReadMembers()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadMembers().ToList();
          }
      }

      public List<MemberDto> FillMembersExtraInfo(List<MemberDto> list)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              foreach (MemberDto dto in list)
              {
                  if (DateTime.Now.Date >= dto.DateFrom.Date && DateTime.Now.Date <= dto.DateTo.Date)
                  {
                      dto.Status = null;
                  }
                  else
                  {
                      dto.Status = 'Y';
                  }


                  if (dto.Status == null)
                  {
                      dto.StatusName = "訓練中";
                  }

                  try
                  {

                      EduTeamMemberDto edm = service.ReadEduTeamMembers(c => c.MemberID == dto.MemberID).FirstOrDefault();


                      if (edm != null)
                      {
                          dto.EduTeamCode = edm.EduTeamCode;
                          EduTeamDto team = service.ReadEduTeams(c => c.EduTeamCode == edm.EduTeamCode).FirstOrDefault();
                          if (team != null)
                          {
                              dto.EduTeamName = team.EduTeamName;
                          }
                      }

                  }
                  catch (Exception ex)
                  {
                  }
              }

              return list;
          }
      }

      public List<MemberDto> SearchMembersWithExtraInfo(List<string> jobcode, string membercode, DateTime? datebegin, DateTime? dateend, string eduteamcode, string membername)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              MemberRepository rep = new MemberRepository(service.UnitOfWork);

              MemberAssembler asm = new MemberAssembler();

              EduTeamRepository trep = new EduTeamRepository(service.UnitOfWork);

              EduTeamMemberRepository etmrep = new EduTeamMemberRepository(service.UnitOfWork);


              List<string> teamcodelist = GetHierarchyTeamCode(eduteamcode);

              List<MemberDto> list = asm.Assemble(rep.Find(c => ((jobcode == null) || jobcode.Contains(c.MemberType))
                  && ((membercode == null || membercode == "") || (c.MemberCode != null && c.MemberCode.Contains(membercode)))
                  && (membername == "" || c.Name.Contains(membername))
                  && (datebegin == null || c.DateFrom >= datebegin)
                  && (dateend == null || c.DateTo <= dateend)
                  //|| (c.DateFrom <= datebegin && c.DateTo >= datebegin && c.DateTo <= dateend)
                  //|| (c.DateFrom >= datebegin && c.DateTo <= dateend)
                  //|| (c.DateFrom <= dateend && c.DateTo >= dateend))

                  && (eduteamcode == null || eduteamcode == "" ||
                  (eduteamcode != null && eduteamcode != "" && etmrep.GetAll().Count(ee => ee.MemberID == c.MemberID && teamcodelist.Contains(ee.EduTeamCode)) > 0))

                  ).ToList()
                      ).ToList();

              list = FillMembersExtraInfo(list);
              return list.OrderBy(c => c.EduTeamCode).ToList();
          }
      }

      public List<MemberDto> GetMembersByTeam(string eduteamcode, DateTime? date)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              MemberRepository rep = new MemberRepository(service.UnitOfWork);
              EduTeamMemberRepository etmrep = new EduTeamMemberRepository(service.UnitOfWork);
              MemberAssembler asm = new MemberAssembler();

              List<string> teamcodelist = GetHierarchyTeamCode(eduteamcode);

              List<MemberDto> list = asm.Assemble(rep.Find(c =>
                  (date == null ||
                  ((c.DateFrom <= date && c.DateTo >= date)
                  )
                  )
                  && (eduteamcode == null || eduteamcode == "" ||
                  (eduteamcode != null && eduteamcode != "" && etmrep.GetAll().Count(ee => ee.MemberID == c.MemberID && teamcodelist.Contains(ee.EduTeamCode)) > 0))

                  ).ToList()
                      ).ToList();

              list = FillMembersExtraInfo(list);
              return list.OrderBy(c => c.EduTeamCode).ToList();
          }
      }

      public List<MemberDto> GetMembersByTerm(string edutermid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              MemberRepository rep = new MemberRepository(service.UnitOfWork);

              MemberAssembler asm = new MemberAssembler();

              List<string> memberlist = service.ReadEduTeamMemberRundowns(c => c.EduTermID == edutermid).Select(c => c.MemberID).ToList();

              List<MemberDto> list = asm.Assemble(rep.Find(c => memberlist.Contains(c.MemberID)
                  ).ToList()
                      ).ToList();

              list = FillMembersExtraInfo(list);
              return list.OrderBy(c => c.EduTeamCode).ToList();
          }
      }


      public List<SelectEduActJobCodeDto> ReadEduActJobCodes()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              SelectEduActJobCodeRepository rep = new SelectEduActJobCodeRepository(service.UnitOfWork);
              SelectEduActJobCodeAssembler asm = new SelectEduActJobCodeAssembler();
              return asm.Assemble(rep.GetAll()).ToList();
          }
      }

      public MemberDto ReadMemberByEmpCode(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
          DateTime nowdate = DateTime.Now.Date;

          List<MemberDto> list = FillMembersExtraInfo(service.ReadMembers(c => c.IsHospMember == empcode && c.DateFrom <= nowdate).OrderByDescending(c => c.DateFrom).ToList());
          return list.FirstOrDefault();
          }
      }
          
      public MemberDto ReadMemberByMemberCode(string membercode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {

              return service.ReadMembers(c => c.MemberCode == membercode).FirstOrDefault();
          }
      }
      public bool CheckIsMemberExist(string isHospMember, DateTime sdate, DateTime edate)
      {
          bool exists = false;

          using (EduActivityContextService service = new EduActivityContextService())
          {
              MemberDto member = service.ReadMembers(c => c.IsHospMember == isHospMember && c.DateFrom == sdate && c.DateTo == edate).FirstOrDefault();
              if(member!=null)
              {
                  exists = true;
              }
          }

          return exists;
      }


      public void InsertMember(MemberDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              dto.MemberID = GetSerialNo(MemberIDOwner);

              service.CreateMember(dto);

              InsertEduTeamMember(dto);
          }
      }

      public void InsertEduTeamMember(MemberDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduTeamMemberDto newdto = new EduTeamMemberDto();
              newdto.EduTeamMemberID = GetSerialNo(EduTeamMemberIDOwner);
              newdto.EduTeamCode = dto.EduTeamCode;
              newdto.MemberCode = dto.MemberCode;
              newdto.MemberID = dto.MemberID;

              service.CreateEduTeamMember(newdto);
          }
      }


      public void UpdateMember(MemberDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.UpdateMember(dto);

              EduTeamMemberDto etm = service.ReadEduTeamMembers(c => c.MemberID == dto.MemberID).FirstOrDefault();
              if (etm == null)
              {
                  InsertEduTeamMember(dto);
              }
              else
              {
                  etm.EduTeamCode = dto.EduTeamCode;
                  service.UpdateEduTeamMember(etm);
              }

          }
      }

      public void DeleteMembers(List<MemberDto> list)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  foreach (MemberDto dto in list)
                  {

                      service.DeleteEduTeamMemberRundowns(service.ReadEduTeamMemberRundowns(c => c.MemberID == dto.MemberID), false);
                      
                      List<EduTeamMemberDto> etmlist = service.ReadEduTeamMembers(c => c.MemberID == dto.MemberID).ToList();

                      foreach (EduTeamMemberDto etmdto in etmlist)
                      {
                          

                          service.DeleteEduTeamMember(etmdto, false);
                      }
                      (service.UnitOfWork as EduActivityContext).FlushChanges();

                      service.DeleteMember(dto, false);
                  }


                  service.UnitOfWork.SaveChanges();
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  throw ex;
              }
          }
      }

      public List<string> ImportMembers(DataTable dt,string creater)
      {
          List<SelectEduActJobCodeDto> joblist = ReadEduActJobCodes();

          List<EduTeamDto> termlist = ReadEduTeams();

          List<string> result = new List<string>();

          foreach (DataRow dr in dt.Rows)
          {
              try
              {
                  if (joblist.Where(c => c.Code == dr[2].ToString()).FirstOrDefault() == null)
                  {
                      result.Add(dr[0].ToString() + " " + dr[1].ToString() + "：失敗，職稱不符");
                      continue;
                  }

                  if (termlist.Where(c => c.EduTeamCode == dr[5].ToString()).FirstOrDefault() == null)
                  {
                      result.Add(dr[0].ToString() + " " + dr[1].ToString() + "：失敗，組別不符");
                      continue;
                  }

                  if (dr[0] == null || dr[0].ToString().Trim() == "")
                  {
                      result.Add(dr[0].ToString() + " " + dr[1].ToString() + "：失敗，學號空白");
                      continue;
                  }


                  if (dr[7] == null || dr[7].ToString().Trim() == "")
                  {
                      result.Add(dr[7].ToString() + " " + dr[1].ToString() + "：失敗，員工編號空白");
                      continue;
                  }

                  if (CheckIsMemberExist(dr[7].ToString().Trim(), Convert.ToDateTime(dr[3]), Convert.ToDateTime(dr[4])))
                  {
                      result.Add(dr[0].ToString() + " " + dr[1].ToString() + "：失敗，資料已存在");
                      continue;
                  }


                  MemberDto newitem = new MemberDto();
                  //newitem.MemberID = GetSerialNo(MemberIDOwner);
                  newitem.MemberCode = dr[0].ToString().Trim();
                  newitem.Name = dr[1].ToString().Trim();
                  newitem.MemberType = dr[2].ToString().Trim();
                  newitem.DateFrom = Convert.ToDateTime(dr[3]);
                  newitem.DateTo = Convert.ToDateTime(dr[4]);
                  newitem.EduTeamCode = dr[5].ToString().Trim();
                  newitem.Des = dr[6].ToString().Trim();
                  newitem.IsHospMember = dr[7].ToString().Trim().ToUpper();
                  if(dt.Columns.Count >= 9)
                  {
                      newitem.TrainingProcess = dr[8].ToString().Trim();
                  }
                  newitem.Creater = creater;
                  newitem.CreateDate = DateTime.Now;

                  InsertMember(newitem);
                  

                  result.Add(dr[0].ToString() + " " + dr[1].ToString() + "：完成");
              }
              catch (Exception ex)
              {
                  result.Add(dr[0].ToString() + " " + dr[1].ToString() + "：失敗，" + ex.Message);
                  continue;
              }
          }

          return result;
      }

      #endregion

      #region 實習時間設定

      public List<EduTeamRundownDto> SearchEduTeamRundown(DateTime? datebegin, DateTime? dateend, List<string> jobcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduTeamRundownRepository rep = new EduTeamRundownRepository(service.UnitOfWork);

              EduTeamRundownAssembler asm = new EduTeamRundownAssembler();

              List<EduTeamRundownDto> list = asm.Assemble(rep.Find(c => //((jobcode == null || jobcode.Count == 0) /*|| jobcode.Contains(c.EduTermID)*/)
                  //&& 
                  (datebegin == null
                      || (c.DateFrom <= datebegin && c.DateTo >= datebegin && c.DateTo <= dateend)
                      || (c.DateFrom >= datebegin && c.DateTo <= dateend)
                      || (c.DateFrom <= dateend && c.DateTo >= dateend))).ToList()).ToList();

              return list;
          }
      }

      public void InsertEduTeamRundown(EduTeamRundownDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              dto.EduTeamStopID = GetSerialNo(EduTeamStopIDOwner);

              service.CreateEduTeamRundown(dto);
          }
      }

      public void UpdateEduTeamRundown(EduTeamRundownDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.UpdateEduTeamRundown(dto);
          }
      }

      public void DeleteEduTeamRundowns(List<EduTeamRundownDto> list)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.DeleteEduTeamRundowns(list);
          }
      }

      #endregion

      #region 實習課程維護

      public List<EduTermDto> FindEduTerms(string EduStopCode, string name, DateTime? datebegin, 
          DateTime? dateend, string creater, string deptcode, string EduYear, string jobcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduTermRepository rep = new EduTermRepository(service.UnitOfWork);

              EduTermAssembler asm = new EduTermAssembler();

              List<EduTerm> terms = rep.Find(c =>
                  (
                  EduStopCode == null
                  ||
                  c.EduStopCode.Contains(EduStopCode)
                  ||
                  rep.GetAll().Count(d => d.EduStopCode.Contains(EduStopCode) && d.RoundCode.Contains(c.EduTermID)) > 0
                  )
                  &&
                  (
                  creater == null
                  ||
                  c.Creater == creater
                  )
                  &&
                  (
                  EduYear == null
                  ||
                  EduYear == ""
                  ||
                  c.EduYear == EduYear
                  )
                  &&
                  (
                  jobcode == null
                  ||
                  jobcode == ""
                  ||
                  c.JobCode == jobcode
                  )
                  &&
                  (
                  name == null
                  ||
                  c.Name.Contains(name)
                  ||
                  rep.GetAll().Count(d => d.Name.Contains(name) && d.RoundCode.Contains(c.EduTermID)) > 0
                  )
                  &&
                  (datebegin == null
                      || (c.DateFrom <= datebegin && c.DateTo >= datebegin && c.DateTo <= dateend)
                      || (c.DateFrom >= datebegin && c.DateTo <= dateend)
                      || (c.DateFrom <= dateend && c.DateTo >= dateend))
                      && (deptcode == null
                      || deptcode == ""
                      || c.DepCode == deptcode
                      || c.EduTerms.Count(d => d.DepCode == deptcode) > 0
          )

                      ).OrderBy(c => c.RoundCode).ThenBy(c => c.DateFrom).ToList();

              List<EduTermDto> list = new List<EduTermDto>();

              List<V_department> depts = new List<V_department>();

              foreach (EduTerm term in terms)
              {
                  EduTermDto dto = asm.Assemble(term);

                  dto.Name = GetEduTermFullName(term);
                  V_department dep = depts.Where(c => c.Deptcode == term.DepCode && c.Hospcode == "KMUH").FirstOrDefault();
                  if (dep == null)
                  {
                      dep = service.UnitOfWork.V_departments.Where(c => c.Deptcode == term.DepCode && c.Hospcode == "KMUH").FirstOrDefault();
                      if (dep != null)
                      {
                          depts.Add(dep);
                          dto.UnitStr = term.DepCode + dep == null ? "" : dep.Deptname;
                      }
                  }
                  else
                  {
                      dto.UnitStr = dep.Deptcode + dep.Deptname;
                  }

                  list.Add(dto);
              }
              return list;
          }
      }

      public EduTeamDto GetEduTeamByJobCode(string jobcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduTeams(c => c.JobCode.Contains(jobcode)).FirstOrDefault();
          }
      }

      public void CopyEduTerm(string edutermid, string eduyear, string creater, string inparentedutermid)
      {
          using (EduActivityContext context = new EduActivityContext())
          {
              context.Pr_CopyEduTerm(edutermid, eduyear, creater, inparentedutermid);
              context.SaveChanges();
          }
      }

      public EduTermDto GetEduTerm(string edutermid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduTerms(edutermid);
          }
      }

      public List<EduTermDto> SearchEduTerm(string EduStopCode, string name, DateTime? datebegin, DateTime? dateend)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduTermRepository rep = new EduTermRepository(service.UnitOfWork);

              EduTermAssembler asm = new EduTermAssembler();

              List<EduTermDto> list = asm.Assemble(rep.Find(c =>
                  (EduStopCode == null || c.EduStopCode == EduStopCode)
                  &&
                  (name == null || c.Name.Contains(name))
                  &&
                  (datebegin == null
                      || (c.DateFrom <= datebegin && c.DateTo >= datebegin && c.DateTo <= dateend)
                      || (c.DateFrom >= datebegin && c.DateTo <= dateend)
                      || (c.DateFrom <= dateend && c.DateTo >= dateend))).OrderBy(c => c.RoundCode).ThenBy(c => c.DateFrom).ToList()).ToList();
              return list;
          }
      }

      public EduTermDto GetEduTermByID(string edutermid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduTerms(c => c.EduTermID == edutermid).FirstOrDefault();
          }
      }

      public void InsertEduTerm(EduTermDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              dto.EduTermID = GetSerialNo(EduTermIDOwner);

              service.CreateEduTerm(dto);

              UpdateTermTeacher(dto.EduTermID, "DeptTeacher", dto.Teacher, dto.Creater);
              UpdateTermTeacher(dto.EduTermID, "EBM", dto.EBM, dto.Creater);
              UpdateTermTeacher(dto.EduTermID, "CR", dto.CR, dto.Creater);
              UpdateTermTeacher(dto.EduTermID, "ProjM", dto.ProjM, dto.Creater);
              UpdateTermTeacher(dto.EduTermID, "TMaster", dto.TMaster, dto.Creater);
              UpdateTermTeacher(dto.EduTermID, "NURSED", dto.NurseD, dto.Creater);
              EduActivityContext context = new EduActivityContext();
              context.Pr_UpdateEduTermRoundCode(dto.EduTermID);
              context.SaveChanges();
          }
      }

      public void UpdateEduTerm(EduTermDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.UpdateEduTerm(dto);
              UpdateTermTeacher(dto.EduTermID, "DeptTeacher", dto.Teacher, dto.Creater);
              UpdateTermTeacher(dto.EduTermID, "EBM", dto.EBM, dto.Creater);
              UpdateTermTeacher(dto.EduTermID, "CR", dto.CR, dto.Creater);
              UpdateTermTeacher(dto.EduTermID, "ProjM", dto.ProjM, dto.Creater);
              UpdateTermTeacher(dto.EduTermID, "TMaster", dto.TMaster, dto.Creater);
              EduActivityContext context = new EduActivityContext();
              context.Pr_UpdateEduTermRoundCode(dto.EduTermID);
              context.SaveChanges();
          }
      }

      public void DeleteEduTerms(List<EduTermDto> list)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.DeleteEduTerms(list);
          }
      }

      public void DeleteEduTerms(List<string> list)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.DeleteEduTerms(service.ReadEduTerms(c => list.Contains(c.EduTermID)));
          }
      }

      public List<EduTermDto> GetEduTermListByParent(string parentcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduTermRepository rep = new EduTermRepository(service.UnitOfWork);

              EduTermAssembler asm = new EduTermAssembler();

              List<EduTermDto> list = asm.Assemble(rep.Find(c =>
                  c.RoundCode.StartsWith(parentcode)
                  && c.RoundCode != parentcode).OrderBy(c => c.RoundCode).ThenBy(c => c.DateFrom).ToList()).ToList();

              return list;
          }
      }

      public List<EduTeamRundownDto> GetEduTeamRundownListByEduTermId(EduTermDto eduterm,string eduteamcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduTeamRundownRepository rep = new EduTeamRundownRepository(service.UnitOfWork);

              EduTeamRundownAssembler asm = new EduTeamRundownAssembler();

              List<EduTeamRundownDto> list = asm.Assemble(rep
                  .Find(c => c.DateFrom.Date >= eduterm.DateFrom.Date && c.DateTo.Date <= eduterm.DateTo.Date
                  && (eduteamcode == "" || c.EduTeamCode == eduteamcode)
                  )
                  //.Find(c =>c.EduTermID == edutermid)
                  .OrderBy(c => c.DateFrom).ToList()).ToList();

              List<EduTeamRundownDto> result = new List<EduTeamRundownDto>();

              foreach (EduTeamRundownDto item in list)
              {
                  if (result.Count(c => c.DateFrom == item.DateFrom && c.DateTo == item.DateTo) == 0)
                  {
                      result.Add(item);
                  }
              }
              return result;
          }
      }

      public List<MemberDto> GetSelectionMembers(string teamcode, string jobcode, string deptcode, List<string> selectedlist, DateTime datefrom, DateTime dateto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              MemberRepository rep = new MemberRepository(service.UnitOfWork);

              MemberAssembler asm = new MemberAssembler();

              EduTeamMemberRepository repteam = new EduTeamMemberRepository(service.UnitOfWork);

              List<string> deptcodes = new List<string>();
              if (deptcode != null && deptcode != "")
              {
                  deptcodes = GetChildDepts(deptcode);
              }
              List<string> teamcodelist = GetHierarchyTeamCode(teamcode);

              List<MemberDto> list = asm.Assemble(rep.Find(c =>
                  (jobcode == null || jobcode == "" || c.MemberType == jobcode)
                  &&
                  (deptcode == null || deptcode == "" || deptcodes.Contains(c.Des) || c.Des == null)
                  &&
                  !selectedlist.Contains(c.MemberID)
                  &&
                  repteam.GetAll().Count(t => t.MemberID == c.MemberID &&
                      (
                      //teamcode == null || teamcode == "" || 
                      teamcodelist.Contains(t.EduTeamCode))
                      ) > 0
                  &&
                  (
                    (c.DateFrom.Date <= datefrom.Date && c.DateTo >= dateto.Date)
                    ||
                    (c.DateFrom.Date <= dateto.Date && c.DateFrom.Date >= datefrom.Date)
                    ||
                    (c.DateTo >= datefrom.Date && c.DateTo <= dateto.Date)
                    ||
                    (c.DateFrom >= datefrom.Date && c.DateTo <= dateto.Date)
                  )
                  ).OrderBy(c => c.MemberCode).ToList()).ToList().ToList();

              return list;
          }
      }

      public List<MemberDto> GetSelectedMembers(EduTermDto eduterm)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              MemberRepository rep = new MemberRepository(service.UnitOfWork);

              MemberAssembler asm = new MemberAssembler();

              EduTeamMemberRepository repteam = new EduTeamMemberRepository(service.UnitOfWork);
              EduTeamMemberRundownRepository emrrep = new EduTeamMemberRundownRepository(service.UnitOfWork);

              //List<EduTeamMemberRundown> memberrundown = emrrep.Find(c => c.EduTermID == eduterm.EduTermID).ToList();


              //List<string> teamids = new List<string>();
              //foreach (EduTeamMemberRundown dto in memberrundown)
              //{
              //    teamids.Add(dto.EduTeamMemberID);
              //}

              List<MemberDto> list = asm.Assemble(rep.Find(c =>
                  emrrep.GetAll().Count(t => t.MemberID == c.MemberID && t.EduTermID == eduterm.EduTermID) > 0
                  //repteam.GetAll().Count(t => t.MemberID == c.MemberID
                  //&&
                  //teamids.Contains(t.EduTeamMemberID)
                  //) > 0
                  ).OrderBy(c => c.IsHospMember).ToList()).ToList();
              return list;
          }
      }

      public List<EduTeamMemberRundownDto> GetEduTermMembers(EduTermDto eduterm)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              MemberRepository rep = new MemberRepository(service.UnitOfWork);

              EduTeamMemberRundownRepository emrrep = new EduTeamMemberRundownRepository(service.UnitOfWork);
              EduTeamMemberRundownAssembler asm = new EduTeamMemberRundownAssembler();

              List<EduTeamMemberRundownDto> memberrundown = asm.Assemble(emrrep.Find(c => c.EduTermID == eduterm.EduTermID)).ToList();

              //SelectKmuVsRepository vsrep = new SelectKmuVsRepository(service.UnitOfWork);

              //List<SelectKmuVs> vslist = vsrep.GetAll().ToList();

              foreach (EduTeamMemberRundownDto dto in memberrundown)
              {
                  dto.MemberName = rep.Find(c => c.MemberID == dto.MemberID).FirstOrDefault().Name;
              }

              return memberrundown;
          }
      }

      public bool UpdateMemberRundownCoachID(List<string> ids,string edutermid, string coachID,string teachertype,string updateer)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              foreach (string id in ids)
              {
                  bool updateForm = false;

                  List<EduRefTeacherDto> refdto = service.ReadEduRefTeachers(c => c.RefID == id && c.RefTable == "EduTeamMemberRundown" && c.TeacherType == teachertype && c.EduTermID == edutermid).ToList();

                  if(refdto.Count == 1 && refdto.FirstOrDefault().TeacherID !=coachID)
                  {
                      updateForm = true;
                  }

                  if(refdto.Count == 0)
                  {
                      updateForm = true;
                  }

                  service.DeleteEduRefTeachers(refdto, true);
                  if (coachID != null && coachID != "")
                  {
                      string intsql = @"insert into EduRefTeachers (TeacherID,EduTermID,RefID,RefTable,TeacherType,CreateEmp,CreateDate,TeacherOrder)
                              values (@TeacherID,@EduTermID,@RefID,@RefTable,@TeacherType,@CreateEmp,@CreateDate,@TeacherOrder)
                              ";
                      EduRefTeacherDto arefdto = new EduRefTeacherDto();
                      arefdto.TeacherID = coachID;
                      arefdto.EduTermID = edutermid;
                      arefdto.RefID = id;
                      arefdto.RefTable = "EduTeamMemberRundown";
                      arefdto.TeacherType = teachertype;
                      arefdto.CreateEmp = updateer;
                      arefdto.CreateDate = DateTime.Now;
                      arefdto.TeacherOrder = 1;

                      List<SqlParameter> sqlparms = new List<SqlParameter>();
                      sqlparms.Add(new SqlParameter("TeacherID", GetDBObject(arefdto.TeacherID)));
                      sqlparms.Add(new SqlParameter("EduTermID", GetDBObject(arefdto.EduTermID)));
                      sqlparms.Add(new SqlParameter("RefID", GetDBObject(arefdto.RefID)));
                      sqlparms.Add(new SqlParameter("RefTable", GetDBObject(arefdto.RefTable)));
                      sqlparms.Add(new SqlParameter("TeacherType", GetDBObject(arefdto.TeacherType)));
                      sqlparms.Add(new SqlParameter("CreateEmp", GetDBObject(arefdto.CreateEmp)));
                      sqlparms.Add(new SqlParameter("CreateDate", GetDBObject(arefdto.CreateDate)));
                      sqlparms.Add(new SqlParameter("TeacherOrder", GetDBObject(arefdto.TeacherOrder)));
                      (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                      service.UnitOfWork.SaveChanges();

                      //service.CreateEduRefTeacher(arefdto, true);

                      if (updateForm)
                      {
                          var settings = from sett in service.UnitOfWork.EduFormTemplateLists
                                         join tar in service.UnitOfWork.EduFormTemplateTargets
                                         on sett.FTListID equals tar.FTListID
                                         where sett.EduTermID == edutermid
                                         && tar.RoleType != "S"
                                         && (
                                         (tar.TeacherType != null && tar.TeacherType == teachertype)
                                         ||
                                         (tar.TeacherType == null && tar.RoleType == teachertype)
                                         )
                                         && sett.Status == 'V'
                                         select new { sett, tar };

                          FORM_INSTANCE_TARGETAssembler asm = new FORM_INSTANCE_TARGETAssembler();

                          foreach (var set in settings)
                          {
                              var targets = from tar in service.UnitOfWork.FORM_INSTANCE_TARGETs
                                            join ins in service.UnitOfWork.FORM_INSTANCEs
                                            on tar.INSTANCE_ID equals ins.INSTANCE_ID
                                            join temp in service.UnitOfWork.FORM_TEMPLATEs
                                            on ins.TEMPLATE_ID equals temp.TEMPLATE_ID
                                            join sett in service.UnitOfWork.EduFormTemplateTargets
                                            on new { ftid = ins.INSTANCE_REMARK, tempid = ins.TEMPLATE_ID } equals new { ftid = sett.FTListID, tempid = sett.SubTEMPLATE_ID }
                                            where ins.INSTANCE_REMARK == set.sett.FTListID
                                            && ins.EvalTargetID == id
                                            && temp.TEMPLATE_REMARK != "C"
                                            && ins.Status == '0'
                                            &&
                                            (tar.TargetType == "Teacher" || tar.TargetType == teachertype)
                                            && ((sett.RoleType == "T" && sett.TeacherType == teachertype) || sett.RoleType == teachertype)
                                            select tar;
                              List<FORM_INSTANCE_TARGET> tars = targets.ToList();
                              List<FORM_INSTANCE_TARGETDto> list = asm.Assemble(tars).ToList();

                              UpdateFormInstanceTarget(list, coachID);
                          }
                      }
                  }
              }

              try
              {
                  service.UnitOfWork.SaveChanges();
                  if (teachertype == "Coach")
                  {
                      CheckTermHasTeacher(edutermid);
                  }
                  return true;
              }
              catch
              {
                  service.UnitOfWork.ClearChanges();
                  return false;
              }
          }
      }

      public string ImportMemberRundownCoachID(DataTable dt,string edutermid , string updateer)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string[]> ids  = new List<string[]>();
              string teachertype = "";
              List<string> members = new List<string>();
              foreach(DataRow dr in dt.Rows)
              {
                  string[] teachers = dr["教師職編"].ToString().Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
                  foreach(string teacher in teachers)
                  {

                      ids.Add(new string[] { dr["學生編號"].ToString(), teacher.Trim() });
                      teachertype = dr["教師類型代碼"].ToString();
                      if (!members.Contains(dr["學生編號"].ToString()))
                      {
                          members.Add(dr["學生編號"].ToString());
                      }
                  }
              }

              foreach (string id in members)
              {
                  List<EduRefTeacherDto> refdto = service.ReadEduRefTeachers(c => c.RefID == id
                      && c.RefTable == "EduTeamMemberRundown"
                      && c.TeacherType == teachertype
                      && c.EduTermID == edutermid).ToList();

                  service.DeleteEduRefTeachers(refdto, false);
              }

              foreach (string[] id in ids)
              {
                  EduRefTeacherDto arefdto = new EduRefTeacherDto();
                  arefdto.TeacherID = id[1];
                  arefdto.EduTermID = edutermid;
                  arefdto.RefID = id[0];
                  arefdto.RefTable = "EduTeamMemberRundown";
                  arefdto.TeacherType = teachertype;
                  arefdto.CreateEmp = updateer;
                  arefdto.CreateDate = DateTime.Now;
                  arefdto.TeacherOrder = 1;

                  string intsql = @"insert into EduRefTeachers (TeacherID,EduTermID,RefID,RefTable,TeacherType,CreateEmp,CreateDate,TeacherOrder)
                              values (@TeacherID,@EduTermID,@RefID,@RefTable,@TeacherType,@CreateEmp,@CreateDate,@TeacherOrder)
                              ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("TeacherID", GetDBObject(arefdto.TeacherID)));
                  sqlparms.Add(new SqlParameter("EduTermID", GetDBObject(arefdto.EduTermID)));
                  sqlparms.Add(new SqlParameter("RefID", GetDBObject(arefdto.RefID)));
                  sqlparms.Add(new SqlParameter("RefTable", GetDBObject(arefdto.RefTable)));
                  sqlparms.Add(new SqlParameter("TeacherType", GetDBObject(arefdto.TeacherType)));
                  sqlparms.Add(new SqlParameter("CreateEmp", GetDBObject(arefdto.CreateEmp)));
                  sqlparms.Add(new SqlParameter("CreateDate", GetDBObject(arefdto.CreateDate)));
                  sqlparms.Add(new SqlParameter("TeacherOrder", GetDBObject(arefdto.TeacherOrder)));
                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                  //service.CreateEduRefTeacher(arefdto, false);
              }

              try
              {
                  service.UnitOfWork.SaveChanges();
                  if (teachertype == "Coach")
                  {
                      CheckTermHasTeacher(edutermid);
                  }
                  return null;
              }
              catch(Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }

      public bool AddMemberRundownCoachID(List<string> ids, string edutermid, string coachID, string teachertype, string updateer)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              foreach (string id in ids)
              {
                  int? maxorder = service.UnitOfWork.EduRefTeachers.Where(c => c.RefID == id && c.RefTable == "EduTeamMemberRundown" && c.TeacherType == teachertype && c.EduTermID == edutermid).Max(c => c.TeacherOrder);

                  if (maxorder == null)
                  {
                      maxorder = 1;
                  }
                  else
                  {
                      maxorder = maxorder + 1;
                  }

                  string intsql = @"insert into EduRefTeachers (TeacherID,EduTermID,RefID,RefTable,TeacherType,CreateEmp,CreateDate,TeacherOrder)
                              values (@TeacherID,@EduTermID,@RefID,@RefTable,@TeacherType,@CreateEmp,@CreateDate,@TeacherOrder)
                              ";
                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql,
                   new SqlParameter("TeacherID", GetDBObject(coachID))
                   , new SqlParameter("EduTermID", GetDBObject(edutermid))
                   , new SqlParameter("RefID", GetDBObject(id))
                   , new SqlParameter("RefTable", "EduTeamMemberRundown")
                   , new SqlParameter("TeacherType", GetDBObject(teachertype))
                   , new SqlParameter("CreateEmp", GetDBObject(updateer))
                   , new SqlParameter("CreateDate", DateTime.Now)
                   , new SqlParameter("TeacherOrder", GetDBObject(maxorder))
                   );                

                  //EduRefTeacherDto arefdto = new EduRefTeacherDto();
                  //arefdto.TeacherID = coachID;
                  //arefdto.EduTermID = edutermid;
                  //arefdto.RefID = id;
                  //arefdto.RefTable = "EduTeamMemberRundown";
                  //arefdto.TeacherType = teachertype;
                  //arefdto.CreateEmp = updateer;
                  //arefdto.CreateDate = DateTime.Now;
                  //arefdto.TeacherOrder = maxorder;
                  //service.CreateEduRefTeacher(arefdto, false);
              }
              try
              {
                  service.UnitOfWork.SaveChanges();
                  if (teachertype == "Coach")
                  {
                      CheckTermHasTeacher(edutermid);
                  }
                  return true;
              }
              catch
              {
                  service.UnitOfWork.ClearChanges();
                  return false;
              }
          }
      }

      public static List<SelectKmuVsDto> GetKmuVs(string depcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              SelectKmuVsRepository rep = new SelectKmuVsRepository(service.UnitOfWork);

              SelectKmuVsAssembler asm = new SelectKmuVsAssembler();

              //List<SelectKmuVsDto> list = asm.Assemble(rep.GetAll().Where(c => depcode == null || c.deptcode == depcode).OrderBy(c => c.name).ThenBy(c => c.deptcode).ToList()).ToList();
              List<SelectKmuVsDto> list = asm.Assemble(rep.GetAll().OrderBy(c => c.name).ThenBy(c => c.deptcode).ToList()).ToList();

              list = list.OrderBy(c => c.name).ToList();

              foreach (SelectKmuVsDto dto in list)
              {
                  dto.displayname = dto.code + " " + dto.displayname;
              }
              return list;
          }
      }

      //public static List<SelectKmuVsDto> GetKmuVs()
      //{
      //    EduActivityContextService service = new EduActivityContextService();

      //    SelectKmuVsRepository rep = new SelectKmuVsRepository(service.UnitOfWork);

      //    SelectKmuVsAssembler asm = new SelectKmuVsAssembler();

      //    List<SelectKmuVsDto> list = asm.Assemble(rep.GetAll().ToList()).ToList();

      //    list = list.OrderBy(c => c.name).ToList();

      //    foreach (SelectKmuVsDto dto in list)
      //    {
      //        dto.displayname = dto.code + " " + dto.displayname;
      //    }

      //    return list;
      //}

      public static List<SelectKmuVsDto> GetKmuVsWithEmpty(string deptcode)
      {              
          //EduActivityContextService service = new EduActivityContextService();

          EduActivityAppService service = new EduActivityAppService();
          IEnumerable<SelectKmuDoctorDto> data = service.GetKmuDoctor("", "");

          List<SelectKmuVsDto> list = new List<SelectKmuVsDto>();

          foreach(SelectKmuDoctorDto item in data)
          {
              SelectKmuVsDto v = new SelectKmuVsDto();
              v.code = item.code;
              v.deptcode = item.deptcode;
              v.deptname = item.deptname;
              v.displayname = item.displayname;
              v.name = item.name;
              list.Add(v);
          }

          //SelectKmuVsRepository rep = new SelectKmuVsRepository(service.UnitOfWork);

          //SelectKmuVsAssembler asm = new SelectKmuVsAssembler();

          //List<SelectKmuVsDto> list = asm.Assemble(rep.GetAll().Where(c => deptcode == null || c.deptcode == deptcode).OrderBy(c => c.name).ThenBy(c => c.deptcode).ToList()).ToList();

          //list = list.OrderBy(c => c.name).ToList();

          //foreach (SelectKmuVsDto dto in list)
          //{
          //    dto.displayname = dto.code + " " + dto.displayname;
          //}

          SelectKmuVsDto empty = new SelectKmuVsDto();
          empty.code = null;
          empty.displayname = "未設定";

          list.Insert(0, empty);

          return list;
      }

      public List<HospDto> GetHosp()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var data = (from s in service.UnitOfWork.V_departments
                          select new { s.Hospcode, s.Hospname }).Distinct();
              List<HospDto> list = new List<HospDto>();

              foreach (var d in data)
              {
                  HospDto dto = new HospDto();
                  dto.HospCode = d.Hospcode;
                  dto.HospName = d.Hospname;
                  list.Add(dto);
              }
              return list;
          }
      }

      public List<HospDto> GetFullHosp()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<HospDto> result = (from s in service.UnitOfWork.V_hosps
                                      orderby s.Seq
                                      select new HospDto { HospCode = s.Unitcode, HospName = s.Unitname_all }).ToList();
              return result;
          }
      }

      public List<HospDto> GetShortHosp()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
          var data = (from s in service.UnitOfWork.V_departments
                      select new { s.Shorthospcode, s.Hospname }).Distinct();
          List<HospDto> list = new List<HospDto>();

          foreach (var d in data)
          {
              HospDto dto = new HospDto();
              dto.HospCode = d.Shorthospcode.ToString();
              dto.HospName = d.Hospname;
              list.Add(dto);
          }
          return list;
          }
      }

      public List<V_departmentDto> GetDepts(string hospcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadV_departments(c => c.Hospcode == hospcode).ToList();
          }
      }

      public List<SelectGroupTypeDto> GetTermUnit(string type)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              SelectGroupTypeRepository rep = new SelectGroupTypeRepository(service.UnitOfWork);

              rep.type = type;

              SelectGroupTypeAssembler asm = new SelectGroupTypeAssembler();

              return asm.Assemble(rep.GetAll().ToList()).ToList();
          }
      }

      public void SaveAllEduTeamMemberRundown(EduTermDto eduterm, List<MemberDto> list)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduTermDto> termlist = service.ReadEduTerms(c => c.RoundCode.StartsWith(eduterm.RoundCode)).ToList();
              foreach (EduTermDto dto in termlist)
              {
                  SaveEduTeamMemberRundown(dto, list);
              }
          }
      }

      public void SaveEduTeamMemberRundown(EduTermDto eduterm, List<MemberDto> list)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
          EduTeamMemberRepository rep = new EduTeamMemberRepository(service.UnitOfWork);

          service.DeleteEduTeamMemberRundowns(service.ReadEduTeamMemberRundowns(c => c.EduTermID == eduterm.EduTermID));

          foreach (MemberDto dto in list)
          {
              EduTeamMemberRundownDto item = new EduTeamMemberRundownDto();

              EduTeamMember teammember = rep.Find(c => c.MemberID == dto.MemberID).FirstOrDefault();

              item.EduTeamMemberID = teammember.EduTeamMemberID;

              item.EduTermID = eduterm.EduTermID;

              item.MemberID = teammember.MemberID;

              item.MemberCode = dto.MemberCode;

              service.CreateEduTeamMemberRundown(item);
          }

          eduterm.Capacity = list.Count;
          if(list.Count>0)
          {
              eduterm.HasMember = true;
          }
          else
          {
              eduterm.HasMember = false;
          }
          service.UpdateEduTerm(eduterm);
          }
      }
      #endregion

      #region 個人活動表


      #endregion

      #region 活動表
      public List<V_CodeRefDto> GetRoleListByType(List<int> acttypes, DateTime schedate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var refs = (from rr in service.UnitOfWork.EduActTypeRoleRefs
                          where schedate >= rr.EnableDate
                                              && schedate <= rr.DisableDate
                                              && rr.Status == "V"
                          select rr).ToList();
              if (refs.Count() == 0 || acttypes == null)
              {
                  return service.ReadV_CodeRefs(c => c.CodeType == "EduAct_ActRoleType").OrderBy(c => c.ShowSeq).ThenBy(c => c.CodeRefid).ToList();
              }
              else
              {
                  Dictionary<EduActTypeRoleRef, List<int>> alltypes = new Dictionary<EduActTypeRoleRef, List<int>>();

                  foreach (var rr in refs)
                  {
                      List<int?> acts = service.UnitOfWork.Fn_GetChildActType(rr.ActType).Select(c => c.CLS_ID).ToList();
                      alltypes.Add(rr, new List<int>());
                      foreach (int? a in acts)
                      {
                          if (a.HasValue && !alltypes[rr].Contains(a.Value))
                          {
                              alltypes[rr].Add(a.Value);
                          }
                      }
                  }

                  List<V_CodeRefDto> result = new List<V_CodeRefDto>();
                  bool existsset = false;
                  V_CodeRefAssembler asm = new V_CodeRefAssembler();

                  foreach (EduActTypeRoleRef r in alltypes.Keys)
                  {
                      foreach (int a in acttypes)
                      {
                          if (alltypes[r].Contains(a) || r.ActType == a)
                          {
                              existsset = true;
                              if (result.Count(c => c.Code == r.RoleID) == 0)
                              {
                                  result.Add(service.ReadV_CodeRefs(c => c.CodeType == "EduAct_ActRoleType" && c.Code == r.RoleID).FirstOrDefault());
                              }
                              break;
                          }
                      }
                  }

                  if (!existsset)
                  {
                      List<string> allr = refs.Select(c => c.RoleID).Distinct().ToList();
                      result = service.ReadV_CodeRefs(c => c.CodeType == "EduAct_ActRoleType" && !allr.Contains(c.Code) && c.CaseType != "X").ToList();
                  }

                  List<V_CodeRefDto> alldto = service.ReadV_CodeRefs(c => c.CodeType == "EduAct_ActRoleType" && c.CaseType == "All").ToList();
                  foreach (V_CodeRefDto d in alldto)
                  {
                      if (result.Count(c => c.Code == d.Code) == 0)
                      {
                          result.Add(d);
                      }
                  }

                  return result.OrderBy(c => c.ShowSeq).ThenBy(c => c.CodeRefid).ToList();
              }
          }
      }

      public List<V_CodeRefDto> GetRoleList(string scheduleid, DateTime schedate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              if (scheduleid == null)
              {
                  return GetRoleListByType(null, schedate);
              }
              else
              {
                  List<int> acttypes = (from act in service.UnitOfWork.EduStopActSchedules
                                        join rr in service.UnitOfWork.EduActTypeRefs
                                        on act.EduStopActScheduleID equals rr.EduStopActScheduleID
                                        where act.EduStopActScheduleID == scheduleid
                                        select rr.CLS_ID).Distinct().ToList();
                  return GetRoleListByType(acttypes, schedate);
              }
          }
      }

      public string GetEduStopActTypeStr(string id)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var data = from act in service.UnitOfWork.EduStopActSchedules
                         join atypes in service.UnitOfWork.EduActTypes
                         on new { atype = act.ActType } equals new { atype = atypes.CLS_ID.ToString() }
                         where act.EduStopActScheduleID == id
                         orderby act.TimeFrom, act.EduStopActScheduleID
                         select new { act, atypes };
              string result = "";
              foreach (var d in data)
              {
                  if (d.act.EduActTypeRefs.Count > 0)
                  {
                      var actts = from r in d.act.EduActTypeRefs.ToList()
                                  join t in service.UnitOfWork.EduActTypes
                                  on r.CLS_ID equals t.CLS_ID
                                  select new { r, t };
                      foreach (var t in actts)
                      {
                          if (result != "" && result != null)
                          {
                              result += "、";
                          }
                          result += t.t.CLS_NAME.ToString();
                      }
                  }
                  else
                  {
                      result = d.atypes.CLS_NAME;
                  }
              }
              return result;
          }
      }

      public List<EduStopActList> GetEduStopActList(string acttype, DateTime sdate, DateTime edate, V_departmentDto dept,string hosp, bool displaysub, bool attonly,List<string> emps, string keyword)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduStopActList> list = new List<EduStopActList>();

              string deptcode = null;
              string hospcode = null;
          if(hosp!=null && hosp!="")
          {
              hospcode = hosp;
          }

              if (dept != null)
              {
                  deptcode = dept.Deptcode;
              }

              List<string> deps = new List<string>();
              if (deptcode != null)
              {
                  if (displaysub)
                  {
                      deps = GetChildDepts(deptcode, hospcode);
                  }
                  else
                  {
                      deps.Add(deptcode);
                  }
              }

              List<int?> acts = service.UnitOfWork.Fn_GetChildActType(Convert.ToInt32(acttype)).Select(c => c.CLS_ID).ToList();
              List<string> actstr = new List<string>();
              foreach (int i in acts)
              {
                  actstr.Add(i.ToString());
              }

              var data = from act in service.UnitOfWork.EduStopActSchedules
                         join emp in service.UnitOfWork.V_KmuEmps
                         on act.Creater equals emp.Empcode
                         join depts in service.UnitOfWork.V_departments
                         on new { DCode = act.DeptCode, HCode = act.HospCode } equals new { DCode = depts.Deptcode, HCode = depts.Hospcode }
                         join atypes in service.UnitOfWork.EduActTypes
                         on new { atype = act.ActType } equals new { atype = atypes.CLS_ID.ToString() }
                         join target in service.UnitOfWork.EduActViewTargets
                             on new { id = act.EduStopActScheduleID, targettype = "Dept" } equals new { id = target.EduStopActScheduleID, targettype = target.TargetType }
                             into temptarget
                         from target in temptarget.DefaultIfEmpty()
                         where (actstr.Contains(act.ActType) || (act.EduActTypeRefs.Count(tp => actstr.Contains(tp.CLS_ID.ToString())) > 0))
                         && act.TimeFrom.Date >= sdate.Date && act.TimeFrom.Date <= edate.Date
                         && (hospcode == null || act.HospCode == hospcode)
                         && (
                         deptcode == null
                         || deps.Contains(depts.Deptcode)
                         || deps.Contains(target.TargetID)
                         )
                         && (keyword == "" || act.Des.Contains(keyword) || act.ActName.Contains(keyword))
                         && (emps.Count == 0 || (emps.Count > 0 && act.EduActTargets.Count(c => emps.Contains(c.TargetID)) > 0))
                         orderby act.TimeFrom, act.EduStopActScheduleID
                         select new { act, emp, atypes, depts };

              int count = 1;
              foreach (var d in data)
              {
                  if(list.Count(c=> c.EduStopActScheduleID == d.act.EduStopActScheduleID)>0)
                  {
                      continue;
                  }

                  bool hasatt = d.act.EduStopActAttachments.Count > 0;
                  if (service.UnitOfWork.RecordEduActRefs.Count(c => c.EduStopActScheduleID == d.act.EduStopActScheduleID) > 0)
                  {
                      hasatt = true;
                  }
                  if (attonly)
                  {
                      if (!hasatt)
                      {
                          continue;
                      }
                  }

                  //抓主持人
                  string rolename = "";
                  foreach(EduActTarget tar in d.act.EduActTargets.Where(c => c.RoleType == "005"))
                  {
                      V_KmuEmp targetemp = service.UnitOfWork.V_KmuEmps.Where(c => c.Empcode == tar.TargetID).FirstOrDefault();
                      if (targetemp != null)
                      {
                          rolename += targetemp.Empname + ",";
                      }
                  }

                  if(rolename!="")
                  {
                      rolename = rolename.Substring(0, rolename.Length - 1);
                  }

                  //抓主講者
                  string teachername = "";
                  foreach (EduActTarget tar in d.act.EduActTargets.Where(c => c.RoleType == "Teacher" || c.RoleType == "speaker"))
                  {
                      V_KmuEmp targetemp = service.UnitOfWork.V_KmuEmps.Where(c => c.Empcode == tar.TargetID).FirstOrDefault();
                      if (targetemp != null)
                      {
                          teachername += targetemp.Empname + ",";
                      }
                  }

                  if (teachername != "")
                  {
                      teachername = teachername.Substring(0, teachername.Length - 1);
                  }

                  EduStopActList item = new EduStopActList();
                  item.SerialNo = count;
                  item.DepCode = d.depts.Deptcode;
                  item.DepName = d.depts.Deptname;
                  item.HospCode = d.act.HospCode;
                  item.ActName = d.act.ActName;
                  if (d.act.EduActTypeRefs.Count > 0)
                  {
                      var actts = from r in d.act.EduActTypeRefs.ToList()
                                  join t in service.UnitOfWork.EduActTypes
                                  on r.CLS_ID equals t.CLS_ID
                                  select new { r, t };
                      foreach(var t in actts)
                      {
                          if (item.ActTypeCode != "" && item.ActTypeCode != null)
                          {
                              item.ActTypeCode += "、";
                          }
                          item.ActTypeCode += t.t.CLS_ID.ToString();

                          if (item.ActTypeName != "" && item.ActTypeName != null)
                          {
                              item.ActTypeName += "、";
                          }
                          item.ActTypeName += t.t.CLS_NAME.ToString();
                      }
                  }
                  else
                  {
                      item.ActTypeCode = d.act.ActType;
                      item.ActTypeName = d.atypes.CLS_NAME;
                  }
                  Dictionary<string, decimal> timecodelist = new Dictionary<string, decimal>();

                  item.Edate = d.act.TimeTo;
                  item.EdateStr = d.act.TimeTo.ToString("yyyy/MM/dd");
                  item.EtimeStr = d.act.TimeTo.ToString("HH:mm");
                  item.EduStopActScheduleID = d.act.EduStopActScheduleID;
                  item.EmpCode = d.emp.Empcode;
                  item.EmpName = d.emp.Empname;
                  item.Sdate = d.act.TimeFrom;
                  item.SdateStr = d.act.TimeFrom.ToString("yyyy/MM/dd");
                  item.StimeStr = d.act.TimeFrom.ToString("HH:mm");
                  item.HasAttachment = hasatt ? "V" : "";
                  item.Location = d.act.Location;
                  item.RoleName = rolename;
                  item.TeacherName = teachername;

                  List<string[]> atts = new List<string[]>();
                  foreach (EduStopActAttachment att in d.act.EduStopActAttachments)
                  {
                      string[] attdata = new string[2];
                      attdata[0] = att.ActAttachmentID;
                      attdata[1] = att.Name;
                      atts.Add(attdata);
                  }

                  item.AttachmentsUrls = atts;

                  list.Add(item);
                  count++;
              }
              return list;
          }
      }

      public List<EduStopActMemberList> GetEduStopActMemberList(string acttype, DateTime sdate, DateTime edate, List<string> roletype, V_departmentDto dept, string hosp, bool displaysub,List<string> emps, string keyword)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduStopActMemberList> list = new List<EduStopActMemberList>();

              string hospcode = null;
              if (hosp != null && hosp != "")
              {
                  hospcode = hosp;
              }

              string deptcode = null;
              
              if (dept != null)
              {
                  deptcode = dept.Deptcode;
              }


              List<string> deps = new List<string>();
              if (deptcode != null)
              {
                  if (displaysub)
                  {
                      deps = GetChildDepts(deptcode, hospcode);
                  }
                  else
                  {
                      deps.Add(deptcode);
                  }
              }

              List<int?> acts = service.UnitOfWork.Fn_GetChildActType(Convert.ToInt32(acttype)).Select(c => c.CLS_ID).ToList();
              List<string> actstr = new List<string>();
              foreach (int i in acts)
              {
                  actstr.Add(i.ToString());
              }

              var data = from tars in service.UnitOfWork.EduActTargets
                         join act in service.UnitOfWork.EduStopActSchedules
                         on tars.EduStopActScheduleID equals act.EduStopActScheduleID
                         join emp in service.UnitOfWork.V_KmuEmps
                         on tars.TargetID equals emp.Empcode
                         join jobs in service.UnitOfWork.V_kmujobs
                         on emp.Jobcode equals jobs.JOB_CODE_X
                         into tempjobs
                         from jobs in tempjobs.DefaultIfEmpty()
                         join rtype in service.UnitOfWork.V_CodeRefs
                         on tars.RoleType equals rtype.Code
                         join depts in service.UnitOfWork.V_departments
                         on new { DCode = act.DeptCode, HCode = act.HospCode } equals new { DCode = depts.Deptcode, HCode = depts.Hospcode }
                         join atypes in service.UnitOfWork.EduActTypes
                         on new { atype = act.ActType } equals new { atype = atypes.CLS_ID.ToString() }
                         where tars.TargetType == "EmpCode"
                         && rtype.CodeType == "EduAct_ActRoleType"
                         && (actstr.Contains(act.ActType) || (act.EduActTypeRefs.Count(tp=> actstr.Contains(tp.CLS_ID.ToString()))>0 ))
                         && act.TimeFrom.Date >= sdate.Date && act.TimeFrom.Date <= edate.Date
                         && roletype.Contains(tars.RoleType)
                         && (hospcode == null || act.HospCode == hospcode)
                         && (keyword == "" || act.Des.Contains(keyword))
                         &&
                         (deptcode == null ||
                         (
                         deps.Contains(depts.Deptcode)
                         ||
                         act.EduActViewTargets.Count(d => d.TargetType == "Dept" && deps.Contains(d.TargetID)) > 0
                         )
                         )
                         && (emps.Count == 0 || (emps.Count > 0 && emps.Contains(tars.TargetID)))
                         orderby act.EduStopActScheduleID, act.TimeFrom
                         select new { tars, act, emp, atypes, rtype, jobs, depts };

              Dictionary<string, bool> hasrecord = new Dictionary<string, bool>();
              foreach (var d in data)
              {
                  if(list.Count(c=> c.EduStopActScheduleID == d.act.EduStopActScheduleID && c.EmpCode == d.tars.TargetID)>0)
                  {
                      continue;
                  }
                  EduStopActMemberList item = new EduStopActMemberList();
                  item.DepCode = d.depts.Deptcode;
                  item.DepName = d.depts.Deptname;
                  item.HospCode = d.act.HospCode;
                  item.ActName = d.act.ActName;
                  item.ActTypeCode = d.act.ActType;
                  item.ActTypeName = d.atypes.CLS_NAME;
                  item.Edate = d.act.TimeTo;
                  item.EduStopActScheduleID = d.act.EduStopActScheduleID;
                  item.HospName = d.emp.Hospname;
                  item.EmpCode = d.tars.TargetID;
                  item.EmpName = d.emp.Empname;
                  if (d.jobs != null)
                  {
                      item.JobCode = d.jobs.JOB_CODE_X;
                      item.JobName = d.jobs.JOB_NAME;
                  }
                  item.RoleID = d.rtype.Code;
                  item.RoleName = d.rtype.Name;
                  item.Sdate = d.act.TimeFrom;
                  if(!hasrecord.ContainsKey(item.EduStopActScheduleID))
                  {
                      hasrecord.Add(item.EduStopActScheduleID, service.UnitOfWork.RecordEduActRefs.Count(c => c.EduStopActScheduleID == d.act.EduStopActScheduleID) > 0);
                  }
                  item.HasAttachment = ((d.act.EduStopActAttachments.Count > 0) || hasrecord[item.EduStopActScheduleID]) ? "V" : "";

                  list.Add(item);
              }
              return list;
          }
      }

      public DataTable GetEduStopDeptSumList(DateTime sdate, DateTime edate, string hospcode, string keyword)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              DataTable dt = new DataTable();
              dt.Columns.Add("月份");
              dt.Columns.Add("院區");
              dt.Columns.Add("科別代碼");
              dt.Columns.Add("科別名稱");
              dt.Columns.Add("開課筆數");
              dt.Columns.Add("記錄筆數");

              var data = from act in service.UnitOfWork.EduStopActSchedules
                         join dep in service.UnitOfWork.V_departments on new { DEP = act.DeptCode, HOSP = act.HospCode } equals new { DEP = dep.Deptcode, HOSP = dep.Hospcode }
                         where act.TimeFrom >= sdate && act.TimeFrom <= edate
                         && (hospcode == "" || hospcode == null || act.HospCode == hospcode)
                         && (keyword == "" || act.Des.Contains(keyword))
                         select new { act, dep };

              foreach (var act in data)
              {
                  string month = act.act.TimeFrom.ToString("yyyy/MM");
                  int reccount = service.UnitOfWork.RecordEduActRefs.Count(c => c.EduStopActScheduleID == act.act.EduStopActScheduleID);
                  if (dt.Select("月份 ='" + month + "' and 科別代碼 = '" + act.act.DeptCode + "'").Length == 0)
                  {
                      DataRow dr = dt.NewRow();
                      dr["月份"] = month;
                      dr["院區"] = act.act.HospCode;
                      dr["科別代碼"] = act.dep.Deptcode;
                      dr["科別名稱"] = act.dep.Deptname;
                      dr["開課筆數"] = 1;
                      if (act.act.EduStopActAttachments.Count() > 0)
                      {
                          dr["記錄筆數"] = 1 + reccount;
                      }
                      else
                      {
                          dr["記錄筆數"] = 0;
                      }
                      dt.Rows.Add(dr);
                  }
                  else
                  {
                      DataRow dr = dt.Select("月份 ='" + month + "' and 科別代碼 = '" + act.act.DeptCode + "'")[0];
                      dr["開課筆數"] = Convert.ToInt32(dr["開課筆數"]) + 1;
                      if (act.act.EduStopActAttachments.Count() > 0)
                      {
                          dr["記錄筆數"] = Convert.ToInt32(dr["記錄筆數"]) + 1 + reccount;
                      }
                  }
              }
              return dt;
          }
      }
      private string RollCardNo(string inputno)
      {
          return inputno.Substring(6, 2) + inputno.Substring(4, 2) +
                           inputno.Substring(2, 2) + inputno.Substring(0, 2);
      }

      public string GetCardEmpCode(string cardcode)
      {
          SqlConnection conn = new SqlConnection("Password=cardSignIN123;User ID=cardSignIN;Initial Catalog=doorkeeper;Data Source=172.18.6.102;");
          string cmd = @"select c.uid,c.hexcardorderno, e.cid from cards c 
	        left join people e on c.uid=e.uid where c.hexcardorderno=@cardno";
          SqlDataAdapter adp = new SqlDataAdapter(cmd, conn);
          adp.SelectCommand.Parameters.AddWithValue("@cardno", cardcode);
          DataTable dt = new DataTable();
          adp.Fill(dt);
          string empcode7 = "";
          string empcode = "";
          if (dt.Rows.Count > 0)
          {
              empcode7 = dt.Rows[0]["uid"].ToString();
              using (EduActivityContextService service = new EduActivityContextService())
              {
                  V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode7 == empcode7 || c.Empcode == empcode7).FirstOrDefault();
                  if (emp != null)
                  {
                      empcode = emp.Empcode;
                  }
                  else
                  {

                  }
              }
          }
          conn.Close();
          conn.Dispose();
          return empcode;
      }

      public List<string> ImportTargets(string scheduleID, DataTable dt)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string> result = new List<string>();
              foreach (DataRow dr in dt.Rows)
              {
                  try
                  {
                      if (service.UnitOfWork.EduActTargets.Count(c => c.EduStopActScheduleID == scheduleID && c.TargetID == dr[0].ToString() && c.TargetType == "EmpCode" && c.RoleType == "Student") > 0)
                      {
                          result.Add(dr[0].ToString() + "匯入失敗：資料已存在");
                          continue;
                      }
                      EduActTargetDto dto = new EduActTargetDto();
                      dto.EduStopActScheduleID = scheduleID;
                      dto.RoleType = "Student";
                      dto.TargetID = dr[0].ToString();
                      dto.TargetType = "EmpCode";

                      service.CreateEduActTarget(dto);
                  }
                  catch (Exception ex)
                  {
                      result.Add(dr[0].ToString() + "匯入失敗：" + ex.Message);
                      continue;
                  }
              }
              return result;
          }
      }

      public List<EduActTypeDto> GetEduActType(int floor, int pid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduActTypes(c => c.CLS_FLOOR == floor && (pid == -1 || c.CLS_PID == pid)).OrderBy(c => c.CLS_NAME).ToList();
          }
      }

      public EduStopActAttachmentDto GetEduActAttachment(string attID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var result = service.ReadEduStopActAttachments(c => c.ActAttachmentID == attID).FirstOrDefault();

              result.FileName = HttpUtility.UrlEncode(result.Name);
              return result;
          }
      }

      public List<EduStopActAttachmentDto> GetEduActAttachments(string eduStopActScheduleID, bool? isPublic)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduStopActAttachmentDto> list = service.ReadEduStopActAttachments(c => c.EduStopActScheduleID == eduStopActScheduleID && (isPublic == null || (isPublic.HasValue && c.IsPublic == isPublic.Value))).ToList();
              foreach (EduStopActAttachmentDto item in list)
              {
                  item.FileName = HttpUtility.UrlEncode(item.Name);
              }
              return list;
          }
      }

      public List<EduStopActAttachmentDto> GetEduActAttachmentsWithoutContent(string eduStopActScheduleID, bool? isPublic)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduStopActAttachmentDto> list = (from att in service.UnitOfWork.EduStopActAttachments
                                                    where att.EduStopActScheduleID == eduStopActScheduleID
                                                    && (isPublic == null || (isPublic.HasValue && att.IsPublic == isPublic.Value))
                                                    select new EduStopActAttachmentDto { ActAttachmentID = att.ActAttachmentID, EduStopActScheduleID = att.EduStopActScheduleID, IsPublic = att.IsPublic, Name = att.Name }).ToList();
              //service.ReadEduStopActAttachments(c => c.EduStopActScheduleID == eduStopActScheduleID && (isPublic == null || (isPublic.HasValue && c.IsPublic == isPublic.Value))).ToList();
              foreach (EduStopActAttachmentDto item in list)
              {
                  item.FileName = HttpUtility.UrlEncode(item.Name);
              }
              return list;
          }
      }

      public static List<EduStopActAttachmentDto> GetActAttachments(string eduStopActScheduleID,bool? isPublic)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduStopActAttachmentDto> list = service.ReadEduStopActAttachments(c => c.EduStopActScheduleID == eduStopActScheduleID && (isPublic == null || (isPublic.HasValue && c.IsPublic == isPublic.Value))).ToList();
              foreach (EduStopActAttachmentDto item in list)
              {
                  item.FileName = HttpUtility.UrlEncode(item.Name);
              }

              return list;
          }
      }

      public List<EduStopActScheduleDto> GetActList(string hospcode, string depcode, string edutermid, DateTime sdate, DateTime edate,bool displaysubdep)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              if (edutermid == null)
              {
                  List<string> depts = new List<string>();
                  if (depcode != null)
                  {
                      if (displaysubdep)
                      {
                          depts = GetChildDepts(depcode, hospcode);
                      }
                      else
                      {
                          depts.Add(depcode);
                      }
                  }

                  EduStopActScheduleAssembler asm = new EduStopActScheduleAssembler();
                  var datas = asm.Assemble((from act in service.UnitOfWork.EduStopActSchedules
                                            join target in service.UnitOfWork.EduActViewTargets
                                            on new { id = act.EduStopActScheduleID, targettype = "Dept" } equals new { id = target.EduStopActScheduleID, targettype = target.TargetType }
                                            into temptarget
                                            from target in temptarget.DefaultIfEmpty()

                                            where (
                                            depcode == null
                                            || (
                                            depts.Contains(act.DeptCode)
                                            ||
                                            depts.Contains(target.TargetID)
                                            )
                                            )
                                            && act.TimeFrom.Date >= sdate && act.TimeFrom.Date <= edate && act.HospCode == hospcode
                                            select act).ToList()).ToList();
                  

                  List<EduStopActScheduleDto> list = new List<EduStopActScheduleDto>();
                  List<string> ids = datas.Select(c => c.EduStopActScheduleID).Distinct().ToList();

                  //List<RecordEduActRef> refs = service.UnitOfWork.RecordEduActRefs.Where(c => ids.Contains(c.EduStopActScheduleID)).ToList();
                  //var refs = (from recf in service.UnitOfWork.RecordEduActRefs
                  //            join sid in ids
                  //            on recf.EduStopActScheduleID equals sid
                  //            select new { recf.EduStopActScheduleID, recf.InstanceID, recf.RecordInstance.Status }).ToList();

                  foreach(var data in datas)
                  {
                      if(!list.Exists(c=> c.EduStopActScheduleID == data.EduStopActScheduleID))
                      {
                          var recref = service.ReadRecordEduActRefs(c=> c.EduStopActScheduleID == data.EduStopActScheduleID).OrderByDescending(c => c.InstanceID).FirstOrDefault();
                          
                          string recinstanceid = null;
                          string recstatus = null;
                          if(recref!= null)
                          {
                              recinstanceid = recref.InstanceID;

                              var recdata = service.ReadRecordInstances(c => c.InstanceID == recref.InstanceID).FirstOrDefault();
                              if (recdata != null)
                              {
                                  recstatus = recdata.Status;
                              }
                          }
                          data.RecordInstanceID = recinstanceid;
                          data.RecordInstanceStatus = recstatus;

                          list.Add(data);
                      }
                  }
                  return list;

                  //return service.ReadEduStopActSchedules(c =>
                  //    (depcode == null || (depts.Contains(c.DeptCode)))

                  //    && c.TimeFrom.Date >= sdate && c.TimeFrom.Date <= edate && c.HospCode == hospcode
                  //    ).ToList();
              }
              else
              {
                  return service.ReadEduStopActSchedules(c =>
                      c.TimeFrom.Date >= sdate && c.TimeFrom.Date <= edate && c.HospCode == hospcode && c.EduActTargets.Count(d => d.TargetType == "EduTerm" && d.TargetID == edutermid) > 0
                      ).ToList();
              }
          }
      }

      public List<EduStopActScheduleDto> GetPersonalActList(string hospcode, string empcode, DateTime sdate, DateTime edate, string deptcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              
              List<EduStopActSchedule> list = service.UnitOfWork.Fn_GetEduStopActSchedule(sdate, edate, empcode, hospcode).ToList();

              if (deptcode != "" && deptcode != null)
              {
                  List<string> deps = GetChildDepts(deptcode);
                  list = list.Where(c => deps.Contains(c.DeptCode)).ToList();
              }

              List<EduStopActScheduleDto> result = new EduStopActScheduleAssembler().Assemble(list).ToList();
              foreach(EduStopActScheduleDto dto in result)
              {
                  EduActBooking b =service.UnitOfWork.EduActBookings.Where(c => c.EduStopActScheduleID == dto.EduStopActScheduleID && c.EmpCode == empcode).FirstOrDefault();
                  if(b == null)
                  {
                      dto.BookingID = null;
                  }
                  else
                  {
                      dto.BookingID = b.BookingID;
                  }
              }
              return result;
          }
      }

      public void InsertActAttachment(string eduStopActScheduleID, string filename, byte[] data,bool isPublic)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduStopActAttachmentDto dto = new EduStopActAttachmentDto();
              dto.ActAttachmentID = GetSerialNo("EduAct_ActAttachmentID");
              dto.EduStopActScheduleID = eduStopActScheduleID;
              dto.Name = filename;
              dto.Attachment = data;
              dto.IsPublic = isPublic;

              service.CreateEduStopActAttachment(dto);
              RefreshEduActHasAttachments(eduStopActScheduleID);
          }
      }

      public void DeleteActAttachment(string actAttachmentID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var atts = service.ReadEduStopActAttachments(c => c.ActAttachmentID == actAttachmentID).FirstOrDefault();
              if (atts != null)
              {
                  service.DeleteEduStopActAttachment(atts);
                  RefreshEduActHasAttachments(atts.EduStopActScheduleID);
              }
          }
      }

      public List<EduTermDto> GetEduTerms(string EduStopCode, string name)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduTermRepository rep = new EduTermRepository(service.UnitOfWork);

              EduTermAssembler asm = new EduTermAssembler();

              List<EduTermDto> list = asm.Assemble(rep.Find(c =>
                  (
                  EduStopCode == null
                  ||
                  c.EduStopCode.Contains(EduStopCode)
                  )
                  &&
                  (
                  name == null
                  ||
                  c.Name.Contains(name)
                  )
                  ).OrderBy(c => c.RoundCode).ThenBy(c => c.DateFrom).ToList()).ToList();

              EduActivity.ApplicationLayer.Services.EduActivityAppService appservice = new Services.EduActivityAppService();
              List<SelectGroupTypeDto> depts = appservice.GetTermUnit("EduAct_Dept");
              List<SelectGroupTypeDto> stations = appservice.GetTermUnit("EduAct_Station");
              List<SelectKmuVsDto> vss = EduActivity.ApplicationLayer.Services.EduActivityAppService.GetKmuVs(null);

              foreach (EduTermDto dto in list)
              {
                  SelectGroupTypeDto dep = depts.Where(c => c.code == dto.DepCode).FirstOrDefault();
                  if (dep != null)
                  {
                      dto.UnitStr = dep.name;
                  }

                  SelectGroupTypeDto station = stations.Where(c => c.code == dto.NStation).FirstOrDefault();
                  if (station != null)
                  {
                      dto.UnitStr = station.name;
                  }

                  SelectKmuVsDto vs = vss.Where(c => c.code == dto.CorchID).FirstOrDefault();
                  if (vs != null)
                  {
                      dto.UnitStr = vs.name;
                  }
              }
              return list;
          }
      }

      public List<V_kmujobDto> GetJobs()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadV_kmujobs().OrderBy(c => c.JOB_NAME).ToList();
          }
      }

      public EduActViewTargetDto FillEduActViewTargetName(EduActViewTargetDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<V_CodeRefDto> targettype = GetCodeRefs("EduAct_ActTargetType");
              List<V_CodeRefDto> roletype = GetCodeRefs("EduAct_ActRoleType");
              if (dto.TargetType != null)
              {
                  dto.TargetTypeName = targettype.Where(c => c.Code == dto.TargetType).FirstOrDefault().Name;
              }
              if (dto.RoleType != null)
              {
                  dto.RoleName = roletype.Where(c => c.Code == dto.RoleType).FirstOrDefault().Name;
              }

              switch (dto.TargetType)
              {
                  case "Dept":
                      dto.TargetName = service.ReadV_departments(c => c.Hospcode == "KMUH" && c.Deptcode == dto.TargetID).FirstOrDefault().Deptname;
                      break;
                  case "JobCode":
                      SelectEduActJobCodeDto obj = new SelectEduActJobCodeDto();

                      dto.TargetName = obj.GetJobCodes().Where(c => c.Code == dto.TargetID).FirstOrDefault().Name;
                      break;
                  case "EduTerm":
                      dto.TargetName = service.ReadEduTerms(c => c.EduTermID == dto.TargetID).FirstOrDefault().Name;
                      break;
                  case "EmpCode":
                      dto.TargetName = ReadVKmuempData(dto.TargetID).empname;
                      break;
                  case "TeamCode":
                      dto.TargetName = ReadEduTeamsByCode(dto.TargetID).EduTeamName;
                      break;
              }
              return dto;
          }
      }

      public EduActTargetDto FillEduActTargetName(EduActTargetDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  List<V_CodeRefDto> targettype = GetCodeRefs("EduAct_ActTargetType");
                  List<V_CodeRefDto> roletype = GetCodeRefs("EduAct_ActRoleType");
                  if (dto.TargetType != null)
                  {
                      dto.TargetTypeName = targettype.Where(c => c.Code == dto.TargetType).FirstOrDefault().Name;
                  }
                  if (dto.RoleType != null)
                  {
                      dto.RoleName = roletype.Where(c => c.Code == dto.RoleType).FirstOrDefault().Name;
                  }

                  switch (dto.TargetType)
                  {
                      case "Dept":
                          dto.TargetName = service.ReadV_departments(c => c.Hospcode == "KMUH" && c.Deptcode == dto.TargetID).FirstOrDefault().Deptname;
                          break;
                      case "JobCode":
                          dto.TargetName = service.ReadV_kmujobs(c => c.JOB_CODE_X == dto.TargetID).FirstOrDefault().JOB_NAME;
                          break;
                      case "EduTerm":
                          dto.TargetName = service.ReadEduTerms(c => c.EduTermID == dto.TargetID).FirstOrDefault().Name;
                          break;
                      case "EmpCode":
                          dto.TargetName = ReadVKmuempData(dto.TargetID).empname;
                          break;
                      case "TeamCode":
                          dto.TargetName = ReadEduTeamsByCode(dto.TargetID).EduTeamName;
                          break;
                  }
              }
              catch (Exception ex)
              {
              }
              return dto;
          }
      }

      public List<EduActViewTargetDto> GetEduActViewTargets(string eduStopActScheduleID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduActViewTargetDto> list = service.ReadEduActViewTargets(c => c.EduStopActScheduleID == eduStopActScheduleID).ToList();
              List<V_CodeRefDto> targettype = GetCodeRefs("EduAct_ActTargetType");
              List<V_CodeRefDto> roletype = GetCodeRefs("EduAct_ActRoleType");

              foreach (EduActViewTargetDto dto in list)
              {
                  if (dto.TargetType != null)
                  {
                      dto.TargetTypeName = targettype.Where(c => c.Code == dto.TargetType).FirstOrDefault().Name;
                  }
                  if (dto.RoleType != null)
                  {
                      dto.RoleName = roletype.Where(c => c.Code == dto.RoleType).FirstOrDefault().Name;
                  }

                  switch (dto.TargetType)
                  {
                      case "Dept":
                          dto.TargetName = service.ReadV_departments(c => c.Hospcode == "KMUH" && c.Deptcode == dto.TargetID).FirstOrDefault().Deptname;
                          break;
                      case "JobCode":
                          SelectEduActJobCodeDto job = new SelectEduActJobCodeDto();
                          
                          dto.TargetName = job.GetJobCodes().Where(c=> c.Code == dto.TargetID).FirstOrDefault().Name;// service.ReadV_kmujobs(c => c.JOB_CODE_X == dto.TargetID).FirstOrDefault().JOB_NAME;
                          break;
                      case "EduTerm":
                          dto.TargetName = service.ReadEduTerms(c => c.EduTermID == dto.TargetID).FirstOrDefault().Name;
                          break;
                      case "EmpCode":
                          dto.TargetName = ReadVKmuempData(dto.TargetID).empname;
                          break;
                      case "TeamCode":
                          dto.TargetName = ReadEduTeamsByCode(dto.TargetID).EduTeamName;
                          break;
                  }
              }
              return list;
          }
      }

      public bool CheckIsBooked(string empcode, string eduStopActScheduleID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.UnitOfWork.EduActBookings.Count(c => c.EmpCode == empcode && c.EduStopActScheduleID == eduStopActScheduleID) > 0;
          }
      }

      public string BookEduAct(string empcode, string eduStopActScheduleID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  EduStopActScheduleDto sche = service.ReadEduStopActSchedules(c => c.EduStopActScheduleID == eduStopActScheduleID).FirstOrDefault();

                  if (sche.BookingLimit != null && sche.BookingLimit != 0)
                  {
                      int bookcount = service.UnitOfWork.EduActBookings.Count(c => c.EduStopActScheduleID == eduStopActScheduleID);
                      if (bookcount >= sche.BookingLimit.Value)
                      {
                          return "報名已額滿";
                      }
                  }

                  if (!CheckIsBooked(empcode, eduStopActScheduleID))
                  {
                      EduActBookingDto dto = new EduActBookingDto();
                      dto.EmpCode = empcode;
                      dto.EduStopActScheduleID = eduStopActScheduleID;

                      service.CreateEduActBooking(dto);
                  }
                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      public bool UnBookEduAct(string empcode, string eduStopActScheduleID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  EduActBookingDto dto = service.ReadEduActBookings(c => c.EmpCode == empcode && c.EduStopActScheduleID == eduStopActScheduleID).FirstOrDefault();
                  if (dto != null)
                  {
                      service.DeleteEduActBooking(dto);
                  }
                  
                  return true;
              }
              catch (Exception ex)
              {
                  return false;
              }
          }
      }

      public List<EduActBookingDto> GetBookingList(string eduStopActScheduleID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduActBookingDto> list = service.ReadEduActBookings(c => c.EduStopActScheduleID == eduStopActScheduleID).ToList();
              foreach (EduActBookingDto dto in list)
              {
                  V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == dto.EmpCode).FirstOrDefault();
                  if (emp != null)
                  {
                      dto.EmpName = emp.Empname;
                  }
              }
              return list;
          }
      }

      public List<EduActTargetDto> GetEduActTargets(string eduStopActScheduleID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduActTargetDto> list = service.ReadEduActTargets(c => c.EduStopActScheduleID == eduStopActScheduleID).ToList();
              List<V_CodeRefDto> targettype = GetCodeRefs("EduAct_ActTargetType");
              List<V_CodeRefDto> roletype = GetCodeRefs("EduAct_ActRoleType");

              foreach (EduActTargetDto dto in list)
              {
                  if (dto.TargetType != null)
                  {
                      V_CodeRefDto d =targettype.Where(c => c.Code == dto.TargetType).FirstOrDefault();
                      if (d != null)
                      {
                          dto.TargetTypeName = d.Name;
                      }
                  }
                  if (dto.RoleType != null)
                  {
                      V_CodeRefDto d = roletype.Where(c => c.Code == dto.RoleType).FirstOrDefault();
                      if (d != null)
                      {
                          dto.RoleName = d.Name;
                      }
                  }

                  switch (dto.TargetType)
                  {
                      case "Dept":
                          dto.TargetName = service.ReadV_departments(c => c.Hospcode == "KMUH" && c.Deptcode == dto.TargetID).FirstOrDefault().Deptname;
                          break;
                      case "JobCode":
                          dto.TargetName = service.ReadV_kmujobs(c => c.JOB_CODE_X == dto.TargetID).FirstOrDefault().JOB_NAME;
                          break;
                      case "EduTerm":
                          dto.TargetName = service.ReadEduTerms(c => c.EduTermID == dto.TargetID).FirstOrDefault().Name;
                          break;
                      case "EmpCode":
                          SelectVKmuempData emp = ReadVKmuempData(dto.TargetID);
                          if (emp != null)
                          {
                              dto.TargetName = emp.empname;
                          }
                          V_kmujobDto empjob = service.ReadV_kmujobs(c => c.JOB_CODE_X == dto.TargetJob).FirstOrDefault();
                          if(empjob!=null)
                          {
                              dto.TargetJobName = empjob.JOB_NAME;
                          }
                          break;
                      case "TeamCode":
                          dto.TargetName = ReadEduTeamsByCode(dto.TargetID).EduTeamName;
                          break;
                  }
              }
              return list;
          }
      }

      public bool UpdateEduStopActSchedulerOutSideSetting(string id, bool hasoutside)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  EduStopActSchedule sch = service.UnitOfWork.EduStopActSchedules.Where(c => c.EduStopActScheduleID == id).FirstOrDefault();
                  sch.HasOutSideStudent = hasoutside;

                  service.UnitOfWork.SaveChanges();
                  return true;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return false;
              }
          }
      }

      public EduStopActScheduleDto GetEduStopActSchedulerByID(string id)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduStopActScheduleDto dto = service.ReadEduStopActSchedules(c => c.EduStopActScheduleID == id).FirstOrDefault();
              dto.EduActTypeRefs = service.ReadEduActTypeRefs(c => c.EduStopActScheduleID == id).ToList();
              V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == dto.Creater).FirstOrDefault();
              if(emp!=null)
              {
                  dto.CreaterName = emp.Empname;
              }
              foreach (EduActTypeRefDto refdto in dto.EduActTypeRefs)
              {
                  EduActTypeDto typedto = service.ReadEduActTypes(c => c.CLS_ID == refdto.CLS_ID).FirstOrDefault();
                  if (typedto != null)
                  {
                      refdto.CLS_NAME = typedto.CLS_NAME;
                  }
              }
              return dto;
          }
      }

      public Dictionary<int, EduActTypeDto> GetActTypeWithParent(int id)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              Dictionary<int, EduActTypeDto> list = new Dictionary<int, EduActTypeDto>();

              EduActTypeDto dto = service.ReadEduActTypes(c => c.CLS_ID == id).FirstOrDefault();

              if (dto != null)
              {
                  list.Add(dto.CLS_FLOOR.Value, dto);

                  int? pid = dto.CLS_PID;

                  EduActTypeDto tempdto = dto;

                  while (pid != null)
                  {
                      EduActTypeDto pdto = service.ReadEduActTypes(c => c.CLS_ID == tempdto.CLS_PID).FirstOrDefault();

                      list.Add(pdto.CLS_FLOOR.Value, pdto);

                      tempdto.EduActType1 = pdto;
                      tempdto = pdto;
                      pid = pdto.CLS_PID;
                  }
              }
              return list;
          }
      }

      public List<EduStopActScheduleDto> GetEduStopActScheduler(EduTermDto eduterm, DateTime bdate, DateTime edate, string empcode, string deptcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              //EduStopActScheduleAssembler asm = new EduStopActScheduleAssembler();
              //return asm.Assemble(service.UnitOfWork.F_EduStopActSchedule(eduterm.EduTermID, bdate, edate)).ToList();


              //if (eduterm.EduTermID == "")
              //{

              List<f_EduStopActScheduleResultSet0> list = service.UnitOfWork.F_EduStopActSchedule(eduterm.EduTermID == null ? "" : eduterm.EduTermID, bdate, edate, empcode, deptcode).ToList();
              List<EduStopActScheduleDto> result = new List<EduStopActScheduleDto>();

              foreach (f_EduStopActScheduleResultSet0 item in list)
              {
                  EduStopActScheduleDto dto = new EduStopActScheduleDto();
                  dto.EduActTopicID = item.EduActTopicID;
                  dto.EduActTopicCode = item.EduActTopicCode;
                  dto.EduActTopicName = item.EduActTopicName;
                  dto.EduStopActScheduleID = item.EduStopActScheduleID;
                  dto.TimeFrom = item.TimeFrom.Value;
                  dto.TimeTo = item.Timeto.Value;
                  dto.ActType = item.ActType;
                  dto.Des = item.Des;
                  dto.EduTermID = item.EduTermID;
                  dto.DtoKey = item.EduStopActScheduleID;
                  dto.ActTypeName = item.ActTypeName;
                  dto.EduTermName = item.Name;
                  dto.Location = item.Location;
                  dto.Creater = item.Creater;
                  dto.LastModifier = item.LastModifier;
                  dto.ActTypeDes = item.ActTypeDes;
                  dto.ActName = item.ActName;
                  result.Add(dto);
              }
              return result;
              //}
              //else
              //{
              //    return service.ReadEduStopActSchedules(c => c.EduTermID == eduterm.EduTermID && c.TimeFrom.Date >= bdate.Date && c.TimeTo.Date <= edate).ToList();
              //}
          }
      }

      public void InsertEduStopActSchedule(EduStopActScheduleDto dto, List<EduActViewTargetDto> list, EduActTopicDto topic)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              if (topic != null)
              {
                  service.CreateEduActTopic(topic);
              }

              service.CreateEduStopActSchedule(dto);

              foreach (EduActTypeRefDto typedto in dto.EduActTypeRefs)
              {
                  service.CreateEduActTypeRef(typedto);
              }

              if (list != null)
              {
                  InsertEduActViewTargets(dto.EduStopActScheduleID, list);
              }
          }
      }

      public DataTable GetEduActTargetExportData(string id)
      {
          DataTable dt = new DataTable();
          dt.Columns.Add("出席者");
          dt.Columns.Add("出席者身分");
          dt.Columns.Add("職編");
          dt.Columns.Add("姓名");
          dt.Columns.Add("職稱");
          dt.Columns.Add("科室代號");
          dt.Columns.Add("科室");
          dt.Columns.Add("次專科代號");
          dt.Columns.Add("次專科");
          dt.Columns.Add("簽到時間");
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var datas = from tars in service.UnitOfWork.EduActTargets
                          join emps in service.UnitOfWork.V_KmuEmps on new { id = tars.TargetID } equals new { id = emps.Empcode }
                          into tempemp
                          from emps in tempemp.DefaultIfEmpty()
                          join jobs in service.UnitOfWork.V_kmujobs on
                          emps.Jobcode equals jobs.JOB_CODE_X
                          into tempjobs
                          from jobs in tempjobs.DefaultIfEmpty()
                          join maindep in service.UnitOfWork.V_departments on
                          new { depcode = emps.Deptcode, hospcode = emps.Hospcode } equals new { depcode = maindep.Deptcode, hospcode = maindep.Hospcode }
                          into tempdep
                          from maindep in tempdep.DefaultIfEmpty()
                          join subdep in service.UnitOfWork.V_departments on
                          new { depcode = emps.Loccode, hospcode = emps.Hospcode } equals new { depcode = subdep.Deptcode, hospcode = subdep.Hospcode }
                          into tempsubdep
                          from subdep in tempsubdep.DefaultIfEmpty()
                          join roletype in service.UnitOfWork.V_CodeRefs on
                          tars.RoleType equals roletype.Code
                          into temprole
                          from roletype in temprole.DefaultIfEmpty()
                          where tars.EduStopActScheduleID == id && roletype.CodeType == "EduAct_ActRoleType"
                          select new { tars, emps, maindep, subdep, roletype, jobs };

              foreach (var data in datas)
              {
                  DataRow dr = dt.NewRow();
                  if (data.emps != null)
                  {
                      dr["出席者"] = data.emps.Empname;
                  }
                  if (data.roletype != null)
                  {
                      dr["出席者身分"] = data.roletype.Name;
                  }
                  if (data.emps != null)
                  {
                      dr["職編"] = data.emps.Empcode;
                  }
                  if (data.emps != null)
                  {
                      dr["姓名"] = data.emps.Empname;
                  }
                  if (data.maindep != null)
                  {
                      dr["科室代號"] = data.maindep.Deptcode;
                  }
                  if (data.maindep != null)
                  {
                      dr["科室"] = data.maindep.Deptname;
                  }
                  if (data.subdep != null)
                  {
                      dr["次專科代號"] = data.subdep.Deptcode;
                  }
                  if (data.subdep != null)
                  {
                      dr["次專科"] = data.subdep.Deptname;
                  }
                  if (data.jobs != null)
                  {
                      dr["職稱"] = data.jobs.JOB_NAME;
                  }

                  dr["簽到時間"] = data.tars.CheckInTime;

                  dt.Rows.Add(dr);
              }
          }
          return dt;
      }

      public void InsertEduActViewTargets(string eduStopActSchedulerID, List<EduActViewTargetDto> list)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.DeleteEduActViewTargets(service.ReadEduActViewTargets(c => c.EduStopActScheduleID == eduStopActSchedulerID));

              foreach (EduActViewTargetDto dto in list)
              {
                  dto.EduStopActScheduleID = eduStopActSchedulerID;
                  service.CreateEduActViewTarget(dto);
              }
          }
      }

      public string CheckExistsActTarget(string empcode, DateTime sdate, DateTime edate, string actid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduActTarget tar = service.UnitOfWork.EduActTargets.Where(c => c.TargetID == empcode &&
                  (actid == null || c.EduStopActScheduleID != actid)
                  &&
                  (
                  (c.TimeFrom >= sdate && c.TimeFrom < edate)
                  ||
                  (c.TimeTo > sdate && c.TimeTo <= edate)
                  ||
                  (c.TimeFrom <= sdate && c.TimeTo >= edate)
                  )
                  ).FirstOrDefault();
              if (tar != null)
              {
                  return tar.TimeFrom.ToString("yyyy/MM/dd HH:mm") + "~" + tar.TimeTo.ToString("HH:mm") + ",出席「" + tar.EduStopActSchedule.ActName + "」";
              }
              else
              {
                  return null;
              }
          }
      }

      public void RefreshEduActHasTargets(string ID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduStopActSchedule sch = service.UnitOfWork.EduStopActSchedules.Where(c => c.EduStopActScheduleID == ID).FirstOrDefault();
              if (sch != null)
              {
                  sch.HasTargets = service.UnitOfWork.EduActTargets.Count(c => c.EduStopActScheduleID == ID) > 0;
              }
              service.UnitOfWork.SaveChanges();
          }
      }

      public void RefreshEduActHasAttachments(string ID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduStopActSchedule sch = service.UnitOfWork.EduStopActSchedules.Where(c => c.EduStopActScheduleID == ID).FirstOrDefault();
              if (sch != null)
              {
                  sch.HasAttachments = service.UnitOfWork.EduStopActAttachments.Count(c => c.EduStopActScheduleID == ID) > 0;
              }
              service.UnitOfWork.SaveChanges();
          }
      }

      public string InsertEduActTargets(string eduStopActSchedulerID, List<EduActTargetDto> list)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string errorlist = "";
              EduActTargetAssembler asm = new EduActTargetAssembler();
              var dellist = from tar in service.UnitOfWork.EduActTargets
                            where tar.EduStopActScheduleID == eduStopActSchedulerID
                            select tar;

              List<EduActTargetDto> deldtolist = new List<EduActTargetDto>();

              foreach (var delitem in dellist)
              {
                  if (list.Count(c => c.EduStopActScheduleID == delitem.EduStopActScheduleID
                                && c.TargetID == delitem.TargetID
                                && c.CheckInTime == delitem.CheckInTime
                                && c.CheckOutTime == delitem.CheckOutTime
                                && c.RoleType == delitem.RoleType
                                && c.TargetType == delitem.TargetType
                                ) == 0)
                  {
                      deldtolist.Add(asm.Assemble(delitem));
                  }
              }

              service.DeleteEduActTargets(deldtolist);

              //service.DeleteEduActTargets(service.ReadEduActTargets(c => c.EduStopActScheduleID == eduStopActSchedulerID));
              List<V_CodeRefDto> roles = service.ReadV_CodeRefs(c => c.CodeType == "EduAct_ActRoleType").ToList();
              foreach (EduActTargetDto dto in list)
              {
                  if (roles.Count(c => c.Code == dto.RoleType) == 0)
                  {
                      errorlist += @"
" + dto.TargetID + "匯入失敗：指定角色不存在";
                  }
                  else
                  {
                      if (service.UnitOfWork.EduActTargets.Count(c => c.EduStopActScheduleID == eduStopActSchedulerID && c.TargetID == dto.TargetID) == 0)
                      {
                          V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == dto.TargetID).FirstOrDefault();
                          if (emp != null)
                          {
                              try
                              {
                                  dto.TargetJob = emp.Jobcode;

                                  dto.EduStopActScheduleID = eduStopActSchedulerID;
                                  service.CreateEduActTarget(dto);
                              }
                              catch (Exception ex)
                              {
                                  errorlist += @"
" + dto.TargetID + "匯入失敗：" + ex.Message;
                              }
                          }
                          else
                          {
                              errorlist += @"
" + dto.TargetID + "匯入失敗：職編不存在";
                          }
                      }
                  }
              }

              RefreshEduActHasTargets(eduStopActSchedulerID);

              return errorlist;
          }
      }

      public void UpdateEduStopActSchedule(EduStopActScheduleDto dto, List<EduActViewTargetDto> list, EduActTopicDto topic)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.UpdateEduStopActSchedule(dto);

              service.DeleteEduActTypeRefs(service.ReadEduActTypeRefs(c => c.EduStopActScheduleID == dto.EduStopActScheduleID));

              foreach (EduActTypeRefDto typedto in dto.EduActTypeRefs)
              {
                  service.CreateEduActTypeRef(typedto);
              }


              if (topic != null)
              {
                  service.CreateEduActTopic(topic);
              }
              if (list != null)
              {
                  InsertEduActViewTargets(dto.EduStopActScheduleID, list);
              }
          }
      }

      public void UpdateEduActTarget(string eduStopActScheduleid, List<EduActTargetDto> list)
      {
          InsertEduActTargets(eduStopActScheduleid, list);
      }

      public void DeleteEduStopActSchedule(List<EduStopActScheduleDto> list)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  foreach (EduStopActScheduleDto act in list)
                  {
                      service.DeleteEduActTargets(service.ReadEduActTargets(c => c.EduStopActScheduleID == act.EduStopActScheduleID), false);
                      service.DeleteEduActViewTargets(service.ReadEduActViewTargets(c => c.EduStopActScheduleID == act.EduStopActScheduleID), false);
                      service.DeleteEduStopActAttachments(service.ReadEduStopActAttachments(c => c.EduStopActScheduleID == act.EduStopActScheduleID), false);
                      service.DeleteEduActTypeRefs(service.ReadEduActTypeRefs(c => c.EduStopActScheduleID == act.EduStopActScheduleID), false);
                      service.DeleteRecordEduActRefs(service.ReadRecordEduActRefs(c => c.EduStopActScheduleID == act.EduStopActScheduleID), false);
                      service.DeleteEduStopActSchedule(act, false);
                  }

                  service.UnitOfWork.SaveChanges();
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  throw ex;
              }
              //service.DeleteEduStopActSchedules(list);
          }
      }

      public List<EduActTopicDto> GetEduActTopic()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduActTopics().ToList();
          }
      }

      public EduActTopicDto GetEduActTopicByCode(string topiccode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduActTopics(c => c.EduActTopicCode == topiccode).FirstOrDefault();
          }
      }

      public string InsertEduActTpoic(EduActTopicDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              dto.EduActTopicID = GetSerialNo(EduActTopicID);

              service.CreateEduActTopic(dto);
              return dto.EduActTopicID;
          }
      }

      #endregion

      #region 考核表設定

      public void ExecuteSql(string sql)
      {
          using (EduActivityContext context = new EduActivityContext())
          {
              context.ExecuteNonQuery(sql, null);
              context.SaveChanges();
          }
      }

      public List<FORM_TEMPLATEDto> GetFormTemplatesByJobCode(string jobcode,string hospcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
          var data = from temp in service.UnitOfWork.FORM_TEMPLATEs
                     join jfs in service.UnitOfWork.JobFormSettings
                     on temp.TEMPLATE_ID equals jfs.TEMPLATE_ID
                     into tempjfs from jfs in tempjfs.DefaultIfEmpty()
                     where temp.TEMPLATE_CATEGORY == "EduActivity"
                     && (jobcode == null || jobcode == "" || jfs.JobCode == jobcode)
                     && temp.ENABLED
                     && temp.FORM_TEMPLATE_PERMISSIONs.Count(c => c.HOSPCODE == hospcode) > 0
                     select new { temp.TEMPLATE_ID, temp.TEMPLATE_NAME, temp.PARENT_TEMPLATE_ID, ismultitarget = temp.TEMPLATE_CONTENT.Contains("div editor="), temp.IS_USER_DEFINE_TARGET };

          List<FORM_TEMPLATEDto> list = new List<FORM_TEMPLATEDto>();
          
          foreach(var t in data)
          {
              if (list.Count(c => c.TEMPLATE_ID == t.TEMPLATE_ID) == 0)
              {
                  FORM_TEMPLATEDto dto = new FORM_TEMPLATEDto();
                  dto.TEMPLATE_ID = t.TEMPLATE_ID;
                  dto.TEMPLATE_NAME = t.TEMPLATE_NAME;
                  dto.PARENT_TEMPLATE_ID = t.PARENT_TEMPLATE_ID;
                  dto.IsMultiTargetForm = t.ismultitarget;
                  dto.IS_USER_DEFINE_TARGET = t.IS_USER_DEFINE_TARGET;
                  list.Add(dto);
              }
              var subtemp = from temp in service.UnitOfWork.FORM_TEMPLATEs
                            where temp.PARENT_TEMPLATE_ID == t.TEMPLATE_ID
                            select new { temp.TEMPLATE_ID, temp.TEMPLATE_NAME, temp.PARENT_TEMPLATE_ID, ismultitarget = temp.TEMPLATE_CONTENT.Contains("div editor="), temp.IS_USER_DEFINE_TARGET };

              foreach (var subt in subtemp)
              {
                  if (list.Count(c => c.TEMPLATE_ID == subt.TEMPLATE_ID) == 0)
                  {
                      FORM_TEMPLATEDto subdto = new FORM_TEMPLATEDto();
                      subdto.TEMPLATE_ID = subt.TEMPLATE_ID;
                      subdto.TEMPLATE_NAME = subt.TEMPLATE_NAME;
                      subdto.PARENT_TEMPLATE_ID = subt.PARENT_TEMPLATE_ID;
                      subdto.IsMultiTargetForm = subt.ismultitarget;
                      subdto.IS_USER_DEFINE_TARGET = subt.IS_USER_DEFINE_TARGET;
                      list.Add(subdto);
                  }
              }
          }
              return list;
          }
      }

      public List<EduFormTemplateListDto> GetEduFormSettingList(string edutermid, int? templateid, string hospcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduFormTemplateListDto> list = service.ReadEduFormTemplateLists(c => c.EduTermID == edutermid
                  && (templateid == null || c.TEMPLATE_ID == templateid)
                  ).ToList();

              HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();

              List<FORM_TEMPLATEDto> templates = GetAllTemplates(hospcode);
              foreach (EduFormTemplateListDto dto in list)
              {
                  if (templates.Count(c => c.TEMPLATE_ID == dto.TEMPLATE_ID) > 0)
                  {
                      dto.TEMPLATE_NAME = templates.Where(c => c.TEMPLATE_ID == dto.TEMPLATE_ID).FirstOrDefault().TEMPLATE_NAME;
                  }

                  V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == dto.Creater).FirstOrDefault();
                  if (emp != null)
                  {
                      dto.CreaterName = emp.Empname;
                  }

                  List<HtmlFormUtility.FORM_INSTANCES> inslist = vc.GetInstanceByRemark(dto.FTListID);
                  dto.RootEduTermID = edutermid;
                  dto.FinishCount = inslist.Count(c => c.Status != "0");
                  dto.AllFormCount = inslist.Count;
              }
              return list;
          }
      }

      public string SaveEduFormSetting(EduFormTemplateListDto listdto, List<EduFormTemplateTargetDto> targets, bool executenow)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return SaveEduFormSetting(listdto, targets, executenow, service);
          }
      }

      public string SaveEduFormSetting(EduFormTemplateListDto listdto, List<EduFormTemplateTargetDto> targets, bool executenow, EduActivityContextService service)
      {
              string result = null;
              if (executenow)
              {
                  listdto.ExecuteDate = DateTime.Now;
              }
              service.CreateEduFormTemplateList(listdto);
              foreach (EduFormTemplateTargetDto dto in targets)
              {
                  service.CreateEduFormTemplateTarget(dto);
              }

              try
              {
                  service.UnitOfWork.SaveChanges();

                  if (executenow)
                  {
                      CreateEduForm(listdto.FTListID);
                      //EduActivityContext context = new EduActivityContext();
                      //context.ExecuteNonQuery(listdto.CreateSQL, null);
                      ///context.SaveChanges();
                      //context.Dispose();
                  }
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  result = ex.Message;
              }
              return result;      
      }

      public List<V_ExpireFormInstanceDto> GetExpireFormInstances(string edutermid, int? templateid, string memberid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<V_ExpireFormInstanceDto> list = service.ReadV_ExpireFormInstances(c => c.EduTermID == edutermid
                  && (templateid == null || c.TEMPLATE_ID == templateid.Value)
                  && (memberid == null || c.MemberID == memberid)).ToList();

              return list;
          }
      }

      public void UpdateFormInstanceExpireDate(List<int> instanceids, DateTime expiredate)
      {
          HtmlFormUtility.Components.ProcessComponent pc = new HtmlFormUtility.Components.ProcessComponent();
          pc.UpdateFormInstanceExpireDate(instanceids, expiredate);
      }

      public void DeleteFormSetting(string flistid, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
          HtmlFormUtility.Components.ProcessComponent pc = new HtmlFormUtility.Components.ProcessComponent();

          List<int> instanceidlist = service.ReadFORM_INSTANCEs(c => c.INSTANCE_REMARK == flistid).Select(c => c.INSTANCE_ID).ToList();
          foreach (int insid in instanceidlist)
          {
              WriteFormInstanceTransLog(insid, empcode, "刪除表單", "", "");
          }
          pc.DeleteInstanceByRemark(flistid);

          service.DeleteEduFormTemplateTargets(service.ReadEduFormTemplateTargets(c => c.FTListID == flistid));

          service.DeleteEduFormTemplateList(service.ReadEduFormTemplateLists(flistid));
          }
      }

      public void UpdateEduFormTemplateList(EduFormTemplateListDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.UpdateEduFormTemplateList(dto);
          }
      }

      public EduFormTemplateListDto GetEduFormTemplateList(string ftlistid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduFormTemplateLists(ftlistid);
          }
      }

      public List<EduFormTemplateTargetDto> GetEduFormTemplateTargets(string ftlistid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduFormTemplateTargets(c => c.FTListID == ftlistid).ToList();
          }
      }
      #endregion

      #region 考核發送紀錄
      public List<SchedulerLogDto> GetSchedulerLog(DateTime sdate, DateTime edate, string deptcode,string hospcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              char hosp = ' ';
              switch (hospcode)
              {
                  case "KMUH":
                      hosp = 'H';
                      break;
                  case "KMHK":
                      hosp = 'K';
                      break;
                  case "KMTTH":
                      hosp = 'T';
                      break;
                  case "KMCH":
                      hosp = 'C';
                      break;
              }

              List<string> deplist = GetChildDepts(deptcode, hospcode);
              List<string> edutermlist = service.ReadEduTerms(c => deplist.Contains(c.Department) && c.Hospital == hosp).Select(c => c.EduTermID).ToList();
              return service.ReadSchedulerLogs(c => c.FunctionName == "表單自動發送" && c.LogTime.HasValue && c.LogTime.Value >= sdate && c.LogTime.Value <= edate && edutermlist.Contains(c.LogParameter)).ToList();
          }
      }
      #endregion

      #region 表單分類設定

      public JobFormSettingDto GetJobFormSetting(int settingid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<V_CodeRefDto> jobcodes = GetCodeRefs("EduAct_JobSerial");
              JobFormSettingDto dto = service.ReadJobFormSettings(c => c.SettingID == settingid).FirstOrDefault();
              dto.JobName = jobcodes.Where(c => c.Code == dto.JobCode).FirstOrDefault().Name;
              return dto;
          }
      }

      public List<HtmlFormUtility.FORM_TEMPLATES> GetRootTemplateList(string hospcode)
      {
          HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();
          List<HtmlFormUtility.FORM_TEMPLATES> list = vc.ListFormTemplatesByCategory("EduActivity", hospcode).OrderByDescending(c => c.TEMPLATE_NAME).ToList();
          for (int i = 0; i < list.Count; i++)
          {
              if (list[i].PARENT_TEMPLATE_ID != null)
              {
                  list.RemoveAt(i);
                  i--;
              }
          }
          return list;
      }

      public List<JobFormSettingDto> GetJobFormSettings(string jobcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<V_CodeRefDto> jobcodes = GetCodeRefs("EduAct_JobSerial");
              List<int> templateids = service.ReadFORM_TEMPLATEs(c => c.PARENT_TEMPLATE_ID == null).Select(c => c.TEMPLATE_ID).ToList();
              JobFormSettingAssembler asm = new JobFormSettingAssembler();
              var vlist = from ss in service.UnitOfWork.JobFormSettings
                          join ids in templateids
                          on ss.TEMPLATE_ID equals ids
                          where ((jobcode == null || jobcode == "") || ss.JobCode == jobcode)
                          select ss;

              List<JobFormSettingDto> list = asm.Assemble(vlist).ToList();
              HtmlFormUtility.Components.ViewComponent vc = new HtmlFormUtility.Components.ViewComponent();
              foreach (JobFormSettingDto dto in list)
              {
                  var template = vc.SelectFormTemplate(dto.TEMPLATE_ID);
                  if (template == null)
                  {
                  }
                  else
                  {
                      dto.TemplateName = vc.SelectFormTemplate(dto.TEMPLATE_ID).TEMPLATE_NAME;
                      dto.JobName = jobcodes.Where(c => c.Code == dto.JobCode).FirstOrDefault().Name;
                  }
              }
              return list;
          }
      }

      public string SaveJobFormSetting(string jobcode, List<int> templateids, List<int> alltemplateids)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.DeleteJobFormSettings(service.ReadJobFormSettings(c => c.JobCode == jobcode && alltemplateids.Contains(c.TEMPLATE_ID)), false);
              (service.UnitOfWork as EduActivityContext).FlushChanges(false);
              foreach (int templateid in templateids)
              {
                  JobFormSettingDto dto = new JobFormSettingDto();
                  dto.JobCode = jobcode;
                  dto.TEMPLATE_ID = templateid;
                  dto.DISPLAY_ORDER = 0;

                  string intsql = @"INSERT INTO www_EduActivity.dbo.JobFormSetting
(JobCode, TEMPLATE_ID, DISPLAY_ORDER) 
VALUES (@JobCode, @TEMPLATE_ID, @DISPLAY_ORDER)
                              ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("JobCode", GetDBObject(dto.JobCode)));
                  sqlparms.Add(new SqlParameter("TEMPLATE_ID", GetDBObject(dto.TEMPLATE_ID)));
                  sqlparms.Add(new SqlParameter("DISPLAY_ORDER", GetDBObject(dto.DISPLAY_ORDER)));

                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());


                  //service.CreateJobFormSetting(dto, false);
              }


              try
              {
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }

      public string InsertJobFormSetting(JobFormSettingDto setting)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  service.CreateJobFormSetting(setting);
                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      public string DeleteJobFormSetting(int settingid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  service.DeleteJobFormSettings(service.ReadJobFormSettings(c => c.SettingID == settingid));
                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      public string DeleteJobFormSettings(List<JobFormSettingDto> settings)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  service.DeleteJobFormSettings(settings);
                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      #endregion

      #region 教師設定

      public List<EduTeacherTypeDto> GetTeacherTypes()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduTeacherTypes().ToList();
          }
      }

      public EduRefTeacherDto GetTermTeacher(string edutermid,string teachertype)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduRefTeachers(c => c.EduTermID == edutermid && c.RefID == edutermid && c.RefTable == "EduTerm" && c.TeacherType == teachertype).FirstOrDefault();
          }
      }

      public bool UpdateTermTeacher(string edutermid, string teachertype, string teacherid,string createrid, bool subclass)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string> termidlist = new List<string>();

              if (subclass)
              {
                  EduTermDto term = service.ReadEduTerms(edutermid);
                  termidlist = service.ReadEduTerms(c => c.RoundCode.StartsWith(term.RoundCode)).Select(c => c.EduTermID).ToList();
              }
              else
              {
                  termidlist.Add(edutermid);
              }

              foreach (string termid in termidlist)
              {

                  EduRefTeacherDto dto = service.ReadEduRefTeachers(c => c.EduTermID == termid && c.RefID == termid && c.TeacherType == teachertype && c.RefTable == "EduTerm").FirstOrDefault();
                  if (dto == null)
                  {
                      string intsql = @"insert into EduRefTeachers (TeacherID,EduTermID,RefID,RefTable,TeacherType,CreateEmp,CreateDate,TeacherOrder)
                              values (@TeacherID,@EduTermID,@RefID,@RefTable,@TeacherType,@CreateEmp,@CreateDate,@TeacherOrder)
                              ";

                      (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql,
                       new SqlParameter("TeacherID", DBNull.Value)
                       , new SqlParameter("EduTermID", GetDBObject(termid))
                       , new SqlParameter("RefID", GetDBObject(termid))
                       , new SqlParameter("RefTable", "EduTerm")
                       , new SqlParameter("TeacherType", GetDBObject(teachertype))
                       , new SqlParameter("CreateEmp", GetDBObject(createrid))
                       , new SqlParameter("CreateDate", DateTime.Now)
                       , new SqlParameter("TeacherOrder", DBNull.Value)
                       );

                      

                      //dto = new EduRefTeacherDto();
                      //dto.EduTermID = termid;
                      //dto.RefID = termid;
                      //dto.RefTable = "EduTerm";
                      //dto.TeacherID = teacherid;
                      //dto.TeacherType = teachertype;
                      //dto.CreateEmp = createrid;
                      //dto.CreateDate = DateTime.Now;
                      //service.CreateEduRefTeacher(dto, false);

                  }
                  else
                  {
                      dto.TeacherID = teacherid;
                      dto.CreateEmp = createrid;
                      dto.CreateDate = DateTime.Now;
                      service.UpdateEduRefTeacher(dto, false);
                  }
              }

              try
              {
                  service.UnitOfWork.SaveChanges();
                  if (teachertype == "Coach")
                  {
                      foreach (string termid in termidlist)
                      {
                          CheckTermHasTeacher(termid);
                      }
                  }
                  return true;
              }
              catch
              {
                  service.UnitOfWork.ClearChanges();
                  return false;
              }
          }
      }

      public void CheckTermHasTeacher(string edutermid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var checkdata = from term in service.UnitOfWork.EduTerms
                              join rundown in service.UnitOfWork.EduTeamMemberRundowns
                              on term.EduTermID equals rundown.EduTermID
                              join teacher in service.UnitOfWork.EduRefTeachers
                              on new { termid = rundown.EduTermID, memberid = rundown.MemberID, reftable = "EduTeamMemberRundown", ttype = "Coach" }
                              equals new { termid = teacher.EduTermID, memberid = teacher.RefID, reftable = teacher.RefTable, ttype = teacher.TeacherType }
                              into tempteacher
                              from teacher in tempteacher.DefaultIfEmpty()
                              where term.EduTermID == edutermid
                              select new { term, rundown, teacher };
              bool checkresult = true;
              if (checkdata.Count() > 0)
              {
                  foreach (var cdata in checkdata)
                  {
                      if (cdata.teacher == null)
                      {
                          checkresult = false;
                          break;
                      }
                  }
              }
              else
              {
                  checkresult = false;
              }

              EduTerm t = service.UnitOfWork.EduTerms.Where(c => c.EduTermID == edutermid).FirstOrDefault();
              t.HasTeacher = checkresult;

              service.UnitOfWork.SaveChanges();
          }

      }

      public bool UpdateTermTeacher(string edutermid, string teachertype, string teacherid, string createrid)
      {
          return UpdateTermTeacher(edutermid, teachertype, teacherid, createrid, false);
      }

      public List<EduTeamMemberRundownDto> GetEduTermMembersTeacher(EduTermDto eduterm,string teacherType)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var datas = from rundown in service.UnitOfWork.EduTeamMemberRundowns
                          join mem in service.UnitOfWork.Members on rundown.MemberID equals mem.MemberID
                          where rundown.EduTermID == eduterm.EduTermID
                          select new { rundown, mem };

              var teachers = from reft in service.UnitOfWork.EduRefTeachers
                             join emp in service.UnitOfWork.V_KmuEmps on reft.TeacherID equals emp.Empcode
                             where reft.EduTermID == eduterm.EduTermID && reft.TeacherType == teacherType && reft.RefTable == "EduTeamMemberRundown"
                             orderby reft.TeacherOrder
                             select new { reft, emp };

              EduTeamMemberRundownAssembler asm = new EduTeamMemberRundownAssembler();
              V_KmuEmpAssembler empasm = new V_KmuEmpAssembler();
              List<EduTeamMemberRundownDto> memberrundown = new List<EduTeamMemberRundownDto>();

              foreach (var data in datas)
              {
                  EduTeamMemberRundownDto dto = asm.Assemble(data.rundown);

                  dto.MemberName = data.mem.Name;
                  dto.EmpCode = data.mem.IsHospMember;

                  dto.Teachers = empasm.Assemble(teachers.Where(c => c.reft.RefID == data.mem.MemberID).Select(c => c.emp).ToList()).ToList();

                  dto.TeacherCreateDate = teachers.Where(c => c.reft.RefID == data.mem.MemberID).Select(c => c.reft).Max(c => c.CreateDate);
                  memberrundown.Add(dto);

              }

              return memberrundown;
          }
      }
      #endregion

      #region 公佈欄

      public List<NewsDto> GetNews(DateTime? sdate, DateTime? edate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadNews(c => (sdate == null || c.SDATE >= sdate) && (edate == null || c.EDATE <= edate)).OrderBy(c => c.SDATE).ToList();
          }
      }

      public List<NewsDto> GetNewsToShow(DateTime? sdate, DateTime? edate, string jobcode, string empcode, List<string> authRole)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var teamdata = (from member in service.UnitOfWork.Members
                              join team in service.UnitOfWork.EduTeamMembers on member.MemberID equals team.MemberID
                              where member.IsHospMember == empcode
                              select new { member.DateFrom, member.DateTo, team.EduTeamCode });

              var news = from c in service.UnitOfWork.News
                         where (sdate == null || c.SDATE >= sdate)
                         && (edate == null || c.SDATE <= edate)
                         && (c.EDATE == null || c.EDATE > edate)
                         && (
                         c.NewsViewTargets.Count() == 0
                         ||
                         (
                         c.NewsViewTargets.Count() > 0 && c.NewsViewTargets.Count(t => t.TargetType == "職稱" && t.TargetID == jobcode) > 0
                         )
                         ||
                         (
                         c.NewsViewTargets.Count() > 0
                         && c.NewsViewTargets.Count(t => t.TargetType == "組別" && teamdata.Any(r => r.EduTeamCode == t.TargetID && c.SDATE >= r.DateFrom && c.SDATE <= r.DateTo)) > 0
                         )
                         ||
                         (
                         c.NewsViewTargets.Count() > 0
                         && c.NewsViewTargets.Count(t => t.TargetType == "職編" && t.TargetID == empcode) > 0
                         )
                         ||
                         (
                         c.NewsViewTargets.Count() > 0
                         && c.NewsViewTargets.Count(t => t.TargetType == "系統身分" && authRole.Contains(t.TargetID)) > 0
                         )
                         ||
                         c.CREATER == empcode
                         )
                         && c.NewsViewTargets.Count(t => t.TargetType == "部門" && t.TargetID == "1600") == 0
                         orderby c.SDATE descending
                         select c;
              List<News> list = news.ToList();
              NewsAssembler asm = new NewsAssembler();
              return asm.Assemble(list).ToList();
          }
      }


      public List<NewsDto> Get1600iKasaNewsToShow(DateTime? sdate, DateTime? edate, string jobcode, string empcode, List<string> authRole)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var teamdata = (from member in service.UnitOfWork.Members
                              join team in service.UnitOfWork.EduTeamMembers on member.MemberID equals team.MemberID
                              where member.IsHospMember == empcode
                              select new { member.DateFrom, member.DateTo, team.EduTeamCode });

              var news = from c in service.UnitOfWork.News
                         where (sdate == null || c.SDATE >= sdate)
                         && (edate == null || c.SDATE <= edate)
                         && (c.EDATE == null || c.EDATE > edate)
                         && (
                         c.NewsViewTargets.Count(t => t.TargetType != "部門") == 0
                         ||
                         (
                         c.NewsViewTargets.Count() > 0 && c.NewsViewTargets.Count(t => t.TargetType == "職稱" && t.TargetID == jobcode) > 0
                         )
                         ||
                         (
                         c.NewsViewTargets.Count() > 0
                         && c.NewsViewTargets.Count(t => t.TargetType == "組別" && teamdata.Any(r => r.EduTeamCode == t.TargetID && c.SDATE >= r.DateFrom && c.SDATE <= r.DateTo)) > 0
                         )
                         ||
                         (
                         c.NewsViewTargets.Count() > 0
                         && c.NewsViewTargets.Count(t => t.TargetType == "職編" && t.TargetID == empcode) > 0
                         )
                         ||
                         (
                         c.NewsViewTargets.Count() > 0
                         && c.NewsViewTargets.Count(t => t.TargetType == "系統身分" && authRole.Contains(t.TargetID)) > 0
                         )
                         ||
                         c.CREATER == empcode
                         
                         )
                         &&
                         (
                                                  c.NewsViewTargets.Count() > 0
                         && c.NewsViewTargets.Count(t => t.TargetType == "部門" && t.TargetID == "1600") > 0
                         )
                         orderby c.SDATE descending
                         select c;
              List<News> list = news.ToList();
              NewsAssembler asm = new NewsAssembler();
              return asm.Assemble(list).ToList();
          }
      }


      public NewsDto GetNewsData(string newsid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadNews(newsid);
          }
      }

      public List<News_AttachmentDto> GetNewsAttachment(string newid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<News_AttachmentDto> news = service.ReadNews_Attachments(c => c.NEWID == newid).ToList();
              return news;
          }
      }

      public List<NewsViewTargetDto> GetNewsViewTarget(string newid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<NewsViewTargetDto> list = new List<NewsViewTargetDto>();

              var data = from news in service.UnitOfWork.NewsViewTargets
                         join team in service.UnitOfWork.EduTeams on new { id = news.TargetID, type = news.TargetType } equals new { id = team.EduTeamCode, type = "組別" }
                         into tempteam
                         from team in tempteam.DefaultIfEmpty()
                         join jobs in service.UnitOfWork.V_kmujobs on new { id = news.TargetID, type = news.TargetType } equals new { id = jobs.JOB_CODE_X, type = "職稱" }
                         into tempjob
                         from jobs in tempjob.DefaultIfEmpty()
                         join emps in service.UnitOfWork.V_KmuEmps on new { id = news.TargetID, type = news.TargetType } equals new { id = emps.Empcode, type = "職編" }
                         into tempemp
                         from emps in tempemp.DefaultIfEmpty()
                         join deps in service.UnitOfWork.V_departments on new { id = news.TargetID, type = news.TargetType, hosp = "KMUH" } equals new { id = deps.Deptcode, type = "部門", hosp = deps.Hospcode }
                         into tempdeps
                         from deps in tempdeps.DefaultIfEmpty()
                         where news.NEWID == newid
                         select new { news, team, jobs, emps, deps };

              foreach (var item in data)
              {
                  NewsViewTargetDto tar = new NewsViewTargetDto();
                  tar.NEWID = item.news.NEWID;
                  tar.TargetID = item.news.TargetID;
                  tar.TargetType = item.news.TargetType;
                  if (item.team != null)
                  {
                      tar.TargetName = item.team.EduTeamName;
                  }
                  if (item.jobs != null)
                  {
                      tar.TargetName = "(" + item.jobs.JOB_CODE_X + ")" + item.jobs.JOB_NAME;
                  }
                  if (item.emps != null)
                  {
                      tar.TargetName = "(" + item.emps.Empcode + ")" + item.emps.Empname;
                  }

                  if (item.deps != null)
                  {
                      tar.TargetName = item.deps.Deptname;
                  }

                  list.Add(tar);
              }


              return list;
          }
      }

      public void DeleteNewsAttachment(int id)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.DeleteNews_Attachment(service.ReadNews_Attachments(id.ToString()));
          }
      }


      public void DeleteNews(string newid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.DeleteNews_Attachments(GetNewsAttachment(newid), false);

              service.DeleteNewsViewTargets(service.ReadNewsViewTargets(c => c.NEWID == newid), false);
              service.DeleteNews(GetNewsData(newid), false);

              service.UnitOfWork.SaveChanges();
          }
      }

      public void UpdateNews(NewsDto news, List<News_AttachmentDto> attachments, List<NewsViewTargetDto> targets)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.UpdateNews(news, false);

              foreach (News_AttachmentDto dto in attachments)
              {
                  dto.NEWID = news.NEWID;
                  service.CreateNews_Attachment(dto, false);
              }

              if (targets == null)
              {
                  service.DeleteNewsViewTargets(service.ReadNewsViewTargets(c => c.NEWID == news.NEWID), false);
              }
              else
              {
                  List<NewsViewTargetDto> oritargets = service.ReadNewsViewTargets(c => c.NEWID == news.NEWID).ToList();

                  foreach (NewsViewTargetDto oridto in oritargets)
                  {
                      if (targets.Count(c => c.TargetType == oridto.TargetType && c.TargetID == oridto.TargetID) == 0)
                      {
                          service.DeleteNewsViewTarget(oridto, false);
                      }
                  }

                  foreach (NewsViewTargetDto dto in targets)
                  {
                      if (oritargets.Count(c => c.TargetType == dto.TargetType && c.TargetID == dto.TargetID) == 0)
                      {
                          dto.NEWID = news.NEWID;
                          service.CreateNewsViewTarget(dto, false);
                      }
                  }
              }

              service.UnitOfWork.SaveChanges();
          }
      }

      public void InsertNews(NewsDto news, List<News_AttachmentDto> attachments,List<NewsViewTargetDto> targets)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              news.NEWID = GetSerialNo("EduAct_NewsID");


              service.CreateNews(news, false);

              (service.UnitOfWork as EduActivityContext).FlushChanges(false);
              foreach (News_AttachmentDto dto in attachments)
              {
                  dto.NEWID = news.NEWID;
                  string intsql = @"INSERT INTO www_EduActivity.dbo.News_Attachment
([NEWID], AttachmentName, Attachment) 
VALUES (@NEWID, @AttachmentName, @Attachment)


 ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("NEWID", GetDBObject(dto.NEWID)));
                  sqlparms.Add(new SqlParameter("AttachmentName", GetDBObject(dto.AttachmentName)));
                  sqlparms.Add(new SqlParameter("Attachment", GetDBObject(dto.Attachment)));

                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                 

                  
                  //service.CreateNews_Attachment(dto, false);
              }

              (service.UnitOfWork as EduActivityContext).FlushChanges(false);
              if (targets != null)
              {

                  foreach (NewsViewTargetDto dto in targets)
                  {
                      dto.NEWID = news.NEWID;
                      service.CreateNewsViewTarget(dto, false);
                  }
              }

              service.UnitOfWork.SaveChanges();
          }
      }

      #endregion

      #region 個資log

      public void InsertInfoLogByThread(string appname, List<string> empcodelist, string checkuserid, string desc, string actiontype,string ip)
      {
          Thread t = new Thread(new ParameterizedThreadStart(InsertInfoLogEx));
          object[] parm = new object[6];
          parm[0] = appname;
          parm[1] = empcodelist;
          parm[2] = checkuserid;
          parm[3] = desc;
          parm[4] = actiontype;
          parm[5] = ip;
          t.Start(parm);
      }

      public void InsertInfoLogEx(object parameter)
      {
          object[] param = parameter as object[];

          string appname = param[0] as string;
          List<string> empcodelist = param[1] as List<string>;
          string checkuserid = param[2] as string;
          string desc = param[3] as string;
          string actiontype = param[4] as string;
          string tClientIP = param[5] as string;

          Stopwatch sw = new Stopwatch();
          sw.Reset();
          sw = Stopwatch.StartNew();

          ApConnService.GetDBConnMethodClient serviceclient = new ApConnService.GetDBConnMethodClient();

          string connStr = serviceclient.GetDBConnectionWithHospCode("KMUH", "ora92", "Personal_Info").ConnectionString;

          OracleConnection conn = new OracleConnection(connStr);

          

          foreach (string empcode in empcodelist)
          {
              U_Personal_Info.U_Personal_Info personalInfo = new U_Personal_Info.U_Personal_Info();
              int result_code = 0;
              string result_text = "";

              personalInfo.Call_PR_EMP_INFO_LOG("EduActivity", appname, empcode, checkuserid, desc, actiontype, tClientIP, conn, ref result_code, ref result_text);
          }

          conn.Close();

          //要測時間的程式碼放這裡
          sw.Stop();
          TimeSpan e1 = sw.Elapsed;
          long ms = sw.ElapsedMilliseconds;
          string time = e1 + "秒 " + ms + "毫秒";


      }



      public Dictionary<string, string> InsertInfoLog(string appname, List<string> empcodelist, string checkuserid, string desc, string actiontype)
      {
          Stopwatch sw = new Stopwatch();
          sw.Reset();
          sw = Stopwatch.StartNew();



          Dictionary<string, string> result = new Dictionary<string, string>();
          ApConnService.GetDBConnMethodClient serviceclient = new ApConnService.GetDBConnMethodClient();

          string connStr = serviceclient.GetDBConnectionWithHospCode("KMUH", "ora92", "Personal_Info").ConnectionString;

          OracleConnection conn = new OracleConnection(connStr);

          string tClientIP = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"].ToString();

          foreach (string empcode in empcodelist)
          {
              U_Personal_Info.U_Personal_Info personalInfo = new U_Personal_Info.U_Personal_Info();
              int result_code = 0;
              string result_text = "";



              personalInfo.Call_PR_EMP_INFO_LOG("EduActivity", appname, empcode, checkuserid, desc, actiontype, tClientIP, conn, ref result_code, ref result_text);

              if (result_code != 0) // result_code起始值是0，如果有錯誤的話會不等於0
              {
                  if (!result.Keys.Contains(empcode))
                      result.Add(empcode, result_text);
              }
              else
              {
                  if (!result.Keys.Contains(empcode))
                      result.Add(empcode, null);
              }
          }

          conn.Close();

          //要測時間的程式碼放這裡
          sw.Stop();
          TimeSpan e1 = sw.Elapsed;
          long ms = sw.ElapsedMilliseconds;
          string time = e1 + "秒 " + ms + "毫秒";

          return result;
      }

      #endregion

      #region 報表
      public List<CourseReportDto>[] GetCourseReportData(string eduyear, string eduteamcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<CourseReportDto> replist = new List<CourseReportDto>();
              List<CourseReportDto> tablelist = new List<CourseReportDto>();

              List<V_MemeberRundownDto> rundowns = service.ReadV_MemeberRundowns(c => c.EduYear == eduyear && c.EduTeamCode == eduteamcode).ToList();

              foreach (V_MemeberRundownDto dto in rundowns)
              {
                  if (dto.ParentEduTermID != null)
                  {
                      if (replist.Count(c => c.ParentCourseName == dto.ParentEduTermName) == 0)
                      {
                          CourseReportDto parentdto = new CourseReportDto();
                          parentdto.ParentCourseName = dto.ParentEduTermName;
                          parentdto.ParentDateStr = (dto.ParentDateFrom.Value.Year - 1911).ToString() + "/" + dto.ParentDateFrom.Value.Month.ToString() + "/" + dto.ParentDateFrom.Value.Day.ToString()
                              + "-"
                              + (dto.ParentDateTo.Value.Year - 1911).ToString() + "/" + dto.ParentDateTo.Value.Month.ToString() + "/" + dto.ParentDateTo.Value.Day.ToString();

                          replist.Add(parentdto);
                      }


                      string childdatestr = dto.DateFrom.Value.Month.ToString() + "/" + dto.DateFrom.Value.Day.ToString()
                          + "-"
                          + dto.DateTo.Value.Month.ToString() + "/" + dto.DateTo.Value.Day.ToString();

                      CourseReportDto child = tablelist.Where(c => c.ParentCourseName == dto.ParentEduTermName
                          && c.ChildCourseName == dto.Deptname && c.ChildDateStr == childdatestr).FirstOrDefault();
                      if (child == null)
                      {
                          child = new CourseReportDto();
                          child.ParentCourseName = dto.ParentEduTermName;
                          child.ChildCourseName = dto.Deptname;// dto.EduTermName;
                          child.ChildDateStr = childdatestr;
                          tablelist.Add(child);
                      }

                      child.MemberList += "\n" + dto.MemberName;
                  }
              }


              return new List<CourseReportDto>[] { replist, tablelist };
          }
      }

      #endregion

      #region 考核表管理

      public string GetEduTermFullName(EduTerm term)
      {
          EduTerm tempterm = term;
          string name = "";

          name = tempterm.Name;


          while (tempterm.EduTerm1 != null)
          {
              name = tempterm.EduTerm1.Name + "->" + name;
              tempterm = tempterm.EduTerm1;
          }

          return name;
      }

      public string GetEduTermFullName(string edutermid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduTerm term = service.UnitOfWork.EduTerms.Where(c => c.EduTermID == edutermid).FirstOrDefault();
              return GetEduTermFullName(term);
          }
      }

      public List<FORM_DATA> GetFormData(string eduyear, List<string> jobcodes, string deptcode, string termname,
          int? instanceid, int? templateid, DateTime? expiresdate, DateTime? expireedate, DateTime? sendsdate, DateTime? sendedate,
          string target, string evaltarget,string status,bool displayself,bool overlimit,string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<FORM_DATA> list = new List<FORM_DATA>();


              //IEnumerable<string> termids = null;
              //IQueryable<EduTerm> terms = null;
              //if (eduyear != null || jobcodes != null || deptcode != null || termname != null)
              //{
              //    terms = service.UnitOfWork.EduTerms.Where(c =>
              //        (eduyear == null || c.EduYear == eduyear)
              //        && (jobcodes == null || jobcodes.Contains(c.JobCode))
              //        && (deptcode == null || c.Department == deptcode)
              //        && (termname == null || c.Name.Contains(termname))
              //        );

              //    termids = terms.Select(c => c.EduTermID).AsEnumerable();
              //}

              List<string> evaltargetids = null;

              if (evaltarget != null)
              {
                  evaltargetids = service.UnitOfWork.Members.Where(c => c.IsHospMember == evaltarget || c.Name == evaltarget).Select(c => c.MemberID).ToList();
              }

              List<string> targetids = null;
              if (target != null)
              {
                  targetids = service.UnitOfWork.V_KmuEmps.Where(c => (c.Empcode == target || c.Empname == target)
                      //&& (c.Enddate == null || c.Enddate > DateTime.Now.AddMonths(-1))
                      ).Select(c => c.Empcode).ToList();
              }

              //List<FORM_INSTANCE_TARGET> targets = new List<FORM_INSTANCE_TARGET>();
              //IQueryable<FORM_INSTANCE_TARGET> temptargets = service.UnitOfWork.FORM_INSTANCE_TARGETs.Where(c =>
              //    (instanceid == null || c.INSTANCE_ID == instanceid)
              //    && (templateid == null || c.FORM_INSTANCE.TEMPLATE_ID == templateid)
              //    && (expiresdate == null || (c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value.Date >= expiresdate))
              //    && (expireedate == null || (c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value.Date <= expireedate))
              //    && (sendsdate == null || (c.FORM_INSTANCE.INSTANCE_CREATE_DATETIME.Date >= sendsdate))
              //    && (sendedate == null || (c.FORM_INSTANCE.INSTANCE_CREATE_DATETIME.Date <= sendedate))
              //    && (targetids == null || targetids.Contains(c.TargetID))
              //    && (evaltargetids == null || evaltargetids.Contains(c.FORM_INSTANCE.EvalTargetID)

              //    )
              //    &&
              //      (
              //          (status == "all")
              //          ||
              //          (status == "expire" && c.Status == '0' && c.FORM_INSTANCE.ExpireDate.HasValue && c.FORM_INSTANCE.ExpireDate.Value < DateTime.Now.Date)
              //          ||
              //          (status == "complete" && c.Status != '0')
              //          ||
              //          (status == "notcomplete" && c.Status == '0' && (!c.FORM_INSTANCE.ExpireDate.HasValue || c.FORM_INSTANCE.ExpireDate.Value >= DateTime.Now.Date))
              //      )
              //    );

              //if (terms != null)
              //{
              //    targets = temptargets.AsEnumerable().Where(c => (termids.Contains(c.FORM_INSTANCE.INHOSPID))).ToList();
              //}
          List<string> deptcodes = new List<string>();
          if(deptcode != null)
          {
              deptcodes = GetChildDepts(deptcode);
          }

          var gettargets = (from term in service.UnitOfWork.EduTerms
                            join tar in service.UnitOfWork.FORM_INSTANCE_TARGETs on term.EduTermID equals tar.FORM_INSTANCE.INHOSPID
                            join ins in service.UnitOfWork.FORM_INSTANCEs on tar.INSTANCE_ID equals ins.INSTANCE_ID
                            join setting in service.UnitOfWork.EduFormTemplateLists on ins.INSTANCE_REMARK equals setting.FTListID
                            join emp in service.UnitOfWork.V_KmuEmps
                            on tar.TargetID equals emp.Empcode
                            into tempemp
                            from emp in tempemp.DefaultIfEmpty()
                            join tarmember in service.UnitOfWork.Members
                            on tar.FORM_INSTANCE.EvalTargetID equals tarmember.MemberID
                            into tempm
                            from tarmember in tempm.DefaultIfEmpty()
                            join template in service.UnitOfWork.FORM_TEMPLATEs
                            on ins.TEMPLATE_ID equals template.TEMPLATE_ID
                            where (((eduyear == null && term.EduYear != "102") || term.EduYear == eduyear)
                            && (jobcodes == null || jobcodes.Contains(term.JobCode))
                            && (deptcode == null || deptcodes.Contains(term.Department) || deptcodes.Contains(term.DepCode))
                            && (termname == null || term.Name.Contains(termname))) 
                            && ((instanceid == null || tar.INSTANCE_ID == instanceid)
                            && (templateid == null || tar.FORM_INSTANCE.TEMPLATE_ID == templateid)
                            && (expiresdate == null || (tar.FORM_INSTANCE.ExpireDate.HasValue && tar.FORM_INSTANCE.ExpireDate.Value.Date >= expiresdate))
                            && (expireedate == null || (tar.FORM_INSTANCE.ExpireDate.HasValue && tar.FORM_INSTANCE.ExpireDate.Value.Date <= expireedate))
                            && (sendsdate == null || (tar.FORM_INSTANCE.INSTANCE_CREATE_DATETIME.Date >= sendsdate))
                            && (sendedate == null || (tar.FORM_INSTANCE.INSTANCE_CREATE_DATETIME.Date <= sendedate))
                            && (targetids == null || targetids.Contains(tar.TargetID))
                            && (evaltargetids == null || evaltargetids.Contains(tar.FORM_INSTANCE.EvalTargetID))
                            && ((status == "all")||(status == "expire" && tar.Status == '0' && tar.FORM_INSTANCE.ExpireDate.HasValue && tar.FORM_INSTANCE.ExpireDate.Value < DateTime.Now.Date) ||(status == "complete" && tar.Status != '0') || (status == "notcomplete" && tar.Status == '0' && (!tar.FORM_INSTANCE.ExpireDate.HasValue || tar.FORM_INSTANCE.ExpireDate.Value >= DateTime.Now.Date)))
                            && ((!displayself) || (displayself && tar.FORM_INSTANCE.CREATER == empcode))
                            && ((!overlimit) || (overlimit && ins.Status == '1' && service.UnitOfWork.FORM_TEMPLATE_ELEMENTs.Count(c => c.TEMPLATE_ID == template.TEMPLATE_ID && c.ALLOWOVER) > 0)))
                            select new { tar, term, tarmember, emp, ins.EvalTargetID, ins.ExpireDate, ins.INSTANCE_NAME, ins.TEMPLATE_ID, ins.INSTANCE_CREATE_DATETIME, ins.PARENT_INSTANCE_ID, setting, ins.INSTANCE_ID }).ToList();

          if(overlimit)
          {
              List<int> insids = new List<int>();

              foreach(var dd in gettargets)
              {
                  bool isover = false;
                  List<FORM_INSTANCE_ELEMENT> eles = service.UnitOfWork.FORM_INSTANCE_ELEMENTs.Where(c => c.INSTANCE_ID == dd.INSTANCE_ID).ToList();
                  foreach(var te in service.UnitOfWork.FORM_TEMPLATE_ELEMENTs.Where(c=> c.TEMPLATE_ID == dd.TEMPLATE_ID && c.ALLOWOVER))
                  {
                      if (te.MAXPOINT != null)
                      {
                          FORM_INSTANCE_ELEMENT ie = eles.Where(c => c.ID == te.ID).FirstOrDefault();
                          if (ie != null)
                          {
                              string elevalue = ie.ELEMENT_VALUE;
                              if (elevalue != null)
                              {
                                  try
                                  {
                                      double edvalue = Convert.ToDouble(elevalue);
                                      if (edvalue > te.MAXPOINT.Value)
                                      {
                                          isover = true;
                                          break;
                                      }
                                  }
                                  catch
                                  {

                                  }
                              }
                          }
                      }
                  }
                  if(isover)
                  {
                      insids.Add(dd.INSTANCE_ID);
                  }
              }

              gettargets = (from t in gettargets
                            join iid in insids
                            on t.INSTANCE_ID equals iid
                            select t).ToList();
          }

              List<EduTeacherType> teachertypes = service.UnitOfWork.EduTeacherTypes.ToList();
              //foreach (FORM_INSTANCE_TARGET item in targets)
              //{
              //    FORM_DATA dto = new FORM_DATA();

              //    dto.EduTermID = item.FORM_INSTANCE.INHOSPID;

              //    EduTerm term = null;
              //    if (terms != null)
              //    {
              //        term = terms.Where(c => c.EduTermID == item.FORM_INSTANCE.INHOSPID).FirstOrDefault();
              //    }

              //    if (term == null)
              //    {
              //        term = service.UnitOfWork.EduTerms.Where(c => c.EduTermID == item.FORM_INSTANCE.INHOSPID).FirstOrDefault();
              //    }

              //    EduTerm tempterm = term;

              //    dto.EduTermName = tempterm.Name;

              //    dto.RoundCode = term.RoundCode;

              //    while (tempterm.EduTerm1 != null)
              //    {
              //        dto.EduTermName = tempterm.EduTerm1.Name + "->" + dto.EduTermName;
              //        tempterm = tempterm.EduTerm1;
              //    }

              //    dto.EvalTargetID = item.FORM_INSTANCE.EvalTargetID;
              //    if (dto.EvalTargetID != null)
              //    {
              //        dto.EvalTargetName = service.UnitOfWork.Members.Where(c => c.MemberID == dto.EvalTargetID).FirstOrDefault().Name;
              //    }

              //    dto.ExpireDate = item.FORM_INSTANCE.ExpireDate;

              //    dto.CreateDate = item.FORM_INSTANCE.INSTANCE_CREATE_DATETIME;

              //    dto.INSTANCE_ID = item.INSTANCE_ID;

              //    dto.INSTANCE_NAME = item.FORM_INSTANCE.INSTANCE_NAME;

              //    dto.Status = item.Status.ToString();

              //    dto.TargetID = item.TargetID;

              //    if (dto.TargetID != null)
              //    {
              //        V_KmuEmp emp = service.UnitOfWork.V_KmuEmps.Where(c => c.Empcode == dto.TargetID).FirstOrDefault();
              //        if (emp != null)
              //        {
              //            dto.TargetName = dto.TargetID + " - " + emp.Empname;
              //        }
              //    }

              //    dto.TargetType = item.TargetType;

              //    EduTeacherType teachertype = teachertypes.Where(c => c.Code == dto.TargetType).FirstOrDefault();
              //    if (teachertype != null)
              //    {
              //        dto.TargetTypeName = teachertype.Name;
              //    }
              //    else
              //    {
              //        if (dto.TargetType == "Teacher")
              //        {
              //            dto.TargetTypeName = "教師";
              //        }

              //        if (dto.TargetType == "Member")
              //        {
              //            dto.TargetTypeName = "學生";
              //        }
              //    }

              //    list.Add(dto);
              //}

              foreach (var item in gettargets)
              {
                  try
                  {
                      FORM_DATA dto = new FORM_DATA();

                      dto.EduTermID = item.tar.FORM_INSTANCE.INHOSPID;

                      EduTerm term = item.term;


                      EduTerm tempterm = term;

                      dto.EduTermName = tempterm.Name;

                      dto.RoundCode = term.RoundCode;

                      while (tempterm.EduTerm1 != null)
                      {
                          dto.EduTermName = tempterm.EduTerm1.Name + "->" + dto.EduTermName;
                          tempterm = tempterm.EduTerm1;
                      }

                      dto.EvalTargetID = item.EvalTargetID;
                      if (dto.EvalTargetID != null)
                      {
                          dto.EvalTargetName = item.tarmember.Name;
                      }

                      dto.ExpireDate = item.ExpireDate;

                      dto.CreateDate = item.INSTANCE_CREATE_DATETIME;

                      dto.INSTANCE_ID = item.tar.INSTANCE_ID;

                      dto.INSTANCE_NAME = item.INSTANCE_NAME + (item.setting.SendMonth == null ? "" : "(" + item.setting.SendMonth + "月)");

                      dto.Status = item.tar.Status.ToString();

                      dto.TargetID = item.tar.TargetID;

                      if (item.PARENT_INSTANCE_ID != null)
                      {
                          char beforeins = service.UnitOfWork.FORM_INSTANCEs.Where(c => c.PARENT_INSTANCE_ID == item.PARENT_INSTANCE_ID && c.TEMPLATE_ID < item.TEMPLATE_ID).Select(c => c.Status).FirstOrDefault();
                          if (beforeins != null && beforeins != '\0')
                          {
                              if (beforeins == '0')
                              {
                                  dto.BeforeFormStatus = "未完成";
                              }
                              else
                              {
                                  dto.BeforeFormStatus = "已完成";
                              }
                          }
                      }

                      if (dto.TargetID != null)
                      {
                          if (item.emp != null)
                          {
                              dto.TargetName = dto.TargetID + " - " + item.emp.Empname;
                          }
                      }

                      dto.TargetType = item.tar.TargetType;

                      EduTeacherType teachertype = teachertypes.Where(c => c.Code == dto.TargetType).FirstOrDefault();
                      if (teachertype != null)
                      {
                          dto.TargetTypeName = teachertype.Name;
                      }
                      else
                      {
                          if (dto.TargetType == "Teacher")
                          {
                              dto.TargetTypeName = "教師";
                          }

                          if (dto.TargetType == "Member")
                          {
                              dto.TargetTypeName = "學生";
                          }
                      }

                      list.Add(dto);
                  }
                  catch (Exception ex)
                  {

                  }
              }

              var test = list.Where(c => c.TargetID == "1050384").ToList();

              return list.OrderBy(c => c.INSTANCE_ID).ToList();
          }
      }

      public List<FORM_DATA> GetStudyTaskFormData(string eduyear, DateTime? sendsdate, DateTime? sendedate,
          string target, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<FORM_DATA> list = new List<FORM_DATA>();

              var stgatcode = service.UnitOfWork.EduSettings.Where(c => c.CodeType == "WorkDescCID" && c.Code == "WorkDescCID").FirstOrDefault();

              if (stgatcode != null)
              {
                  List<string> targetids = null;
                  if (target != null)
                  {
                      targetids = service.UnitOfWork.V_KmuEmps.Where(c => (c.Empcode == target || c.Empname == target)
                          //&& (c.Enddate == null || c.Enddate > DateTime.Now.AddMonths(-1))
                          ).Select(c => c.Empcode).ToList();
                  }

                  int catid = Convert.ToInt32(stgatcode.SettingValue);

                  var gettargets = (from term in service.UnitOfWork.EduTerms
                                    join ins in service.UnitOfWork.FORM_INSTANCEs on term.EduTermID equals ins.INHOSPID
                                    join setting in service.UnitOfWork.EduFormTemplateLists on ins.INSTANCE_REMARK equals setting.FTListID
                                    join fref in service.UnitOfWork.FormCategoryRefs on ins.TEMPLATE_ID equals fref.TEMPLATE_ID
                                    join emp in service.UnitOfWork.V_KmuEmps
                                    on ins.TargetID equals emp.Empcode
                                    into tempemp
                                    from emp in tempemp.DefaultIfEmpty()
                                    join tarmember in service.UnitOfWork.Members
                                    on ins.EvalTargetID equals tarmember.MemberID
                                    into tempm
                                    from tarmember in tempm.DefaultIfEmpty()
                                    join template in service.UnitOfWork.FORM_TEMPLATEs
                                    on ins.TEMPLATE_ID equals template.TEMPLATE_ID
                                    where fref.CategoryID == catid
                                    &&(
                                                          ((eduyear == null && term.EduYear != "102") || term.EduYear == eduyear)
                                    ) &&
                                    (
                          (sendsdate == null || (ins.INSTANCE_CREATE_DATETIME.Date >= sendsdate))
                          && (sendedate == null || (ins.INSTANCE_CREATE_DATETIME.Date <= sendedate))
                          && (targetids == null || targetids.Contains(ins.TargetID))

                          )

                                    select new {ins.TargetID,  term, tarmember, emp, ins.EvalTargetID, ins.ExpireDate, ins.INSTANCE_NAME, ins.TEMPLATE_ID, ins.INSTANCE_CREATE_DATETIME, ins.PARENT_INSTANCE_ID, setting, ins.INSTANCE_ID }).ToList();


                  foreach (var item in gettargets)
                  {
                      try
                      {
                          FORM_DATA dto = new FORM_DATA();

                          dto.EduTermID = item.term.EduTermID;

                          EduTerm term = item.term;


                          EduTerm tempterm = term;

                          dto.EduTermName = tempterm.Name;

                          dto.RoundCode = term.RoundCode;

                          while (tempterm.EduTerm1 != null)
                          {
                              dto.EduTermName = tempterm.EduTerm1.Name + "->" + dto.EduTermName;
                              tempterm = tempterm.EduTerm1;
                          }

                          dto.EvalTargetID = item.EvalTargetID;
                          if (dto.EvalTargetID != null)
                          {
                              dto.EvalTargetName = item.tarmember.Name;
                          }

                          dto.ExpireDate = item.ExpireDate;

                          dto.CreateDate = item.INSTANCE_CREATE_DATETIME;

                          int insid = item.INSTANCE_ID;
                          dto.PARENT_INSTANCE_ID = insid;
                          int? lastid = service.UnitOfWork.FORM_INSTANCEs.Where(c => c.PARENT_INSTANCE_ID == item.INSTANCE_ID).OrderByDescending(c => c.TEMPLATE_ID).Select(c => c.INSTANCE_ID).FirstOrDefault();
                          
                          if(lastid!= null)
                          {
                              insid = lastid.Value;
                          }

                          dto.INSTANCE_ID = insid;

                          dto.INSTANCE_NAME = item.INSTANCE_NAME + (item.setting.SendMonth == null ? "" : "(" + item.setting.SendMonth + "月)");

                          
                          

                          dto.TargetID = item.TargetID;

                          if (item.PARENT_INSTANCE_ID != null)
                          {
                              char beforeins = service.UnitOfWork.FORM_INSTANCEs.Where(c => c.PARENT_INSTANCE_ID == item.PARENT_INSTANCE_ID && c.TEMPLATE_ID < item.TEMPLATE_ID).Select(c => c.Status).FirstOrDefault();
                              if (beforeins != null && beforeins != '\0')
                              {
                                  if (beforeins == '0')
                                  {
                                      dto.BeforeFormStatus = "未完成";
                                  }
                                  else
                                  {
                                      dto.BeforeFormStatus = "已完成";
                                  }
                              }
                          }

                          if (dto.TargetID != null)
                          {
                              if (item.emp != null)
                              {
                                  dto.TargetName = dto.TargetID + " - " + item.emp.Empname;
                              }
                          }


                          list.Add(dto);
                      }
                      catch (Exception ex)
                      {

                      }

                  }
              }
              return list.OrderBy(c => c.INSTANCE_ID).ToList();
          }
      }


      public List<FORM_DATA> GetPersonalFormData(string edutermid,
          string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<FORM_DATA> list = new List<FORM_DATA>();



              List<string> targetids = new List<string>();
              targetids.Add(empcode);

              List<string> evaltargetids = null;

              evaltargetids = service.UnitOfWork.Members.Where(c => targetids.Contains(c.IsHospMember)).Select(c => c.MemberID).ToList();


              var gettargets = from term in service.UnitOfWork.EduTerms
                               join tar in service.UnitOfWork.FORM_INSTANCE_TARGETs on term.EduTermID equals tar.FORM_INSTANCE.INHOSPID
                               where (term.EduTermID == edutermid
                               ) &&
                               (
                     (targetids.Contains(tar.TargetID))
                     || (evaltargetids.Contains(tar.FORM_INSTANCE.EvalTargetID)

                     )
                               )
                               select new { tar, term };



              List<EduTeacherType> teachertypes = service.UnitOfWork.EduTeacherTypes.ToList();


              foreach (var item in gettargets)
              {
                  FORM_DATA dto = new FORM_DATA();

                  dto.EduTermID = item.tar.FORM_INSTANCE.INHOSPID;

                  EduTerm term = item.term;


                  EduTerm tempterm = term;

                  dto.EduTermName = tempterm.Name;

                  dto.RoundCode = term.RoundCode;

                  while (tempterm.EduTerm1 != null)
                  {
                      dto.EduTermName = tempterm.EduTerm1.Name + "->" + dto.EduTermName;
                      tempterm = tempterm.EduTerm1;
                  }

                  dto.EvalTargetID = item.tar.FORM_INSTANCE.EvalTargetID;
                  if (dto.EvalTargetID != null)
                  {
                      dto.EvalTargetName = service.UnitOfWork.Members.Where(c => c.MemberID == dto.EvalTargetID).FirstOrDefault().Name;
                  }

                  dto.ExpireDate = item.tar.FORM_INSTANCE.ExpireDate;

                  dto.CreateDate = item.tar.FORM_INSTANCE.INSTANCE_CREATE_DATETIME;

                  dto.INSTANCE_ID = item.tar.INSTANCE_ID;

                  dto.INSTANCE_NAME = item.tar.FORM_INSTANCE.INSTANCE_NAME;

                  dto.Status = item.tar.Status.ToString();

                  dto.TargetID = item.tar.TargetID;

                  if (item.tar.FORM_INSTANCE.PARENT_INSTANCE_ID != null)
                  {
                      FORM_INSTANCE beforeins = service.UnitOfWork.FORM_INSTANCEs.Where(c => c.PARENT_INSTANCE_ID == item.tar.FORM_INSTANCE.PARENT_INSTANCE_ID && c.TEMPLATE_ID < item.tar.FORM_INSTANCE.TEMPLATE_ID).FirstOrDefault();
                      if (beforeins != null)
                      {
                          if (beforeins.Status == '0')
                          {
                              dto.BeforeFormStatus = "未完成";
                          }
                          else
                          {
                              dto.BeforeFormStatus = "已完成";
                          }
                      }
                  }

                  if (dto.TargetID != null)
                  {
                      V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == dto.TargetID).FirstOrDefault();
                      if (emp != null)
                      {
                          dto.TargetName = dto.TargetID + " - " + emp.Empname;
                      }
                  }

                  dto.TargetType = item.tar.TargetType;

                  EduTeacherType teachertype = teachertypes.Where(c => c.Code == dto.TargetType).FirstOrDefault();
                  if (teachertype != null)
                  {
                      dto.TargetTypeName = teachertype.Name;
                  }
                  else
                  {
                      if (dto.TargetType == "Teacher")
                      {
                          dto.TargetTypeName = "教師";
                      }

                      if (dto.TargetType == "Member")
                      {
                          dto.TargetTypeName = "學生";
                      }
                  }

                  list.Add(dto);
              }


              return list.OrderBy(c => c.INSTANCE_ID).ToList();
          }
      }

      private FORM_INSTANCE GetNextAllowChoiceInstance(int instanceid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var ins1 = (from ins in service.UnitOfWork.FORM_INSTANCEs
                          where ins.INSTANCE_ID == instanceid
                          select new { ins.INSTANCE_ID, ins.TEMPLATE_ID, ins.PARENT_INSTANCE_ID }).FirstOrDefault();

              var nextins = (from ins in service.UnitOfWork.FORM_INSTANCEs
                             join temp in service.UnitOfWork.FORM_TEMPLATEs
                             on ins.TEMPLATE_ID equals temp.TEMPLATE_ID
                             where ins.PARENT_INSTANCE_ID == ins1.PARENT_INSTANCE_ID
                             && ins.INSTANCE_ID > ins1.INSTANCE_ID
                             && temp.TEMPLATE_REMARK == "C"
                             orderby ins.INSTANCE_ID
                             select ins).FirstOrDefault();


              return nextins;
          }
      }

      public bool ReturnFormInstanceTargetStatus(int instanceid)
      {
          using (EduActivityContextService opservice = new EduActivityContextService())
          {
              FORM_INSTANCEDto ins = opservice.ReadFORM_INSTANCEs(c => c.INSTANCE_ID == instanceid).FirstOrDefault();
              List<FORM_INSTANCE_TARGETDto> targets = opservice.ReadFORM_INSTANCE_TARGETs(c => c.INSTANCE_ID == instanceid).ToList();
              ins.Status = '0';
              ins.INSTANCE_ALTER_DATETIME = null;
              foreach(var t in targets)
              {
                  t.AlertTime = null;
                  t.Status = '0';
              }

              opservice.UpdateFORM_INSTANCE(ins, false);
              opservice.UpdateFORM_INSTANCE_TARGETs(targets, false);

              try
              {
                  opservice.UnitOfWork.SaveChanges();
                  return true;
              }
              catch(Exception ex)
              {
                  opservice.UnitOfWork.ClearChanges();
                  return false;
              }
          }
      }

      public bool WriteReturnLog(int instanceid, string empcode, string reason)
      {
          using (EduActivityContextService opservice = new EduActivityContextService())
          {
              try
              {
                  string intsql = @"insert into FORM_INSTANCE_RETURN_LOG (INSTANCE_ID,RETURN_EMP,RETURN_TIME,RETURN_REASON)
                              values (@INSTANCE_ID,@RETURN_EMP,@RETURN_TIME,@RETURN_REASON)
                              ";

                  (opservice.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql,
                   new SqlParameter("INSTANCE_ID", GetDBObject(instanceid))
                   , new SqlParameter("RETURN_EMP", GetDBObject(empcode))
                   , new SqlParameter("RETURN_TIME", DateTime.Now)
                   , new SqlParameter("RETURN_REASON", GetDBObject(reason))
                   );

                  opservice.UnitOfWork.SaveChanges();


                  //FORM_INSTANCE_RETURN_LOGDto log = new FORM_INSTANCE_RETURN_LOGDto();
                  //log.INSTANCE_ID = instanceid;
                  //log.RETURN_EMP = empcode;
                  //log.RETURN_TIME = DateTime.Now;
                  //log.RETURN_REASON = reason;
                  //opservice.CreateFORM_INSTANCE_RETURN_LOG(log);
                  return true;
              }
              catch(Exception ex)
              {
                  return false;
              }
          }
      }

      public List<FORM_INSTANCE_RETURN_LOGDto> GetFormReturnLog(int instanceid)
      {
          using (EduActivityContextService opservice = new EduActivityContextService())
          {
              var logs = from lo in opservice.UnitOfWork.FORM_INSTANCE_RETURN_LOGs
                         join emp in opservice.UnitOfWork.V_KmuEmps
                         on lo.RETURN_EMP equals emp.Empcode
                         where lo.INSTANCE_ID == instanceid
                         orderby lo.RETURN_TIME
                         select new { lo, emp };

              FORM_INSTANCE_RETURN_LOGAssembler asm = new FORM_INSTANCE_RETURN_LOGAssembler();

              List<FORM_INSTANCE_RETURN_LOGDto> result = new List<FORM_INSTANCE_RETURN_LOGDto>();

              foreach(var v in logs)
              {
                  FORM_INSTANCE_RETURN_LOGDto dto = asm.Assemble(v.lo);
                  dto.EmpName = v.emp.Empname;
                  result.Add(dto);
              }
              return result;
          }
      }

      public bool UpdateFormInstanceTargetStatus(List<FORM_INSTANCE_TARGETDto> list)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  foreach (FORM_INSTANCE_TARGETDto dto in list)
                  {
                      var nextins = GetNextAllowChoiceInstance(dto.INSTANCE_ID);
                      if(nextins!=null)
                      {
                          nextins.TargetID = "";
                          foreach(var tar in nextins.FORM_INSTANCE_TARGETs)
                          {
                              (service.UnitOfWork as EduActivityContext).ExecuteNonQuery("update form_instance_targets set targetid = '' where targetid = '" + tar.TargetID + "' and instance_id = " + tar.INSTANCE_ID.ToString() + " and targettype = '" + tar.TargetType + "'");
                              //tar.TargetID = "";
                          }
                      }

                      FORM_INSTANCE_TARGETDto tochange = service.ReadFORM_INSTANCE_TARGETs(c=> c.INSTANCE_ID == dto.INSTANCE_ID && c.TargetID == dto.TargetID && c.TargetType == dto.TargetType).FirstOrDefault();
                      if(tochange!=null)
                      {
                          tochange.Status = dto.Status;
                          service.UpdateFORM_INSTANCE_TARGET(tochange, false);
                      }
                      
                  }

                  service.UnitOfWork.SaveChanges();

                  return true;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return false;
              }
          }
      }

      public void WriteFormInstanceTransLog(int instanceid, string empcode, string modifytype, string oldvalue, string newvalue)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  FORM_INSTANCE_TRANSLOG log = new FORM_INSTANCE_TRANSLOG();
                  log.INSTANCE_ID = instanceid;
                  log.Modifier = empcode;
                  log.ModifyDate = DateTime.Now;
                  log.ModifyType = modifytype;
                  log.OldValue = oldvalue;
                  log.NewValue = newvalue;


                  string intsql = @"INSERT INTO www_EduActivity.dbo.FORM_INSTANCE_TRANSLOG
(INSTANCE_ID, Modifier, ModifyDate, ModifyType, OldValue, NewValue) 
VALUES (@INSTANCE_ID, @Modifier, @ModifyDate, @ModifyType, @OldValue, @NewValue)
  ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("INSTANCE_ID", GetDBObject(log.INSTANCE_ID)));
                  sqlparms.Add(new SqlParameter("Modifier", GetDBObject(log.Modifier)));
                  sqlparms.Add(new SqlParameter("ModifyDate", GetDBObject(log.ModifyDate)));
                  sqlparms.Add(new SqlParameter("ModifyType", GetDBObject(log.ModifyType)));
                  sqlparms.Add(new SqlParameter("OldValue", GetDBObject(log.OldValue)));
                  sqlparms.Add(new SqlParameter("NewValue", GetDBObject(log.NewValue)));
                  
                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());
                                                            
                  //service.UnitOfWork.Add(log);

                  service.UnitOfWork.SaveChanges();
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
              }
          }
      }

      public bool UpdateFormInstanceTarget(List<FORM_INSTANCE_TARGETDto> list,string totarget)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  foreach (FORM_INSTANCE_TARGETDto dto in list)
                  {
                      FORM_INSTANCE_TARGETDto tochange = service.ReadFORM_INSTANCE_TARGETs(c => c.INSTANCE_ID == dto.INSTANCE_ID && c.TargetID == dto.TargetID && c.TargetType == dto.TargetType).FirstOrDefault();

                      if (tochange != null)
                      {
                          FORM_INSTANCE_TARGETDto newtarget = new FORM_INSTANCE_TARGETDto();
                          if (tochange.TargetID != totarget)
                          {
                              newtarget.AlertTime = null;
                          }
                          else
                          {
                              newtarget.AlertTime = tochange.AlertTime;
                          }
                          newtarget.INSTANCE_ID = tochange.INSTANCE_ID;
                          newtarget.Status = tochange.Status;
                          newtarget.TargetID = totarget;
                          newtarget.TargetOrder = tochange.TargetOrder;
                          newtarget.TargetType = tochange.TargetType;

                          
                          service.DeleteFORM_INSTANCE_TARGET(tochange, false);

                          service.CreateFORM_INSTANCE_TARGET(newtarget, false);
                      }

                      FORM_INSTANCEDto instance = service.ReadFORM_INSTANCEs(c => c.INSTANCE_ID == dto.INSTANCE_ID).FirstOrDefault();
                      instance.TargetID = totarget;
                      service.UpdateFORM_INSTANCE(instance, false);

                  }

                  service.UnitOfWork.SaveChanges();

                  return true;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return false;
              }
          }
      }

      public List<FORM_TEMPLATEDto> GetRootTemplates(string hospcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadFORM_TEMPLATEs(c => c.TEMPLATE_CATEGORY == "EduActivity" && c.FORM_TEMPLATE_PERMISSIONs.Count(e => e.HOSPCODE == hospcode) > 0 && c.PARENT_TEMPLATE_ID == null).OrderBy(c => c.TEMPLATE_NAME).ToList();
          }
      }

      public List<FORM_TEMPLATEDto> GetAllTemplates(string hospcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<FORM_TEMPLATEDto> result = new List<FORM_TEMPLATEDto>();
              var list = (from t in service.UnitOfWork.FORM_TEMPLATEs
                          where t.TEMPLATE_CATEGORY == "EduActivity"
                          && t.FORM_TEMPLATE_PERMISSIONs.Count(c => c.HOSPCODE == hospcode) > 0
                          orderby t.TEMPLATE_NAME
                          select new { TEMPLATE_ID = t.TEMPLATE_ID, TEMPLATE_NAME = t.TEMPLATE_NAME }).ToList();
              foreach (var l in list)
              {
                  FORM_TEMPLATEDto dto = new FORM_TEMPLATEDto();
                  dto.TEMPLATE_ID = l.TEMPLATE_ID;
                  dto.TEMPLATE_NAME = l.TEMPLATE_NAME;
                  result.Add(dto);
              }

              return result;
          }
      }

      public List<FORM_TEMPLATEDto> GetQuestionTemplates()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadFORM_TEMPLATEs(c => c.TEMPLATE_CATEGORY == "Question").OrderBy(c => c.TEMPLATE_NAME).ToList();
          }
      }

      public List<int> GetChildTemplateIDs(int templateid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.PARENT_TEMPLATE_ID == templateid).Select(c => c.TEMPLATE_ID).ToList();
          }

      }

      public List<FORM_TEMPLATEDto> GetTemplates(string hospcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<FORM_TEMPLATEDto> result = new List<FORM_TEMPLATEDto>();
              var list = (from t in service.UnitOfWork.FORM_TEMPLATEs
                          where t.TEMPLATE_CATEGORY == "EduActivity" && service.UnitOfWork.FORM_TEMPLATEs.Count(d => d.PARENT_TEMPLATE_ID == t.TEMPLATE_ID) == 0
                          && t.FORM_TEMPLATE_PERMISSIONs.Count(c => c.HOSPCODE == hospcode) > 0
                          orderby t.TEMPLATE_NAME
                          select new { TEMPLATE_ID = t.TEMPLATE_ID, TEMPLATE_NAME = t.TEMPLATE_NAME }).ToList();
              foreach (var l in list)
              {
                  FORM_TEMPLATEDto dto = new FORM_TEMPLATEDto();
                  dto.TEMPLATE_ID = l.TEMPLATE_ID;
                  dto.TEMPLATE_NAME = l.TEMPLATE_NAME;
                  result.Add(dto);
              }

              return result;
          }
      }



      #endregion

      #region 留言板
      public List<MessageBoardDto> GetMessageBoardList(int takes, int takee, bool isAdmin, string empcode,string qtype,string jobcode, bool showisclose)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              MessageBoardAssembler asm = new MessageBoardAssembler();

              List<MessageBoardDto> list = asm.Assemble(
                  (from m in service.UnitOfWork.MessageBoards
                   where m.ParentMessageID == null
                   && (((isAdmin) || ((!isAdmin) && m.IsPublic)) || (m.EMP_CODE == empcode))
                   && m.Status != 'X'
                   && (qtype == null || qtype == "" || m.MessageType == qtype)
                   && (jobcode == null || jobcode == "" || m.JobCode == jobcode)
                   && (showisclose || (!showisclose && m.Status != 'C'))
                   orderby m.SendTime descending
                   select m).Skip(takes).Take(takee)).ToList();

              List<string> empcodes = list.Select(c => c.EMP_CODE).ToList();


              List<V_CodeRefDto> jobs = service.ReadV_CodeRefs(c => c.CodeType == "EduAct_JobSerial").ToList();

              foreach (MessageBoardDto dto in list)
              {
                  V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == dto.EMP_CODE).FirstOrDefault();
                  if (emp != null)
                  {
                      dto.EmpName = emp.Empname;
                  }


                  if (dto.JobCode != null)
                  {
                      V_CodeRefDto job = jobs.Where(c => c.Code == dto.JobCode).FirstOrDefault();
                      
                      if (job != null)
                      {
                          V_CodeRefDto parentjob = jobs.Where(c => c.Code == job.ParentCodeRefid).FirstOrDefault();
                          if (parentjob != null)
                          {
                              dto.JobCodeName = parentjob.Name + " ";
                          }

                          dto.JobCodeName += job.Name;
                      }
                  }
              }

              return list;
          }
      }

      public MessageBoardDto GetMessageBoard(int messageID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              MessageBoardDto dto = service.ReadMessageBoards(c => c.MessageID == messageID).FirstOrDefault();
              dto.ReadCount++;
              service.UpdateMessageBoard(dto);

              V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == dto.EMP_CODE).FirstOrDefault();
              if (emp != null)
              {
                  dto.EmpName = emp.Empname;
              }
              return dto;
          }
      }

      public List<MessageBoardDto> GetMessageBoardReplys(int messageID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<MessageBoardDto> list = service.ReadMessageBoards(c => c.ParentMessageID == messageID && c.Status != 'X').OrderBy(c => c.SendTime).ToList();

              List<string> empcodes = list.Select(c => c.EMP_CODE).ToList();

              foreach (MessageBoardDto dto in list)
              {
                  V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == dto.EMP_CODE).FirstOrDefault();
                  if (emp != null)
                  {
                      dto.EmpName = emp.Empname;
                  }
              }

              return list;
          }
      }

      public bool CheckIsMax(int messageID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return !service.UnitOfWork.MessageBoards.Where(c => c.MessageID > messageID && c.ParentMessageID == null).Any();
          }
      }

      public bool CheckIsMin(int messageID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return !service.UnitOfWork.MessageBoards.Where(c => c.MessageID < messageID && c.ParentMessageID == null).Any();
          }
      }

      public bool DeleteMessageBoard(int messageID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  MessageBoard msg = service.UnitOfWork.MessageBoards.Where(c => c.MessageID == messageID).FirstOrDefault();
                  msg.Status = 'X';
                  service.UnitOfWork.SaveChanges();
                  return true;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return false;
              }
          }
      }

      public bool InsertMessageBoard(string messageType, string title, string jobcode, string content, string empcode, int? parentid, bool isPublic, bool isClose)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  string intsql = @"insert into MessageBoard (MessageType,MessageTitle,MessageContent,EMP_CODE,JobCode,ParentMessageID,SendTime,IsPublic,Status)
                              values (@MessageType,@MessageTitle,@MessageContent,@EMP_CODE,@JobCode,@ParentMessageID,@SendTime,@IsPublic,@Status)
                              ";

                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql,
                   new SqlParameter("MessageType", GetDBObject(messageType))
                   , new SqlParameter("MessageTitle", GetDBObject(title))
                   , new SqlParameter("MessageContent", GetDBObject(content))
                   , new SqlParameter("EMP_CODE", GetDBObject(empcode))
                   , new SqlParameter("JobCode", GetDBObject(jobcode))
                   , new SqlParameter("ParentMessageID", GetDBObject(parentid))
                   , new SqlParameter("SendTime", DateTime.Now)
                   , new SqlParameter("IsPublic", GetDBObject(isPublic))
                   , new SqlParameter("Status", 'V')
                   );

                  service.UnitOfWork.SaveChanges();


                  //MessageBoardDto dto = new MessageBoardDto();
                  //dto.MessageType = messageType;
                  //dto.MessageTitle = title;
                  //dto.MessageContent = content;
                  //dto.EMP_CODE = empcode;
                  //dto.JobCode = jobcode;
                  //dto.ParentMessageID = parentid;
                  //dto.SendTime = DateTime.Now;
                  //dto.IsPublic = isPublic;
                  //dto.Status = 'V';
                  //service.CreateMessageBoard(dto);

                  if (isClose)
                  {
                      MessageBoardDto parentdto = service.ReadMessageBoards(c => c.MessageID == parentid).FirstOrDefault();
                      if (parentdto != null)
                      {
                          parentdto.Status = 'C';
                          service.UpdateMessageBoard(parentdto);
                      }

                  }

                  return true;
              }
              catch (Exception ex)
              {
                  return false;
              }
          }
      }

      #endregion

      #region 學生清單
      public List<EduStudentData> GetMyStudentData(string empcode, string eduyears, string eduyeare,string jobcode, DateTime? sdate, DateTime? edate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduStudentData> result = new List<EduStudentData>();

              var datas = (from term in service.UnitOfWork.EduTerms
                           join rundown in service.UnitOfWork.EduTeamMemberRundowns
                           on term.EduTermID equals rundown.EduTermID
                           join mem in service.UnitOfWork.Members
                           on rundown.MemberID equals mem.MemberID
                           join memp in service.UnitOfWork.V_KmuEmps
                           on mem.IsHospMember equals memp.Empcode
                           where
                           service.UnitOfWork.EduRefTeachers.Count(c => c.TeacherID == empcode && c.EduTermID == term.EduTermID) > 0
                           &&
                           (eduyears == null || eduyears == "" || string.Compare(eduyears, term.EduYear) <= 0)
                           &&
                           (eduyeare == null || eduyeare == "" || string.Compare(eduyeare, term.EduYear) >= 0)
                           &&
                           (jobcode == null || jobcode == "" || term.JobCode == jobcode)
                           &&
                           (
                           ((term.DateFrom >= sdate || sdate == null) && (term.DateFrom <= edate || edate == null))
                           ||
                           ((term.DateTo >= sdate || sdate == null) && (term.DateTo <= edate || edate == null))
                           ||
                           ((term.DateFrom < sdate || sdate == null) && (term.DateTo > edate || edate == null))
                           )
                           select new { term, mem, memp }).ToList();
              foreach (var data in datas.OrderBy(c => c.term.DateFrom).ThenBy(c => c.term.RoundCode))
              {

                  EduStudentData sd = new EduStudentData();
                  sd.EduTermName = "期間：" + data.term.DateFrom.ToString("yyyy/MM/dd") + "~" + data.term.DateTo.ToString("yyyy/MM/dd") + "<br><b>" + GetEduTermFullName(data.term) + "</b>";
                  if (result.Count(c => c.EduTermName == sd.EduTermName && c.EmpCode == data.memp.Empcode) == 0)
                  {
                      sd.EduTermID = data.term.EduTermID;
                      sd.EmpCode = data.memp.Empcode;
                      sd.IDNo = data.memp.Idno;
                      sd.MemberCode = data.mem.MemberCode;
                      sd.StudentName = data.mem.Name;

                      result.Add(sd);
                  }
              }

              return result.Distinct().ToList();
          }
      }


      public List<EduStudentData> GetiKasaStudentListData(string eduyears, string eduyeare, string jobcode, DateTime? sdate, DateTime? edate, string sEmpCode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduStudentData> result = new List<EduStudentData>();

              var datas = (from term in service.UnitOfWork.EduTerms
                           join rundown in service.UnitOfWork.EduTeamMemberRundowns
                           on term.EduTermID equals rundown.EduTermID
                           join mem in service.UnitOfWork.Members
                           on rundown.MemberID equals mem.MemberID
                           join memp in service.UnitOfWork.V_KmuEmps
                           on mem.IsHospMember equals memp.Empcode
                           where
                           (sEmpCode == null || sEmpCode == "" || memp.Empcode == sEmpCode)
                           &&
                           (eduyears == null || eduyears == "" || string.Compare(eduyears, term.EduYear) <= 0)
                           &&
                           (eduyeare == null || eduyeare == "" || string.Compare(eduyeare, term.EduYear) >= 0)
                           &&
                           (jobcode == null || jobcode == "" || term.JobCode == jobcode)
                           &&
                           (
                           ((term.DateFrom >= sdate || sdate == null) && (term.DateFrom <= edate || edate == null))
                           ||
                           ((term.DateTo >= sdate || sdate == null) && (term.DateTo <= edate || edate == null))
                           ||
                           ((term.DateFrom < sdate || sdate == null) && (term.DateTo > edate || edate == null))
                           )
                           select new { mem, memp }).Distinct().ToList();
              foreach (var data in datas.OrderBy(c => c.mem.DateFrom))
              {

                  EduStudentData sd = new EduStudentData();
                  sd.EduTermName = data.mem.DateFrom.ToString("yyyy/MM/dd") + "~" + data.mem.DateTo.ToString("yyyy/MM/dd");
                  if (result.Count(c => c.EduTermName == sd.EduTermName && c.EmpCode == data.memp.Empcode) == 0)
                  {
                      sd.EmpCode = data.memp.Empcode;
                      sd.IDNo = data.memp.Idno;
                      sd.MemberCode = data.mem.MemberCode;
                      sd.StudentName = data.mem.Name;

                      result.Add(sd);
                  }
              }

              return result.Distinct().ToList();
          }
      }

      #endregion

      #region 老師清單
      public List<EduTeacherData> GetTeacherData(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduTeacherData> list = new List<EduTeacherData>();
              var members = (from rr in service.UnitOfWork.EduTeamMemberRundowns
                             join mm in service.UnitOfWork.Members
                             on new { MemberID = rr.MemberID } equals new { MemberID = mm.MemberID }
                             join ee in service.UnitOfWork.EduTerms
                             on rr.EduTermID equals ee.EduTermID
                             where mm.IsHospMember == empcode
                             orderby ee.DateFrom
                             select new { rr.EduTermID, rr.MemberID}

               ).ToList();
              

              List<EduTeacherType> ttypes = service.UnitOfWork.EduTeacherTypes.ToList();

              Dictionary<string, string> teacherinfo = new Dictionary<string, string>();

              foreach (var memberinfo in members)
              {
                  EduTeacherData data = new EduTeacherData();
                  EduTerm term = service.UnitOfWork.EduTerms.Where(c => c.EduTermID == memberinfo.EduTermID).FirstOrDefault();
                  EduTermAssembler termasm = new EduTermAssembler();
                  data.EduTerm = termasm.Assemble(term);
                  data.EduTermName = "期間：" + term.DateFrom.ToString("yyyy/MM/dd") + "~" + term.DateTo.ToString("yyyy/MM/dd") + "，" + GetEduTermFullName(term);
                  
                  //List<AutoEduFormTemplateListDto> autolist = GetAutoEduFormTemplateLists(termasm.Assemble(term));
                  //List<EduFormTemplateListDto> nonautolist = service.ReadEduFormTemplateLists(c => c.AutoFTListID == null && c.EduTermID == term.EduTermID).ToList();



                  DataTable dt = new DataTable();

                  foreach (EduTeacherType ttype in ttypes)
                  {
                      dt.Columns.Add(ttype.Name);
                  }

                  DataRow dr = dt.NewRow();
                  DataRow drform = dt.NewRow();

                  foreach (EduTeacherType ttype in ttypes)
                  {

                      List<EduRefTeacher> teacher = GetMemberRefTeacher(ttype.Code, memberinfo.EduTermID, memberinfo.MemberID, service);
                      if (teacher.Count>0)
                      {
                          foreach (EduRefTeacher t in teacher)
                          {
                              if (!teacherinfo.ContainsKey(t.TeacherID))
                              {
                                  V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == t.TeacherID).FirstOrDefault();

                                  teacherinfo.Add(emp.Empcode, emp.Empname);
                              }

                              dr[ttype.Name] += t.TeacherID + " " + teacherinfo[t.TeacherID] + "<br/>";
                          }
                          if (dr[ttype.Name].ToString() != "")
                          {
                              dr[ttype.Name] = dr[ttype.Name].ToString().Substring(0, dr[ttype.Name].ToString().Length - 5);
                          }
                      }
                      else
                      {
                          dr[ttype.Name] = "未設定";
                      }

                      //string forms = "";
                      //foreach (AutoEduFormTemplateListDto dto in autolist)
                      //{
                      //    if (dto.TeacherType == ttype.Code && dto.IsSend)
                      //    {
                      //        forms += service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.TEMPLATE_ID == dto.TEMPLATE_ID).Select(c => c.TEMPLATE_NAME).FirstOrDefault() + "<br>";
                      //    }
                      //}

                      //foreach (EduFormTemplateListDto dto in nonautolist)
                      //{
                      //    if (service.UnitOfWork.EduFormTemplateTargets.Count(c => (c.TeacherType == ttype.Code || c.RoleType == ttype.Code) && c.FTListID == dto.FTListID) > 0)
                      //    {
                      //        forms += service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.TEMPLATE_ID == dto.TEMPLATE_ID).Select(c => c.TEMPLATE_NAME).FirstOrDefault() + "<br>";
                      //    }
                      //}


                      //drform[ttype.Name] = forms;

                  }

                  dt.Rows.Add(dr);
                  dt.Rows.Add(drform);
                  data.TeacherInfo = dt;

                  list.Add(data);
              }


              return list;
          }
      }
      

      #endregion

      #region 教學時數

      public List<V_CodeRefDto> GetHealTeachTimeTargetType()
      {
          return GetCodeRefs("EduAct_HealTeachTimeTargetType");
      }

      public IEnumerable<TeachTimeTypeDto> GetTeachTimeType()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadTeachTimeTypes(c => c.Disable == null || c.Disable != "Y");
          }
      }

      public IEnumerable<TeachTimeRateDto> GetTeachTimeRate(string settingType)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadTeachTimeRates(c => c.SettingType == settingType);
          }
      }

      public EduActTypeDto GetActTypeById(int clsid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduActTypes(c => c.CLS_ID == clsid).FirstOrDefault();
          }
      }




      private string TeachTimeGetFormStr = "33,218,42,162,224,45,186,221,379,382,385,388,391,394,397,406,408";

      //public IEnumerable<teach

      /// <summary>
      /// 明細時數
      /// </summary>
      /// <param name="sdate"></param>
      /// <param name="edate"></param>
      /// <param name="actRate"></param>
      /// <param name="roleRate"></param>
      /// <param name="jobcodes"></param>
      /// <param name="needstudent"></param>
      /// <param name="needatt"></param>
      /// <param name="empcode"></param>
      /// <returns></returns>
      public DataTable GetTeachTimeListData(DateTime sdate, DateTime edate, DataTable actRate, DataTable roleRate, DataTable mixRate, string settingtype, DataTable jobcodes, bool needstudent, bool needatt, string empcode, List<string> filterjob, List<string> filterhosp, List<string> healTeachTimeType, bool showActData, bool showHealthTeach, List<string> dispActList, bool loadFormData, bool withkeyfield = false)
      {
          DataTable dt = new DataTable();
          
          dt.Columns.Add("時數來源");
          dt.Columns.Add("序號");
          dt.Columns.Add("活動名稱");
          dt.Columns.Add("活動類別");
          dt.Columns.Add("起訖時間");
          dt.Columns.Add("身分別");
          dt.Columns.Add("職編");
          dt.Columns.Add("姓名");
          dt.Columns.Add("科別");
          dt.Columns.Add("單位");
          dt.Columns.Add("職稱");
          dt.Columns.Add("學校職稱");
          dt.Columns.Add("總時數");
          dt.Columns.Add("加權後時數");
          if(withkeyfield)
          {
              dt.Columns.Add("acttype");
              dt.Columns.Add("roleid");
          }




          if (!showActData && !showHealthTeach)
          {
              return dt;
          }


          string sql = "";

          if (showActData)
          {

              sql += @"
select cast(c.cls_id as varchar) as acttype,b.roletype as roleid,  '教學活動' as 時數來源,
a.EduStopActScheduleID as 序號 ,a.ActName as 活動名稱,
convert(varchar(20), b.TimeFrom, 120)+' ~ '+convert(varchar(10), b.TimeTo,108) as 起訖時間,
e.[Name] as 身分別,
d.empname as 姓名 ,d.empcode as 職編, d.deptname as 科別, dd.deptname as 單位 ,f.job_name as 職稱,sj.job_name as 學校職稱,
datediff(minute,cast(b.TimeFrom as datetime) + cast(b.TimeFrom as time),cast(b.TimeFrom as datetime) + cast(b.TimeTo as time))/60.0
as 總時數,
datediff(minute,cast(b.TimeFrom as datetime) + cast(b.TimeFrom as time),cast(b.TimeFrom as datetime) + cast(b.TimeTo as time))/60.0
*
case ";

              string roletypes = "";
              string clsids = "";
              string typesql = "";

              if (mixRate.Rows.Count == 0)
              {



                  //身分權重
                  foreach (DataRow dr in roleRate.Rows)
                  {
                      roletypes += "'" + dr["roletype"].ToString() + "',";
                      sql += @"
when b.roletype = '" + dr["roletype"].ToString() + @"' then " + Convert.ToDouble(dr["rolerate1"]) / Convert.ToDouble(dr["rolerate2"]) + @"
";
                  }

                  sql += @"
end
*
case ";

                  //課程權重

                  using (EduActivityContext context = new EduActivityContext())
                  {
                      for (int i = actRate.Rows.Count - 1; i >= 0; i--)
                      {
                          List<int?> acts = context.Fn_GetChildActType(Convert.ToInt32(actRate.Rows[i]["acttype"].ToString())).Select(c => c.CLS_ID).ToList();
                          string actstr = "";
                          foreach (int? a in acts)
                          {
                              if (actstr != "")
                              {
                                  actstr += ",";
                              }

                              actstr += a.Value.ToString();
                          }

                          if (typesql != "")
                          {
                              typesql += ",";
                          }
                          typesql += actstr;

                          sql += @"
when c.cls_id in (" + actstr + @")  then " + Convert.ToDouble(actRate.Rows[i]["actrate1"]) / Convert.ToDouble(actRate.Rows[i]["actrate2"]) + @"
";

                      }
                  }

              }
              else
              {
                  foreach (DataRow dr in mixRate.Rows)
                  {


                      sql += @"
when b.roletype = '" + dr["roletype"].ToString() + @"' and c.cls_id = " + dr["acttype"].ToString() + @" then " + Convert.ToDouble(dr["mixrate1"]) / Convert.ToDouble(dr["mixrate2"]) + @"
";
                      if (dr["unit"].ToString() == "times")
                      {
                          //sql += "*datediff( hour,a.timefrom,a.timeto) ";
                          //sql += "/(datediff(minute,cast(b.TimeFrom as datetime) + cast(b.TimeFrom as time),cast(b.TimeFrom as datetime) + cast(b.TimeTo as time))/60.0)";

                          sql += @"* (case when datediff(minute,cast(b.TimeFrom as datetime) + cast(b.TimeFrom as time),cast(b.TimeFrom as datetime) + cast(b.TimeTo as time)) = 0
                                    then 0
                                    else (1/(datediff(minute,cast(b.TimeFrom as datetime) + cast(b.TimeFrom as time),cast(b.TimeFrom as datetime) + cast(b.TimeTo as time))/60.0))
                                    end)
                              "

                              ;

                      }

                      roletypes += "'" + dr["roletype"].ToString() + "',";
                      if (typesql != "")
                      {
                          typesql += ",";
                      }
                      typesql += dr["acttype"].ToString();
                  }
              }

              sql += @"
end 
as 加權後時數
from EduStopActSchedule a 
left join EduActTarget b on a.EduStopActScheduleID = b.EduStopActScheduleID and b.targettype = 'EmpCode'
--left join eduacttyperef re on a.EduStopActScheduleID = re.EduStopActScheduleID 
--left join EduActType c on re.CLS_ID = c.CLS_ID
left join EduActType c on a.acttype = cast(c.CLS_ID as varchar)
left join v_coderef e on b.RoleType = e.Code and e.CodeType = 'EduAct_ActRoleType'
inner join V_KmuEmp d on b.TargetID = d.empcode or b.TargetID = d.empcode7
left join v_kmujob f on d.jobcode = f.job_code_x
left join v_departments dd on d.loccode = dd.deptcode and d.hospcode = dd.hospcode
left join v_kmujob sj on d.SCHL_JOB = sj.job_code_x
where 
";

              if (clsids.Length > 0)
              {
                  clsids = clsids.Substring(0, clsids.Length - 1);
              }

              if (roletypes.Length > 0)
              {
                  roletypes = roletypes.Substring(0, roletypes.Length - 1);
              }





              sql += @"
          c.cls_id in (" + typesql + @") and b.roletype in (" + roletypes + @") and 
";
              sql += @"
a.TimeFrom >='" + sdate.ToString("yyyy/MM/dd") + @"' and a.TimeFrom <'" + edate.ToString("yyyy/MM/dd") + @"'
";
              if (needatt)
              {
                  sql += @"
and (exists (select 1 from EduStopActAttachment where EduStopActScheduleID = a.EduStopActScheduleID ) or exists (select 1 from recordeduactref where EduStopActScheduleID = a.EduStopActScheduleID ))
";
              }
              //出席人
              if (needstudent)
              {

                  if (jobcodes != null && jobcodes.Rows.Count > 0)
                  {
                      string jobstr = "";
                      foreach (DataRow dr in jobcodes.Rows)
                      {
                          jobstr += "'" + dr["JOB_CODE_X"].ToString().Trim() + "',";
                      }
                      if (jobstr != "")
                      {
                          jobstr = jobstr.Substring(0, jobstr.Length - 1);
                      }
                      sql += @"
and (exists (select 1 from eduacttarget ee where ee.EduStopActScheduleID = a.edustopactscheduleID and targetjob in (" + jobstr + @"))  or a.hasoutsidestudent = 1)
";
                  }
                  else
                  {
                      sql += @"
and (exists (select 1 from eduacttarget ee where ee.EduStopActScheduleID = a.edustopactscheduleID) or a.hasoutsidestudent = 1)
";
                  }
              }

              //略過活動類別
              if (dispActList != null && dispActList.Count > 0)
              {
                  string dispactstr = "";
                  foreach (string id in dispActList)
                  {
                      dispactstr += "'" + id + "',";
                  }
                  if (dispactstr != "")
                  {
                      dispactstr = dispactstr.Substring(0, dispactstr.Length - 1);
                  }

                  sql += @"
 and (c.cls_id not in (" + dispactstr + @")) 
";
              }

              //指定職稱
              if (filterjob != null && filterjob.Count > 0)
              {
                  string jobstr = "";
                  foreach (string job in filterjob)
                  {
                      jobstr += "'" + job + "',";
                  }
                  if (jobstr != "")
                  {
                      jobstr = jobstr.Substring(0, jobstr.Length - 1);
                  }

                  sql += @"
 and (d.jobcode in (" + jobstr + @")) 
";
              }
              //指定院區
              if (filterhosp != null && filterhosp.Count > 0)
              {
                  string hospstr = "";
                  foreach (string hosp in filterhosp)
                  {
                      hospstr += "'" + hosp + "',";
                  }
                  if (hospstr != "")
                  {
                      hospstr = hospstr.Substring(0, hospstr.Length - 1);
                  }

                  sql += @"
 and (d.hospcode in (" + hospstr + @")) 
";
              }


              //指定員工
              if (empcode != null && empcode.Trim() != "")
              {
                  string empcodes = "";
                  foreach (string emp in empcode.Split(','))
                  {
                      empcodes += "'" + emp + "',";
                  }
                  if (empcodes != "")
                  {
                      empcodes = empcodes.Substring(0, empcodes.Length - 1);
                  }

                  sql += @"
and ((d.empcode in (" + empcodes + @")) )
";
              }

              sql += @"
and (
(select count(*) from TeachTimeRate where settingtype = '" + settingtype + @"' and CodeType = 'targetactrole')=0 
or  
(b.roletype in (select settingcode from TeachTimeRate where settingtype = '" + settingtype + @"' and CodeType = 'targetactrole' and RefID = c.cls_id) )
) 

";
              if (loadFormData)
              {

                  sql += "union all";

                  sql += @"
select '' as acttype,'' as roleid,'mini-CEX、CbD、DOPS' as 時數來源,cast(instance_id as varchar) as 序號, a.instance_name as 活動名稱,
convert(varchar(10), a.instance_alter_datetime,111) as 起訖時間,
'' as 身分別,
c.empname as 姓名, c.EmpCode as 職編,c.deptname as 科別,dd.deptname as 單位 , d.JOB_NAME as 職稱, sj.job_name as 學校職稱, 0.25 as 總時數, 0.25 as 加權後時數 
from dbo.FORM_INSTANCES a 
inner join V_KmuEmp c on a.targetid = c.empcode
left join v_kmujob d on c.jobcode = d.JOB_CODE_X
left join v_departments dd on c.loccode = dd.deptcode and c.hospcode = dd.hospcode
left join v_kmujob sj on c.SCHL_JOB = sj.job_code_x
";

                  sql += @"
where a.instance_create_datetime >='" + sdate.ToString("yyyy/MM/dd") + @"' and a.instance_create_datetime <'" + edate.ToString("yyyy/MM/dd") + @"' and a.status<>'0' and a.template_id in (" + TeachTimeGetFormStr + @")
";

                  //指定職稱
                  if (filterjob != null && filterjob.Count > 0)
                  {
                      string jobstr = "";
                      foreach (string job in filterjob)
                      {
                          jobstr += "'" + job + "',";
                      }
                      if (jobstr != "")
                      {
                          jobstr = jobstr.Substring(0, jobstr.Length - 1);
                      }

                      sql += @"
 and (c.jobcode in (" + jobstr + @")) 
";
                  }

                  //指定院區
                  if (filterhosp != null && filterhosp.Count > 0)
                  {
                      string hospstr = "";
                      foreach (string hosp in filterhosp)
                      {
                          hospstr += "'" + hosp + "',";
                      }
                      if (hospstr != "")
                      {
                          hospstr = hospstr.Substring(0, hospstr.Length - 1);
                      }

                      sql += @"
 and (c.hospcode in (" + hospstr + @")) 
";
                  }

                  //指定員工
                  if (empcode != null && empcode.Trim() != "")
                  {
                      string empcodes = "";
                      foreach (string emp in empcode.Split(','))
                      {
                          empcodes += "'" + emp + "',";
                      }
                      if (empcodes != "")
                      {
                          empcodes = empcodes.Substring(0, empcodes.Length - 1);
                      }

                      sql += @"
and ((c.empcode in (" + empcodes + @"))  )
";
                  }
              }

          }

          if(showActData&& showHealthTeach)
          {
              sql += "union all";
          }

          if (showHealthTeach)
          {

              sql += @"
select '' as acttype,'' as roleid,'醫療與教學並行' as 時數來源,cast(ID as varchar) as 序號, b.[Name] as 活動名稱,
convert(varchar(10), datadate,111) as 起訖時間,
bb.name as 身分別,
c.empname as 姓名, a.EmpCode as 職編,c.deptname as 科別,dd.deptname as 單位 , d.JOB_NAME as 職稱, sj.job_name as 學校職稱, a.TeachTime as 總時數, a.TeachTime*isnull(e.rate1,0)/isnull(e.rate2,1) as 加權後時數 from v_HealTeachTime a 
inner join V_KmuEmp c on a.EmpCode = c.empcode
left join v_CodeRef b on a.ActType = b.Code and b.CodeType = 'EduAct_HealTeachTimeActType'
left join v_coderef bb on a.targettype = bb.code and bb.codetype = 'EduAct_HealTeachTimeTargetType'
left join v_kmujob d on c.jobcode = d.JOB_CODE_X
left join HealTeachTimeRate e on a.acttype = e.acttype
left join v_departments dd on c.loccode = dd.deptcode and c.hospcode = dd.hospcode
left join v_kmujob sj on c.SCHL_JOB = sj.job_code_x
";



              sql += @"
where a.DataDate >='" + sdate.ToString("yyyy/MM/dd") + @"' and a.DataDate <'" + edate.ToString("yyyy/MM/dd") + @"'
";

              //指定職稱
              if (filterjob != null && filterjob.Count > 0)
              {
                  string jobstr = "";
                  foreach (string job in filterjob)
                  {
                      jobstr += "'" + job + "',";
                  }
                  if (jobstr != "")
                  {
                      jobstr = jobstr.Substring(0, jobstr.Length - 1);
                  }

                  sql += @"
 and (c.jobcode in (" + jobstr + @")) 
";
              }

              //指定院區
              if (filterhosp != null && filterhosp.Count > 0)
              {
                  string hospstr = "";
                  foreach (string hosp in filterhosp)
                  {
                      hospstr += "'" + hosp + "',";
                  }
                  if (hospstr != "")
                  {
                      hospstr = hospstr.Substring(0, hospstr.Length - 1);
                  }

                  sql += @"
 and (c.hospcode in (" + hospstr + @")) 
";
              }

              if (healTeachTimeType != null)
              {
                  if (healTeachTimeType.Count() > 0)
                  {
                      string httimetypestr = "";
                      foreach (string ht in healTeachTimeType)
                      {
                          httimetypestr += "'" + ht + "',";
                      }

                      if (httimetypestr != "")
                      {
                          httimetypestr = httimetypestr.Substring(0, httimetypestr.Length - 1);
                      }

                      sql += @"
 and (a.targettype in (" + httimetypestr + @"))
";
                  }
                  else
                  {
                      sql += @"
 and (a.targettype in (''))
";
                  }
              }

              //指定員工
              if (empcode != null && empcode.Trim() != "")
              {
                  string empcodes = "";
                  foreach (string emp in empcode.Split(','))
                  {
                      empcodes += "'" + emp + "',";
                  }
                  if (empcodes != "")
                  {
                      empcodes = empcodes.Substring(0, empcodes.Length - 1);
                  }

                  sql += @"
and ((c.empcode in (" + empcodes + @")) )
";
              }
          }
              sql += @"
order by 職編
";


              using (EduActivityContext context = new EduActivityContext())
              {
                  try
                  {
                      IEnumerable<TeachTimeListData> list = context.ExecuteQuery<TeachTimeListData>(sql);


                      foreach (TeachTimeListData data in list)
                      {
                          DataRow dr = dt.NewRow();
                          dr["時數來源"] = data.時數來源;
                          dr["序號"] = data.序號;
                          dr["姓名"] = data.姓名;
                          dr["科別"] = data.科別;
                          dr["單位"] = data.單位;
                          dr["職稱"] = data.職稱;
                          dr["學校職稱"] = data.學校職稱;
                          dr["總時數"] = data.總時數;
                          dr["加權後時數"] = data.加權後時數;
                          dr["職編"] = data.職編;
                          dr["活動名稱"] = data.活動名稱;
                          dr["活動類別"] = GetEduStopActTypeStr(data.序號);
                          dr["起訖時間"] = data.起訖時間;
                          dr["身分別"] = data.身分別;
                          if(withkeyfield)
                          {
                              dr["acttype"] = data.acttype;
                              dr["roleid"] = data.roleid;
                          }
                          dt.Rows.Add(dr);
                      }
                  }
                  catch (Exception ex)
                  {

                  }
              }
          


          return dt;
      }


      /// <summary>
      /// 加總時數
      /// </summary>
      /// <param name="sdate"></param>
      /// <param name="edate"></param>
      /// <param name="actRate"></param>
      /// <param name="roleRate"></param>
      /// <param name="jobcodes"></param>
      /// <param name="needstudent"></param>
      /// <param name="needatt"></param>
      /// <param name="empcode"></param>
      /// <returns></returns>
      public DataTable GetTeachTimeSumData(DateTime sdate, DateTime edate, DataTable actRate, DataTable roleRate, DataTable mixRate,string settingtype, DataTable jobcodes, bool needstudent, bool needatt, string empcode, List<string> filterjob, List<string> filterhosp, List<string> healTeachTimeType, bool showActData,bool showHealthTeach, bool loadFormData)
      {
          DataTable dt = new DataTable();
          dt.Columns.Add("時數來源");
          dt.Columns.Add("職編");
          dt.Columns.Add("姓名");
          dt.Columns.Add("科別");
          dt.Columns.Add("單位");
          dt.Columns.Add("職稱");
          dt.Columns.Add("學校職稱");
          dt.Columns.Add("總時數");
          dt.Columns.Add("加權後時數");


          if (!showActData && !showHealthTeach)
          {
              return dt;
          }

          string sql = "";


          if (showActData)
          {
              sql += @" select '教學活動' as 時數來源,
d.empname as 姓名 ,d.empcode as 職編, d.deptname as 科別, dd.deptname as 單位 ,f.job_name as 職稱,sj.job_name as 學校職稱,
sum(
datediff(minute,cast(b.TimeFrom as datetime) + cast(b.TimeFrom as time),cast(b.TimeFrom as datetime) + cast(b.TimeTo as time))/60.0
)
as 總時數,
sum(
datediff(minute,cast(b.TimeFrom as datetime) + cast(b.TimeFrom as time),cast(b.TimeFrom as datetime) + cast(b.TimeTo as time))/60.0
*
case ";
              string roletypes = "";
              string clsids = "";
              string typesql = "";

              if (mixRate.Rows.Count == 0)
              {

                  //身分權重
                  foreach (DataRow dr in roleRate.Rows)
                  {
                      roletypes += "'" + dr["roletype"].ToString() + "',";
                      sql += @"
when b.roletype = '" + dr["roletype"].ToString() + @"' then " + Convert.ToDouble(dr["rolerate1"]) / Convert.ToDouble(dr["rolerate2"]) + @"
";
                  }

                  sql += @"
end
*
case ";

                  //課程權重


                  using (EduActivityContext context = new EduActivityContext())
                  {
                      for (int i = actRate.Rows.Count - 1; i >= 0; i--)
                      {
                          List<int?> acts = context.Fn_GetChildActType(Convert.ToInt32(actRate.Rows[i]["acttype"].ToString())).Select(c => c.CLS_ID).ToList();
                          string actstr = "";
                          foreach (int? a in acts)
                          {
                              if (actstr != "")
                              {
                                  actstr += ",";
                              }

                              actstr += a.Value.ToString();
                          }

                          if (typesql != "")
                          {
                              typesql += ",";
                          }
                          typesql += actstr;

                          sql += @"
when c.cls_id in (" + actstr + @")  then " + Convert.ToDouble(actRate.Rows[i]["actrate1"]) / Convert.ToDouble(actRate.Rows[i]["actrate2"]) + @"
";

                      }
                  }
              }
              else
              {
                  foreach (DataRow dr in mixRate.Rows)
                  {


                      sql += @"
when b.roletype = '" + dr["roletype"].ToString() + @"' and c.cls_id = " + dr["acttype"].ToString() + @" then " + Convert.ToDouble(dr["mixrate1"]) / Convert.ToDouble(dr["mixrate2"]) + @"
";
                      if (dr["unit"].ToString() == "times")
                      {
                          //sql += "*datediff( hour,a.timefrom,a.timeto) ";
                          //sql += "/(datediff(minute,cast(b.TimeFrom as datetime) + cast(b.TimeFrom as time),cast(b.TimeFrom as datetime) + cast(b.TimeTo as time))/60.0)";
                          sql += @"* (case when datediff(minute,cast(b.TimeFrom as datetime) + cast(b.TimeFrom as time),cast(b.TimeFrom as datetime) + cast(b.TimeTo as time)) = 0
                                    then 0
                                    else (1/(datediff(minute,cast(b.TimeFrom as datetime) + cast(b.TimeFrom as time),cast(b.TimeFrom as datetime) + cast(b.TimeTo as time))/60.0))
                                    end)
                              "

                              ;

                      }

                      roletypes += "'" + dr["roletype"].ToString() + "',";
                      if (typesql != "")
                      {
                          typesql += ",";
                      }
                      typesql += dr["acttype"].ToString();
                  }
              }



              sql += @"
end
)
as 加權後時數
--,a.ActName,c.CLS_NAME,b.TimeFrom,b.TimeTo,e.[Name]
from EduStopActSchedule a 
left join EduActTarget b on a.EduStopActScheduleID = b.EduStopActScheduleID  and b.targettype = 'EmpCode'
--left join eduacttyperef re on a.EduStopActScheduleID = re.EduStopActScheduleID 
--left join EduActType c on re.CLS_ID = c.CLS_ID
left join EduActType c on a.acttype = cast(c.CLS_ID as varchar)
left join v_coderef e on b.RoleType = e.Code and e.CodeType = 'EduAct_ActRoleType'
inner join V_KmuEmp d on b.TargetID = d.empcode or b.TargetID = d.empcode7
left join v_kmujob f on d.jobcode = f.job_code_x
left join v_departments dd on d.loccode = dd.deptcode and d.hospcode = dd.hospcode
left join v_kmujob sj on d.SCHL_JOB = sj.job_code_x
where 
";

              if (clsids.Length > 0)
              {
                  clsids = clsids.Substring(0, clsids.Length - 1);
              }

              if (roletypes.Length > 0)
              {
                  roletypes = roletypes.Substring(0, roletypes.Length - 1);
              }

              sql += @"
          c.cls_id in (" + typesql + @") and b.roletype in (" + roletypes + @") and 
";


              sql += @"
a.TimeFrom >='" + sdate.ToString("yyyy/MM/dd") + @"' and a.TimeFrom <'" + edate.ToString("yyyy/MM/dd") + @"'
";

              if (needatt)
              {
                  sql += @"
and (exists (select 1 from EduStopActAttachment where EduStopActScheduleID = a.EduStopActScheduleID ) or exists (select 1 from recordeduactref where EduStopActScheduleID = a.EduStopActScheduleID ))

";
              }
              //出席人
              if (needstudent)
              {

                  if (jobcodes != null && jobcodes.Rows.Count > 0)
                  {
                      string jobstr = "";
                      foreach (DataRow dr in jobcodes.Rows)
                      {
                          jobstr += "'" + dr["JOB_CODE_X"].ToString() + "',";
                      }
                      if (jobstr != "")
                      {
                          jobstr = jobstr.Substring(0, jobstr.Length - 1);
                      }
                      sql += @"
and (exists (select 1 from eduacttarget ee where ee.EduStopActScheduleID = a.edustopactscheduleID and targetjob in (" + jobstr + @")) or a.hasoutsidestudent = 1)
";
                  }
                  else
                  {
                      sql += @"
and (exists (select 1 from eduacttarget ee where ee.EduStopActScheduleID = a.edustopactscheduleID)  or a.hasoutsidestudent = 1)
";
                  }
              }

              //指定職稱
              if (filterjob != null && filterjob.Count > 0)
              {
                  string jobstr = "";
                  foreach (string job in filterjob)
                  {
                      jobstr += "'" + job + "',";
                  }
                  if (jobstr != "")
                  {
                      jobstr = jobstr.Substring(0, jobstr.Length - 1);
                  }

                  sql += @"
 and (d.jobcode in (" + jobstr + @")) 
";
              }

              //指定院區
              if (filterhosp != null && filterhosp.Count > 0)
              {
                  string hospstr = "";
                  foreach (string hosp in filterhosp)
                  {
                      hospstr += "'" + hosp + "',";
                  }
                  if (hospstr != "")
                  {
                      hospstr = hospstr.Substring(0, hospstr.Length - 1);
                  }

                  sql += @"
 and (d.hospcode in (" + hospstr + @")) 
";
              }

              //指定員工
              if (empcode != null && empcode.Trim() != "")
              {
                  string empcodes = "";
                  foreach (string emp in empcode.Split(','))
                  {
                      empcodes += "'" + emp + "',";
                  }
                  if (empcodes != "")
                  {
                      empcodes = empcodes.Substring(0, empcodes.Length - 1);
                  }

                  sql += @"
and ((d.empcode in (" + empcodes + @")) or (d.empname in (" + empcodes + @")) )
";
              }

              sql += @"
and (
(select count(*) from TeachTimeRate where settingtype = '" + settingtype + @"' and CodeType = 'targetactrole')=0 
or  
(b.roletype in (select settingcode from TeachTimeRate where settingtype = '" + settingtype + @"' and CodeType = 'targetactrole' and RefID = c.cls_id) )
) 

";

              sql += @" and (d.enddate is null or d.enddate >=" + sdate.ToString("yyyy/MM/dd") + ") ";

              sql += @"
group by d.empname,d.empcode, d.deptname,dd.deptname,f.job_name,sj.job_name
";

              if (loadFormData)
              {
                  sql += " union all ";

                  sql += @"
select 'mini-CEX、CbD、DOPS' as 時數來源,c.empname as 姓名,c.empcode as 職編, c.deptname as 科別, dd.deptname as 單位, d.JOB_NAME as 職稱, sj.job_name as 學校職稱, count(a.instance_id)*0.25 as 總時數, count(a.instance_id)*0.25 as 加權後時數 
from form_instances a 
inner join V_KmuEmp c on a.targetid = c.empcode
left join v_kmujob d on c.jobcode = d.JOB_CODE_X
left join v_departments dd on c.loccode = dd.deptcode and c.hospcode = dd.hospcode
left join v_kmujob sj on c.SCHL_JOB = sj.job_code_x
";
                  sql += @"
where a.instance_create_datetime >='" + sdate.ToString("yyyy/MM/dd") + @"' and a.instance_create_datetime <'" + edate.ToString("yyyy/MM/dd") + @"' and a.status<>'0' and a.template_id in (" + TeachTimeGetFormStr + @")
";


                  //指定職稱
                  if (filterjob != null && filterjob.Count > 0)
                  {
                      string jobstr = "";
                      foreach (string job in filterjob)
                      {
                          jobstr += "'" + job + "',";
                      }
                      if (jobstr != "")
                      {
                          jobstr = jobstr.Substring(0, jobstr.Length - 1);
                      }

                      sql += @"
 and (c.jobcode in (" + jobstr + @")) 
";
                  }

                  //指定院區
                  if (filterhosp != null && filterhosp.Count > 0)
                  {
                      string hospstr = "";
                      foreach (string hosp in filterhosp)
                      {
                          hospstr += "'" + hosp + "',";
                      }
                      if (hospstr != "")
                      {
                          hospstr = hospstr.Substring(0, hospstr.Length - 1);
                      }

                      sql += @"
 and (c.hospcode in (" + hospstr + @")) 
";
                  }

                  //指定員工
                  if (empcode != null && empcode.Trim() != "")
                  {
                      string empcodes = "";
                      foreach (string emp in empcode.Split(','))
                      {
                          empcodes += "'" + emp + "',";
                      }
                      if (empcodes != "")
                      {
                          empcodes = empcodes.Substring(0, empcodes.Length - 1);
                      }

                      sql += @"
and ((c.empcode in (" + empcodes + @")) or (c.empname in (" + empcodes + @")) )
";
                  }
                  sql += @" and (c.enddate is null or c.enddate >=" + sdate.ToString("yyyy/MM/dd") + @") ";

                  sql += @"
group by c.EmpCode , c.empname ,c.deptname, dd.deptname , d.JOB_NAME , sj.job_name
";
              }


          }

          if (showActData && showHealthTeach)
          {
              sql += " union all ";
          }

          if (showHealthTeach)
          {
              sql += @"
select '醫療與教學並行' as 時數來源,c.empname as 姓名,a.EmpCode as 職編, c.deptname as 科別, dd.deptname as 單位, d.JOB_NAME as 職稱, sj.job_name as 學校職稱, sum(a.TeachTime) as 總時數, sum(a.TeachTime*isnull(e.rate1,0)/isnull(e.rate2,1)) as 加權後時數 from v_HealTeachTime a 
inner join V_KmuEmp c on a.EmpCode = c.empcode
left join v_CodeRef b on a.ActType = b.Code and b.CodeType = 'EduAct_HealTeachTimeActType'
left join v_kmujob d on c.jobcode = d.JOB_CODE_X
left join HealTeachTimeRate e on a.acttype = e.acttype
left join v_departments dd on c.loccode = dd.deptcode and c.hospcode = dd.hospcode
left join v_kmujob sj on c.SCHL_JOB = sj.job_code_x
";
              sql += @"
where a.DataDate >='" + sdate.ToString("yyyy/MM/dd") + @"' and a.DataDate <'" + edate.ToString("yyyy/MM/dd") + @"'
";
              if (healTeachTimeType != null)
              {
                  if (healTeachTimeType.Count() > 0)
                  {
                      string httimetypestr = "";
                      foreach (string ht in healTeachTimeType)
                      {
                          httimetypestr += "'" + ht + "',";
                      }

                      if (httimetypestr != "")
                      {
                          httimetypestr = httimetypestr.Substring(0, httimetypestr.Length - 1);
                      }

                      sql += @"
 and (a.targettype in (" + httimetypestr + @"))
";
                  }
                  else
                  {
                      sql += @"
 and (a.targettype in (''))
";
                  }
              }


              //指定職稱
              if (filterjob != null && filterjob.Count > 0)
              {
                  string jobstr = "";
                  foreach (string job in filterjob)
                  {
                      jobstr += "'" + job + "',";
                  }
                  if (jobstr != "")
                  {
                      jobstr = jobstr.Substring(0, jobstr.Length - 1);
                  }

                  sql += @"
 and (c.jobcode in (" + jobstr + @")) 
";
              }

              //指定院區
              if (filterhosp != null && filterhosp.Count > 0)
              {
                  string hospstr = "";
                  foreach (string hosp in filterhosp)
                  {
                      hospstr += "'" + hosp + "',";
                  }
                  if (hospstr != "")
                  {
                      hospstr = hospstr.Substring(0, hospstr.Length - 1);
                  }

                  sql += @"
 and (c.hospcode in (" + hospstr + @")) 
";
              }

              //指定員工
              if (empcode != null && empcode.Trim() != "")
              {
                  string empcodes = "";
                  foreach (string emp in empcode.Split(','))
                  {
                      empcodes += "'" + emp + "',";
                  }
                  if (empcodes != "")
                  {
                      empcodes = empcodes.Substring(0, empcodes.Length - 1);
                  }

                  sql += @"
and ((c.empcode in (" + empcodes + @")) or (c.empname in (" + empcodes + @")) )
";
              }
              sql += @" and (c.enddate is null or c.enddate >=" + sdate.ToString("yyyy/MM/dd") + @") ";

              sql += @"
group by a.EmpCode , c.empname ,c.deptname, dd.deptname , d.JOB_NAME , sj.job_name
";

          }

          sql += " order by 職編 ";

          using (EduActivityContext context = new EduActivityContext())
          {
              IEnumerable<TeachTimeSumData> list = context.ExecuteQuery<TeachTimeSumData>(sql);

              foreach (TeachTimeSumData data in list)
              {
                  DataRow dr = dt.NewRow();
                  dr["時數來源"] = data.時數來源;
                  dr["姓名"] = data.姓名;
                  dr["科別"] = data.科別;
                  dr["單位"] = data.單位;
                  dr["職稱"] = data.職稱;
                  dr["學校職稱"] = data.學校職稱;
                  dr["總時數"] = data.總時數;
                  dr["加權後時數"] = data.加權後時數;
                  dr["職編"] = data.職編;
                  dt.Rows.Add(dr);
              }

          }

         
          if (empcode != null && empcode.Trim() != "")
          {
              string nodataempcodes = "";
              foreach (string emp in empcode.Split(','))
              {
                  if (dt.Select("職編='" + emp.Trim() + "'").Length == 0 && dt.Select("姓名='" + emp.Trim() + "'").Length == 0)
                  {
                      nodataempcodes += "'" + emp + "',";
                  }
              }

              if (nodataempcodes != "")
              {
                  nodataempcodes = nodataempcodes.Substring(0, nodataempcodes.Length - 1);
              }
              else
              {
                  nodataempcodes = "''";
              }

              sql = @"
select '無時數資料' as 時數來源,c.empname as 姓名,c.EmpCode as 職編, c.deptname as 科別, dd.deptname as 單位, d.JOB_NAME as 職稱, sj.job_name as 學校職稱, 0 as 總時數, 0 as 加權後時數 from V_KmuEmp c 
left join v_kmujob d on c.jobcode = d.JOB_CODE_X
left join v_departments dd on c.loccode = dd.deptcode and c.hospcode = dd.hospcode
left join v_kmujob sj on c.SCHL_JOB = sj.job_code_x
where ((c.empcode in (" + nodataempcodes + @")) or (c.empname in (" + nodataempcodes + @")) )
";

              //指定院區
              if (filterhosp != null && filterhosp.Count > 0)
              {
                  string hospstr = "";
                  foreach (string hosp in filterhosp)
                  {
                      hospstr += "'" + hosp + "',";
                  }
                  if (hospstr != "")
                  {
                      hospstr = hospstr.Substring(0, hospstr.Length - 1);
                  }

                  sql += @"
 and (c.hospcode in (" + hospstr + @")) 
";
              }

              using (EduActivityContext context = new EduActivityContext())
              {
                  IEnumerable<TeachTimeSumData> list = context.ExecuteQuery<TeachTimeSumData>(sql);

                  foreach (TeachTimeSumData data in list)
                  {
                      DataRow dr = dt.NewRow();
                      dr["時數來源"] = data.時數來源;
                      dr["姓名"] = data.姓名;
                      dr["科別"] = data.科別;
                      dr["單位"] = data.單位;
                      dr["職稱"] = data.職稱;
                      dr["學校職稱"] = data.學校職稱;
                      dr["總時數"] = data.總時數;
                      dr["加權後時數"] = data.加權後時數;
                      dr["職編"] = data.職編;
                      dt.Rows.Add(dr);
                  }

              }
          }

          //指定職稱
          if (filterjob != null && filterjob.Count > 0)
          {
              string jobstr = "";
              foreach (string job in filterjob)
              {
                  jobstr += "'" + job + "',";
              }
              if (jobstr != "")
              {
                  jobstr = jobstr.Substring(0, jobstr.Length - 1);
              }


              sql = @"
select '無時數資料' as 時數來源,c.empname as 姓名,c.EmpCode as 職編, c.deptname as 科別, dd.deptname as 單位, d.JOB_NAME as 職稱, sj.job_name as 學校職稱, 0 as 總時數, 0 as 加權後時數 from V_KmuEmp c 
left join v_kmujob d on c.jobcode = d.JOB_CODE_X
left join v_departments dd on c.loccode = dd.deptcode and c.hospcode = dd.hospcode
left join v_kmujob sj on c.SCHL_JOB = sj.job_code_x
where (c.jobcode in (" + jobstr + @")) and c.enddate is null
";

              //指定院區
              if (filterhosp != null && filterhosp.Count > 0)
              {
                  string hospstr = "";
                  foreach (string hosp in filterhosp)
                  {
                      hospstr += "'" + hosp + "',";
                  }
                  if (hospstr != "")
                  {
                      hospstr = hospstr.Substring(0, hospstr.Length - 1);
                  }

                  sql += @"
 and (c.hospcode in (" + hospstr + @")) 
";
              }

              using (EduActivityContext context = new EduActivityContext())
              {
                  IEnumerable<TeachTimeSumData> list = context.ExecuteQuery<TeachTimeSumData>(sql);

                  foreach (TeachTimeSumData data in list)
                  {
                      if (dt.Select("職編='" + data.職編 + "'").Length == 0)
                      {
                          DataRow dr = dt.NewRow();
                          dr["時數來源"] = data.時數來源;
                          dr["姓名"] = data.姓名;
                          dr["科別"] = data.科別;
                          dr["單位"] = data.單位;
                          dr["職稱"] = data.職稱;
                          dr["學校職稱"] = data.學校職稱;
                          dr["總時數"] = data.總時數;
                          dr["加權後時數"] = data.加權後時數;
                          dr["職編"] = data.職編;
                          dt.Rows.Add(dr);
                      }
                  }

              }
          }







          return dt;
      }

      /// <summary>
      /// 加總時數
      /// </summary>
      /// <param name="sdate"></param>
      /// <param name="edate"></param>
      /// <param name="actRate"></param>
      /// <param name="roleRate"></param>
      /// <param name="jobcodes"></param>
      /// <param name="needstudent"></param>
      /// <param name="needatt"></param>
      /// <param name="empcode"></param>
      /// <returns></returns>
      public DataTable GetTeachTimePersonalSumData(DateTime sdate, DateTime edate, DataTable actRate, DataTable roleRate, DataTable mixRate,string settingtype, DataTable jobcodes, bool needstudent, bool needatt, string empcode, List<string> filterjob, List<string> filterhosp, List<string> healTeachTimeType, bool showActData,bool showHealthTeach, bool loadFormData)
      {
          DataTable dt = new DataTable();
          dt.Columns.Add("時數來源");
          dt.Columns.Add("職編");
          dt.Columns.Add("姓名");
          dt.Columns.Add("科別");
          dt.Columns.Add("單位");
          dt.Columns.Add("職稱");
          dt.Columns.Add("學校職稱");
          dt.Columns.Add("總時數");
          dt.Columns.Add("加權後時數");

          if (!showActData && !showHealthTeach)
          {
              return dt;
          }


          string sql = "";

          if (showActData)
          {

              sql += @"select '教學活動' as 時數來源,
d.empname as 姓名 ,d.empcode as 職編, d.deptname as 科別, dd.deptname as 單位 ,f.job_name as 職稱,sj.job_name as 學校職稱,
sum(
datediff(minute,cast(b.TimeFrom as datetime) + cast(b.TimeFrom as time),cast(b.TimeFrom as datetime) + cast(b.TimeTo as time))/60.0
)
as 總時數,
sum(
datediff(minute,cast(b.TimeFrom as datetime) + cast(b.TimeFrom as time),cast(b.TimeFrom as datetime) + cast(b.TimeTo as time))/60.0
*
case ";
              string roletypes = "";
              string clsids = "";
              string typesql = "";

              if (mixRate.Rows.Count == 0)
              {

                  //身分權重
                  foreach (DataRow dr in roleRate.Rows)
                  {
                      roletypes += "'" + dr["roletype"].ToString() + "',";
                      sql += @"
when b.roletype = '" + dr["roletype"].ToString() + @"' then " + Convert.ToDouble(dr["rolerate1"]) / Convert.ToDouble(dr["rolerate2"]) + @"
";
                  }

                  sql += @"
end
*
case ";

                  //課程權重


                  using (EduActivityContext context = new EduActivityContext())
                  {
                      for (int i = actRate.Rows.Count - 1; i >= 0; i--)
                      {
                          List<int?> acts = context.Fn_GetChildActType(Convert.ToInt32(actRate.Rows[i]["acttype"].ToString())).Select(c => c.CLS_ID).ToList();
                          string actstr = "";
                          foreach (int? a in acts)
                          {
                              if (actstr != "")
                              {
                                  actstr += ",";
                              }

                              actstr += a.Value.ToString();
                          }

                          if (typesql != "")
                          {
                              typesql += ",";
                          }
                          typesql += actstr;

                          sql += @"
when c.cls_id in (" + actstr + @")  then " + Convert.ToDouble(actRate.Rows[i]["actrate1"]) / Convert.ToDouble(actRate.Rows[i]["actrate2"]) + @"
";

                      }
                  }
              }
              else
              {
                  foreach (DataRow dr in mixRate.Rows)
                  {


                      sql += @"
when b.roletype = '" + dr["roletype"].ToString() + @"' and c.cls_id = " + dr["acttype"].ToString() + @" then " + Convert.ToDouble(dr["mixrate1"]) / Convert.ToDouble(dr["mixrate2"]) + @"
";
                      if (dr["unit"].ToString() == "times")
                      {
                          //sql += "*datediff( hour,a.timefrom,a.timeto) ";
                          //sql += "/(datediff(minute,cast(b.TimeFrom as datetime) + cast(b.TimeFrom as time),cast(b.TimeFrom as datetime) + cast(b.TimeTo as time))/60.0)";
                          sql += @"* (case when datediff(minute,cast(b.TimeFrom as datetime) + cast(b.TimeFrom as time),cast(b.TimeFrom as datetime) + cast(b.TimeTo as time)) = 0
                                    then 0
                                    else (1/(datediff(minute,cast(b.TimeFrom as datetime) + cast(b.TimeFrom as time),cast(b.TimeFrom as datetime) + cast(b.TimeTo as time))/60.0))
                                    end)
                              "

    ;

                      }

                      roletypes += "'" + dr["roletype"].ToString() + "',";
                      if (typesql != "")
                      {
                          typesql += ",";
                      }
                      typesql += dr["acttype"].ToString();
                  }
              }


              sql += @"
end
)
as 加權後時數
--,a.ActName,c.CLS_NAME,b.TimeFrom,b.TimeTo,e.[Name]
from EduStopActSchedule a 
left join EduActTarget b on a.EduStopActScheduleID = b.EduStopActScheduleID  and b.targettype = 'EmpCode'
--left join eduacttyperef re on a.EduStopActScheduleID = re.EduStopActScheduleID 
--left join EduActType c on re.CLS_ID = c.CLS_ID
left join EduActType c on a.acttype = cast(c.CLS_ID as varchar)
left join v_coderef e on b.RoleType = e.Code and e.CodeType = 'EduAct_ActRoleType'
inner join V_KmuEmp d on b.TargetID = d.empcode or b.TargetID = d.empcode7
left join v_kmujob f on d.jobcode = f.job_code_x
left join v_departments dd on d.loccode = dd.deptcode and d.hospcode = dd.hospcode
left join v_kmujob sj on d.SCHL_JOB = sj.job_code_x
where 
";

              if (clsids.Length > 0)
              {
                  clsids = clsids.Substring(0, clsids.Length - 1);
              }

              if (roletypes.Length > 0)
              {
                  roletypes = roletypes.Substring(0, roletypes.Length - 1);
              }

              sql += @"
          c.cls_id in (" + typesql + @") and b.roletype in (" + roletypes + @") and 
";


              sql += @"
a.TimeFrom >='" + sdate.ToString("yyyy/MM/dd") + @"' and a.TimeFrom <'" + edate.ToString("yyyy/MM/dd") + @"'
";

              if (needatt)
              {
                  sql += @"
and (exists (select 1 from EduStopActAttachment where EduStopActScheduleID = a.EduStopActScheduleID ) or exists (select 1 from recordeduactref where EduStopActScheduleID = a.EduStopActScheduleID ))
";
              }
              //出席人
              if (needstudent)
              {

                  if (jobcodes != null && jobcodes.Rows.Count > 0)
                  {
                      string jobstr = "";
                      foreach (DataRow dr in jobcodes.Rows)
                      {
                          jobstr += "'" + dr["JOB_CODE_X"].ToString() + "',";
                      }
                      if (jobstr != "")
                      {
                          jobstr = jobstr.Substring(0, jobstr.Length - 1);
                      }
                      sql += @"
and (exists (select 1 from eduacttarget ee where ee.EduStopActScheduleID = a.edustopactscheduleID and targetjob in (" + jobstr + @")) or a.hasoutsidestudent = 1)
";
                  }
                  else
                  {
                      sql += @"
and (exists (select 1 from eduacttarget ee where ee.EduStopActScheduleID = a.edustopactscheduleID)  or a.hasoutsidestudent = 1)
";
                  }
              }

              //指定職稱
              if (filterjob != null && filterjob.Count > 0)
              {
                  string jobstr = "";
                  foreach (string job in filterjob)
                  {
                      jobstr += "'" + job + "',";
                  }
                  if (jobstr != "")
                  {
                      jobstr = jobstr.Substring(0, jobstr.Length - 1);
                  }

                  sql += @"
 and (d.jobcode in (" + jobstr + @")) 
";
              }

              //指定院區
              if (filterhosp != null && filterhosp.Count > 0)
              {
                  string hospstr = "";
                  foreach (string hosp in filterhosp)
                  {
                      hospstr += "'" + hosp + "',";
                  }
                  if (hospstr != "")
                  {
                      hospstr = hospstr.Substring(0, hospstr.Length - 1);
                  }

                  sql += @"
 and (d.hospcode in (" + hospstr + @")) 
";
              }

              //指定員工
              if (empcode != null && empcode.Trim() != "")
              {
                  string empcodes = "";
                  foreach (string emp in empcode.Split(','))
                  {
                      empcodes += "'" + emp + "',";
                  }
                  if (empcodes != "")
                  {
                      empcodes = empcodes.Substring(0, empcodes.Length - 1);
                  }

                  sql += @"
and ((d.empcode in (" + empcodes + @")) or (d.empname in (" + empcodes + @")) )
";
              }

              sql += @"
and (
(select count(*) from TeachTimeRate where settingtype = '" + settingtype + @"' and CodeType = 'targetactrole')=0 
or  
(b.roletype in (select settingcode from TeachTimeRate where settingtype = '" + settingtype + @"' and CodeType = 'targetactrole' and RefID = c.cls_id) )
) 
and (d.enddate is null or d.enddate >=" + sdate.ToString("yyyy/MM/dd") + @")
";


              sql += @"
group by d.empname,d.empcode, d.deptname,dd.deptname,f.job_name,sj.job_name
";
              if (loadFormData)
              {
                  sql += " union all ";


                  sql += @"
select 'mini-CEX、CbD、DOPS' as 時數來源,c.empname as 姓名,c.EmpCode as 職編, c.deptname as 科別, dd.deptname as 單位, d.JOB_NAME as 職稱, sj.job_name as 學校職稱, count(a.instance_id)*0.25 as 總時數, count(a.instance_id)*0.25 as 加權後時數 
from form_instances a 
inner join V_KmuEmp c on a.targetid = c.empcode
left join v_kmujob d on c.jobcode = d.JOB_CODE_X
left join v_departments dd on c.loccode = dd.deptcode and c.hospcode = dd.hospcode
left join v_kmujob sj on c.SCHL_JOB = sj.job_code_x
";
                  sql += @"
where a.instance_create_datetime >='" + sdate.ToString("yyyy/MM/dd") + @"' and a.instance_create_datetime <'" + edate.ToString("yyyy/MM/dd") + @"' and a.status<>'0' and a.template_id in (" + TeachTimeGetFormStr + @")
";

                  //指定職稱
                  if (filterjob != null && filterjob.Count > 0)
                  {
                      string jobstr = "";
                      foreach (string job in filterjob)
                      {
                          jobstr += "'" + job + "',";
                      }
                      if (jobstr != "")
                      {
                          jobstr = jobstr.Substring(0, jobstr.Length - 1);
                      }

                      sql += @"
 and (c.jobcode in (" + jobstr + @")) 
";
                  }

                  //指定院區
                  if (filterhosp != null && filterhosp.Count > 0)
                  {
                      string hospstr = "";
                      foreach (string hosp in filterhosp)
                      {
                          hospstr += "'" + hosp + "',";
                      }
                      if (hospstr != "")
                      {
                          hospstr = hospstr.Substring(0, hospstr.Length - 1);
                      }

                      sql += @"
 and (c.hospcode in (" + hospstr + @")) 
";
                  }

                  //指定員工
                  if (empcode != null && empcode.Trim() != "")
                  {
                      string empcodes = "";
                      foreach (string emp in empcode.Split(','))
                      {
                          empcodes += "'" + emp + "',";
                      }
                      if (empcodes != "")
                      {
                          empcodes = empcodes.Substring(0, empcodes.Length - 1);
                      }

                      sql += @"
and ((c.empcode in (" + empcodes + @")) or (c.empname in (" + empcodes + @")) )
";
                  }

                  sql += @" and (c.enddate is null or c.enddate >=" + sdate.ToString("yyyy/MM/dd") + @") ";

                  sql += @"
group by c.EmpCode , c.empname ,c.deptname,dd.deptname, d.JOB_NAME,sj.job_name

";
              }

          }

          if(showActData&& showHealthTeach)
          {
              sql += " union all ";
          }

          if (showHealthTeach)
          {
              sql += @"
select '醫療與教學並行' as 時數來源,c.empname as 姓名,a.EmpCode as 職編, c.deptname as 科別, dd.deptname as 單位, d.JOB_NAME as 職稱, sj.job_name as 學校職稱, sum(a.TeachTime) as 總時數, sum(a.TeachTime*isnull(e.rate1,0)/isnull(e.rate2,1)) as 加權後時數 from v_HealTeachTime a 
inner join V_KmuEmp c on a.EmpCode = c.empcode
left join v_CodeRef b on a.ActType = b.Code and b.CodeType = 'EduAct_HealTeachTimeActType'
left join v_kmujob d on c.jobcode = d.JOB_CODE_X
left join HealTeachTimeRate e on a.acttype = e.acttype
left join v_departments dd on c.loccode = dd.deptcode and c.hospcode = dd.hospcode
left join v_kmujob sj on c.SCHL_JOB = sj.job_code_x
";
              sql += @"
where a.DataDate >='" + sdate.ToString("yyyy/MM/dd") + @"' and a.DataDate <'" + edate.ToString("yyyy/MM/dd") + @"'
";
              if (healTeachTimeType != null)
              {
                  if (healTeachTimeType.Count() > 0)
                  {
                      string httimetypestr = "";
                      foreach (string ht in healTeachTimeType)
                      {
                          httimetypestr += "'" + ht + "',";
                      }

                      if (httimetypestr != "")
                      {
                          httimetypestr = httimetypestr.Substring(0, httimetypestr.Length - 1);
                      }

                      sql += @"
 and (a.targettype in (" + httimetypestr + @"))
";
                  }
                  else
                  {
                      sql += @"
 and (a.targettype in (''))
";
                  }
              }


              //指定職稱
              if (filterjob != null && filterjob.Count > 0)
              {
                  string jobstr = "";
                  foreach (string job in filterjob)
                  {
                      jobstr += "'" + job + "',";
                  }
                  if (jobstr != "")
                  {
                      jobstr = jobstr.Substring(0, jobstr.Length - 1);
                  }

                  sql += @"
 and (c.jobcode in (" + jobstr + @")) 
";
              }

              //指定院區
              if (filterhosp != null && filterhosp.Count > 0)
              {
                  string hospstr = "";
                  foreach (string hosp in filterhosp)
                  {
                      hospstr += "'" + hosp + "',";
                  }
                  if (hospstr != "")
                  {
                      hospstr = hospstr.Substring(0, hospstr.Length - 1);
                  }

                  sql += @"
 and (c.hospcode in (" + hospstr + @")) 
";
              }

              //指定員工
              if (empcode != null && empcode.Trim() != "")
              {
                  string empcodes = "";
                  foreach (string emp in empcode.Split(','))
                  {
                      empcodes += "'" + emp + "',";
                  }
                  if (empcodes != "")
                  {
                      empcodes = empcodes.Substring(0, empcodes.Length - 1);
                  }

                  sql += @"
and ((c.empcode in (" + empcodes + @")) or (c.empname in (" + empcodes + @")) )
";
              }

              sql += @" and (c.enddate is null or c.enddate >=" + sdate.ToString("yyyy/MM/dd") + @") ";

              sql += @"
group by a.EmpCode , c.empname ,c.deptname,dd.deptname, d.JOB_NAME,sj.job_name

";
          }

          sql += " order by 職編 ";

          using (EduActivityContext context = new EduActivityContext())
          {
              IEnumerable<TeachTimeSumData> list = context.ExecuteQuery<TeachTimeSumData>(sql);

              foreach (TeachTimeSumData data in list)
              {
                  if (dt.Select("職編 = '" + data.職編 + "'").Length == 0)
                  {
                      DataRow dr = dt.NewRow();
                      dr["姓名"] = data.姓名;
                      dr["科別"] = data.科別;
                      dr["單位"] = data.單位;
                      dr["職稱"] = data.職稱;
                      dr["學校職稱"] = data.學校職稱;
                      dr["總時數"] = data.總時數;
                      dr["加權後時數"] = data.加權後時數;
                      dr["職編"] = data.職編;
                      dt.Rows.Add(dr);
                  }
                  else
                  {
                      DataRow dr = dt.Select("職編 = '" + data.職編 + "'")[0];
                      dr["總時數"] = Convert.ToDecimal(dr["總時數"]) + data.總時數;
                      dr["加權後時數"] = Convert.ToDecimal(dr["加權後時數"]) + data.加權後時數;
                  }
              }

          }




          if (empcode != null && empcode.Trim() != "")
          {
              string nodataempcodes = "";
              foreach (string emp in empcode.Split(','))
              {
                  if (dt.Select("職編='" + emp.Trim() + "'").Length == 0 && dt.Select("姓名='" + emp.Trim() + "'").Length == 0)
                  {
                      nodataempcodes += "'" + emp + "',";
                  }
              }

              if (nodataempcodes != "")
              {
                  nodataempcodes = nodataempcodes.Substring(0, nodataempcodes.Length - 1);
              }
              else
              {
                  nodataempcodes = "''";
              }

              sql = @"
select '無時數資料' as 時數來源,c.empname as 姓名,c.EmpCode as 職編, c.deptname as 科別, dd.deptname as 單位, d.JOB_NAME as 職稱, sj.job_name as 學校職稱, 0 as 總時數, 0 as 加權後時數 from V_KmuEmp c 
left join v_kmujob d on c.jobcode = d.JOB_CODE_X
left join v_departments dd on c.loccode = dd.deptcode and c.hospcode = dd.hospcode
left join v_kmujob sj on c.SCHL_JOB = sj.job_code_x
where ((c.empcode in (" + nodataempcodes + @")) or (c.empname in (" + nodataempcodes + @")) )
";

              //指定院區
              if (filterhosp != null && filterhosp.Count > 0)
              {
                  string hospstr = "";
                  foreach (string hosp in filterhosp)
                  {
                      hospstr += "'" + hosp + "',";
                  }
                  if (hospstr != "")
                  {
                      hospstr = hospstr.Substring(0, hospstr.Length - 1);
                  }

                  sql += @"
 and (c.hospcode in (" + hospstr + @")) 
";
              }

              using (EduActivityContext context = new EduActivityContext())
              {
                  IEnumerable<TeachTimeSumData> list = context.ExecuteQuery<TeachTimeSumData>(sql);

                  foreach (TeachTimeSumData data in list)
                  {
                      DataRow dr = dt.NewRow();
                      dr["時數來源"] = data.時數來源;
                      dr["姓名"] = data.姓名;
                      dr["科別"] = data.科別;
                      dr["單位"] = data.單位;
                      dr["職稱"] = data.職稱;
                      dr["學校職稱"] = data.學校職稱;
                      dr["總時數"] = data.總時數;
                      dr["加權後時數"] = data.加權後時數;
                      dr["職編"] = data.職編;
                      dt.Rows.Add(dr);
                  }

              }
          }

          //指定職稱
          if (filterjob != null && filterjob.Count > 0)
          {
              string jobstr = "";
              foreach (string job in filterjob)
              {
                  jobstr += "'" + job + "',";
              }
              if (jobstr != "")
              {
                  jobstr = jobstr.Substring(0, jobstr.Length - 1);
              }


              sql = @"
select '無時數資料' as 時數來源,c.empname as 姓名,c.EmpCode as 職編, c.deptname as 科別, dd.deptname as 單位, d.JOB_NAME as 職稱, sj.job_name as 學校職稱, 0 as 總時數, 0 as 加權後時數 from V_KmuEmp c 
left join v_kmujob d on c.jobcode = d.JOB_CODE_X
left join v_departments dd on c.loccode = dd.deptcode and c.hospcode = dd.hospcode
left join v_kmujob sj on c.SCHL_JOB = sj.job_code_x
where (c.jobcode in (" + jobstr + @")) and c.enddate is null
";

              //指定院區
              if (filterhosp != null && filterhosp.Count > 0)
              {
                  string hospstr = "";
                  foreach (string hosp in filterhosp)
                  {
                      hospstr += "'" + hosp + "',";
                  }
                  if (hospstr != "")
                  {
                      hospstr = hospstr.Substring(0, hospstr.Length - 1);
                  }

                  sql += @"
 and (c.hospcode in (" + hospstr + @")) 
";
              }

              using (EduActivityContext context = new EduActivityContext())
              {
                  IEnumerable<TeachTimeSumData> list = context.ExecuteQuery<TeachTimeSumData>(sql);

                  foreach (TeachTimeSumData data in list)
                  {
                      if (dt.Select("職編='" + data.職編 + "'").Length == 0 )
                      {
                          DataRow dr = dt.NewRow();
                          dr["時數來源"] = data.時數來源;
                          dr["姓名"] = data.姓名;
                          dr["科別"] = data.科別;
                          dr["單位"] = data.單位;
                          dr["職稱"] = data.職稱;
                          dr["學校職稱"] = data.學校職稱;
                          dr["總時數"] = data.總時數;
                          dr["加權後時數"] = data.加權後時數;
                          dr["職編"] = data.職編;
                          dt.Rows.Add(dr);
                      }
                  }

              }
          }


          return dt;
      }

      #region 轉KPI
      public DataSet GetKPIImportData(DataTable teachtimedata)
      {
          try
          {
              DataSet ds = new DataSet();
              using (EduActivityContextService service = new EduActivityContextService())
              {
                  var currentround = service.ReadV_KPIRounds(c => c.HospCode == "KMUH" && c.DateFrom <= DateTime.Now && c.DeadlineStep2 >= DateTime.Now).FirstOrDefault();
                  //var currentround = service.ReadV_KPIRounds(c => c.HospCode == "KMUH" && c.RoundCode == "KMUH-110").FirstOrDefault();
                  if (currentround != null)
                  {
                      var reflist = (from rdto in service.UnitOfWork.TeachTimeKpiRefs
                                     join kpino in service.UnitOfWork.V_KPINorms
                                     on rdto.KPICode equals kpino.NormID
                                     where kpino.RoundCode == currentround.RoundCode
                                     select new { rdto, kpiid = kpino.KPIID, kpicode = kpino.NormID }).ToList();

                      foreach (var refd in reflist)
                      {

                          DataRow[] rows = teachtimedata.Select("acttype='" + refd.rdto.Acttype + "' and roleid ='" + refd.rdto.Roletype + "' ");
                          if (rows.Length > 0)
                          {
                              var extrafield = service.ReadV_KPINormExtraFields(c => c.KPIID == refd.kpiid).OrderBy(c => c.DISPLAYORDER).ToList();

                              DataTable dt = new DataTable(refd.kpicode);
                              bool existsflag = false;
                              if(ds.Tables.Contains(refd.kpicode))
                              {
                                  dt = ds.Tables[refd.kpicode];
                                  existsflag = true;
                              }
                              else
                              {
                                  dt.Columns.Add("指標代碼(請勿更動)");
                                  dt.Columns.Add("得分人員(職編)");
                                  dt.Columns.Add("事件發生日期");
                                  dt.Columns.Add("次數(整數)");

                                  foreach (var ef in extrafield)
                                  {
                                      dt.Columns.Add(ef.FIELDNAME);
                                  }
                                  dt.Columns.Add("描述(最多500字)----本行請勿刪除/*" + refd.kpiid + "*/");
                              }
                              
                              


                              

                              DataRow firstrow = dt.NewRow();
                              firstrow["指標代碼(請勿更動)"] = "KPIID";
                              firstrow["得分人員(職編)"] = "MemberID";
                              firstrow["事件發生日期"] = "OccurDate";
                              firstrow["次數(整數)"] = "EachCount";

                              foreach (var ef in extrafield)
                              {
                                  firstrow[ef.FIELDNAME] = ef.FIELDNAME;
                              }

                              firstrow["描述(最多500字)----本行請勿刪除/*" + refd.kpiid + "*/"] = "Description|----本行請勿刪除/*" + refd.kpiid + "*/";

                              dt.Rows.Add(firstrow);

                              foreach (DataRow dr in rows)
                              {
                                  if (Convert.ToDecimal(dr["加權後時數"].ToString()) > 0)
                                  {
                                      DataRow newdr = dt.NewRow();
                                      newdr["指標代碼(請勿更動)"] = refd.kpiid;
                                      newdr["得分人員(職編)"] = dr["職編"].ToString();
                                      newdr["事件發生日期"] = dr["起訖時間"].ToString().Substring(0, 10);
                                      newdr["次數(整數)"] = Convert.ToDecimal(dr["加權後時數"].ToString()) * refd.rdto.TransRate;

                                      foreach (var ef in extrafield)
                                      {
                                          if (ef.FIELDDISPLAYTEXT.Contains("日期"))
                                          {
                                              newdr[ef.FIELDNAME] = dr["起訖時間"].ToString();
                                          }

                                          if (ef.FIELDDISPLAYTEXT.Contains("名稱"))
                                          {
                                              newdr[ef.FIELDNAME] = dr["活動名稱"].ToString();
                                          }
                                      }

                                      string remark = dr["活動類別"].ToString() + "，" + dr["活動名稱"].ToString() + "，" + dr["起訖時間"].ToString() + "，" + dr["身分別"];

                                      newdr["描述(最多500字)----本行請勿刪除/*" + refd.kpiid + "*/"] = remark;
                                      dt.Rows.Add(newdr);
                                  }
                              }

                              if (!existsflag)
                              {
                                  ds.Tables.Add(dt);
                              }
                          }
                      }
                  }
              }
              return ds;
          }
          catch(Exception ex)
          {
              throw ex;
          }
      }

      #endregion

      #endregion

      #region 醫療教學並行

      public List<HealTeachTimeDto> ReadHealTeachTime(string year, string month,string hospcode, string deptcode)
      {
          List<V_CodeRefDto> acttypes = GetCodeRefs("EduAct_HealTeachTimeActType");
          List<V_CodeRefDto> targettypes = GetCodeRefs("EduAct_HealTeachTimeTargetType");
          
          DateTime thedate = new DateTime(Convert.ToInt32(year), Convert.ToInt32(month), 1);
          DateTime edate = thedate.AddMonths(1);
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<HealTeachTimeDto> list = service.ReadHealTeachTimes(c => c.DeptCode == deptcode && (c.HospCode == hospcode || c.HospCode == null) && c.DataDate >= thedate && c.DataDate < edate).OrderBy(c => c.EmpCode).ToList();

              foreach (HealTeachTimeDto dto in list)
              {
                  SelectVKmuempData emp = ReadVKmuempData(dto.EmpCode);
                  if (emp != null)
                  {
                      dto.EmpName = emp.empname;
                  }

                  V_CodeRefDto acttype = acttypes.Where(c => c.Code == dto.ActType).FirstOrDefault();
                  if (acttype != null)
                  {
                      dto.ActTypeName = acttype.Name + acttype.Des;
                  }

                  V_CodeRefDto targettype = targettypes.Where(c => c.Code == dto.TargetType).FirstOrDefault();
                  if (targettype != null)
                  {
                      dto.TargetTypeName = targettype.Name;
                  }
                  
              }

              return list;
          }
      }

      public string DeleteHealTeachTime(int id)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  service.DeleteHealTeachTimes(service.ReadHealTeachTimes(c => c.ID == id));
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
          return null;
      }

      public string CleanHealTeachTime(string year, string month, string hospcode, string deptcode)
      {
          DateTime thedate = new DateTime(Convert.ToInt32(year), Convert.ToInt32(month), 1);
          DateTime edate = thedate.AddMonths(1);
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  service.DeleteHealTeachTimes(service.ReadHealTeachTimes(c => c.DeptCode == deptcode && c.HospCode == hospcode && c.DataDate >= thedate && c.DataDate < edate));
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
          return null;
      }

      private int getWeekNumInMonth(DateTime daytime)
      {
          int dayInMonth = daytime.Day;
          
          DateTime firstDay = daytime.AddDays(1 - daytime.Day);
          
          int weekday = (int)firstDay.DayOfWeek == 0 ? 7 : (int)firstDay.DayOfWeek;
          
          int firstWeekEndDay = 7 - (weekday - 1);
          
          int diffday = dayInMonth - firstWeekEndDay;
          diffday = diffday > 0 ? diffday : 1;
          
          int WeekNumInMonth = ((diffday % 7) == 0
           ? (diffday / 7 - 1)
           : (diffday / 7)) + 1 + (dayInMonth > firstWeekEndDay ? 1 : 0);
          return WeekNumInMonth;
      }

      public List<string[]> UploadHealTeachTime(DataTable dt, string year, string month,string hospcode, string deptcode, string creater)
      {
          /*
            
門診： 醫科每次最多4小時，一週最多20小時上限；牙科每次最多4小時，一週最多12小時上限(如果無法切科就都已12小時上限)

查房：每日最多2小時，一週12小時上限。

手術：每日最多8小時，每週最多24小時。

檢查診：每次最多4小時，每週最多12小時。

麻醉：每日最多8小時，每週最多24小時。
         
           */
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string[]> result = new List<string[]>();
              try
              {
                  List<string> empcodes = new List<string>();
                  DateTime time = new DateTime(Convert.ToInt32(year), Convert.ToInt32(month), 1);

                  int weekcount = getWeekNumInMonth(time.AddMonths(1).AddDays(-1));
                  List<HealTeachTimeRate> limitdata = service.UnitOfWork.HealTeachTimeRates.ToList();
                  List<string> typelist = limitdata.Select(c => c.ActType).ToList();
                  foreach (DataRow dr in dt.Rows)
                  {
                      if (!empcodes.Contains(dr["員工編號"].ToString().Trim()))
                      {
                          empcodes.Add(dr["員工編號"].ToString().Trim());
                      }
                  }

                  using (EduActivityContext context = new EduActivityContext())
                  {

                      foreach (string empcode in empcodes)
                      {
                          string color = "black";
                          string msg = "已上傳完成";
                          if (context.HealTeachTimes.Count(c => c.EmpCode == empcode && c.DeptCode == deptcode && c.HospCode == hospcode && c.DataDate == time) > 0)
                          {
                              color = "blue";
                              msg = "已覆蓋";
                          }

                          DataRow[] drs = dt.Select("員工編號 = '" + empcode + "'");

                          context.Delete(context.HealTeachTimes.Where(c => c.EmpCode == empcode && c.DeptCode == deptcode && c.HospCode == hospcode && c.DataDate == time));

                          string errormsg = null;
                          List<HealTeachTime> addlist = new List<HealTeachTime>();
                          foreach (DataRow dr in drs)
                          {
                              HealTeachTime data = new HealTeachTime();
                              data.ActType = dr[2].ToString().Trim();
                              data.DataDate = time;
                              data.Creater = creater;
                              data.CreateTime = DateTime.Now;
                              data.DeptCode = deptcode;
                              data.EmpCode = empcode;
                              data.HospCode = hospcode;
                              data.TargetType = dr[1].ToString().Trim();
                              if (dr[3] == DBNull.Value)
                              {
                                  data.TeachTime = 0;
                              }
                              else
                              {
                                  data.TeachTime = Convert.ToDecimal(dr[3]);
                              }
                              if (!typelist.Contains(data.ActType))
                              {
                                  errormsg = "請確認教學活動欄位是否正確";
                                  break;
                              }

                              if (!(new string[] { "0", "1", "2" }).Contains(data.TargetType))
                              {
                                  errormsg = "請確認授課對象欄位是否正確(0,1,2其中一項)";
                                  break;
                              }
                              addlist.Add(data);

                          }

                          List<string> acttypelist = addlist.Select(c => c.ActType).Distinct().ToList();

                          foreach (string actt in acttypelist)
                          {
                              HealTeachTimeRate lim = limitdata.Where(c => c.ActType == actt).FirstOrDefault();
                              if (lim != null && lim.WeekLimit != null)
                              {
                                  decimal limhour = Convert.ToDecimal(lim.WeekLimit.Value * weekcount);
                                  var existsdata = from htt in context.HealTeachTimes
                                                   join dep in context.V_departments
                                                   on new { hosp = htt.HospCode, depcode = htt.DeptCode } equals new { hosp = dep.Hospcode, depcode = dep.Deptcode }
                                                   where htt.EmpCode == empcode && htt.DataDate == time && htt.TeachTime != null && htt.ActType == actt && htt.DeptCode != deptcode
                                                   select new { htt, dep };

                                  decimal existshour = existsdata.Sum(c => c.htt.TeachTime.Value);
                                  if (addlist.Where(c => c.ActType == actt).Sum(c => c.TeachTime) + existshour > limhour)
                                  {
                                      errormsg = "教學活動類別" + actt + "超出每月上限" + limhour.ToString() + "小時";
                                      if (existshour > 0)
                                      {
                                          errormsg += "，已存在時數";
                                      }
                                      string existsliststr = "";
                                      foreach (var edata in existsdata)
                                      {
                                          if (existsliststr != "")
                                          {
                                              existsliststr += "、";
                                          }
                                          else
                                          {
                                              existsliststr += " ";
                                          }
                                          existsliststr += edata.dep.Hospname + " " + edata.dep.Deptname + "：" + edata.htt.TeachTime.Value.ToString() + "小時";
                                      }
                                      errormsg += existsliststr;
                                      break;
                                  }
                              }
                          }

                          foreach (var adto in addlist)
                          {
                              string intsql = @"INSERT INTO www_EduActivity.dbo.HealTeachTime
(EmpCode, DataDate, DeptCode, ActType, TargetType, TeachTime, HospCode, Creater, CreateTime) 
VALUES (@EmpCode, @DataDate, @DeptCode, @ActType, @TargetType, @TeachTime, @HospCode, @Creater, @CreateTime)
                              ";
                              List<SqlParameter> sqlparms = new List<SqlParameter>();
                              sqlparms.Add(new SqlParameter("EmpCode", GetDBObject(adto.EmpCode)));
                              sqlparms.Add(new SqlParameter("DataDate", GetDBObject(adto.DataDate)));
                              sqlparms.Add(new SqlParameter("DeptCode", GetDBObject(adto.DeptCode)));
                              sqlparms.Add(new SqlParameter("ActType", GetDBObject(adto.ActType)));
                              sqlparms.Add(new SqlParameter("TargetType", GetDBObject(adto.TargetType)));
                              sqlparms.Add(new SqlParameter("TeachTime", GetDBObject(adto.TeachTime)));
                              sqlparms.Add(new SqlParameter("HospCode", GetDBObject(adto.HospCode)));
                              sqlparms.Add(new SqlParameter("Creater", GetDBObject(adto.Creater)));
                              sqlparms.Add(new SqlParameter("CreateTime", GetDBObject(adto.CreateTime)));
                              context.ExecuteNonQuery(intsql, sqlparms.ToArray());
                          }


                          //context.Add(addlist);

                          try
                          {
                              if (errormsg != null)
                              {
                                  throw new Exception(errormsg);
                              }

                              context.SaveChanges();
                              msg = "員工編號：" + empcode + msg;
                          }
                          catch (Exception ex)
                          {
                              context.ClearChanges();
                              msg = "員工編號：" + empcode + "上傳失敗" + ex.Message;
                              color = "red";

                          }

                          result.Add(new string[] { msg, color });

                      }
                  }
              }
              catch (Exception ex)
              {
                  result.Clear();
                  result.Add(new string[] { "檔案格式錯誤，請確認第一欄欄位名稱是否與範例相同，檔案中請勿使用excel公式計算數值", "red" });
              }
              return result;
          }
      }

      #endregion

      #region 成績計算設定

      public ScoreSettingDto GetScoreSetting(string settingid)
      {
          ScoreSettingAssembler asm = new ScoreSettingAssembler();
          ScoreSettingJobAssembler jobasm = new ScoreSettingJobAssembler();
          ScoreSettingDetailAssembler detailasm = new ScoreSettingDetailAssembler();
          using (EduActivityContextService service = new EduActivityContextService())
          {
              ScoreSetting set = (from ss in service.UnitOfWork.ScoreSettings
                                  where ss.SettingID == settingid
                                  select ss).FirstOrDefault();

              List<V_CodeRefDto> jobs = GetCodeRefs("EduAct_JobSerial");
              if (set != null)
              {
                  ScoreSettingDto dto = asm.Assemble(set);
                  dto.ScoreSettingDetails = detailasm.Assemble(set.ScoreSettingDetails).ToList();
                  dto.ScoreSettingJobs = jobasm.Assemble(set.ScoreSettingJobs).ToList();

                  foreach (ScoreSettingJobDto job in dto.ScoreSettingJobs)
                  {
                      V_CodeRefDto cref = jobs.Where(c => c.Code == job.JobCode).FirstOrDefault();
                      if (cref != null)
                      {
                          job.JobName = cref.Name;
                      }
                  }

                  return dto;
              }
              else
              {
                  return null;
              }

          }

      }

      public List<ScoreSettingDto> GetScoreSettings(string deptcode, string jobcode)
      {
          List<ScoreSettingDto> list = new List<ScoreSettingDto>();
          ScoreSettingAssembler asm = new ScoreSettingAssembler();
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var datas = from ss in service.UnitOfWork.ScoreSettings
                          join dep in service.UnitOfWork.V_departments
                          on ss.DeptCode equals dep.Deptcode
                          into tempdep
                          from dep in tempdep.DefaultIfEmpty()
                          join ce in service.UnitOfWork.V_KmuEmps
                          on ss.Creater equals ce.Empcode
                          into tempce
                          from ce in tempce.DefaultIfEmpty()
                          join me in service.UnitOfWork.V_KmuEmps
                          on ss.Modifier equals me.Empcode
                          into tempme
                          from me in tempme.DefaultIfEmpty()
                          where dep.Hospcode == "KMUH"
                          && (deptcode == null || deptcode == "" || ss.DeptCode == deptcode)
                          && (jobcode == null || jobcode == "" || ss.ScoreSettingJobs.Count(c => c.JobCode == jobcode) > 0)
                          select new { ss, DeptName = dep.Deptname, CreaterName = ce.Empname, ModifierName = me.Empname };

              foreach (var data in datas)
              {
                  ScoreSettingDto dto = asm.Assemble(data.ss);
                  dto.CreaterName = data.CreaterName;
                  dto.DeptName = data.DeptName;
                  dto.ModifierName = data.ModifierName;
                  list.Add(dto);
              }

          }

          return list;
      }


      public string InsertScoreSetting(ScoreSettingDto scoresetting)
      {
          string msg = null;
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string settingid = GetSerialNo("EduAct_ScoreSettingID");
              scoresetting.SettingID = settingid;
              service.CreateScoreSetting(scoresetting, false);

              foreach (ScoreSettingJobDto dto in scoresetting.ScoreSettingJobs)
              {
                  dto.SettingID = settingid;
                  service.CreateScoreSettingJob(dto, false);
              }

              foreach (ScoreSettingScoreTypeDto dto in scoresetting.ScoreSettingScoreTypes)
              {
                  dto.SettingID = settingid;
                  service.CreateScoreSettingScoreType(dto, false);
              }

              foreach (ScoreSettingDetailDto dto in scoresetting.ScoreSettingDetails)
              {
                  dto.SettingID = settingid;
                  service.CreateScoreSettingDetail(dto, false);
              }

              try
              {
                  service.UnitOfWork.SaveChanges();
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  msg = "儲存失敗：" + ex.Message;
              }
          }
          return msg;
      }

      public string UpdateScoreSetting(ScoreSettingDto scoresetting)
      {
          string msg = null;
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.UpdateScoreSetting(scoresetting, false);
              List<string> jobcodes = scoresetting.ScoreSettingJobs.Select(c => c.JobCode).ToList();

              List<ScoreSettingJob> deljobs = service.UnitOfWork.ScoreSettingJobs.Where(c => c.SettingID == scoresetting.SettingID && !jobcodes.Contains(c.JobCode)).ToList();
              foreach (ScoreSettingJob deljob in deljobs)
              {
                  service.UnitOfWork.Delete(deljob);
              }

              foreach (ScoreSettingJobDto item in scoresetting.ScoreSettingJobs)
              {
                  if (service.UnitOfWork.ScoreSettingJobs.Count(c => c.SettingID == item.SettingID && c.JobCode == item.JobCode) == 0)
                  {
                      service.CreateScoreSettingJob(item, false);
                  }
              }

              List<ScoreSettingDetail> deldets = new List<ScoreSettingDetail>();
              foreach (ScoreSettingDetail det in service.UnitOfWork.ScoreSettingDetails.Where(c => c.SettingID == scoresetting.SettingID))
              {
                  if (scoresetting.ScoreSettingDetails.Count(c => c.SettingID == det.SettingID && det.ValueType == c.ValueType && det.ValueID == c.ValueID) == 0)
                  {
                      deldets.Add(det);
                  }
              }

              foreach (ScoreSettingDetail deldet in deldets)
              {
                  service.UnitOfWork.Delete(deldet);
              }

              foreach (ScoreSettingDetailDto item in scoresetting.ScoreSettingDetails)
              {
                  if (service.UnitOfWork.ScoreSettingDetails.Count(c => c.SettingID == item.SettingID && c.ValueID == item.ValueID && c.ValueType == item.ValueType) == 0)
                  {
                      service.CreateScoreSettingDetail(item, false);
                  }
              }


              service.DeleteScoreSettingScoreTypes(service.ReadScoreSettingScoreTypes(c => c.SettingID == scoresetting.SettingID), false);

              foreach (ScoreSettingScoreTypeDto item in scoresetting.ScoreSettingScoreTypes)
              {
                  item.SettingID = scoresetting.SettingID;
                  service.CreateScoreSettingScoreType(item, false);

              }



              try
              {
                  service.UnitOfWork.SaveChanges();
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  msg = "儲存失敗：" + ex.Message;
              }
          }
          return msg;
      }

      #endregion

      #region 成績計算

      public string SaveScoreInstance(ScoreInstanceDto dto, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              if (dto.InstanceID == "" || dto.InstanceID == null)
              {
                  string instanceid = GetSerialNo("EduAct_ScoreInstanceID");
                  dto.InstanceID = instanceid;
                  dto.Creater = empcode;
                  dto.CreateDate = DateTime.Now;
                  service.CreateScoreInstance(dto, false);
              }
              else
              {
                  dto.Modifier = empcode;
                  dto.ModifyDate = DateTime.Now;
                  service.UpdateScoreInstance(dto, false);

                  service.DeleteScoreInstanceDetails(service.ReadScoreInstanceDetails(c => c.InstanceID == dto.InstanceID), false);
                  foreach (ScoreInstanceDetailDto det in dto.ScoreInstanceDetails)
                  {
                      det.Modifier = empcode;
                      det.ModifyDate = DateTime.Now;
                  }

              }
              foreach (ScoreInstanceDetailDto det in dto.ScoreInstanceDetails)
              {
                  det.InstanceID = dto.InstanceID;
                  service.CreateScoreInstanceDetail(det, false);
              }

              try
              {
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }

      public List<ScoreInstanceDetailDto> CalcScoreInstanceDetail(string settingid, string instanceid, DateTime datasdate, DateTime dataedate)
      {
          List<ScoreInstanceDetailDto> result = new List<ScoreInstanceDetailDto>();

          using (EduActivityContextService service = new EduActivityContextService())
          {
          ScoreInstanceDetailAssembler detasm = new ScoreInstanceDetailAssembler();

          ScoreSetting setting = service.UnitOfWork.ScoreSettings.Where(c => c.SettingID == settingid).FirstOrDefault();

          ScoreInstance instance = null;

          if (instanceid != null)
          {
              instance = service.UnitOfWork.ScoreInstances.Where(c => c.InstanceID == instanceid).FirstOrDefault();
          }
          List<string> jobs = setting.ScoreSettingJobs.Select(c => c.JobCode).ToList();

          List<string> depts = GetChildDepts(setting.DeptCode);
          depts.Add(setting.DeptCode);
          if (setting != null)
          {
              //先取所有人員清單
              var members = (from mrundown in service.UnitOfWork.EduTeamMemberRundowns
                             join mem in service.UnitOfWork.Members on mrundown.MemberID equals mem.MemberID
                             join term in service.UnitOfWork.EduTerms on mrundown.EduTermID equals term.EduTermID
                             join fsetting in service.UnitOfWork.EduFormTemplateLists on term.EduTermID equals fsetting.EduTermID
                             join emp in service.UnitOfWork.V_KmuEmps on mem.IsHospMember equals emp.Empcode
                             join pterm1 in service.UnitOfWork.EduTerms
                             on term.ParentEduTermID equals pterm1.EduTermID
                             into temppterm1
                             from pterm1 in temppterm1.DefaultIfEmpty()
                             join pterm2 in service.UnitOfWork.EduTerms
                             on pterm1.ParentEduTermID equals pterm2.EduTermID
                             into temppterm2
                             from pterm2 in temppterm2.DefaultIfEmpty()
                             where jobs.Contains(term.JobCode)
                             &&
                             (
                             (pterm1 == null && (depts.Contains(term.DepCode) || depts.Contains(term.Department)))
                             || (pterm1 != null && pterm2 == null && ((depts.Contains(term.DepCode) || depts.Contains(term.Department)) && (depts.Contains(pterm1.DepCode) || depts.Contains(pterm1.Department))))
                             || (pterm1 != null && pterm2 != null && ((depts.Contains(term.DepCode) || depts.Contains(term.Department)) && (depts.Contains(pterm2.DepCode) || depts.Contains(pterm2.Department))))
                             || depts.Contains(emp.Deptcode)
                             )
                             && term.DateFrom.Date >= datasdate.Date && term.DateFrom.Date <= dataedate.Date
                             orderby mem.IsHospMember
                             select mem).Distinct().ToList();


              foreach (var member in members)
              {

                  foreach (ScoreSettingDetail det in setting.ScoreSettingDetails.OrderBy(c => c.DisplayOrder))
                  {
                      if (det.ValueType == "自訂分數")
                      {
                          //如果有instanceid
                          if (instance != null)
                          {
                              ScoreInstanceDetail idet = instance.ScoreInstanceDetails.Where(c => c.SettingID == det.SettingID && c.TargetID == member.IsHospMember && c.ValueID == det.ValueID && c.ValueType == det.ValueType).FirstOrDefault();
                              if (idet != null)
                              {
                                  ScoreInstanceDetailDto dto = detasm.Assemble(idet);
                                  dto.ValueName = det.ValueName;
                                  dto.TargetName = member.Name;
                                  result.Add(dto);
                              }
                          }
                          //如果沒有(新的)
                          else
                          {
                              ScoreInstanceDetailDto dto = new ScoreInstanceDetailDto();
                              dto.ScorePercent = det.ScorePercent;
                              dto.SettingID = det.SettingID;
                              dto.TargetID = member.IsHospMember;
                              dto.TargetName = member.Name;
                              dto.ValueID = det.ValueID;
                              dto.ValueName = det.ValueName;
                              dto.ValueType = det.ValueType;
                              result.Add(dto);
                          }
                      }

                      if (det.ValueType == "表單")
                      {
                          //表單不管新舊一律重算
                          int templateid = Convert.ToInt32(det.ValueID);

                          //List<string> terms = members.Where(c => c.mem.IsHospMember == member.IsHospMember).Select(c => c.term.EduTermID).ToList();

                          var finsdata = (from ins in service.UnitOfWork.FORM_INSTANCEs
                                          join eles in service.UnitOfWork.FORM_INSTANCE_ELEMENTs
                                          on ins.INSTANCE_ID equals eles.INSTANCE_ID
                                          join term in service.UnitOfWork.EduTerms
                                          on ins.INHOSPID equals term.EduTermID
                                          where ins.TEMPLATE_ID == templateid
                                          && ins.EvalTargetID == member.MemberID
                                          && term.DateFrom >= datasdate && term.DateFrom <= dataedate
                                          && ins.Status != '0' && eles.ID == det.ValueParameter

                                          select new { ins.INSTANCE_NAME, eles }).ToList();

                          decimal? score = null;
                          decimal datacount = 0;

                          foreach (var scoredata in finsdata)
                          {

                              try
                              {

                                  decimal ss = Convert.ToDecimal(scoredata.eles.ELEMENT_VALUE);
                                  if (score == null)
                                  {
                                      score = ss;
                                  }
                                  else
                                  {
                                      score += ss;
                                  }
                                  datacount++;
                              }
                              catch
                              {
                              }
                          }

                          if (score != null)
                          {
                              score = score.Value / datacount;
                          }

                          ScoreInstanceDetailDto dto = new ScoreInstanceDetailDto();
                          dto.ScorePercent = det.ScorePercent;
                          dto.SettingID = det.SettingID;
                          dto.TargetID = member.IsHospMember;
                          dto.TargetName = member.Name;
                          dto.ValueID = det.ValueID;
                          dto.ValueName = det.ValueName;
                          dto.ValueType = det.ValueType;
                          dto.Score = score;

                          //if (finsdata.Count > 0)
                          //{
                              result.Add(dto);
                          //}




                          //如果有instanceid
                          if (instance != null)
                          {
                          }
                          //如果沒有(新的)
                          else
                          {
                          }
                      }
                  }
              }
          }
          }

          return result;
      }


      public ScoreInstanceDto CreateScoreInstance(string settingid, DateTime datasdate, DateTime dataedate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              ScoreInstanceDto dto = new ScoreInstanceDto();
              dto.SettingID = settingid;
              dto.DataSDate = datasdate;
              dto.DataEDate = dataedate;
              dto.ScoreInstanceDetails = CalcScoreInstanceDetail(dto.SettingID, null, dto.DataSDate, dto.DataEDate);
              return dto;
          }
      }


      public ScoreInstanceDto GetScoreInstance(string instanceid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              ScoreInstanceDto dto = service.ReadScoreInstances(c => c.InstanceID == instanceid).FirstOrDefault();

              dto.ScoreInstanceDetails = CalcScoreInstanceDetail(dto.SettingID, instanceid, dto.DataSDate, dto.DataEDate);


              return dto;
          }
      }


      public List<ScoreInstanceDto> GetScoreInstances(string settingid)
      {
          List<ScoreInstanceDto> result = new List<ScoreInstanceDto>();
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var datas = from ins in service.UnitOfWork.ScoreInstances
                          join creater in service.UnitOfWork.V_KmuEmps on ins.Creater equals creater.Empcode
                          join modifier in service.UnitOfWork.V_KmuEmps on ins.Modifier equals modifier.Empcode
                          into tempmodifier
                          from modifier in tempmodifier.DefaultIfEmpty()
                          where ins.SettingID == settingid
                          select new { ins, CreaterName = creater.Empname, ModifierName = modifier.Empname };

              foreach (var data in datas)
              {
                  ScoreInstanceDto dto = new ScoreInstanceDto();
                  dto.CreateDate = data.ins.CreateDate;
                  dto.Creater = data.ins.Creater;
                  dto.CreaterName = data.CreaterName;
                  dto.DataEDate = data.ins.DataEDate;
                  dto.DataSDate = data.ins.DataSDate;
                  dto.InstanceID = data.ins.InstanceID;
                  dto.Modifier = data.ins.Modifier;
                  dto.ModifierName = data.ModifierName;
                  dto.ModifyDate = data.ins.ModifyDate;
                  dto.SettingID = data.ins.SettingID;
                  result.Add(dto);
              }

          }
          return result;
      }
      


      #endregion

      #region 線上學習
      public List<ElearningClassDto> GetSelectionClass(string keyword,string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<ElearningClassDto> list = service.ReadElearningClasses(c => (c.ClassName.Contains(keyword) || keyword == "") && c.ElearningBookings.Count(d => d.EmpCode == empcode) == 0 && c.SDate <= DateTime.Now && c.EDate >= DateTime.Now && c.AllowBooking == true && (c.Status != "X" || c.Status == null)).ToList();
              return list;
          }
      }

      public List<ElearningClassDto> GetMyUnFinishClass(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<ElearningClassDto> list = service.ReadElearningClasses(c => c.ElearningBookings.Count(d => d.EmpCode == empcode && d.Status == "1") > 0 && c.SDate <= DateTime.Now && c.EDate >= DateTime.Now && c.Status != "X").ToList();
              return list;
          }
      }

      public List<ElearningClassDto> GetMyFinishedClass(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<ElearningClassDto> list = service.ReadElearningClasses(c => c.ElearningBookings.Count(d => d.EmpCode == empcode && d.Status == "V") > 0 && c.SDate <= DateTime.Now && c.EDate >= DateTime.Now && c.Status != "X").ToList();
              return list;
          }
      }

      public List<ElearningItemDto> GetClassItem(string classid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadElearningItems(c => c.ClassID == classid).OrderBy(c => c.ItemOrder).ToList();
          }
      }

      public string SetClassItemFinish(string itemid, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  ElearningEmpItemDto dto = service.ReadElearningEmpItems(c => c.ItemID == itemid && c.EmpCode == empcode).FirstOrDefault();
                  if (dto == null)
                  {
                      dto = new ElearningEmpItemDto();
                      dto.EmpCode = empcode;
                      dto.ItemID = itemid;
                      dto.Status = "V";
                      dto.ExecuteTime = DateTime.Now;
                      service.CreateElearningEmpItem(dto);
                  }
                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      public string SetClassExamItemFinish(string itemid, string empcode, string refid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  ElearningEmpItemDto dto = service.ReadElearningEmpItems(c => c.ItemID == itemid && c.EmpCode == empcode).FirstOrDefault();
                  if (dto == null)
                  {
                      dto = new ElearningEmpItemDto();
                      dto.EmpCode = empcode;
                      dto.ItemID = itemid;
                      dto.RefID = refid;
                      dto.Status = "V";
                      dto.ExecuteTime = DateTime.Now;
                      service.CreateElearningEmpItem(dto);
                  }
                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      public ElearningItemDto GetClassItemByID(string itemid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadElearningItems(c => c.ItemID == itemid).FirstOrDefault();
          }
      }

      public List<ElearningItemDto> GetMyClassItem(string classid, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<ElearningItemDto> list = new List<ElearningItemDto>();

              ElearningItemAssembler asm = new ElearningItemAssembler();
              ElearningEmpItemAssembler empasm = new ElearningEmpItemAssembler();

              var elist = from item in service.UnitOfWork.ElearningItems
                          where item.ClassID == classid
                          orderby item.ItemOrder
                          select item;

              foreach (var ee in elist)
              {
                  ElearningItemDto dto = asm.Assemble(ee);
                  ElearningEmpItem empdto = ee.ElearningEmpItems.Where(c => c.EmpCode == empcode).FirstOrDefault();

                  if (empdto != null)
                  {
                      dto.ElearningEmpItems = new List<ElearningEmpItemDto>();
                      dto.ElearningEmpItems.Add(empasm.Assemble(empdto));
                  }
                  else
                  {
                      dto.ElearningEmpItems = null;
                  }

                  list.Add(dto);
              }

              return list;
          }
      }

      public string BookClass(string classid, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              ElearningBookingDto dto = new ElearningBookingDto();
              dto.ClassID = classid;
              dto.EmpCode = empcode;
              dto.BookTime = DateTime.Now;
              dto.Status = "1";

              try
              {
                  service.CreateElearningBooking(dto);
                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      public string UnBookClass(string classid, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              ElearningBookingDto dto = service.ReadElearningBookings(c => c.EmpCode == empcode && c.ClassID == classid).FirstOrDefault();

              try
              {
                  service.DeleteElearningBooking(dto);
                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }


      public int? CheckCreateClassInstance(string itemid, string empcode, int templateid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              FORM_INSTANCE checkins = service.UnitOfWork.FORM_INSTANCEs.Where(c => c.TEMPLATE_ID == templateid && c.TargetID == empcode && c.INHOSPID == itemid).FirstOrDefault();
              if (checkins == null)
              {
                  FORM_TEMPLATE template = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.TEMPLATE_ID == templateid).FirstOrDefault();
                  if (template != null)
                  {
                      HtmlFormUtility.FORM_INSTANCES newinstance = new HtmlFormUtility.FORM_INSTANCES();
                      newinstance.CREATER = empcode;
                      newinstance.expireDate = null;
                      newinstance.INHOSPID = itemid;
                      newinstance.INSTANCE_CONTENT = template.TEMPLATE_CONTENT;
                      newinstance.INSTANCE_CREATE_DATETIME = DateTime.Now;
                      newinstance.INSTANCE_NAME = template.TEMPLATE_NAME;
                      newinstance.INSTANCE_REMARK = null;
                      newinstance.TargetID = empcode;
                      newinstance.TargetType = "ClassMember";
                      newinstance.TEMPLATE_ID = template.TEMPLATE_ID;
                      newinstance.Status = "0";
                      HtmlFormUtility.Components.ProcessComponent comp = new HtmlFormUtility.Components.ProcessComponent();
                      newinstance.INSTANCE_ID = comp.CreateFormInstance(newinstance);

                      FORM_INSTANCE_TARGET newtarget = new FORM_INSTANCE_TARGET();
                      newtarget.INSTANCE_ID = newinstance.INSTANCE_ID;
                      newtarget.Status = '0';
                      newtarget.TargetID = empcode;
                      newtarget.TargetOrder = 0;
                      newtarget.TargetType = "ClassMember";
                      service.UnitOfWork.Add(newtarget);
                      service.UnitOfWork.SaveChanges();
                      return newinstance.INSTANCE_ID;
                  }
                  else
                  {
                      return null;
                  }
              }
              else
              {
                  return checkins.INSTANCE_ID;
              }


          }
      }

      #endregion

      #region 選擇老師
      public string SetMyChoiceTeacher(int instanceid, string teacherid)
      {
          using (EduActivityContext service = new EduActivityContext())
          {
              try
              {
                  string sql = "update form_instance_targets set targetid = '" + teacherid + "' where instance_id = " + instanceid + ";update form_instances set targetid='" + teacherid + "' where instance_id = " + instanceid + "; ";

                  service.ExecuteNonQuery(sql);

                  service.SaveChanges();

                  return null;
              }
              catch (Exception ex)
              {
                  service.ClearChanges();
                  return ex.Message;
              }
          }
      }
      #endregion

      #region 臨床照護分級

      public PassPortStudentApplicationItemDto GetPassportApplicationItemByID(int applicationid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              PassPortStudentApplicationItemDto dto = service.ReadPassPortStudentApplicationItems(c => c.ApplicationID == applicationid).FirstOrDefault();
              if (dto != null && dto.DesignationTeacherNumber != null)
              {
                  var item = service.ReadPassPortCheckItems(c => c.ItemCode == dto.ItemCode).FirstOrDefault();
                  if (item != null)
                  {
                      dto.ItemName = item.ItemName;
                  }

                  var emp = service.ReadV_KmuEmps(c => c.Empcode == dto.DesignationTeacherNumber).FirstOrDefault();
                  if (emp != null)
                  {
                      dto.TeacherName = emp.DisplayName;
                  }
              }
              return dto;
          }
      }

      public List<V_kmujobDto> GetPassPortJobCodes()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var data = (from dd in service.UnitOfWork.V_kmujobs
                          join jd in service.UnitOfWork.PassPortJobTitleItems
                          on dd.JOB_CODE_X equals jd.JobTitleCode
                          select dd).ToList().Distinct();

              V_kmujobAssembler asm = new V_kmujobAssembler();
              List<V_kmujobDto> result = asm.Assemble(data).ToList();

              var data2 = (from dd in service.UnitOfWork.V_CodeRefs
                           join jd in service.UnitOfWork.PassPortJobTitleItems
                           on new { code = dd.Code, ctype = dd.CodeType } equals new { code = jd.JobTitleCode, ctype = "EduAct_JobCode" }
                           select dd).ToList().Distinct();

              foreach (var d in data2)
              {
                  V_kmujobDto dto = new V_kmujobDto();
                  dto.JOB_CODE_X = d.Code;
                  dto.JOB_NAME = d.Name;
                  result.Add(dto);
              }
              return result;
          }
      }

      public List<string> GetPassportFinishRate(string empcode, string jobcode, string teamcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              teamcode = (service.UnitOfWork as EduActivityContext).Fn_GetTopTeamCodeX(teamcode);

              List<string> result = new List<string>();

              var checkitems = from citem in service.UnitOfWork.PassPortCheckItems
                               join jitem in service.UnitOfWork.PassPortJobTitleItems
                               on new { itemcode = citem.ItemCode, jcode = jobcode } equals new { itemcode = jitem.ItemCode, jcode = jitem.JobTitleCode }
                               join splist in service.UnitOfWork.PassPortSpecialLists
                               on new { itemcode = citem.ItemCode, ecode = empcode } equals new { itemcode = splist.ItemCode, ecode = splist.EmpCode }
                               into tempsplist
                               from splist in tempsplist.DefaultIfEmpty()
                               where citem.TopTeamCode == teamcode && jitem.JobTitleCode == jobcode
                               select new { itemcode = citem.ItemCode, authlevel = (splist == null ? jitem.AuthorizeLevel : splist.DefaultLevel), authtimes = jitem.AuthenticateFrequency };
              int totalcount = 0;
              int finishcount = 0;
              int waitcount = 0;
              foreach (var ci in checkitems)
              {
                  int authtimes = ci.authtimes.Value;
                  totalcount += authtimes;
                  if (ci.authlevel == "I")
                  {
                      finishcount += authtimes;
                      continue;
                  }
                  else
                  {
                      var empitem = (from item in service.UnitOfWork.PassPortStudentApplicationItems
                                     where item.ApplicationMemberNumber == empcode && item.ItemCode == ci.itemcode //&& item.JobCode == jobcode
                                     select item).ToList();
                      int itemfinishcount = 0;
                      foreach (var ei in empitem)
                      {
                          if (ei.CheckStatus == "2" && itemfinishcount < authtimes)
                          {
                              itemfinishcount++;
                          }
                      }

                      int itemwaitcount = empitem.Where(c => c.CheckStatus == "1").Select(c => c.CheckOrder).Distinct().Count();

                      finishcount += itemfinishcount;

                      if (itemwaitcount > 0 && itemwaitcount < authtimes)
                      {
                          waitcount++;
                      }
                  }
              }

              if (totalcount != 0)
              {
                  decimal finishrate = Math.Round(Convert.ToDecimal(Convert.ToDecimal(finishcount) / Convert.ToDecimal(totalcount)), 4);
                  decimal waitrate = Math.Round(Convert.ToDecimal(Convert.ToDecimal(waitcount) / Convert.ToDecimal(totalcount)), 4);
                  decimal notfinishrate = Convert.ToDecimal(1) - finishrate - waitrate;
                  result.Add((notfinishrate * 100).ToString() + "%");
                  result.Add((waitrate * 100).ToString() + "%");
                  result.Add((finishrate * 100).ToString() + "%");
              }
              else
              {
                  result.Add("--");
                  result.Add("--");
                  result.Add("--");
              }
              return result;
          }
      }

      public DataTable GetPassPortData(List<string> jobcodes, string empcode, DateTime? sdate, DateTime? edate, List<string> jobserials)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              DataTable dt = new DataTable();

              dt.Columns.Add("員工編號");
              dt.Columns.Add("姓名");
              dt.Columns.Add("職稱");
              dt.Columns.Add("訓練期間");
              dt.Columns.Add("組別");
              dt.Columns.Add("技術項目名稱");
              dt.Columns.Add("目前分級");
              dt.Columns.Add("最高分級");
              dt.Columns.Add("目前驗證次數");
              dt.Columns.Add("是否已完成");
              dt.Columns.Add("待簽核人員");

              var empcodes = (from mem in service.UnitOfWork.Members
                              join emp in service.UnitOfWork.V_KmuEmps
                              on mem.IsHospMember equals emp.Empcode
                              join rundown in service.UnitOfWork.EduTeamMemberRundowns
                              on mem.MemberID equals rundown.MemberID
                              join term in service.UnitOfWork.EduTerms
                              on rundown.EduTermID equals term.EduTermID
                              where
                              (sdate == null || (sdate != null && mem.DateTo >= sdate))
                              &&
                              (edate == null || (edate != null && mem.DateFrom <= edate))
                              && jobserials.Contains(term.JobCode)
                              && (empcode == null || empcode == "" || emp.Empcode == empcode)
                              select new { emp.Empcode, emp.Jobcode }).Distinct().ToList();

              if (jobcodes == null || jobcodes.Count == 0)
              {
                  jobcodes = service.UnitOfWork.PassPortJobTitleItems.Select(c => c.JobTitleCode).Distinct().ToList();
              }

              foreach (var emp in empcodes)
              {
                  string jcode = emp.Jobcode;
                  if (jcode.ToUpper() == "CLERK" || jcode.ToUpper() == "R(PGY)")
                  {
                      jcode = GetCurrentMemeberTypeByEmpCode(emp.Empcode);
                  }

                  var empdata = (from item in service.UnitOfWork.PassPortStudentApplicationItems
                                 join temp in service.UnitOfWork.V_KmuEmps
                                 on item.DesignationTeacherNumber equals temp.Empcode
                                 into atemp
                                 from temp in atemp.DefaultIfEmpty()
                                 where
                                 item.ApplicationMemberNumber == emp.Empcode
                                 select new { item, temp }).ToList();

                  var items = (from jitem in service.UnitOfWork.PassPortJobTitleItems
                               join item in service.UnitOfWork.PassPortCheckItems
                               on jitem.ItemCode equals item.ItemCode
                               where jitem.JobTitleCode == jcode
                               orderby jitem.ItemCode
                               select new { item, jitem }).ToList();

                  var eslist = (from splist in service.UnitOfWork.PassPortSpecialLists
                                where splist.EmpCode == emp.Empcode
                                select splist).ToList();
                  var tm = (from member in service.UnitOfWork.Members
                            join tmember in service.UnitOfWork.EduTeamMembers
                            on member.MemberID equals tmember.MemberID
                            join team in service.UnitOfWork.EduTeams
                            on tmember.EduTeamCode equals team.EduTeamCode
                            where member.IsHospMember == emp.Empcode
                            &&
                            (sdate == null || (sdate != null && member.DateTo >= sdate))
                            &&
                            (edate == null || (edate != null && member.DateFrom <= edate))
                            select new { member, tmember, team }).ToList();
                  foreach (var item in items)
                  {
                      if (item.item.ItemCode == 17)
                      {

                      }
                      List<string> teamcodes = GetHierarchyTeamCode(item.item.TopTeamCode);

                      var m = tm.Where(c => teamcodes.Contains(c.tmember.EduTeamCode)).FirstOrDefault();

                      if (m != null)
                      {
                          var edata = empdata.Where(c => c.item.ApplicationMemberNumber == emp.Empcode && c.item.ItemCode == item.item.ItemCode).ToList();

                          DataRow dr = dt.NewRow();
                          dr["員工編號"] = emp.Empcode;
                          dr["姓名"] = m.member.Name;
                          dr["職稱"] = jcode;
                          dr["訓練期間"] = m.member.DateFrom.ToString("yyyy/MM/dd") + "~" + m.member.DateTo.ToString("yyyy/MM/dd");
                          dr["組別"] = m.team.EduTeamName;
                          dr["技術項目名稱"] = item.item.ItemName;
                          dr["最高分級"] = item.jitem.AuthorizeLevel;
                          if (edata.Where(c => c.item.CheckOrder >= item.jitem.AuthenticateFrequency && c.item.CheckResult != null && c.item.CheckResult == true).Count() > 0)
                          {
                              dr["目前分級"] = item.jitem.AuthorizeLevel;
                              dr["是否已完成"] = "Y";
                          }
                          else
                          {
                              var slist = eslist.Where(c => c.ItemCode == item.item.ItemCode).FirstOrDefault();

                              if (slist == null)
                              {
                                  dr["目前分級"] = item.jitem.ExAuthorizeLevel;
                              }
                              else
                              {
                                  dr["目前分級"] = slist.DefaultLevel;
                              }

                              dr["待簽核人員"] = "";
                              foreach (var tdata in edata.Where(c => c.item.CheckResult == null))
                              {
                                  if (dr["待簽核人員"].ToString() != "")
                                  {
                                      dr["待簽核人員"] = dr["待簽核人員"].ToString() + ",";
                                  }
                                  dr["待簽核人員"] = dr["待簽核人員"].ToString() + "(" + tdata.temp.Empcode + ")" + tdata.temp.Empname;
                              }
                          }
                          if (dr["目前分級"].ToString() == item.jitem.AuthorizeLevel && item.jitem.AuthorizeLevel == "I")
                          {
                              dr["是否已完成"] = "Y";
                          }

                          if (dr["是否已完成"].ToString() != "Y")
                          {
                              int? maxorder = edata.Where(c => c.item.CheckResult != null && c.item.CheckResult == true).Max(c => c.item.CheckOrder);
                              dr["目前驗證次數"] = maxorder == null ? "0" : maxorder.ToString();
                          }
                          dt.Rows.Add(dr);
                      }
                  }
              }
              return dt;
          }
      }

      //有問題的
      //public DataTable GetPassPortData(List<string> jobcodes, string empcode, DateTime? sdate, DateTime? edate, List<string> jobserials)
      //{
      //    using (EduActivityContextService service = new EduActivityContextService())
      //    {
      //        DataTable dt = new DataTable();

      //        dt.Columns.Add("員工編號");
      //        dt.Columns.Add("姓名");
      //        dt.Columns.Add("職稱");
      //        dt.Columns.Add("訓練期間");
      //        dt.Columns.Add("組別");
      //        dt.Columns.Add("技術項目名稱");
      //        dt.Columns.Add("目前分級");
      //        dt.Columns.Add("最高分級");
      //        dt.Columns.Add("目前驗證次數");
      //        dt.Columns.Add("是否已完成");
      //        dt.Columns.Add("待簽核人員");

      //        List<string> specialjobcode = new List<string> { "R1", "R2", "R3", "R4", "R5", "R6", "CR", "PGY1", "PGY2" };

      //        if (jobcodes == null || jobcodes.Count == 0)
      //        {

      //            if (empcode != null && empcode != "")
      //            {
      //                jobcodes = service.UnitOfWork.PassPortStudentApplicationItems.Where(c => c.ApplicationMemberNumber == empcode).Select(c => c.JobCode).Distinct().ToList();
      //            }
      //            else
      //            {
      //                jobcodes = service.UnitOfWork.PassPortJobTitleItems.Select(c => c.JobTitleCode).Distinct().ToList();
      //            }
      //        }

      //        foreach (string jobcode in jobcodes)
      //        {
      //            string jcode = jobcode.Trim();
      //            var items = (from jitem in service.UnitOfWork.PassPortJobTitleItems
      //                         join item in service.UnitOfWork.PassPortCheckItems
      //                         on jitem.ItemCode equals item.ItemCode
      //                         where jitem.JobTitleCode == jcode
      //                         orderby jitem.ItemCode
      //                         select new { item, jitem }).ToList();

      //            var empdata = (from item in service.UnitOfWork.PassPortStudentApplicationItems
      //                           join temp in service.UnitOfWork.V_KmuEmps
      //                           on item.DesignationTeacherNumber equals temp.Empcode
      //                           into atemp
      //                           from temp in atemp.DefaultIfEmpty()
      //                           where
      //                           //jcode == item.JobCode
      //                           //&&
      //                           (
      //                           empcode == null
      //                           ||
      //                           empcode == ""
      //                           ||
      //                           item.ApplicationMemberNumber == empcode
      //                           )
      //                           select new { item, temp }).Distinct().ToList();

      //            //List<string> empcodes = empdata.Select(c => c.item.ApplicationMemberNumber).OrderBy(c => c).Distinct().ToList();

      //            var emps = (from mem in service.UnitOfWork.Members
      //                        join emp in service.UnitOfWork.V_KmuEmps
      //                        on mem.IsHospMember equals emp.Empcode
      //                        join rundown in service.UnitOfWork.EduTeamMemberRundowns
      //                        on mem.MemberID equals rundown.MemberID
      //                        join term in service.UnitOfWork.EduTerms
      //                        on rundown.EduTermID equals term.EduTermID
      //                        where
      //                        (emp.Jobcode == jcode || mem.MemberType == jcode)
      //                        &&
      //                        (sdate == null || (sdate != null && mem.DateTo >= sdate))
      //                        &&
      //                        (edate == null || (edate != null && mem.DateFrom <= edate))
      //                        && jobserials.Contains(term.JobCode)
      //                        && (empcode == null || empcode == "" || emp.Empcode == empcode)
      //                        select new { mem.MemberID, emp.Empcode }).ToList();

      //            //if (empcode != null && empcode != "")
      //            //{
      //            //    emps = (from mem in service.UnitOfWork.Members
      //            //            join emp in service.UnitOfWork.V_KmuEmps
      //            //            on mem.IsHospMember equals emp.Empcode
      //            //            join rundown in service.UnitOfWork.EduTeamMemberRundowns
      //            //            on mem.MemberID equals rundown.MemberID
      //            //            join term in service.UnitOfWork.EduTerms
      //            //            on rundown.EduTermID equals term.EduTermID
      //            //            where
      //            //            (sdate == null || (sdate != null && mem.DateTo >= sdate))
      //            //            &&
      //            //            (edate == null || (edate != null && mem.DateFrom <= edate))
      //            //            && jobserials.Contains(term.JobCode)
      //            //            && emp.Empcode == empcode
      //            //            select new { mem.MemberID, emp.Empcode }).ToList();
      //            //}

      //            List<string> existsmem = new List<string>();

      //            //List<string> empcodes = (from mem in service.UnitOfWork.Members
      //            //                         join emp in service.UnitOfWork.V_KmuEmps
      //            //                         on mem.IsHospMember equals emp.Empcode
      //            //                         join rundown in service.UnitOfWork.EduTeamMemberRundowns
      //            //                         on mem.MemberID equals rundown.MemberID
      //            //                         join term in service.UnitOfWork.EduTerms
      //            //                         on rundown.EduTermID equals term.EduTermID
      //            //                         where 
      //            //                         (emp.Jobcode == jcode || mem.MemberType == jcode)
      //            //                         &&
      //            //                         (sdate == null || (sdate != null && mem.DateTo >= sdate))
      //            //                         &&
      //            //                         (edate == null || (edate != null && mem.DateFrom <= edate))
      //            //                         && jobserials.Contains(term.JobCode)
      //            //                         && (empcode == null || empcode == "" || emp.Empcode == empcode)
      //            //                         select emp.Empcode).Distinct().ToList();


      //            //foreach (string emp_code in empcodes)
      //            foreach (var ee in emps)
      //            {
      //                if (existsmem.Contains(ee.MemberID))
      //                {
      //                    continue;
      //                }
      //                existsmem.Add(ee.MemberID);
      //                var eslist = (from splist in service.UnitOfWork.PassPortSpecialLists
      //                              where splist.EmpCode == ee.Empcode
      //                              select splist).ToList();
      //                var tm = (from member in service.UnitOfWork.Members
      //                          join tmember in service.UnitOfWork.EduTeamMembers
      //                          on member.MemberID equals tmember.MemberID
      //                          join team in service.UnitOfWork.EduTeams
      //                          on tmember.EduTeamCode equals team.EduTeamCode
      //                          where member.IsHospMember == ee.Empcode
      //                          && member.MemberID == ee.MemberID
      //                          &&
      //                          (sdate == null || (sdate != null && member.DateTo >= sdate))
      //                          &&
      //                          (edate == null || (edate != null && member.DateFrom <= edate))
      //                          select new { member, tmember, team }).ToList();
      //                foreach (var item in items)
      //                {

      //                    List<string> teamcodes = GetHierarchyTeamCode(item.item.TopTeamCode);

      //                    var m = tm.Where(c => teamcodes.Contains(c.tmember.EduTeamCode)).FirstOrDefault();

      //                    //foreach (var m in tm.Where(c => teamcodes.Contains(c.tmember.EduTeamCode)))
      //                    //{
      //                    if (m != null)
      //                    {
      //                        if (specialjobcode.Contains(m.team.EduTeamName))
      //                        {
      //                            jcode = m.team.EduTeamName;
      //                        }
      //                        var edata = empdata.Where(c => c.item.ApplicationMemberNumber == ee.Empcode && c.item.ItemCode == item.item.ItemCode && c.item.JobCode == jcode).ToList();


      //                        DataRow dr = dt.NewRow();
      //                        dr["員工編號"] = ee.Empcode;
      //                        dr["姓名"] = m.member.Name;
      //                        dr["職稱"] = jcode;
      //                        dr["訓練期間"] = m.member.DateFrom.ToString("yyyy/MM/dd") + "~" + m.member.DateTo.ToString("yyyy/MM/dd");
      //                        dr["組別"] = m.team.EduTeamName;
      //                        dr["技術項目名稱"] = item.item.ItemName;
      //                        dr["最高分級"] = item.jitem.AuthorizeLevel;
      //                        if (edata.Where(c => c.item.CheckOrder >= item.jitem.AuthenticateFrequency && c.item.CheckResult != null && c.item.CheckResult == true).Count() > 0)
      //                        {
      //                            dr["目前分級"] = item.jitem.AuthorizeLevel;
      //                            dr["是否已完成"] = "Y";
      //                        }
      //                        else
      //                        {
      //                            var slist = eslist.Where(c => c.ItemCode == item.item.ItemCode).FirstOrDefault();


      //                            if (slist == null)
      //                            {
      //                                dr["目前分級"] = item.jitem.ExAuthorizeLevel;
      //                            }
      //                            else
      //                            {
      //                                dr["目前分級"] = slist.DefaultLevel;
      //                            }

      //                            dr["待簽核人員"] = "";
      //                            foreach (var tdata in edata.Where(c => c.item.CheckResult == null))
      //                            {


      //                                if (dr["待簽核人員"].ToString() != "")
      //                                {
      //                                    dr["待簽核人員"] = dr["待簽核人員"].ToString() + ",";
      //                                }
      //                                dr["待簽核人員"] = dr["待簽核人員"].ToString() + "(" + tdata.temp.Empcode + ")" + tdata.temp.Empname;
      //                            }


      //                        }
      //                        if (dr["目前分級"].ToString() == item.jitem.AuthorizeLevel && item.jitem.AuthorizeLevel == "I")
      //                        {
      //                            dr["是否已完成"] = "Y";
      //                        }

      //                        if (dr["是否已完成"].ToString() != "Y")
      //                        {
      //                            int? maxorder = edata.Where(c => c.item.CheckResult != null && c.item.CheckResult == true).Max(c => c.item.CheckOrder);
      //                            dr["目前驗證次數"] = maxorder == null ? "0" : maxorder.ToString();
      //                        }

      //                        dt.Rows.Add(dr);
      //                    }
      //                    //}


      //                }
      //            }

      //        }
      //        return dt;
      //    }
      //}

      public List<PassPortStudentApplicationItemFailLogDto> GetPassportRejectLog(string empcode, int itemcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<PassPortStudentApplicationItemFailLogDto> result = new List<PassPortStudentApplicationItemFailLogDto>();

              var datas = from log in service.UnitOfWork.PassPortStudentApplicationItemFailLogs
                          join teacher in service.UnitOfWork.V_KmuEmps
                          on log.DesignationTeacherNumber equals teacher.Empcode
                          where log.ApplicationMemberNumber == empcode && log.ItemCode == itemcode
                          orderby log.CheckDate
                          select new { log, teacher };

              PassPortStudentApplicationItemFailLogAssembler asm = new PassPortStudentApplicationItemFailLogAssembler();
              foreach (var data in datas)
              {
                  PassPortStudentApplicationItemFailLogDto dto = asm.Assemble(data.log);

                  dto.TeacherName = data.teacher.Deptname + " " + data.teacher.Empname;

                  result.Add(dto);
              }
              return result;
          }
      }

      public DataTable GetPassPortRateData(List<string> jobcodes, DateTime? sdate, DateTime? edate, List<string> jobserials)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              DataTable dt = new DataTable();

              dt.Columns.Add("職稱");
              dt.Columns.Add("技術項目名稱");
              dt.Columns.Add("完成人數");
              dt.Columns.Add("總人數");
              dt.Columns.Add("完成率");

              if (jobcodes == null || jobcodes.Count == 0)
              {
                  jobcodes = service.UnitOfWork.PassPortJobTitleItems.Select(c => c.JobTitleCode).Distinct().ToList();
              }

              foreach (string jobcode in jobcodes)
              {
                  string jcode = jobcode.Trim();

                  var items = (from jitem in service.UnitOfWork.PassPortJobTitleItems
                               join item in service.UnitOfWork.PassPortCheckItems
                               on jitem.ItemCode equals item.ItemCode
                               where jitem.JobTitleCode == jcode
                               orderby jitem.ItemCode
                               select new { item, jitem }).ToList();



                  //List<string> empcodes = empdata.Select(c => c.item.ApplicationMemberNumber).OrderBy(c => c).Distinct().ToList();

                  List<string> empcodes = (from mem in service.UnitOfWork.Members
                                           join emp in service.UnitOfWork.V_KmuEmps
                                           on mem.IsHospMember equals emp.Empcode
                                           join rundown in service.UnitOfWork.EduTeamMemberRundowns
                                           on mem.MemberID equals rundown.MemberID
                                           join term in service.UnitOfWork.EduTerms
                                           on rundown.EduTermID equals term.EduTermID
                                           where (emp.Jobcode == jcode || mem.MemberType == jcode)
                                           &&
                                           (sdate == null || (sdate != null && mem.DateTo >= sdate))
                                           &&
                                           (edate == null || (edate != null && mem.DateFrom <= edate))
                                           && jobserials.Contains(term.JobCode)
                                           select emp.Empcode).Distinct().ToList();

                  var empdata = (from item in service.UnitOfWork.PassPortStudentApplicationItems
                                 join emp in empcodes
                                 on item.ApplicationMemberNumber equals emp
                                 join temp in service.UnitOfWork.V_KmuEmps
                                 on item.DesignationTeacherNumber equals temp.Empcode
                                 into atemp
                                 from temp in atemp.DefaultIfEmpty()
                                 //where item.JobCode == jcode
                                 select new { item, temp }).ToList();


                  foreach (string emp_code in empcodes)
                  {

                      var eslist = (from splist in service.UnitOfWork.PassPortSpecialLists
                                    where splist.EmpCode == emp_code
                                    select splist).ToList();
                      var tm = (from member in service.UnitOfWork.Members
                                join tmember in service.UnitOfWork.EduTeamMembers
                                on member.MemberID equals tmember.MemberID
                                join team in service.UnitOfWork.EduTeams
                                on tmember.EduTeamCode equals team.EduTeamCode
                                where member.IsHospMember == emp_code
                                &&
                                (sdate == null || (sdate != null && member.DateTo >= sdate))
                                &&
                                (edate == null || (edate != null && member.DateFrom <= edate))
                                select new { member, tmember, team }).ToList();
                      foreach (var item in items)
                      {



                          List<string> teamcodes = GetHierarchyTeamCode(item.item.TopTeamCode);

                          var m = tm.Where(c => teamcodes.Contains(c.tmember.EduTeamCode)).FirstOrDefault();

                          if (m != null)
                          {
                              string currentgrade = "";
                              bool issuccess = false;

                              if (jcode == "CLERK")
                              {
                                  jcode = m.member.MemberType;
                              }

                              DataRow dr;
                              if (dt.Select("技術項目名稱 = '" + item.item.ItemName + "' and 職稱='" + jcode + "'").Length > 0)
                              {
                                  dr = dt.Select("技術項目名稱 = '" + item.item.ItemName + "' and 職稱='" + jcode + "'")[0];
                              }
                              else
                              {
                                  dr = dt.NewRow();
                                  dr["職稱"] = jcode;
                                  dr["技術項目名稱"] = item.item.ItemName;
                                  dr["完成人數"] = 0;
                                  dr["總人數"] = 0;
                                  dt.Rows.Add(dr);
                              }

                              dr["總人數"] = Convert.ToInt32(dr["總人數"]) + 1;


                              var edata = empdata.Where(c => c.item.ApplicationMemberNumber == emp_code && c.item.ItemCode == item.item.ItemCode).ToList();


                              if (edata.Where(c => c.item.CheckOrder == item.jitem.AuthenticateFrequency && c.item.CheckResult != null && c.item.CheckResult == true).Count() > 0)
                              {
                                  issuccess = true;
                              }
                              else
                              {
                                  var slist = eslist.Where(c => c.ItemCode == item.item.ItemCode).FirstOrDefault();


                                  if (slist == null)
                                  {
                                      currentgrade = item.jitem.ExAuthorizeLevel;
                                  }
                                  else
                                  {
                                      currentgrade = slist.DefaultLevel;
                                  }

                              }
                              if (currentgrade == item.jitem.AuthorizeLevel && item.jitem.AuthorizeLevel == "I")
                              {
                                  issuccess = true;
                              }

                              if (issuccess)
                              {
                                  dr["完成人數"] = Convert.ToInt32(dr["完成人數"]) + 1;
                              }
                          }

                      }
                  }

              }

              foreach (DataRow dr in dt.Rows)
              {
                  dr["完成率"] = ((Convert.ToDouble(dr["完成人數"]) / Convert.ToDouble(dr["總人數"])) * 100).ToString("0.00") + "%";
              }

              return dt;
          }
      }

      public DataTable GetPassPortOrderRateData(List<string> jobcodes, DateTime? sdate, DateTime? edate, List<string> jobserials)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              DataTable dt = new DataTable();

              dt.Columns.Add("職稱");
              dt.Columns.Add("技術項目名稱");
              dt.Columns.Add("完成次序");
              dt.Columns.Add("完成人數");
              dt.Columns.Add("總人數");
              dt.Columns.Add("完成率");

              if (jobcodes == null || jobcodes.Count == 0)
              {
                  jobcodes = service.UnitOfWork.PassPortJobTitleItems.Select(c => c.JobTitleCode).Distinct().ToList();
              }

              foreach (string jobcode in jobcodes)
              {
                  string jcode = jobcode.Trim();

                  var items = (from jitem in service.UnitOfWork.PassPortJobTitleItems
                               join item in service.UnitOfWork.PassPortCheckItems
                               on jitem.ItemCode equals item.ItemCode
                               where jitem.JobTitleCode == jcode
                               orderby jitem.ItemCode
                               select new { item, jitem }).ToList();



                  //List<string> empcodes = empdata.Select(c => c.item.ApplicationMemberNumber).OrderBy(c => c).Distinct().ToList();
                  List<string> empcodes = (from mem in service.UnitOfWork.Members
                                           join emp in service.UnitOfWork.V_KmuEmps
                                           on mem.IsHospMember equals emp.Empcode
                                           join rundown in service.UnitOfWork.EduTeamMemberRundowns
                                           on mem.MemberID equals rundown.MemberID
                                           join term in service.UnitOfWork.EduTerms
                                           on rundown.EduTermID equals term.EduTermID
                                           where (emp.Jobcode == jcode || mem.MemberType == jcode)
                                           &&
                                           (sdate == null || (sdate != null && mem.DateTo >= sdate))
                                           &&
                                           (edate == null || (edate != null && mem.DateFrom <= edate))
                                           && jobserials.Contains(term.JobCode)
                                           select emp.Empcode).Distinct().ToList();

                  var empdata = (from item in service.UnitOfWork.PassPortStudentApplicationItems
                                 join emp in empcodes
                                 on item.ApplicationMemberNumber equals emp
                                 join temp in service.UnitOfWork.V_KmuEmps
                                 on item.DesignationTeacherNumber equals temp.Empcode
                                 into atemp
                                 from temp in atemp.DefaultIfEmpty()
                                 //where item.JobCode == jcode
                                 select new { item, temp }).ToList();


                  foreach (string emp_code in empcodes)
                  {

                      var eslist = (from splist in service.UnitOfWork.PassPortSpecialLists
                                    where splist.EmpCode == emp_code
                                    select splist).ToList();
                      var tm = (from member in service.UnitOfWork.Members
                                join tmember in service.UnitOfWork.EduTeamMembers
                                on member.MemberID equals tmember.MemberID
                                join team in service.UnitOfWork.EduTeams
                                on tmember.EduTeamCode equals team.EduTeamCode
                                where member.IsHospMember == emp_code
                                &&
                                (sdate == null || (sdate != null && member.DateTo >= sdate))
                                &&
                                (edate == null || (edate != null && member.DateFrom <= edate))
                                select new { member, tmember, team }).ToList();
                      foreach (var item in items)
                      {

                          for (int i = 1; i <= item.jitem.AuthenticateFrequency.Value; i++)
                          {



                              List<string> teamcodes = GetHierarchyTeamCode(item.item.TopTeamCode);

                              var m = tm.Where(c => teamcodes.Contains(c.tmember.EduTeamCode)).FirstOrDefault();

                              if (m != null)
                              {
                                  string currentgrade = "";
                                  bool issuccess = false;
                                  if (jcode == "CLERK")
                                  {
                                      jcode = m.member.MemberType;
                                  }

                                  DataRow dr;
                                  if (dt.Select("技術項目名稱 = '" + item.item.ItemName + "' and 職稱='" + jcode + "' and 完成次序 = '" + i.ToString() + "'").Length > 0)
                                  {
                                      dr = dt.Select("技術項目名稱 = '" + item.item.ItemName + "' and 職稱='" + jcode + "' and 完成次序 = '" + i.ToString() + "'")[0];
                                  }
                                  else
                                  {
                                      dr = dt.NewRow();
                                      dr["職稱"] = jcode;
                                      dr["技術項目名稱"] = item.item.ItemName;
                                      dr["完成次序"] = i.ToString();
                                      dr["完成人數"] = 0;

                                      dr["總人數"] = 0;
                                      dt.Rows.Add(dr);
                                  }

                                  dr["總人數"] = Convert.ToInt32(dr["總人數"]) + 1;


                                  var edata = empdata.Where(c => c.item.ApplicationMemberNumber == emp_code && c.item.ItemCode == item.item.ItemCode).ToList();


                                  if (edata.Where(c => c.item.CheckOrder == i && c.item.CheckResult != null && c.item.CheckResult == true).Count() > 0)
                                  {
                                      issuccess = true;
                                  }
                                  else
                                  {
                                      var slist = eslist.Where(c => c.ItemCode == item.item.ItemCode).FirstOrDefault();


                                      if (slist == null)
                                      {
                                          currentgrade = item.jitem.ExAuthorizeLevel;
                                      }
                                      else
                                      {
                                          currentgrade = slist.DefaultLevel;
                                      }

                                  }
                                  if (currentgrade == item.jitem.AuthorizeLevel && item.jitem.AuthorizeLevel == "I")
                                  {
                                      issuccess = true;
                                  }

                                  if (issuccess)
                                  {
                                      dr["完成人數"] = Convert.ToInt32(dr["完成人數"]) + 1;
                                  }
                              }
                          }

                      }
                  }

              }

              foreach (DataRow dr in dt.Rows)
              {
                  dr["完成率"] = ((Convert.ToDouble(dr["完成人數"]) / Convert.ToDouble(dr["總人數"])) * 100).ToString("0.00") + "%";
              }

              return dt;
          }
      }

      public DataTable GetPassPortStatus(List<string> jobcodes, string empcode)
      {
          DataTable dt = new DataTable();

          return dt;
      }

      public List<string[]> UploadPassPortData(DataTable dt,bool replace)
      {
          List<string[]> result = new List<string[]>();
          try
          {

              using (EduActivityContext context = new EduActivityContext())
              {
                  foreach(DataRow dr in dt.Rows)
                  {
                      if (dr["學員職編"].ToString() != "")
                      {
                          string memberEmpCode = dr["學員職編"].ToString().Trim();
                          int itemcode = Convert.ToInt32(dr["項目代號(1~17)"]);
                          int checkorder = Convert.ToInt32(dr["第幾次驗證"]);
                          string implementPlace = dr["實作地點"].ToString();
                          string studentremark = dr["學生備註"].ToString();
                          string implementObject = dr["對象(病人、教具)"].ToString();
                          string chartno = dr["病歷號"].ToString();
                          DateTime checkDate = Convert.ToDateTime(dr["操作日期"]);
                          string teacherEmpCode = dr["老師職編"].ToString();
                          string teacherRemark = dr["老師備註"].ToString();

                          string color = "black";
                          string msg = "已上傳完成";

                          var maxpp = context.PassPortStudentApplicationItems.Where(c => c.ApplicationMemberNumber == memberEmpCode && c.ItemCode == itemcode && c.CheckResult == true).OrderByDescending(c => c.CheckOrder).FirstOrDefault();
                          if(maxpp!=null)
                          {
                              checkorder = maxpp.CheckOrder.Value + 1;
                          }
                          else
                          {
                              checkorder = 1;
                          }

                          //if (!replace && context.PassPortStudentApplicationItems.Count(c => c.ApplicationMemberNumber == memberEmpCode && c.ItemCode == itemcode && c.CheckOrder == checkorder && c.CheckResult == true) > 0)
                          //{
                          //    continue;
                          //}

                          //if (context.PassPortStudentApplicationItems.Count(c => c.ApplicationMemberNumber == memberEmpCode && c.ItemCode == itemcode && c.CheckOrder == checkorder) > 0)
                          //{
                          //    color = "blue";
                          //    msg = "已覆蓋";
                          //}
                          V_KmuEmp emp = context.V_KmuEmps.Where(c => c.Empcode == memberEmpCode).FirstOrDefault();
                          if (emp != null)
                          {

                              //context.Delete(context.PassPortStudentApplicationItems.Where(c => c.ApplicationMemberNumber == memberEmpCode && c.ItemCode == itemcode && c.CheckOrder == checkorder));

                              PassPortStudentApplicationItem item = new PassPortStudentApplicationItem();
                              item.ItemCode = itemcode;
                              item.ApplicationMemberNumber = memberEmpCode;
                              item.CheckOrder = checkorder;
                              item.DesignationTeacherNumber = teacherEmpCode;
                              item.ImplementPlace = implementPlace;
                              item.ImplementDate = checkDate;
                              item.ApplicationDate = checkDate;
                              item.IsFinalCheck = null;
                              item.CheckResult = true;
                              item.CheckStatus = "0";
                              item.CheckDate = checkDate;
                              item.StudentRemark = studentremark;
                              item.ImplementObject = implementObject;
                              item.CaseHistoryNumber = chartno;
                              item.TeacherRemark = teacherRemark;
                              item.JobCode = emp.Jobcode;
                              item.CheckStatus = "2";

                              string intsql = @"INSERT INTO www_EduActivity.dbo.PassPortStudentApplicationItem
(itemCode, applicationMemberNumber, checkOrder, designationTeacherNumber, implementPlace, implementDate, applicationDate, isFinalCheck
, checkResult, checkStatus, checkDate, studentRemark, implementObject, caseHistoryNumber, teacherRemark, JobCode) 
VALUES (@itemCode, @applicationMemberNumber, @checkOrder, @designationTeacherNumber, @implementPlace, @implementDate, @applicationDate, @isFinalCheck, @checkResult, @checkStatus, @checkDate, @studentRemark, @implementObject, @caseHistoryNumber, @teacherRemark, @JobCode)

                              ";
                              List<SqlParameter> sqlparms = new List<SqlParameter>();
                              sqlparms.Add(new SqlParameter("itemCode", GetDBObject(item.ItemCode)));
                              sqlparms.Add(new SqlParameter("applicationMemberNumber", GetDBObject(item.ApplicationMemberNumber)));
                              sqlparms.Add(new SqlParameter("checkOrder", GetDBObject(item.CheckOrder)));
                              sqlparms.Add(new SqlParameter("designationTeacherNumber", GetDBObject(item.DesignationTeacherNumber)));
                              sqlparms.Add(new SqlParameter("implementPlace", GetDBObject(item.ImplementPlace)));
                              sqlparms.Add(new SqlParameter("implementDate", GetDBObject(item.ImplementDate)));
                              sqlparms.Add(new SqlParameter("applicationDate", GetDBObject(item.ApplicationDate)));
                              sqlparms.Add(new SqlParameter("isFinalCheck", GetDBObject(item.IsFinalCheck)));
                              sqlparms.Add(new SqlParameter("checkResult", GetDBObject(item.CheckResult)));
                              sqlparms.Add(new SqlParameter("checkStatus", GetDBObject(item.CheckStatus)));
                              sqlparms.Add(new SqlParameter("checkDate", GetDBObject(item.CheckDate)));
                              sqlparms.Add(new SqlParameter("studentRemark", GetDBObject(item.StudentRemark)));
                              sqlparms.Add(new SqlParameter("implementObject", GetDBObject(item.ImplementObject)));
                              sqlparms.Add(new SqlParameter("caseHistoryNumber", GetDBObject(item.CaseHistoryNumber)));
                              sqlparms.Add(new SqlParameter("teacherRemark", GetDBObject(item.TeacherRemark)));
                              sqlparms.Add(new SqlParameter("JobCode", GetDBObject(item.JobCode)));
                              context.ExecuteNonQuery(intsql, sqlparms.ToArray());


                              //context.Add(item);
                              
                          }
                          else
                          {
                              msg = "學員編號：" + memberEmpCode + ",項目:" + itemcode.ToString() + ",第" + checkorder.ToString() + "次驗證," + "員工編號有誤上傳失敗";
                              result.Add(new string[] { msg, color });
                              continue;
                          }
                          try
                          {
                              context.SaveChanges();
                              msg = "學員編號：" + memberEmpCode + ",項目:" + itemcode.ToString() + ",第" + checkorder.ToString() + "次驗證," + msg;
                          }
                          catch (Exception ex)
                          {
                              msg = "學員編號：" + memberEmpCode + ",項目:" + itemcode.ToString() + ",第" + checkorder.ToString() + "次驗證," + "上傳失敗";
                              color = "red";

                          }

                          result.Add(new string[] { msg, color });
                      }
                  }



              }
          }
          catch (Exception ex)
          {
              result.Clear();
              result.Add(new string[] { "檔案格式錯誤，請確認第一欄欄位名稱是否與範例相同:" + ex.Message, "red" });
          }
          return result;
      }

      public List<V_KmuEmpDto> SerachEmp(string keyword)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<V_KmuEmpDto> list = service.ReadV_KmuEmps(c =>
                  c.Empcode == keyword
                 ||
                  c.Empname == keyword
                  ).ToList();

              return list;
          }
      }

      public string GetCurrentEduTeamCode(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var datas = from mem in service.UnitOfWork.Members
                          join teammem in service.UnitOfWork.EduTeamMembers
                          on mem.MemberID equals teammem.MemberID
                          where mem.IsHospMember == empcode
                          orderby mem.DateTo descending
                          select new { mem, teammem };
              var data = datas.FirstOrDefault();

              if (data == null)
              {
                  return null;
              }
              string result = data.teammem.EduTeamCode;

              return result;
          }
      }

      public List<PassPortSpecialListDto> GetPassPortSpecialList(string empcode, int? itemcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<PassPortSpecialListDto> list = new List<PassPortSpecialListDto>();

              var datas = from sl in service.UnitOfWork.PassPortSpecialLists
                          join emp in service.UnitOfWork.V_KmuEmps
                          on sl.EmpCode equals emp.Empcode
                          join item in service.UnitOfWork.PassPortCheckItems
                          on sl.ItemCode equals item.ItemCode
                          where (empcode == null || sl.EmpCode == empcode)
                          && (itemcode == null || sl.ItemCode == itemcode.Value)
                          select new { sl, emp, item };

              PassPortSpecialListAssembler asm = new PassPortSpecialListAssembler();

              foreach (var data in datas)
              {
                  PassPortSpecialListDto dto = asm.Assemble(data.sl);
                  dto.EmpName = data.emp.Empname;
                  dto.ItemName = data.item.ItemName;
                  list.Add(dto);
              }
              return list;
          }
      }

      public string AddPassPortSpecialList(string empcode,int itemcode,string defaultlevel)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              PassPortSpecialListDto dto = new PassPortSpecialListDto();
              dto.EmpCode = empcode;
              dto.DefaultLevel = defaultlevel;
              dto.ItemCode = itemcode;

              try
              {
                  service.CreatePassPortSpecialList(dto);
                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      public string DeletePassPortSpecialList(string empcode, int itemcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  PassPortSpecialListDto dto = service.ReadPassPortSpecialLists(c => c.EmpCode == empcode && c.ItemCode == itemcode).FirstOrDefault();
                  service.DeletePassPortSpecialList(dto);
                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      public List<PassPortCheckItemDto> GetPassPortCheckItems() //技術項目
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadPassPortCheckItems().ToList();
          }
      }

      #endregion

      #region 發送狀況查詢
      public List<FormSendSettingData> GetFormSendSettingData(string deptcode,List<string> jobcodes,DateTime datefrom, DateTime dateto)
      {
          List<FormSendSettingData> list = new List<FormSendSettingData>();
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var datas = from setting in service.UnitOfWork.EduFormTemplateLists
                          join term in service.UnitOfWork.EduTerms
                          on setting.EduTermID equals term.EduTermID
                          join template in service.UnitOfWork.FORM_TEMPLATEs
                          on setting.TEMPLATE_ID equals template.TEMPLATE_ID
                          join dept in service.UnitOfWork.V_departments
                          on new { depcode = term.Department, hosp = term.Hospital } equals new { depcode = dept.Deptcode, hosp = dept.Shorthospcode }
                          where
                          (deptcode == null || term.Department == deptcode || term.DepCode == deptcode)
                          &&
                          (jobcodes == null || jobcodes.Count == 0 || jobcodes.Contains(term.JobCode))
                          &&
                          setting.ExecuteDate >= datefrom
                          &&
                          setting.ExecuteDate <= dateto
                          select new { setting, term, dept, template };
              int count = datas.Count();
              foreach (var data in datas)
              {
                  FormSendSettingData dto = new FormSendSettingData();
                  dto.DeptCode = data.dept.Deptcode;
                  dto.DeptName = data.dept.Deptname;
                  dto.EduTermID = data.term.EduTermID;
                  dto.EduTermName = GetEduTermFullName(data.term);
                  dto.EduTermDate = data.term.DateFrom.ToString("yyyy/MM/dd") + "~" + data.term.DateTo.ToString("yyyy/MM/dd");
                  dto.ExecuteDate = data.setting.ExecuteDate;
                  dto.FTListID = data.setting.FTListID;
                  dto.SettingName = data.setting.Name;
                  dto.TEMPLATE_ID = data.template.TEMPLATE_ID;
                  dto.TEMPLATE_NAME = data.template.TEMPLATE_NAME;
                  if (data.setting.Status != null)
                  {
                      dto.SettingStatus = "已發送";
                      list.Add(dto);
                      continue;
                  }
                  else
                  {
                      var memberlist = service.UnitOfWork.EduTeamMemberRundowns.Where(c => c.EduTermID == data.term.EduTermID);
                      int membercount = memberlist.Count();

                      if (membercount == 0)
                      {
                          dto.SettingStatus = "未設定學生";
                          list.Add(dto);
                          continue;
                      }

                      List<EduFormTemplateTarget> targets = service.UnitOfWork.EduFormTemplateTargets.Where(c => c.FTListID == data.setting.FTListID).ToList();

                      foreach (EduFormTemplateTarget target in targets)
                      {
                          if (target.RoleType != "S")
                          {
                              string teachertype = "";
                              if(target.TeacherType == null)
                              {
                                  teachertype = target.RoleType;
                              }
                              else
                              {
                                  teachertype = target.TeacherType;
                              }

                              foreach(EduTeamMemberRundown mem in memberlist)
                              {
                                  List<EduRefTeacher> settings = GetMemberRefTeacher(teachertype, mem.EduTermID, mem.MemberID, service, data.setting.FTListID);
                                  if(settings == null || settings.FirstOrDefault() == null)
                                  {
                                      dto.SettingStatus = "教師設定不完全";
                                      list.Add(dto);
                                      break;
                                  }
                              }
                          }
                      }

                  }


                  
              }

          }

          return list;
      }
      #endregion

      #region 投票系統

      public List<VoteMainDto> GetAvailableVote(string empcode, string hospcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {

              VoteMainAssembler asm = new VoteMainAssembler();

              List<VoteMainDto> result = asm.Assemble(service.UnitOfWork.Fn_GetAvailableVote(empcode, hospcode)).ToList();

              return result;
          }
      }

      public List<VoteMainDto> GetVotes(string keyword, DateTime? sdateS, DateTime? sdateE)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<VoteMainDto> result = service.ReadVoteMains(c =>
                  (keyword == null || keyword == "" || c.VoteName.Contains(keyword))
                  &&
                  (sdateS == null || (sdateS != null && c.Sdate >= sdateS))
                  &&
                  (sdateE == null || (sdateE != null && c.Sdate <= sdateE))
                  ).ToList();

              return result;
          }
      }

      public VoteStasticMain GetVoteStastic(int mainid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
          var datas = from main in service.UnitOfWork.VoteMains
                      join ins in service.UnitOfWork.VoteInstances
                      on new { mainid = main.ID, status = "V" } equals new { mainid = ins.MainID, status = ins.Status }
                      into tempins
                      from ins in tempins.DefaultIfEmpty()
                      join det in service.UnitOfWork.VoteInsDets
                      on ins.ID equals det.InstanceID
                      into tempdet
                      from det in tempdet.DefaultIfEmpty()
                      join g in service.UnitOfWork.VoteGroups
                      on det.GroupID equals g.ID
                      into tempg
                      from g in tempg.DefaultIfEmpty()
                      where main.ID == mainid
                      select new { main, ins, det, g };

          VoteStasticMain result = new VoteStasticMain();
          List<VoteStasticItem> list = new List<VoteStasticItem>();

          VoteMainAssembler mainasm = new VoteMainAssembler();
          result.MainDto = mainasm.Assemble(datas.Select(c => c.main).FirstOrDefault());

          var udlistdata = from ud in service.UnitOfWork.VoteUserDefineLists
                           join g in service.UnitOfWork.VoteGroups
                           on ud.GroupID equals g.ID
                           where ud.MainID == mainid
                           select new { ud, g };

          foreach (var uddata in udlistdata)
          {
              VoteStasticItem item = new VoteStasticItem();
              item.GroupID = uddata.ud.GroupID.Value;
              item.GroupName = uddata.g.GroupName;
              item.ItemName = uddata.ud.Text;
              item.ItemValue = uddata.ud.Value;
              item.DataCount = 0;
              list.Add(item);
          }

          if (list.Count == 0)
          {
              List<VoteGroupDto> vglist = GetVoteGroups(mainid);

              foreach(VoteGroupDto vg in vglist)
              {
                  foreach (VoteItemDto i in vg.VoteItems)
                  {
                      VoteStasticItem item = new VoteStasticItem();
                      item.GroupID = vg.ID;
                      item.GroupName = vg.GroupName;
                      item.ItemName = i.Text;
                      item.ItemValue = i.Value;
                      item.DataCount = 0;
                      list.Add(item);
                  }
              }
          }

          if (datas.Count(c => c.ins != null) == 0)
          {
              result.VoteCount = 0;
              return result;
          }

          result.VoteCount = datas.Select(c => c.ins.ID).Distinct().Count();

          foreach (var data in datas)
          {
              if (data.det != null)
              {
                  VoteStasticItem item = list.Where(c => c.ItemValue == data.det.Value && c.GroupID == data.det.GroupID).FirstOrDefault();
                  if (item == null)
                  {
                      item = new VoteStasticItem();
                      item.GroupID = data.det.GroupID;
                      item.GroupName = data.g.GroupName;
                      item.ItemName = data.det.Text;
                      item.ItemValue = data.det.Value;
                      item.DataCount = 1;
                      list.Add(item);
                  }
                  else
                  {
                      item.DataCount++;
                  }
              }
          }

          result.VoteItems = list.OrderBy(c => c.GroupID).ThenByDescending(c => c.DataCount).ToList();
          return result;


             }
      
      }

      public VoteMainDto GetVoteMain(int mainid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadVoteMains(c => c.ID == mainid).FirstOrDefault();
          }
      }

      public List<VoteGroupDto> GetVoteGroups(int mainid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              VoteMain main = service.UnitOfWork.VoteMains.Where(c=> c.ID == mainid).FirstOrDefault();
              List<VoteGroupDto> result = new List<VoteGroupDto>();

              var groups = from g in service.UnitOfWork.VoteGroups
                           where g.MainID == mainid
                           select g;

              List<string> jobs = main.VoteJobs.Select(c => c.JobCode).ToList();
              VoteGroupAssembler asm = new VoteGroupAssembler();
              foreach(var g in groups)
              {
                  VoteGroupDto dto = asm.Assemble(g);
                  dto.VoteItems = new List<VoteItemDto>();

                  List<VoteUserDefineListDto> udlist = service.ReadVoteUserDefineLists(c => c.MainID == mainid && c.GroupID == g.ID).ToList();

                  if (udlist.Count > 0)
                  {
                      foreach (VoteUserDefineListDto ud in udlist)
                      {
                          VoteItemDto item = new VoteItemDto();
                          item.Text = ud.Text;
                          item.Value = ud.Value;
                          dto.VoteItems.Add(item);
                      }
                  }
                  else
                  {
                      if (g.GroupType == "dept")
                      {
                          bool isotherdep = false;
                          List<string> depts = new List<string>();

                          if (g.VoteGConds.Count(c => c.CondType == "otherDept") > 0)
                          {
                              isotherdep = true;

                              foreach (VoteGroup og in groups.Where(c => c.ID != g.ID))
                              {
                                  List<string> odep = GetVoteGroupDept(og);
                                  depts.AddRange(odep);
                              }
                          }
                          else
                          {
                              isotherdep = false;

                              depts = GetVoteGroupDept(g);

                          }



                          var selections = from emp in service.UnitOfWork.V_KmuEmps
                                           join j in jobs
                                           on emp.Jobcode equals j
                                           join dep in service.UnitOfWork.V_departments
                                           on new { hosp = emp.Hospcode, loccode = emp.Loccode } equals new { hosp = dep.Hospcode, loccode = dep.Deptcode }
                                           where
                                           (emp.Enddate == null || emp.Enddate.Value >= DateTime.Now)
                                           &&
                                           emp.Loccode!="7000"
                                           &&
                                           emp.NONORG_ID == null
                                           &&
                                           (
                                           (isotherdep && !depts.Contains(emp.Loccode))
                                           ||
                                           (!isotherdep && depts.Contains(emp.Loccode))
                                           )
                                           select new { emp, dep };

                          foreach (var emp in selections)
                          {
                              if (dto.VoteItems.Count(c => c.Value == emp.emp.Empcode) == 0)
                              {
                                  VoteItemDto item = new VoteItemDto();
                                  item.Text = emp.dep.Deptname + " " + emp.emp.Empname;
                                  item.Value = emp.emp.Empcode;
                                  dto.VoteItems.Add(item);
                              }
                          }
                      }

                      if (g.GroupType == "eduteam")
                      {
                          
                          List<string> teams = new List<string>();

                          foreach(VoteGCond cond in g.VoteGConds)
                          {
                              teams.Add(cond.Code);
                          }





                          var selections = from emp in service.UnitOfWork.V_KmuEmps
                                           join member in service.UnitOfWork.Members
                                           on emp.Empcode equals member.IsHospMember
                                           join mteam in service.UnitOfWork.EduTeamMembers
                                           on member.MemberID equals mteam.MemberID
                                           where
                                           (emp.Enddate == null || emp.Enddate.Value >= DateTime.Now)
                                           &&
                                           teams.Contains(mteam.EduTeamCode)
                                           //&&
                                           //emp.NONORG_ID == null
                                           select new { emp };

                          foreach (var emp in selections)
                          {
                              if (dto.VoteItems.Count(c => c.Value == emp.emp.Empcode) == 0)
                              {
                                  VoteItemDto item = new VoteItemDto();
                                  item.Text = emp.emp.Empname;
                                  item.Value = emp.emp.Empcode;
                                  dto.VoteItems.Add(item);
                              }
                          }
                      }


                  }


                  dto.VoteItems = dto.VoteItems.OrderBy(c => c.Text).ToList();
                  if(dto.ChoiceCount == null && dto.ChoiceRate !=null)
                  {
                      dto.CanCheckCount = Convert.ToInt32(Math.Round(dto.VoteItems.Count * dto.ChoiceRate.Value));
                  }

                  if(dto.ChoiceCount!=null && dto.ChoiceRate == null)
                  {
                      dto.CanCheckCount = dto.ChoiceCount.Value;
                  }

                  //人太少就選一個
                  if (dto.CanCheckCount == 0 && dto.VoteItems.Count > 0)
                  {
                      dto.CanCheckCount = 1;
                  }

                  result.Add(dto);
              }


              return result;
          }
      }

      private List<string> GetVoteGroupDept(VoteGroup g)
      {
          List<string> depts = new List<string>();
          foreach (VoteGCond cond in g.VoteGConds.Where(c => c.CondType == "dept"))
          {
              if (!depts.Contains(cond.Code))
              {
                  depts.Add(cond.Code);
              }

              List<string> cdepts = GetChildDepts(cond.Code, g.VoteMain.HospCode);
              foreach (string dep in cdepts)
              {
                  if (!depts.Contains(dep))
                  {
                      depts.Add(dep);
                  }
              }
          }
          return depts;
      }

      public string SubmitVote(VoteInstanceDto ins, List<VoteInsDetDto> dets)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              if (service.UnitOfWork.VoteInstances.Count(c => c.Creater == ins.Creater && c.MainID == ins.MainID) > 0)
              {
                  return "您已進行過投票，無法重複投票";
              }

              VoteInstance vins = new VoteInstance();
              vins.Creater = ins.Creater;
              vins.CreateTime = ins.CreateTime;
              vins.MainID = ins.MainID;
              vins.Status = ins.Status;


              string intsql = @"INSERT INTO www_EduActivity.dbo.VoteInstance
(MainID, Creater, CreateTime, Status) 
VALUES (@MainID, @Creater, @CreateTime, @Status)

 ";
              List<SqlParameter> sqlparms = new List<SqlParameter>();
              sqlparms.Add(new SqlParameter("MainID", GetDBObject(vins.MainID)));
              sqlparms.Add(new SqlParameter("Creater", GetDBObject(vins.Creater)));
              sqlparms.Add(new SqlParameter("CreateTime", GetDBObject(vins.CreateTime)));
              sqlparms.Add(new SqlParameter("Status", GetDBObject(vins.Status)));
              
              (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

              

              //service.UnitOfWork.Add(vins);
              service.UnitOfWork.SaveChanges();
              vins.ID = service.UnitOfWork.VoteInstances.Max(c => c.ID);
              foreach(VoteInsDetDto dto in dets)
              {
                  dto.InstanceID = vins.ID;
                  intsql = @"INSERT INTO www_EduActivity.dbo.VoteInsDet
(InstanceID, GroupID, [Value], [Text]) 
VALUES (@InstanceID, @GroupID, @Value, @Text)

 ";
                  sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("InstanceID", GetDBObject(dto.InstanceID)));
                  sqlparms.Add(new SqlParameter("GroupID", GetDBObject(dto.GroupID)));
                  sqlparms.Add(new SqlParameter("Value", GetDBObject(dto.Value)));
                  sqlparms.Add(new SqlParameter("Text", GetDBObject(dto.Text)));

                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());
                  
                  //service.CreateVoteInsDet(dto, false);
              }

              try
              {
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch(Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }

          }
      }

      public int CopyVoteMain(VoteMainDto main, int corpbyid, List<VoteGroupDto> groups)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              VoteMain cmain = service.UnitOfWork.VoteMains.Where(c => c.ID == corpbyid).FirstOrDefault();


              VoteMain amain = new VoteMain();
              amain.Creater = main.Creater;
              amain.Edate = main.Edate;
              amain.Header = main.Header;
              amain.HospCode = main.HospCode;
              amain.Sdate = main.Sdate;
              amain.VoteName = main.VoteName;
              amain.VoteType = main.VoteType;

              string intsql = @"INSERT INTO www_EduActivity.dbo.VoteMain
(VoteName, Sdate, Edate, Creater, VoteType, HospCode, Header) 
VALUES (@VoteName, @Sdate, @Edate, @Creater, @VoteType, @HospCode, @Header)

                              ";
              List<SqlParameter> sqlparms = new List<SqlParameter>();
              sqlparms.Add(new SqlParameter("VoteName", GetDBObject(amain.VoteName)));
              sqlparms.Add(new SqlParameter("Sdate", GetDBObject(amain.Sdate)));
              sqlparms.Add(new SqlParameter("Edate", GetDBObject(amain.Edate)));
              sqlparms.Add(new SqlParameter("Creater", GetDBObject(amain.Creater)));
              sqlparms.Add(new SqlParameter("VoteType", GetDBObject(amain.VoteType)));
              sqlparms.Add(new SqlParameter("HospCode", GetDBObject(amain.HospCode)));
              sqlparms.Add(new SqlParameter("Header", GetDBObject(amain.Header)));
              try
              {
                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());
              }
              catch(Exception ex)
              {

              }


              //service.UnitOfWork.Add(amain);




              service.UnitOfWork.SaveChanges();
              int newmainid = service.UnitOfWork.VoteMains.Max(c=> c.ID);

              foreach (VoteTarget tar in cmain.VoteTargets)
              {
                  VoteTarget atar = new VoteTarget();
                  atar.MainID = newmainid;
                  atar.TargetID = tar.TargetID;
                  atar.TargetType = tar.TargetType;
                  service.UnitOfWork.Add(atar);
              }

              foreach (VoteJob job in cmain.VoteJobs)
              {
                  VoteJob ajob = new VoteJob();
                  ajob.MainID = newmainid;
                  ajob.JobCode = job.JobCode;


                  intsql = @"INSERT INTO www_EduActivity.dbo.VoteJob
(MainID,JobCode) 
VALUES (@MainID,@JobCode)

                              ";
                  sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("MainID", GetDBObject(ajob.MainID)));
                  sqlparms.Add(new SqlParameter("JobCode", GetDBObject(ajob.JobCode)));
                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                  
              }

              service.UnitOfWork.SaveChanges();

              foreach (VoteGroup group in cmain.VoteGroups)
              {
                  VoteGroupDto ingroup = groups.Where(c => c.GroupName == group.GroupName).FirstOrDefault();



                  VoteGroup agroup = new VoteGroup();
                  agroup.MainID = newmainid;
                  agroup.ChoiceCount = ingroup.ChoiceCount;
                  agroup.ChoiceRate = ingroup.ChoiceRate;
                  agroup.GroupName = group.GroupName;
                  agroup.GroupType = group.GroupType;
//                  service.UnitOfWork.Add(agroup);

                  intsql = @"
INSERT INTO www_EduActivity.dbo.VoteGroup
(MainID, GroupName, GroupType, ChoiceRate, ChoiceCount) 
VALUES (@MainID, @GroupName, @GroupType, @ChoiceRate, @ChoiceCount)
                              ";
                  sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("MainID", GetDBObject(agroup.MainID)));
                  sqlparms.Add(new SqlParameter("GroupName", GetDBObject(agroup.GroupName)));
                  sqlparms.Add(new SqlParameter("GroupType", GetDBObject(agroup.GroupType)));
                  sqlparms.Add(new SqlParameter("ChoiceRate", GetDBObject(agroup.ChoiceRate)));
                  sqlparms.Add(new SqlParameter("ChoiceCount", GetDBObject(agroup.ChoiceCount)));
                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());




                  service.UnitOfWork.SaveChanges();
                  int gid = service.UnitOfWork.VoteGroups.Max(c => c.ID);


                  foreach (VoteGCond cond in group.VoteGConds)
                  {
                      VoteGCond acond = new VoteGCond();
                      acond.GroupID = gid;
                      acond.Code = cond.Code;
                      acond.CondType = cond.CondType;


                      intsql = @"INSERT INTO www_EduActivity.dbo.VoteGCond
(GroupID,Code,CondType) 
VALUES (@GroupID,@Code,@CondType)
                              ";
                      sqlparms = new List<SqlParameter>();
                      sqlparms.Add(new SqlParameter("GroupID", GetDBObject(acond.GroupID)));
                      sqlparms.Add(new SqlParameter("Code", GetDBObject(acond.Code)));
                      sqlparms.Add(new SqlParameter("CondType", GetDBObject(acond.CondType)));
                      (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());
                      //service.UnitOfWork.Add(acond);
                  }
                  service.UnitOfWork.SaveChanges();
              }



              return newmainid;
          }

      }

      public string UpdateVoteMain(VoteMainDto main, List<VoteGroupDto> groups)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  service.UpdateVoteMain(main);

                  service.UpdateVoteGroups(groups);

                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      #endregion

      #region 學習護照

      public EduPassportTemplateDto GetEduPassportTemplateByID(string templateid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduPassportTemplates(c => c.TemplateID == templateid).FirstOrDefault();
          }
      }

      public string GetTopTeamCode(string teamcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduTeam t = service.UnitOfWork.EduTeams.Where(c => c.EduTeamCode == teamcode).FirstOrDefault();
              if (t != null)
              {
                  string topteamcode = t.EduTeamCode;
                  EduTeam teampt = t;

                  while (teampt.EduTeam1 != null)
                  {
                      teampt = teampt.EduTeam1;
                      topteamcode = teampt.EduTeamCode;
                  }

                  return topteamcode;
              }
              else
              {
                  return teamcode;
              }
          }
      }

      public List<PassPortCheckItemDto> GetPassPortCheckItemRef(string teamcode)//技術項目
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string topteamcode = GetTopTeamCode(teamcode);

              List<PassPortCheckItemDto> list = service.ReadPassPortCheckItems(c => c.TopTeamCode == topteamcode).ToList();

              return list;
          }
      }

      public List<EduPassportItemDto> GetEduPassportItems(string keyword, string jobserials, string deptcode, string empcodeorname)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var data = from item in service.UnitOfWork.EduPassportItems
                         join cr in service.UnitOfWork.V_KmuEmps
                         on item.Creater equals cr.Empcode
                         into tempcr
                         from cr in tempcr.DefaultIfEmpty()
                         join mo in service.UnitOfWork.V_KmuEmps
                         on item.Modifier equals mo.Empcode
                         into tempmo
                         from mo in tempmo.DefaultIfEmpty()
                         where
                         (keyword == null || keyword == "" || item.ItemName.Contains(keyword))
                         &&
                         (deptcode == null || deptcode == "" || item.EduPassportItemTargets.Count(c => c.TargetType == "dept" && c.TargetID == deptcode) > 0 || item.EduPassportItemTargets.Count(c => c.TargetType == "dept") == 0)
                         &&
                         (jobserials == null || jobserials == "" || item.EduPassportItemTargets.Count(c => c.TargetType == "job" && c.TargetID == jobserials) > 0 || item.EduPassportItemTargets.Count(c => c.TargetType == "job") == 0)
                         &&
                         (empcodeorname == "" || cr.Empcode == empcodeorname || cr.Empname.Contains(empcodeorname))
                         &&
                         item.Status != "X"
                         select new { item, cr, mo };
              EduPassportItemAssembler asm = new EduPassportItemAssembler();

              List<EduPassportItemDto> result = new List<EduPassportItemDto>();

              foreach (var d in data)
              {
                  EduPassportItemDto dto = asm.Assemble(d.item);
                  if (d.cr != null)
                  {
                      dto.CreaterName = d.cr.Empname;
                  }

                  if (d.mo != null)
                  {
                      dto.ModifierName = d.mo.Empname;
                  }
                  result.Add(dto);
              }

              return result;
          }
      }

      public EduPassportItemDto GetEduPassportItemWithDet(string itemid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduPassportItem item = (from i in service.UnitOfWork.EduPassportItems
                                      where i.ItemID == itemid
                                      select i).FirstOrDefault();

              if (item != null)
              {

                  EduPassportItemAssembler iasm = new EduPassportItemAssembler();
                  EduPassportItemTargetAssembler tasm = new EduPassportItemTargetAssembler();
                  EduPassportItemDetAssembler dasm = new EduPassportItemDetAssembler();
                  EduPassportPRefAssembler prasm = new EduPassportPRefAssembler();

                  EduPassportItemDto dto = iasm.Assemble(item);
                  dto.EduPassportItemDets = dasm.Assemble(item.EduPassportItemDets).ToList();
                  dto.EduPassportItemTargets = tasm.Assemble(item.EduPassportItemTargets).ToList();
                  dto.EduPassportPRefs = prasm.Assemble(item.EduPassportPRefs).ToList();

                  foreach (EduPassportPRefDto prdto in dto.EduPassportPRefs)
                  {
                      var pitem = service.UnitOfWork.PassPortCheckItems.Where(c => c.ItemCode == prdto.ItemCode).FirstOrDefault();
                      if (pitem != null)
                      {
                          prdto.itemName = pitem.ItemName;
                      }
                  }


                  return dto;
              }
              else
              {
                  return null;
              }
          }
      }

      public string CreateEduPassportItem(EduPassportItemDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              dto.ItemID = GetSerialNo("EduAct_EPItemID");

              service.CreateEduPassportItem(dto, true);

              foreach (EduPassportItemTargetDto tar in dto.EduPassportItemTargets)
              {
                  tar.ItemID = dto.ItemID;

                  string intsql = @"INSERT INTO www_EduActivity.dbo.EduPassportItemTarget
(ItemID, TargetType, TargetID) 
VALUES (@ItemID, @TargetType, @TargetID)

 ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("ItemID", GetDBObject(tar.ItemID)));
                  sqlparms.Add(new SqlParameter("TargetType", GetDBObject(tar.TargetType)));
                  sqlparms.Add(new SqlParameter("TargetID", GetDBObject(tar.TargetID)));


                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                  //service.CreateEduPassportItemTarget(tar, false);
              }

              foreach (EduPassportItemDetDto det in dto.EduPassportItemDets)
              {
                  det.ItemID = dto.ItemID;

                  string intsql = @"INSERT INTO www_EduActivity.dbo.EduPassportItemDet
(ItemID, FieldDesc, FieldTarget, Seq, FieldType, IsNecessary, SelectOptions) 
VALUES (@ItemID, @FieldDesc, @FieldTarget, @Seq, @FieldType, @IsNecessary, @SelectOptions)

 ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("ItemID", GetDBObject(det.ItemID)));
                  sqlparms.Add(new SqlParameter("FieldDesc", GetDBObject(det.FieldDesc)));
                  sqlparms.Add(new SqlParameter("FieldTarget", GetDBObject(det.FieldTarget)));
                  sqlparms.Add(new SqlParameter("Seq", GetDBObject(det.Seq)));
                  sqlparms.Add(new SqlParameter("FieldType", GetDBObject(det.FieldType)));
                  sqlparms.Add(new SqlParameter("IsNecessary", GetDBObject(det.IsNecessary)));
                  sqlparms.Add(new SqlParameter("SelectOptions", GetDBObject(det.SelectOptions)));


                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                  //service.CreateEduPassportItemDet(det, false);
              }

              foreach (EduPassportPRefDto pr in dto.EduPassportPRefs)
              {
                  pr.ItemID = dto.ItemID;

                  string intsql = @"INSERT INTO www_EduActivity.dbo.EduPassportPRef
(ItemID, ItemCode) 
VALUES (@ItemID, @ItemCode)
 ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("ItemID", GetDBObject(pr.ItemID)));
                  sqlparms.Add(new SqlParameter("ItemCode", GetDBObject(pr.ItemCode)));


                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());




                  //service.CreateEduPassportPRef(pr, false);
              }

              try
              {
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }

      public string UpdateEduPassportItem(EduPassportItemDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.UpdateEduPassportItem(dto, false);

              service.DeleteEduPassportItemDets(service.ReadEduPassportItemDets(c => c.ItemID == dto.ItemID), false);
              foreach (EduPassportItemDetDto det in dto.EduPassportItemDets)
              {
                  det.ItemID = dto.ItemID;
                  string intsql = @"INSERT INTO www_EduActivity.dbo.EduPassportItemDet
(ItemID, FieldDesc, FieldTarget, Seq, FieldType, IsNecessary, SelectOptions) 
VALUES (@ItemID, @FieldDesc, @FieldTarget, @Seq, @FieldType, @IsNecessary, @SelectOptions)

 ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("ItemID", GetDBObject(det.ItemID)));
                  sqlparms.Add(new SqlParameter("FieldDesc", GetDBObject(det.FieldDesc)));
                  sqlparms.Add(new SqlParameter("FieldTarget", GetDBObject(det.FieldTarget)));
                  sqlparms.Add(new SqlParameter("Seq", GetDBObject(det.Seq)));
                  sqlparms.Add(new SqlParameter("FieldType", GetDBObject(det.FieldType)));
                  sqlparms.Add(new SqlParameter("IsNecessary", GetDBObject(det.IsNecessary)));
                  sqlparms.Add(new SqlParameter("SelectOptions", GetDBObject(det.SelectOptions)));


                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());                  

                  //service.CreateEduPassportItemDet(det, false);
              }

              service.DeleteEduPassportItemTargets(service.ReadEduPassportItemTargets(c => c.ItemID == dto.ItemID), false);
              foreach (EduPassportItemTargetDto tar in dto.EduPassportItemTargets)
              {
                  tar.ItemID = dto.ItemID;

                  string intsql = @"INSERT INTO www_EduActivity.dbo.EduPassportItemTarget
(ItemID, TargetType, TargetID) 
VALUES (@ItemID, @TargetType, @TargetID)

 ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("ItemID", GetDBObject(tar.ItemID)));
                  sqlparms.Add(new SqlParameter("TargetType", GetDBObject(tar.TargetType)));
                  sqlparms.Add(new SqlParameter("TargetID", GetDBObject(tar.TargetID)));


                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                  //service.CreateEduPassportItemTarget(tar, false);
              }

              service.DeleteEduPassportPRefs(service.ReadEduPassportPRefs(c => c.ItemID == dto.ItemID), false);
              foreach (EduPassportPRefDto pr in dto.EduPassportPRefs)
              {
                  pr.ItemID = dto.ItemID;

                  string intsql = @"INSERT INTO www_EduActivity.dbo.EduPassportPRef
(ItemID, ItemCode) 
VALUES (@ItemID, @ItemCode)
 ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("ItemID", GetDBObject(pr.ItemID)));
                  sqlparms.Add(new SqlParameter("ItemCode", GetDBObject(pr.ItemCode)));


                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());
                  //service.CreateEduPassportPRef(pr, false);
              }

              try
              {
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }


      public string DeleteEduPassportItem(string itemid, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduPassportItem item = service.UnitOfWork.EduPassportItems.Where(c => c.ItemID == itemid).FirstOrDefault();
              if (item != null)
              {
                  item.Status = "X";
                  item.Modifier = empcode;
                  item.Modifydate = DateTime.Now;

                  try
                  {
                      service.UnitOfWork.SaveChanges();
                      return null;
                  }
                  catch (Exception ex)
                  {
                      service.UnitOfWork.ClearChanges();
                      return ex.Message;
                  }
              }
              else
              {
                  return null;
              }
          }
      }

      public string UpdateEduPassportTemplateStatus(string templateid,string status)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var template = service.UnitOfWork.EduPassportTemplates.Where(c => c.TemplateID == templateid).FirstOrDefault();
              if (template != null)
              {
                  template.Status = status;
                  try
                  {
                      service.UnitOfWork.SaveChanges();
                  }
                  catch (Exception ex)
                  {
                      service.UnitOfWork.ClearChanges();
                      return ex.Message;
                  }
              }

              return null;
          }
      }

      public List<EduPassportTemplateDto> GetEduPassportTemplates(string keyword, string jobserials, string deptcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var data = from temp in service.UnitOfWork.EduPassportTemplates
                         join cr in service.UnitOfWork.V_KmuEmps
                         on temp.Creater equals cr.Empcode
                         into tempcr
                         from cr in tempcr.DefaultIfEmpty()
                         join mo in service.UnitOfWork.V_KmuEmps
                         on temp.Modifier equals mo.Empcode
                         into tempmo
                         from mo in tempmo.DefaultIfEmpty()
                         where
                         (keyword == null || keyword == "" || temp.TemplateName.Contains(keyword))
                         &&
                         (deptcode == null || deptcode == "" || temp.EduPassportTemplateTargets.Count(c => c.TargetType == "dept" && c.TargetID == deptcode) > 0 || temp.EduPassportTemplateTargets.Count(c => c.TargetType == "dept") == 0)
                         &&
                         (jobserials == null || jobserials == "" || temp.EduPassportTemplateTargets.Count(c => c.TargetType == "job" && c.TargetID == jobserials) > 0 || temp.EduPassportTemplateTargets.Count(c => c.TargetType == "job") == 0)
                         &&
                         temp.Status != "X"
                         select new { temp, cr, mo };
              EduPassportTemplateAssembler asm = new EduPassportTemplateAssembler();

              List<EduPassportTemplateDto> result = new List<EduPassportTemplateDto>();

              foreach (var d in data)
              {
                  EduPassportTemplateDto dto = asm.Assemble(d.temp);
                  if (d.cr != null)
                  {
                      dto.CreaterName = d.cr.Empname;
                  }

                  if (d.mo != null)
                  {
                      dto.ModifierName = d.mo.Empname;
                  }
                  result.Add(dto);
              }

              return result;
          }
      }

      public EduPassportTemplateDto GetEduPassportTemplateWithItem(string templateid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduPassportTemplate item = (from i in service.UnitOfWork.EduPassportTemplates
                                          where i.TemplateID == templateid
                                          select i).FirstOrDefault();

              if (item != null)
              {

                  EduPassportTemplateAssembler iasm = new EduPassportTemplateAssembler();
                  EduPassportTemplateTargetAssembler tasm = new EduPassportTemplateTargetAssembler();
                  EduPassportTemplateItemAssembler dasm = new EduPassportTemplateItemAssembler();

                  EduPassportTemplateDto dto = iasm.Assemble(item);
                  dto.EduPassportTemplateItems = dasm.Assemble(item.EduPassportTemplateItems).ToList();
                  dto.EduPassportTemplateTargets = tasm.Assemble(item.EduPassportTemplateTargets).ToList();
                  foreach (EduPassportTemplateItemDto i in dto.EduPassportTemplateItems)
                  {
                      i.ItemName = item.EduPassportTemplateItems.Where(c => c.ItemID == i.ItemID).FirstOrDefault().EduPassportItem.ItemName;
                  }
                  return dto;
              }
              else
              {
                  return null;
              }
          }
      }

      public string CreateEduPassportTemplate(EduPassportTemplateDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              dto.TemplateID = GetSerialNo("EduAct_EPTemplateID");

              service.CreateEduPassportTemplate(dto, true);

              foreach (EduPassportTemplateTargetDto tar in dto.EduPassportTemplateTargets)
              {
                  tar.TemplateID = dto.TemplateID;

                  string intsql = @"INSERT INTO www_EduActivity.dbo.EduPassportTemplateTarget
(TemplateID, TargetType, TargetID) 
VALUES (@TemplateID, @TargetType, @TargetID)

 ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("TemplateID", GetDBObject(tar.TemplateID)));
                  sqlparms.Add(new SqlParameter("TargetType", GetDBObject(tar.TargetType)));
                  sqlparms.Add(new SqlParameter("TargetID", GetDBObject(tar.TargetID)));


                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());


                  //service.CreateEduPassportTemplateTarget(tar, false);
              }

              foreach (EduPassportTemplateItemDto det in dto.EduPassportTemplateItems)
              {
                  det.TemplateID = dto.TemplateID;


                  string intsql = @"INSERT INTO www_EduActivity.dbo.EduPassportTemplateItem
(TemplateID, ItemID, Seq, Title, GroupName) 
VALUES (@TemplateID, @ItemID, @Seq, @Title, @GroupName)
 ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("TemplateID", GetDBObject(det.TemplateID)));
                  sqlparms.Add(new SqlParameter("ItemID", GetDBObject(det.ItemID)));
                  sqlparms.Add(new SqlParameter("Seq", GetDBObject(det.Seq)));
                  sqlparms.Add(new SqlParameter("Title", GetDBObject(det.Title)));
                  sqlparms.Add(new SqlParameter("GroupName", GetDBObject(det.GroupName)));

                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                  //service.CreateEduPassportTemplateItem(det, false);
              }

              try
              {
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }

      public string UpdateEduPassportTemplate(EduPassportTemplateDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.UpdateEduPassportTemplate(dto, false);

              service.DeleteEduPassportTemplateItems(service.ReadEduPassportTemplateItems(c => c.TemplateID == dto.TemplateID), false);
              (service.UnitOfWork as EduActivityContext).FlushChanges(true);
              foreach (EduPassportTemplateItemDto det in dto.EduPassportTemplateItems)
              {
                  det.TemplateID = dto.TemplateID;
                  det.TemplateID = dto.TemplateID;

                  string intsql = @"INSERT INTO www_EduActivity.dbo.EduPassportTemplateItem
(TemplateID, ItemID, Seq, Title, GroupName) 
VALUES (@TemplateID, @ItemID, @Seq, @Title, @GroupName)
 ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("TemplateID", GetDBObject(det.TemplateID)));
                  sqlparms.Add(new SqlParameter("ItemID", GetDBObject(det.ItemID)));
                  sqlparms.Add(new SqlParameter("Seq", GetDBObject(det.Seq)));
                  sqlparms.Add(new SqlParameter("Title", GetDBObject(det.Title)));
                  sqlparms.Add(new SqlParameter("GroupName", GetDBObject(det.GroupName)));

                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());



                  
                  //service.CreateEduPassportTemplateItem(det, false);
              }

              service.DeleteEduPassportTemplateTargets(service.ReadEduPassportTemplateTargets(c => c.TemplateID == dto.TemplateID), false);
              (service.UnitOfWork as EduActivityContext).FlushChanges(true);
              foreach (EduPassportTemplateTargetDto tar in dto.EduPassportTemplateTargets)
              {
                  tar.TemplateID = dto.TemplateID;

                  string intsql = @"INSERT INTO www_EduActivity.dbo.EduPassportTemplateTarget
(TemplateID, TargetType, TargetID) 
VALUES (@TemplateID, @TargetType, @TargetID)

 ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("TemplateID", GetDBObject(tar.TemplateID)));
                  sqlparms.Add(new SqlParameter("TargetType", GetDBObject(tar.TargetType)));
                  sqlparms.Add(new SqlParameter("TargetID", GetDBObject(tar.TargetID)));


                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                  //service.CreateEduPassportTemplateTarget(tar, false);
              }

              try
              {
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }


      public string DeleteEduPassportTemplate(string templateid, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduPassportTemplate item = service.UnitOfWork.EduPassportTemplates.Where(c => c.TemplateID == templateid).FirstOrDefault();
              if (item != null)
              {
                  item.Status = "X";
                  item.Modifier = empcode;
                  item.Modifydate = DateTime.Now;

                  try
                  {
                      service.UnitOfWork.SaveChanges();
                      return null;
                  }
                  catch (Exception ex)
                  {
                      service.UnitOfWork.ClearChanges();
                      return ex.Message;
                  }
              }
              else
              {
                  return null;
              }
          }
      }


      public DataTable QueryEduPassportInsItemData(string itemid, List<EduPassportInstanceDto> inslist)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              DataTable dt = new DataTable();
              dt.Columns.Add("學生職編");
              dt.Columns.Add("學生姓名");
              dt.Columns.Add("項目名稱");
              dt.Columns.Add("項目狀態");
              dt.Columns.Add("審核老師職編");
              dt.Columns.Add("審核老師姓名");

              List<EduPassportItemDet> itemdets = service.UnitOfWork.EduPassportItemDets.Where(c => c.ItemID == itemid).ToList();

              Dictionary<int, string> detidmap = new Dictionary<int, string>();
              foreach (EduPassportItemDet det in itemdets)
              {
                  string columnname = det.FieldDesc;
                  int count = 0;

                  while (dt.Columns.Contains(columnname))
                  {
                      count++;
                      columnname = columnname + "_" + count.ToString();
                  }
                  detidmap.Add(det.ID, columnname);
                  dt.Columns.Add(columnname);
              }

              var datas = from iitems in service.UnitOfWork.EduPassportInsItems
                          join ins in inslist on iitems.InstanceID equals ins.InstanceID
                          join teacher in service.UnitOfWork.V_KmuEmps on iitems.TTarget equals teacher.Empcode
                          into tempteacher
                          from teacher in tempteacher.DefaultIfEmpty()
                          where iitems.ItemID == itemid
                          select new { iitems, ins, teacher };

              foreach (var data in datas)
              {
                  DataRow dr = dt.NewRow();
                  dr["學生職編"] = data.ins.EmpCode;
                  dr["學生姓名"] = data.ins.EmpName;
                  dr["項目名稱"] = data.iitems.ItemName;
                  switch (data.iitems.Status)
                  {
                      case "0":
                          dr["項目狀態"] = "未完成";
                          break;
                      case "1":
                          dr["項目狀態"] = "待審核";
                          break;
                      case "V":
                          dr["項目狀態"] = "已完成";
                          break;
                  }

                  if (data.teacher != null)
                  {
                      dr["審核老師職編"] = data.teacher.Empcode;
                      dr["審核老師姓名"] = data.teacher.Empname;
                  }

                  foreach (var det in data.iitems.EduPassportInsItemDets)
                  {
                      dr[detidmap[det.DetID.Value]] = det.FieldValue;
                  }

                  dt.Rows.Add(dr);
              }


              return dt;
          }
      }

      public string DeleteEduPassportInstance(string instanceid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduPassportInstance ins = service.UnitOfWork.EduPassportInstances.Where(c => c.InstanceID == instanceid).FirstOrDefault();
              if (ins != null)
              {
                  ins.Status = "X";
              }
              try
              {
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }

      public List<EduPassportInstanceDto> QueryEduPassportInstance(string eduyear,string jobcode,string deptcode,string empcodename,string templateid,DateTime? sdate,DateTime? edate, string itemid , ref DataTable itemdata )
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduPassportInstanceDto> result = new List<EduPassportInstanceDto>();
              var empdata = (from mem in service.UnitOfWork.Members
                             join run in service.UnitOfWork.EduTeamMemberRundowns
                             on mem.MemberID equals run.MemberID
                             join term in service.UnitOfWork.EduTerms
                             on run.EduTermID equals term.EduTermID
                             where
                             (eduyear == null || eduyear == "" || term.EduYear == eduyear)
                             &&
                             (jobcode == null || jobcode == "" || term.JobCode == jobcode)
                             &&
                             (deptcode == null || deptcode == "" || term.DepCode == deptcode || term.Department == deptcode)
                             &&
                             (empcodename == null || empcodename == "" || mem.IsHospMember == empcodename || mem.Name == empcodename)
                             &&
                             (sdate == null || mem.DateFrom.Date >= sdate)
                             &&
                             (edate == null || mem.DateFrom.Date <= edate)
                             select mem.IsHospMember).Distinct().ToList();


              var getedList = (from instance in service.UnitOfWork.EduPassportInstances
                               join template in service.UnitOfWork.EduPassportTemplates
                               on instance.TemplateID equals template.TemplateID
                               join emp in service.UnitOfWork.V_KmuEmps
                               on instance.EmpCode equals emp.Empcode
                               where (templateid == null || templateid == "" || instance.TemplateID == templateid)
                               && (empdata.Contains(instance.EmpCode) || (instance.EmpCode == empcodename))
                               && instance.Status == "V"
                               select new { instance, template, emp }).ToList();

              EduPassportInstanceAssembler asm = new EduPassportInstanceAssembler();

              foreach (var ins in getedList)
              {
                  EduPassportInstanceDto dto = asm.Assemble(ins.instance);

                  dto.IsGet = true;
                  dto.ItemCount = ins.instance.EduPassportInsItems.Where(c => c.ItemID != "20160719000000000679").Count();
                  dto.FinishCount = ins.instance.EduPassportInsItems.Count(c => c.Status == "V" && c.ItemID != "20160719000000000679");
                  dto.WaitingCount = ins.instance.EduPassportInsItems.Count(c => c.Status == "1" && c.ItemID != "20160719000000000679");
                  dto.NotFinishCount = ins.instance.EduPassportInsItems.Count(c => c.Status == "0" && c.ItemID != "20160719000000000679");
                  dto.StudentFinishCount = ins.instance.EduPassportInsItems.Count(c => (c.Status == "1" || c.Status == "V") && c.ItemID != "20160719000000000679");
                  dto.NecessaryCount = ins.instance.EduPassportInsItems.Count(c => c.EduPassportItem.IsNecessary && c.ItemID != "20160719000000000679");
                  dto.NecessaryNotFinishCount = ins.instance.EduPassportInsItems.Count(c => c.EduPassportItem.IsNecessary && c.Status == "0" && c.ItemID != "20160719000000000679");
                  dto.NecessaryWaitingCount = ins.instance.EduPassportInsItems.Count(c => c.EduPassportItem.IsNecessary && c.Status == "1" && c.ItemID != "20160719000000000679");
                  dto.NecessaryFinishCount = ins.instance.EduPassportInsItems.Count(c => c.EduPassportItem.IsNecessary && c.Status == "V" && c.ItemID != "20160719000000000679");


                  dto.EmpName = ins.emp.Empname;
                  result.Add(dto);
              }

              if (itemid != null && itemid != "")
              {
                  itemdata = QueryEduPassportInsItemData(itemid, result);
              }


              return result;
          }

      }

      public EduPassportReportMain GetEduPassportReportData(string instanceid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduPassportReportMain result = new EduPassportReportMain();

              var data = (from ins in service.UnitOfWork.EduPassportInstances
                          join emp in service.UnitOfWork.V_KmuEmps
                          on ins.EmpCode equals emp.Empcode
                          where ins.InstanceID == instanceid
                          select new { ins, emp }).FirstOrDefault();

              if (data != null)
              {
                  result.HOSPNAME = "高雄醫學大學附設中和紀念醫院";
                  result.PASSPORTNAME = data.ins.TemplateName;
                  result.STUDENTNAME = data.emp.Empname;

                  List<string> titles = data.ins.EduPassportInsItems.Select(c => c.Title).Distinct().ToList();

                  result.REPORTGROUPS = new List<EduPassportReportGroup>();

                  var itemlist = from item in data.ins.EduPassportInsItems
                                 join teacher in service.UnitOfWork.V_KmuEmps
                                 on item.TTarget equals teacher.Empcode
                                 into tempteacher
                                 from teacher in tempteacher.DefaultIfEmpty()
                                 select new { item, teacher };

                  foreach (string t in titles)
                  {
                      EduPassportReportGroup g = new EduPassportReportGroup();
                      g.ITEMGROUPNAME = t;
                      g.REPORTITEMS = new List<EduPassportReportItem>();
                      Hashtable ht = new Hashtable();

                      Dictionary<string, int> itemcount = new Dictionary<string, int>();


                      List<EduPassportReportItem> passdata = new List<EduPassportReportItem>();
                      foreach (var i in itemlist.Where(c => c.item.Title == t))
                      {
                          if (!itemcount.ContainsKey(i.item.ItemName))
                          {
                              itemcount.Add(i.item.ItemName, 0);
                          }
                          itemcount[i.item.ItemName]++;
                          EduPassportReportItem itmnec = new EduPassportReportItem();

                          itmnec.ITEMNAME = i.item.ItemName + "(" + itemcount[i.item.ItemName].ToString() + ")";
                          itmnec.ITEMGROUPNAME = t;
                          itmnec.COLUMNTITLE = "必修";
                          itmnec.ITEMVALUE = i.item.IsNecessary ? "必" : "";

                          g.REPORTITEMS.Add(itmnec);

                          foreach (EduPassportInsItemDet det in i.item.EduPassportInsItemDets)
                          {
                              EduPassportReportItem itm = new EduPassportReportItem();
                              itm.ITEMNAME = itmnec.ITEMNAME;// i.item.ItemName;
                              itm.ITEMGROUPNAME = t;
                              itm.COLUMNTITLE = det.FieldDesc;
                              itm.ITEMVALUE = det.FieldValue;

                              g.REPORTITEMS.Add(itm);
                          }


                          EduPassportReportItem itmpas = new EduPassportReportItem();
                          itmpas.ITEMNAME = itmnec.ITEMNAME;
                          itmpas.ITEMGROUPNAME = t;
                          itmpas.COLUMNTITLE = "審核狀態";

                          string passmsg = @"通過";
                          if (i.teacher != null)
                          {
                              passmsg += @"
指導老師:
" + i.teacher.Empname;
                          }


                          itmpas.ITEMVALUE = i.item.Status == "V" ? passmsg : "";
                          passdata.Add(itmpas);

                      }
                      g.REPORTITEMS.AddRange(passdata);
                      result.REPORTGROUPS.Add(g);
                  }


              }

              return result;
          }
      }

      public List<EduPassportInstanceDto>   GetEduPassportInstanceByEmp(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              //抓可以申請的
              List<EduPassportInstanceDto> result = new List<EduPassportInstanceDto>();
              var empdata = (from mem in service.UnitOfWork.Members
                             join run in service.UnitOfWork.EduTeamMemberRundowns
                             on mem.MemberID equals run.MemberID
                             join term in service.UnitOfWork.EduTerms
                             on run.EduTermID equals term.EduTermID
                             where term.DateFrom.Date <= DateTime.Now.Date
                                 //&& term.DateTo.Date >= DateTime.Now.Date
                             && mem.IsHospMember == empcode
                             && mem.DateFrom.Date <= DateTime.Now.Date
                             && mem.DateTo.Date >= DateTime.Now.Date
                             select new { jobserial = term.JobCode, dept = term.Department, dept2 = term.DepCode, edutermid = term.EduTermID }).Distinct();

              List<string> jobs = empdata.Select(c => c.jobserial).Distinct().ToList();
              List<string> depts = empdata.Select(c => c.dept).Distinct().ToList();
              List<string> depts2 = empdata.Select(c => c.dept2).Distinct().ToList();
              List<string> terms = empdata.Select(c => c.edutermid).Distinct().ToList();


              var templates = from temp in service.UnitOfWork.EduPassportTemplates
                              where
                              temp.EduPassportTemplateTargets.Count(c => c.TargetType == "job" && jobs.Contains(c.TargetID)) > 0
                              && service.UnitOfWork.EduPassportInstances.Count(c => c.EmpCode == empcode && c.TemplateID == temp.TemplateID && c.Status != "X") == 0
                              && temp.Status == "V"
                              && (temp.Sdate == null || temp.Sdate <= DateTime.Now)
                              && (temp.Edate == null || temp.Edate >= DateTime.Now)
                              select temp;


              foreach (var temp in templates)
              {
                  bool isadd = false;
                  if (temp.EduPassportTemplateTargets.Count(c => c.TargetType == "dept") > 0)
                  {
                      foreach (EduPassportTemplateTarget t in temp.EduPassportTemplateTargets.Where(c => c.TargetType == "dept"))
                      {
                          List<string> subdepts = GetChildDepts(t.TargetID);

                          if (subdepts.Count(c => depts.Contains(c) || depts2.Contains(c)) > 0)
                          {
                              isadd = true;
                              break;
                          }

                      }

                      //if (temp.EduPassportTemplateTargets.Count(c => c.TargetType == "dept" && depts.Contains(c.TargetID) || depts2.Contains(c.TargetID)) > 0)
                      //{
                      //    isadd = true;
                      //}
                  }
                  else
                  {
                      isadd = true;
                  }

                  if (temp.EduPassportTemplateTargets.Count(c => c.TargetType == "eduterm") > 0)
                  {
                      isadd = false;

                      foreach (EduPassportTemplateTarget t in temp.EduPassportTemplateTargets.Where(c => c.TargetType == "eduterm"))
                      {
                          if (terms.Contains(t.TargetID))
                          {
                              isadd = true;
                              break;
                          }
                      }
                  }


                  if (isadd)
                  {
                      EduPassportInstanceDto dto = new EduPassportInstanceDto();
                      dto.IsGet = false;
                      dto.EmpCode = empcode;
                      dto.InstanceID = temp.TemplateID;
                      dto.TemplateID = temp.TemplateID;
                      dto.TemplateName = temp.TemplateName;
                      dto.JobSerial = temp.EduPassportTemplateTargets.Where(c => c.TargetType == "job" && jobs.Contains(c.TargetID)).FirstOrDefault().TargetID;
                      result.Add(dto);
                  }
              }

              List<EduPassportInstance> getedList = service.UnitOfWork.EduPassportInstances.Where(c => c.EmpCode == empcode && c.Status == "V").ToList();

              EduPassportInstanceAssembler asm = new EduPassportInstanceAssembler();

              foreach (EduPassportInstance ins in getedList)
              {
                  EduPassportInstanceDto dto = asm.Assemble(ins);

                  dto.IsGet = true;
                  dto.ItemCount = ins.EduPassportInsItems.Count;
                  dto.FinishCount = ins.EduPassportInsItems.Count(c => c.Status == "V");
                  dto.WaitingCount = ins.EduPassportInsItems.Count(c => c.Status == "1");
                  dto.StudentFinishCount = ins.EduPassportInsItems.Count(c => c.Status == "1" || c.Status == "V");
                  dto.NotFinishCount = ins.EduPassportInsItems.Count(c => c.Status == "0");
                  dto.NecessaryCount = ins.EduPassportInsItems.Count(c => c.EduPassportItem.IsNecessary);
                  dto.NecessaryNotFinishCount = ins.EduPassportInsItems.Count(c => c.EduPassportItem.IsNecessary && c.Status == "0");
                  dto.NecessaryWaitingCount = ins.EduPassportInsItems.Count(c => c.EduPassportItem.IsNecessary && c.Status == "1");
                  dto.NecessaryFinishCount = ins.EduPassportInsItems.Count(c => c.EduPassportItem.IsNecessary && c.Status == "V");


                  result.Add(dto);
              }

              return result;
          }

      }


      public EduPassportInstanceDto GetEduPassportInstanceByID(string instanceid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduPassportInstanceAssembler iasm = new EduPassportInstanceAssembler();
              EduPassportInsItemAssembler itasm = new EduPassportInsItemAssembler();
              var ins = (from i in service.UnitOfWork.EduPassportInstances
                         join emp in service.UnitOfWork.V_KmuEmps
                         on i.EmpCode equals emp.Empcode
                         join temp in service.UnitOfWork.EduPassportTemplates
                         on i.TemplateID equals temp.TemplateID
                         where i.InstanceID == instanceid && temp.Status != "X"
                         select new { i, emp }).FirstOrDefault();

              EduPassportInstanceDto result = iasm.Assemble(ins.i);

              result.ItemCount = ins.i.EduPassportInsItems.Count;
              result.FinishCount = ins.i.EduPassportInsItems.Count(c => c.Status == "V");
              result.StudentFinishCount = ins.i.EduPassportInsItems.Count(c => c.Status == "1" || c.Status == "V");
              result.WaitingCount = ins.i.EduPassportInsItems.Count(c => c.Status == "1");
              result.NotFinishCount = ins.i.EduPassportInsItems.Count(c => c.Status == "0");
              result.NecessaryCount = ins.i.EduPassportInsItems.Count(c => c.EduPassportItem.IsNecessary);
              result.NecessaryNotFinishCount = ins.i.EduPassportInsItems.Count(c => c.EduPassportItem.IsNecessary && c.Status == "0");
              result.NecessaryWaitingCount = ins.i.EduPassportInsItems.Count(c => c.EduPassportItem.IsNecessary && c.Status == "1");
              result.NecessaryFinishCount = ins.i.EduPassportInsItems.Count(c => c.EduPassportItem.IsNecessary && c.Status == "V");
              result.EmpName = ins.emp.Empname;
              var itemwithteacher = from item in ins.i.EduPassportInsItems
                                    join emp in service.UnitOfWork.V_KmuEmps
                                    on item.TTarget equals emp.Empcode
                                    into temp
                                    from emp in temp.DefaultIfEmpty()
                                    select new { item, emp };

              result.EduPassportInsItems = new List<EduPassportInsItemDto>();

              

              EduPassportTemplate template = service.UnitOfWork.EduPassportTemplates.Where(c => c.TemplateID == ins.i.TemplateID).FirstOrDefault();
              if (template != null)
              {
                  result.TemplateDesc = template.TemplateDesc;
              }

              Dictionary<string, int> itemcount = new Dictionary<string, int>();

              foreach (var it in itemwithteacher)
              {
                  EduPassportInsItemDto dto = itasm.Assemble(it.item);

                  if (!itemcount.ContainsKey(it.item.ItemName))
                  {
                      itemcount.Add(it.item.ItemName, 0);
                  }
                  itemcount[it.item.ItemName]++;

                  dto.ItemName = dto.ItemName + "(" + itemcount[it.item.ItemName].ToString() + ")";

                  if (it.emp != null)
                  {
                      dto.TeacherName = it.emp.Empname;
                  }
                  result.EduPassportInsItems.Add(dto);
              }

              //result.EduPassportInsItems = itasm.Assemble(ins.EduPassportInsItems.ToList()).ToList();

              List<string> groupnames = result.EduPassportInsItems.Select(c => c.Title).Distinct().ToList();

              for (int i = 0; i < groupnames.Count; i++)
              {
                  string g = groupnames[i];

                  foreach (EduPassportInsItemDto dto in result.EduPassportInsItems.Where(c => c.Title == g))
                  {
                      dto.類別 = (i + 1).ToString() + "." + g;
                  }

              }

              return result;
          }
      }


      public List<EduPassportInsItemDto> GetEduPassportInsItemsByTeacherID(string teacherid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduPassportInsItemAssembler itasm = new EduPassportInsItemAssembler();
              var items = (from i in service.UnitOfWork.EduPassportInsItems
                           join emp in service.UnitOfWork.V_KmuEmps
                           on i.EduPassportInstance.EmpCode equals emp.Empcode
                           where i.TTarget == teacherid && i.Status == "1"
                           && i.EduPassportInstance.Status == "V"
                           select new { i, emp });
              List<EduPassportInsItemDto> result = new List<EduPassportInsItemDto>();

              foreach (var item in items)
              {
                  EduPassportInsItemDto dto = itasm.Assemble(item.i);
                  dto.StudentName = item.emp.Empname;
                  dto.TemplateName = item.i.EduPassportInstance.TemplateName;
                  dto.CurrentTeamName = GetEmpTeamName(item.emp.Empcode, item.i.EduPassportInstance.CreateDate.Value);
                  result.Add(dto);
              }

              return result;
          }
      }

      public string GetEmpTeamName(string empcode, DateTime thedate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string result = "";
              Member current = service.UnitOfWork.Members.Where(c => c.DateFrom <= thedate && c.DateTo >= thedate && c.IsHospMember == empcode).FirstOrDefault();
              if (current != null)
              {

                  EduTeamMember t = current.EduTeamMembers.FirstOrDefault();
                  if (t != null)
                  {
                      result += t.EduTeam.EduTeamName;
                      EduTeam tempt = t.EduTeam.EduTeam1;
                      if (tempt != null)
                      {
                          result = tempt.EduTeamName + "->" + result;
                      }
                  }
              }

              return result;
          }
      }


      public List<EduPassportInsItemDto> GetEduPassportInsItemsAdmin()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduPassportInsItemAssembler itasm = new EduPassportInsItemAssembler();
              var items = (from i in service.UnitOfWork.EduPassportInsItems
                           join emp in service.UnitOfWork.V_KmuEmps
                           on i.EduPassportInstance.EmpCode equals emp.Empcode
                           where i.TTarget == null && i.Status == "1"
                           && i.EduPassportInstance.Status == "V"
                           select new { i, emp });
              List<EduPassportInsItemDto> result = new List<EduPassportInsItemDto>();

              foreach (var item in items)
              {
                  EduPassportInsItemDto dto = itasm.Assemble(item.i);
                  dto.StudentName = item.emp.Empcode + " " + item.emp.Empname;
                  dto.TemplateName = item.i.EduPassportInstance.TemplateName;

                  result.Add(dto);
              }

              return result;
          }
      }

      public string AdminConfirmAllPassportInsItem(List<string> iitemids, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduPassportInsItem> iitems = (from i in service.UnitOfWork.EduPassportInsItems
                                                 join id in iitemids
                                                 on i.IItemID equals id
                                                 select i
                                                    ).ToList();

              foreach (EduPassportInsItem iitem in iitems)
              {
                  iitem.Status = "V";

                  iitem.ModifyDate = DateTime.Now;
                  iitem.Modifier = empcode;
              }

              try
              {
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }


      public EduPassportInsItemDto GetEduPassportInsItemByID(string iItemID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduPassportInstanceAssembler iasm = new EduPassportInstanceAssembler();
              EduPassportInsItemAssembler itasm = new EduPassportInsItemAssembler();
              EduPassportInsItemDetAssembler itdasm = new EduPassportInsItemDetAssembler();
              EduPassportInsItem iitem = (from i in service.UnitOfWork.EduPassportInsItems
                                          where i.IItemID == iItemID
                                          select i).FirstOrDefault();

              EduPassportInsItemDto result = itasm.Assemble(iitem);

              EduPassportTemplateItem ti = service.UnitOfWork.EduPassportTemplateItems.Where(c => c.TemplateID == iitem.EduPassportInstance.TemplateID && c.ItemID == iitem.ItemID).FirstOrDefault();
              if (ti.Title != "")
              {
                  result.ItemName = ti.Title + "-" + result.ItemName;
              }

              result.EduPassportInstance = iasm.Assemble(iitem.EduPassportInstance);

              result.EduPassportInsItemDets = itdasm.Assemble(iitem.EduPassportInsItemDets.ToList()).ToList();

              if (result.TTarget != null)
              {
                  V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == result.TTarget).FirstOrDefault();
                  if (emp != null)
                  {
                      result.TeacherName = emp.Empname;
                  }
              }
              return result;
          }
      }

      public string RejectEduPassportInsItem(EduPassportInsItemDto dto,string rejectreqson, string empcode, bool ishistory = false)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string msg = null;

              dto.Status = "0";
              dto.ModifyDate = DateTime.Now;
              dto.Modifier = empcode;
              dto.TTarget = null;

              service.UpdateEduPassportInsItem(dto, false);

              if (ishistory)
              {
                  EduPassportInsItemRejectHiDto history = new EduPassportInsItemRejectHiDto();
                  history.EmpCode = empcode;
                  history.IItemID = dto.IItemID;
                  history.Reason = rejectreqson;
                  history.RejectTime = DateTime.Now;



                  string intsql = @"INSERT INTO www_EduActivity.dbo.EduPassportInsItemRejectHis
(IItemID, RejectTime, EmpCode, Reason) 
VALUES (@IItemID, @RejectTime, @EmpCode, @Reason)


                              ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("IItemID", GetDBObject(history.IItemID)));
                  sqlparms.Add(new SqlParameter("RejectTime", GetDBObject(history.RejectTime)));
                  sqlparms.Add(new SqlParameter("EmpCode", GetDBObject(history.EmpCode)));
                  sqlparms.Add(new SqlParameter("Reason", GetDBObject(history.Reason)));

                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());


                  //service.CreateEduPassportInsItemRejectHi(history, false);
              }

              try
              {
                  service.UnitOfWork.SaveChanges();
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  msg = ex.Message;
              }
              return msg;
          }
      }

      public List<EduPassportInsItemRejectHiDto> GetRejectHistory(string iitemid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var his = from h in service.UnitOfWork.EduPassportInsItemRejectHis
                        join i in service.UnitOfWork.EduPassportInsItems
                        on h.IItemID equals i.IItemID
                        join m in service.UnitOfWork.EduPassportInstances
                        on i.InstanceID equals m.InstanceID
                        join emp in service.UnitOfWork.V_KmuEmps
                        on h.EmpCode equals emp.Empcode
                        where h.EmpCode != m.EmpCode && h.IItemID == iitemid
                        orderby h.RejectTime
                        select new { h, emp };
              List<EduPassportInsItemRejectHiDto> result = new List<EduPassportInsItemRejectHiDto>();
              EduPassportInsItemRejectHiAssembler asm = new EduPassportInsItemRejectHiAssembler();
              foreach (var h in his)
              {
                  EduPassportInsItemRejectHiDto dto = asm.Assemble(h.h);
                  dto.EmpName = h.emp.Empname;
                  result.Add(dto);
              }

              return result;
          }
                    
      }

      public string UpdateEduPassportInsItemStatus(List<string> itemIds, string status)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string msg = "";
              foreach (string itemid in itemIds)
              {
                  try
                  {
                      EduPassportInsItem itm = service.UnitOfWork.EduPassportInsItems.Where(c => c.IItemID == itemid).FirstOrDefault();
                      if (itm != null)
                      {
                          if (status == "V")
                          {
                              itm.ModifyDate = DateTime.Now;
                          }
                          itm.Status = status;
                          service.UnitOfWork.SaveChanges();
                      }
                  }
                  catch (Exception ex)
                  {
                      msg += "項目編號" + itemid + "審核失敗:" + ex.Message + "<br>";
                  }
              }

              return msg;
          }
      }

      public string UpdateEduPassportInsItem(EduPassportInsItemDto dto, List<EduPassportInsItemDetDto> dets, string empcode, bool submit)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string msg = null;
              if (submit)
              {
                  switch (dto.Status)
                  {
                      case "0":
                          dto.Status = "1";
                          dto.SubmitDate = DateTime.Now;
                          break;
                      case "1":
                          dto.Status = "V";
                          dto.ModifyDate = DateTime.Now;
                          break;
                  }
              }
              dto.Modifier = empcode;
              dto.AlertDate = DateTime.Now;

              service.UpdateEduPassportInsItem(dto, false);

              foreach (EduPassportInsItemDetDto det in dets)
              {
                  service.UpdateEduPassportInsItemDet(det, false);
              }

              try
              {
                  service.UnitOfWork.SaveChanges();
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  msg = ex.Message;
              }
              return msg;
          }
      }

      public List<string> GetCurrentJobSerial(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var empdata = (from mem in service.UnitOfWork.Members
                             join run in service.UnitOfWork.EduTeamMemberRundowns
                             on mem.MemberID equals run.MemberID
                             join term in service.UnitOfWork.EduTerms
                             on run.EduTermID equals term.EduTermID
                             where term.DateFrom.Date <= DateTime.Now.Date
                             && term.DateTo.Date >= DateTime.Now.Date
                             && mem.IsHospMember == empcode
                             && mem.DateFrom.Date <= DateTime.Now.Date
                             && mem.DateTo.Date >= DateTime.Now.Date
                             select term.JobCode).Distinct().ToList();

              return empdata;
          }

      }

      public string SendEduPassportInstance(string empcode, string templateid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string msg = null;

              if (service.UnitOfWork.EduPassportInstances.Count(c => c.EmpCode == empcode && c.TemplateID == templateid && c.Status == "V") > 0)
              {
                  return "該學員已有領取這本護照";
              }

              EduPassportInstanceDto input = new EduPassportInstanceDto();
              input.TemplateID = templateid;
              List<string> jobserials = GetCurrentJobSerial(empcode);
              if (jobserials.Count > 0)
              {
                  input.JobSerial = jobserials[0];
              }
              else
              {
                  input.JobSerial = "";
              }
              msg = CreateEduPassportInstance(empcode, input);
              return msg;
          }
      }

      public string CreateEduPassportInstance(string empcode, EduPassportInstanceDto toGetDto)
      {
          using (EduActivityContextService Service = new EduActivityContextService())
          {
              EduPassportTemplate temp = Service.UnitOfWork.EduPassportTemplates.Where(c => c.TemplateID == toGetDto.TemplateID && c.Status == "V").FirstOrDefault();
              string msg = null;

              if (temp != null)
              {
                  if (Service.UnitOfWork.EduPassportInstances.Count(c => c.EmpCode == empcode && c.TemplateID == temp.TemplateID && c.Status == "V") > 0)
                  {
                      return "已有領取過這本護照了";
                  }

                  try
                  {
                      EduPassportInstanceDto ins = new EduPassportInstanceDto();
                      ins.CreateDate = DateTime.Now;
                      ins.EmpCode = empcode;
                      ins.InstanceID = GetSerialNo("EduAct_EPInstanceID");
                      ins.JobSerial = toGetDto.JobSerial;
                      ins.TemplateID = temp.TemplateID;
                      ins.TemplateName = temp.TemplateName;
                      ins.Status = "V";

                      Service.CreateEduPassportInstance(ins, false);

                      foreach (var titem in temp.EduPassportTemplateItems)
                      {
                          EduPassportItem item = titem.EduPassportItem;
                          EduPassportInsItemDto iitem = new EduPassportInsItemDto();
                          iitem.GroupName = titem.GroupName;
                          iitem.IItemID = GetSerialNo("EduAct_EPIItemID");
                          iitem.InstanceID = ins.InstanceID;
                          iitem.ItemID = titem.ItemID;
                          iitem.ItemName = item.ItemName;
                          iitem.Seq = titem.Seq;
                          iitem.Status = "0";
                          iitem.Title = titem.Title;
                          iitem.IsNecessary = titem.EduPassportItem.IsNecessary;
                          Service.CreateEduPassportInsItem(iitem, false);

                          (Service.UnitOfWork as EduActivityContext).FlushChanges(true);
                          foreach (var itemdet in item.EduPassportItemDets)
                          {
                              string intsql = @"insert into edupassportinsitemdet (fieldDesc,FieldTarget,FieldType,DetID,IItemID,IsNecessary,seq,SelectOptions)
                              values (@fieldDesc,@FieldTarget,@FieldType,@DetID,@IItemID,@IsNecessary,@seq,@SelectOptions)";

                              (Service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql,
                               new SqlParameter("fieldDesc", GetDBObject(itemdet.FieldDesc))
                               , new SqlParameter("FieldTarget", GetDBObject(itemdet.FieldTarget))
                               , new SqlParameter("FieldType", GetDBObject(itemdet.FieldType))
                               , new SqlParameter("DetID", GetDBObject(itemdet.ID))
                               , new SqlParameter("IItemID", GetDBObject(iitem.IItemID))
                               , new SqlParameter("IsNecessary", GetDBObject(itemdet.IsNecessary))
                               , new SqlParameter("seq", GetDBObject(itemdet.Seq))
                               , new SqlParameter("SelectOptions",GetDBObject(itemdet.SelectOptions))
                               );
                          }
                      }

                      Service.UnitOfWork.SaveChanges();
                  }
                  catch (Exception ex)
                  {
                      Service.UnitOfWork.ClearChanges();
                      msg = ex.Message;
                  }
              }
              else
              {
                  msg = "指定護照樣版已不存在";
              }
              return msg;
          }
      }

      public string RefreshEduPassportInstance(string instanceid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduPassportInstance ins = service.UnitOfWork.EduPassportInstances.Where(c => c.InstanceID == instanceid).FirstOrDefault();
              if (ins == null)
              {
                  return "護照ID錯誤";
              }

              EduPassportTemplate temp = service.UnitOfWork.EduPassportTemplates.Where(c => c.TemplateID == ins.TemplateID && c.Status == "V").FirstOrDefault();
              string msg = null;

              if (temp != null)
              {
                  foreach (string itemid in temp.EduPassportTemplateItems.Select(c => c.ItemID).Distinct())
                  {
                      int ticount = temp.EduPassportTemplateItems.Count(c => c.ItemID == itemid);
                      int iicount = ins.EduPassportInsItems.Count(c => c.ItemID == itemid);
                      if (ticount > iicount)
                      {
                          var ilist = temp.EduPassportTemplateItems.Where(c => c.ItemID == itemid).OrderByDescending(c => c.Seq).ToList();
                          for (int i = 0; i < ticount - iicount; i++)
                          {
                              var titem = ilist[i];


                              EduPassportItem item = titem.EduPassportItem;
                              EduPassportInsItemDto iitem = new EduPassportInsItemDto();
                              iitem.GroupName = titem.GroupName;
                              iitem.IItemID = GetSerialNo("EduAct_EPIItemID");
                              iitem.InstanceID = ins.InstanceID;
                              iitem.ItemID = titem.ItemID;
                              iitem.ItemName = item.ItemName;
                              iitem.Seq = titem.Seq;
                              iitem.Status = "0";
                              iitem.Title = titem.Title;
                              iitem.IsNecessary = titem.EduPassportItem.IsNecessary;
                              service.CreateEduPassportInsItem(iitem, false);

                              foreach (var itemdet in item.EduPassportItemDets)
                              {
                                  EduPassportInsItemDetDto iitemdet = new EduPassportInsItemDetDto();
                                  iitemdet.FieldDesc = itemdet.FieldDesc;
                                  iitemdet.FieldTarget = itemdet.FieldTarget;
                                  iitemdet.FieldType = itemdet.FieldType;
                                  iitemdet.DetID = itemdet.ID;
                                  iitemdet.IItemID = iitem.IItemID;
                                  iitemdet.IsNecessary = itemdet.IsNecessary;
                                  iitemdet.Seq = itemdet.Seq;
                                  iitemdet.SelectOptions = itemdet.SelectOptions;
                                  service.CreateEduPassportInsItemDet(iitemdet, false);
                              }
                          }
                      }
                  }

                  try
                  {
                      service.UnitOfWork.SaveChanges();
                  }
                  catch (Exception ex)
                  {
                      service.UnitOfWork.ClearChanges();
                      msg = ex.Message;
                  }

              }
              else
              {
                  msg = "指定護照樣版已不存在";
              }


              return msg;
          }
      }

      public List<string[]> UploadEduPassportData(DataTable dt, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string[]> result = new List<string[]>();
              try
              {
                  int rowcount = 0;

                  foreach (DataRow dr in dt.Rows)
                  {
                      rowcount++;
                      if (dr["學生職編"].ToString() != "")
                      {
                          string templateid = dr["樣本代號(請複製下面值填入每行)"].ToString().Trim();
                          string itemid = dr["項目代號(請複製下面值填入每行)"].ToString().Trim();
                          string memberEmpCode = dr["學生職編"].ToString().Trim();
                          string teacherEmpCode = dr["審核老師職編(管理者直接審核免填)"].ToString().Trim();
                          string status = dr["審核狀態(0:未送出,1:待審核,V:已完成)"].ToString().Trim();

                          string color = "black";
                          string msg = "已上傳完成";

                          EduPassportTemplate template = service.UnitOfWork.EduPassportTemplates.Where(c => c.TemplateID == templateid).FirstOrDefault();

                          if (template == null)
                          {
                              color = "red";
                              msg = "第" + rowcount.ToString() + "行:樣板代號" + templateid + "不存在";
                              result.Add(new string[] { msg, color });
                              continue;
                          }

                          EduPassportTemplateItem titem = template.EduPassportTemplateItems.Where(c => c.ItemID == itemid).FirstOrDefault();

                          if (titem == null || titem.EduPassportItem == null)
                          {
                              color = "red";
                              msg = "第" + rowcount.ToString() + "行:項目代號" + itemid + "不存在";
                              result.Add(new string[] { msg, color });
                              continue;
                          }

                          if (service.UnitOfWork.V_KmuEmps.Count(c => c.Empcode == memberEmpCode) == 0)
                          {
                              color = "red";
                              msg = "第" + rowcount.ToString() + "行:學生職編" + memberEmpCode + "不存在";
                              result.Add(new string[] { msg, color });
                              continue;
                          }

                          EduPassportInstance ins = service.UnitOfWork.EduPassportInstances.Where(c => c.EmpCode == memberEmpCode && c.TemplateID == templateid && c.Status == "V").FirstOrDefault();
                          if (ins == null)
                          {
                              color = "red";
                              msg = "第" + rowcount.ToString() + "行:學生職編" + memberEmpCode + "，未持有該本護照";
                              result.Add(new string[] { msg, color });
                              continue;
                          }

                          EduPassportInsItem iitem = ins.EduPassportInsItems.Where(c => c.ItemID == itemid).FirstOrDefault();

                          if (iitem == null)
                          {
                              EduPassportItem item = titem.EduPassportItem;
                              iitem = new EduPassportInsItem();
                              iitem.GroupName = titem.GroupName;
                              iitem.IItemID = GetSerialNo("EduAct_EPIItemID");
                              iitem.InstanceID = ins.InstanceID;
                              iitem.ItemID = titem.ItemID;
                              iitem.ItemName = item.ItemName;
                              iitem.Seq = titem.Seq;
                              iitem.Status = "0";
                              iitem.Title = titem.Title;
                              iitem.IsNecessary = titem.EduPassportItem.IsNecessary;
                              service.UnitOfWork.Add(iitem);
                          }

                          iitem.Status = status;
                          iitem.TTarget = teacherEmpCode == "" ? null : teacherEmpCode;
                          iitem.Modifier = empcode;
                          iitem.ModifyDate = DateTime.Now;

                          for (int i = 5; i < dt.Columns.Count; i++)
                          {
                              string columnname = dt.Columns[i].ColumnName;
                              string[] namesplit = columnname.Split(new string[] { "{{", "}}" }, StringSplitOptions.RemoveEmptyEntries);

                              int detid = Convert.ToInt32(namesplit[namesplit.Length - 1]);
                              EduPassportItemDet det = titem.EduPassportItem.EduPassportItemDets.Where(c => c.ID == detid).FirstOrDefault();
                              if (det == null)
                              {
                                  color = "red";
                                  msg = "第" + rowcount.ToString() + "行:欄位" + columnname + "有誤";
                                  result.Add(new string[] { msg, color });
                                  continue;
                              }

                              EduPassportInsItemDet idet = service.UnitOfWork.EduPassportInsItemDets.Where(c => c.IItemID == iitem.IItemID && c.DetID == detid).FirstOrDefault();
                              if (idet == null)
                              {
                                  EduPassportInsItemDet iitemdet = new EduPassportInsItemDet();
                                  iitemdet.FieldDesc = det.FieldDesc;
                                  iitemdet.FieldTarget = det.FieldTarget;
                                  iitemdet.FieldType = det.FieldType;
                                  iitemdet.DetID = det.ID;
                                  iitemdet.IItemID = iitem.IItemID;
                                  iitemdet.IsNecessary = det.IsNecessary;
                                  iitemdet.Seq = det.Seq;
                                  iitemdet.SelectOptions = det.SelectOptions;
                                  iitemdet.FieldValue = dr[columnname].ToString();

                                  string intsql = @"INSERT INTO www_EduActivity.dbo.EduPassportInsItemDet
(IItemID, DetID, FieldDesc, FieldTarget, Seq, FieldType, IsNecessary, FieldValue, SelectOptions) 
VALUES (@IItemID, @DetID, @FieldDesc, @FieldTarget, @Seq, @FieldType, @IsNecessary, @FieldValue, @SelectOptions)

                              ";
                                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                                  sqlparms.Add(new SqlParameter("IItemID", GetDBObject(iitemdet.IItemID)));
                                  sqlparms.Add(new SqlParameter("DetID", GetDBObject(iitemdet.DetID)));
                                  sqlparms.Add(new SqlParameter("FieldDesc", GetDBObject(iitemdet.FieldDesc)));
                                  sqlparms.Add(new SqlParameter("FieldTarget", GetDBObject(iitemdet.FieldTarget)));
                                  sqlparms.Add(new SqlParameter("FieldDesc", GetDBObject(iitemdet.FieldDesc)));
                                  sqlparms.Add(new SqlParameter("Seq", GetDBObject(iitemdet.Seq)));
                                  sqlparms.Add(new SqlParameter("FieldType", GetDBObject(iitemdet.FieldType)));
                                  sqlparms.Add(new SqlParameter("IsNecessary", GetDBObject(iitemdet.IsNecessary)));
                                  sqlparms.Add(new SqlParameter("FieldValue", GetDBObject(iitemdet.FieldValue)));
                                  sqlparms.Add(new SqlParameter("SelectOptions", GetDBObject(iitemdet.SelectOptions)));
                                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                                  //service.UnitOfWork.Add(iitemdet);
                              }
                              else
                              {
                                  idet.FieldValue = dr[columnname].ToString();
                              }
                          }



                          try
                          {
                              service.UnitOfWork.SaveChanges();
                              color = "black";
                              msg = "第" + rowcount.ToString() + "行:學生職編" + memberEmpCode + "，匯入成功";
                          }
                          catch (Exception ex)
                          {
                              service.UnitOfWork.ClearChanges();
                              msg = "學員編號：" + memberEmpCode + ",樣板代號:" + templateid + ",項目代號:" + itemid + "," + "上傳失敗:" + ex.Message;
                              color = "red";
                          }

                          result.Add(new string[] { msg, color });
                      }
                  }
              }
              catch (Exception ex)
              {
                  result.Clear();
                  result.Add(new string[] { "檔案格式錯誤，請確認第一欄欄位名稱是否與範例相同:" + ex.Message, "red" });
              }
              finally
              {
                  service.UnitOfWork.ClearChanges();
              }
              return result;
          }
      }

      #endregion

      #region 學員課程查詢
      public DataTable QueryEduMemberTerm(string eduyear, string jobcode, string deptcode, string empcodename, DateTime? sdate, DateTime? edate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              DataTable dt = new DataTable();
              dt.Columns.Add("EduTermID");
              dt.Columns.Add("職編");
              dt.Columns.Add("姓名");
              dt.Columns.Add("職稱");
              dt.Columns.Add("實習單位");
              dt.Columns.Add("實習時間");
              dt.Columns.Add("課程");


              var members = from mem in service.UnitOfWork.Members
                            join rundown in service.UnitOfWork.EduTeamMemberRundowns
                            on mem.MemberID equals rundown.MemberID
                            join emp in service.UnitOfWork.V_KmuEmps
                            on mem.IsHospMember equals emp.Empcode
                            join term in service.UnitOfWork.EduTerms
                            on rundown.EduTermID equals term.EduTermID
                            join dept in service.UnitOfWork.V_departments
                            on new { deptcode = term.DepCode, hospcode = "KMUH" } equals new { deptcode = dept.Deptcode, hospcode = dept.Hospcode }
                            join jobdata in service.UnitOfWork.V_CodeRefs
                            on new { codetype = "EduAct_JobSerial", code = term.JobCode } equals new { codetype = jobdata.CodeType, code = jobdata.Code }
                            where
                            (empcodename == null || empcodename == "" || emp.Empname == empcodename || emp.Empcode == empcodename || emp.Idno == empcodename)
                            &&
                            (eduyear == null || eduyear == "" || term.EduYear == eduyear)
                            &&
                            (jobcode == null || jobcode == "" || term.JobCode == jobcode)
                            &&
                            (deptcode == null || deptcode == "" || term.DepCode == deptcode || term.Department == deptcode)
                            &&
                            (sdate == null || term.DateTo.Date >= sdate)
                            &&
                            (edate == null || term.DateFrom.Date <= edate)
                            orderby emp.Idno, term.DateFrom
                            select new { mem, rundown, emp, term, dept, jobdata };

              foreach (var mem in members)
              {
                  DataRow dr = dt.NewRow();
                  dr["EduTermID"] = mem.term.EduTermID;
                  dr["職編"] = mem.emp.Empcode;
                  dr["姓名"] = mem.emp.Empname;
                  dr["課程"] = GetEduTermFullName(mem.term);
                  dr["實習時間"] = mem.term.DateFrom.ToString("yyyy/MM/dd") + "~" + mem.term.DateTo.ToString("yyyy/MM/dd");
                  dr["實習單位"] = mem.dept.Deptname;
                  dr["職稱"] = mem.jobdata.Name;
                  dt.Rows.Add(dr);
              }
              return dt;
          }
      }
      #endregion

      #region 批次設定學生
      public List<EduTeamDto> GetEduTeamsByJobCode(string jobcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduTeamDto> result = service.ReadEduTeams(c => c.JobCode == jobcode).ToList();

              if (result.Count == 0)
              {
                  result = ReadEduTeams().ToList();
              }
              else
              {
                  foreach (EduTeamDto dto in result)
                  {
                      if (result.Count(c => c.EduTeamCode == dto.ParentEduTeamCode) == 0)
                      {
                          dto.ParentEduTeamCode = null;
                      }
                  }

              }

              return result;
          }
      }

      public string UpdateEduTeamMember(Dictionary<string, string> input)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string msg = null;
              foreach (string edutermid in input.Keys)
              {
                  EduTerm term = service.UnitOfWork.EduTerms.Where(c => c.EduTermID == edutermid).FirstOrDefault();
                  List<EduTeamMember> tmlist = service.UnitOfWork.EduTeamMembers.Where(c =>
                      c.EduTeam.EduTeamCode == input[edutermid]
                      && c.Member.DateFrom.Date <= term.DateFrom.Date
                      && c.Member.DateTo.Date >= term.DateTo.Date
                      ).ToList();
                  List<EduTeamMemberRundown> rundowns = service.UnitOfWork.EduTeamMemberRundowns.Where(c => c.EduTermID == edutermid).ToList();

                  for (int i = 0; i < rundowns.Count; i++)
                  {
                      if (tmlist.Count(c => c.MemberID == rundowns[i].MemberID) == 0)
                      {
                          service.UnitOfWork.Delete(rundowns[i]);
                      }
                  }


                  foreach (EduTeamMember tm in tmlist)
                  {
                      EduTeamMemberRundown mrd = new EduTeamMemberRundown();
                      mrd.MemberID = tm.MemberID;
                      mrd.EduTeamMemberID = tm.EduTeamMemberID;
                      mrd.EduTermID = edutermid;
                      mrd.MemberCode = tm.MemberCode;
                      service.UnitOfWork.Add(mrd);
                  }


              }


              try
              {
                  service.UnitOfWork.SaveChanges();

              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  msg = ex.Message;
              }
              return msg;
          }
      }

      #endregion

      #region 表單完成率查詢
      public Dictionary<string, DataTable> GetEduFormFinishRate(List<string> jobcodes, string deptcode, int? templateid, DateTime? sdate, DateTime? edate, string empcodename,List<string> empjobcodes, bool withexnotfinish, string deptcodeemp, out DataTable dt)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string> empcodes = empcodename.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).ToList();

              for (int i = 0; i < empcodes.Count; i++)
              {
                  empcodes[i] = empcodes[i].Trim();
              }

              Dictionary<string, DataTable> result = new Dictionary<string, DataTable>();
              dt = new DataTable();
              dt.Columns.Add("SeqNo");
              dt.Columns.Add("EmpCode");
              dt.Columns.Add("EmpName");
              dt.Columns.Add("AllCount");
              dt.Columns.Add("FinishCount");
              dt.Columns.Add("NotFinishCount");
              dt.Columns.Add("FinishRate");

              List<string> alldepts = null;
              if (deptcode != null && deptcode != "")
              {
                  alldepts = GetChildDepts(deptcode);
              }

              List<string> alldeptsemp = null;
              if (deptcodeemp != null && deptcodeemp != "")
              {
                  alldeptsemp = GetChildDepts(deptcodeemp);
              }


              var datas = from tar in service.UnitOfWork.FORM_INSTANCE_TARGETs
                          join form in service.UnitOfWork.FORM_INSTANCEs
                          on tar.INSTANCE_ID equals form.INSTANCE_ID
                          join term in service.UnitOfWork.EduTerms
                          on form.INHOSPID equals term.EduTermID
                          join emp in service.UnitOfWork.V_KmuEmps
                          on tar.TargetID equals emp.Empcode
                          join dep in service.UnitOfWork.V_departments
                          on new { depcode = term.DepCode, hospcode = "KMUH" } equals new { depcode = dep.Deptcode, hospcode = dep.Hospcode }
                          where (templateid == null || form.TEMPLATE_ID == templateid)
                          && (jobcodes == null || jobcodes.Contains(term.JobCode))
                          && (alldepts == null || alldepts.Contains(term.Department) || alldepts.Contains(term.DepCode))
                          && (sdate == null || form.INSTANCE_CREATE_DATETIME >= sdate)
                          && (edate == null || form.INSTANCE_CREATE_DATETIME <= edate)
                          && (empcodename == null || empcodename == "" || emp.Empcode == empcodename || emp.Empname == empcodename || empcodes.Contains(emp.Empcode))
                          && (empjobcodes == null || empjobcodes.Count == 0 || empjobcodes.Contains(emp.Jobcode))
                          && (!withexnotfinish || service.UnitOfWork.FORM_INSTANCEs.Count(d => d.PARENT_INSTANCE_ID == form.PARENT_INSTANCE_ID && d.PARENT_INSTANCE_ID != null && d.INSTANCE_ID < form.INSTANCE_ID && d.Status == '0') == 0)
                          && (alldeptsemp == null || alldeptsemp.Contains(emp.Loccode) || alldeptsemp.Contains(emp.Deptcode))
                          orderby emp.Empcode, tar.Status, form.INSTANCE_ID
                          select new { tar, instanceid = form.INSTANCE_ID, formname = form.INSTANCE_NAME, expiredate = form.ExpireDate, term, emp, dep };

              int seqno = 0;
              foreach (var data in datas)
              {

                  DataRow[] drs = dt.Select("EmpCode = '" + data.emp.Empcode + "'");
                  DataRow dr = null;
                  DataTable detdt = null;
                  if (drs.Length == 0)
                  {
                      dr = dt.NewRow();
                      dr["SeqNo"] = seqno.ToString();
                      dr["EmpCode"] = data.emp.Empcode;
                      dr["EmpName"] = data.emp.Empname;
                      dr["AllCount"] = 0;
                      dr["FinishCount"] = 0;
                      dr["NotFinishCount"] = 0;


                      detdt = new DataTable();
                      detdt.Columns.Add("表單序號");
                      detdt.Columns.Add("表單名稱");
                      detdt.Columns.Add("課程");
                      detdt.Columns.Add("科別");
                      detdt.Columns.Add("填寫人職編");
                      detdt.Columns.Add("填寫人姓名");
                      detdt.Columns.Add("填寫狀態");
                      detdt.Columns.Add("逾期日");
                      result.Add(seqno.ToString(), detdt);
                      seqno++;
                      dt.Rows.Add(dr);

                  }
                  else
                  {
                      dr = drs[0];
                      detdt = result[dr["SeqNo"].ToString()];
                  }

                  if (detdt.Select("表單序號='" + data.instanceid.ToString() + "'").Length == 0)
                  {

                      DataRow detrow = detdt.NewRow();
                      detrow["表單序號"] = data.instanceid.ToString();
                      detrow["表單名稱"] = data.formname;
                      detrow["課程"] = data.term.Name;
                      detrow["科別"] = data.dep.Deptname;
                      detrow["填寫人職編"] = data.emp.Empcode;
                      detrow["填寫人姓名"] = data.emp.Empname;
                      detrow["填寫人姓名"] = data.emp.Empname;
                      dr["AllCount"] = Convert.ToInt32(dr["AllCount"]) + 1;
                      switch (data.tar.Status)
                      {
                          case '0':
                              detrow["填寫狀態"] = "未完成";
                              dr["NotFinishCount"] = Convert.ToInt32(dr["NotFinishCount"]) + 1;
                              break;
                          case '1':
                              detrow["填寫狀態"] = "已完成";
                              dr["FinishCount"] = Convert.ToInt32(dr["FinishCount"]) + 1;
                              break;
                      }
                      detrow["逾期日"] = data.expiredate;

                      detdt.Rows.Add(detrow);
                  }
              }

              foreach (DataRow dr in dt.Rows)
              {
                  if (Convert.ToInt32(dr["AllCount"]) != 0)
                  {
                      dr["FinishRate"] = Math.Round((Convert.ToDouble(dr["FinishCount"]) / Convert.ToDouble(dr["AllCount"])) * 100, 2).ToString() + "%";
                  }
                  else
                  {
                      dr["FinishRate"] = "--";
                  }
              }

              return result;
          }
      }

      #endregion

      #region 教學點數

      public List<TeachPointEmpItemDatumDto> QueryTeachPointEmpItemData(int itemid, string empcodename, string creater, DateTime? sdate, DateTime? edate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var datas = from eitem in service.UnitOfWork.TeachPointEmpItemData
                          join item in service.UnitOfWork.TeachPointItems
                          on eitem.ItemID equals item.ItemID
                          join emp in service.UnitOfWork.V_KmuEmps
                          on eitem.EmpCode equals emp.Empcode
                          join cemp in service.UnitOfWork.V_KmuEmps
                          on eitem.Creater equals cemp.Empcode
                          where
                          eitem.ItemID == itemid
                          &&
                          (empcodename == null || empcodename == "" || emp.Empcode == empcodename || emp.Empname == empcodename)
                          &&
                          (creater == null || creater == "" || cemp.Empcode == creater || cemp.Empname == creater)
                          &&
                          (sdate == null || eitem.OccurDate.Date >= sdate)
                          &&
                          (edate == null || eitem.OccurDate.Date <= edate)
                          && eitem.Status == "V"
                          select new { eitem, item, emp, cemp };
              List<TeachPointEmpItemDatumDto> result = new List<TeachPointEmpItemDatumDto>();
              TeachPointEmpItemDatumAssembler asm = new TeachPointEmpItemDatumAssembler();
              foreach (var data in datas)
              {
                  TeachPointEmpItemDatumDto dto = asm.Assemble(data.eitem);
                  dto.EmpName = data.emp.Empname;
                  dto.CreateName = data.cemp.Empname;
                  dto.ItemName = data.item.ItemName;

                  result.Add(dto);
              }

              return result;
          }
      }

      public List<V_KmuEmpDto> GetEmpListByJobCode(string jobcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadV_KmuEmps(c => c.Jobcode != null && c.Jobcode == jobcode && (c.Enddate == null || c.Enddate >= DateTime.Now)).ToList();
          }
      }

      public List<TeachPointCalcTypeDto> GetTeachPointCalcTypes()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadTeachPointCalcTypes(c => c.Status != "X").ToList();
          }
      }

      public string DeleteTeachPointEmpItemData(int id)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              TeachPointEmpItemDatum data = service.UnitOfWork.TeachPointEmpItemData.Where(c => c.ID == id).FirstOrDefault();
              data.Status = "X";
              try
              {
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }

      public List<TeachPointItemDto> GetTeachPointItemToUpload(int caltype)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadTeachPointItems(c => c.ItemType == "Upload" && c.TeachPointCalcTypeRefs.Count(d => d.TypeID == caltype) > 0).ToList();
          }
      }

      public List<string[]> UploadTeachPointData(DataTable dt, string empcode,int itemid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string[]> result = new List<string[]>();
              try
              {
                  int rowcount = 0;

                  TeachPointItem titem = service.UnitOfWork.TeachPointItems.Where(c => c.ItemID == itemid).FirstOrDefault();

                  if (titem == null)
                  {
                      result.Add(new string[] { "項目代號" + itemid.ToString() + "不存在", "red" });
                      return result;
                  }


                  foreach (DataRow dr in dt.Rows)
                  {
                      rowcount++;
                      if (dr["員工編號"].ToString() != "")
                      {
                          string inempcode = dr["員工編號"].ToString();
                          decimal itemcount = Convert.ToDecimal(dr["點數"]);
                          DateTime occurtime = Convert.ToDateTime(dr["發生日期(西元年)"]).Date;
                          string remark = dr["備註"].ToString();

                          string color = "black";
                          string msg = "已上傳完成";

                          V_KmuEmpDto temp = service.ReadV_KmuEmps(c => c.Empcode == inempcode).FirstOrDefault();

                          if (temp == null)
                          {
                              color = "red";
                              msg = "第" + rowcount.ToString() + "行:員工編號" + inempcode + "不存在";
                              result.Add(new string[] { msg, color });
                              continue;
                          }


                          TeachPointEmpItemDatum data = new TeachPointEmpItemDatum();
                          data.CreateDate = DateTime.Now;
                          data.Creater = empcode;
                          data.EmpCode = inempcode;
                          data.ItemCount = itemcount;
                          data.ItemID = itemid;
                          data.OccurDate = occurtime;
                          data.Remark = remark;
                          data.Status = "V";


                          string intsql = @"INSERT INTO www_EduActivity.dbo.TeachPointEmpItemData
(ItemID, EmpCode, ItemCount, OccurDate, Creater, CreateDate, Status, Remark) 
VALUES (@ItemID, @EmpCode, @ItemCount, @OccurDate, @Creater, @CreateDate, @Status, @Remark)

                              ";
                          List<SqlParameter> sqlparms = new List<SqlParameter>();
                          sqlparms.Add(new SqlParameter("ItemID", GetDBObject(data.ItemID)));
                          sqlparms.Add(new SqlParameter("EmpCode", GetDBObject(data.EmpCode)));
                          sqlparms.Add(new SqlParameter("ItemCount", GetDBObject(data.ItemCount)));
                          sqlparms.Add(new SqlParameter("OccurDate", GetDBObject(data.OccurDate)));
                          sqlparms.Add(new SqlParameter("Creater", GetDBObject(data.Creater)));
                          sqlparms.Add(new SqlParameter("CreateDate", GetDBObject(data.CreateDate)));
                          sqlparms.Add(new SqlParameter("Status", GetDBObject(data.Status)));
                          sqlparms.Add(new SqlParameter("Remark", GetDBObject(data.Remark)));
                          (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                          //service.UnitOfWork.Add(data);


                          try
                          {
                              service.UnitOfWork.SaveChanges();
                              color = "black";
                              msg = "第" + rowcount.ToString() + "行:職編" + inempcode + "，匯入成功";
                          }
                          catch (Exception ex)
                          {
                              service.UnitOfWork.ClearChanges();
                              msg = "職編號：" + inempcode + ",項目代號:" + itemid.ToString() + "," + "上傳失敗:" + ex.Message;
                              color = "red";
                          }

                          result.Add(new string[] { msg, color });
                      }
                  }
              }
              catch (Exception ex)
              {
                  result.Clear();
                  result.Add(new string[] { "檔案格式錯誤，請確認第一欄欄位名稱是否與範例相同:" + ex.Message, "red" });
              }
              finally
              {
                  service.UnitOfWork.ClearChanges();
              }
              return result;
          }
      }

      public List<TeachPointCalcSumData> GetTeachPointCalcData(int typeid, List<string> empcode, DateTime sdate, DateTime edate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<TeachPointCalcSumData> result = new List<TeachPointCalcSumData>();
              try
              {
                  var ilist = (from i in service.UnitOfWork.TeachPointItems
                               join r in service.UnitOfWork.TeachPointCalcTypeRefs
                               on i.ItemID equals r.ItemID
                               where r.TypeID == typeid
                               select i).ToList();


                  foreach (string emp in empcode)
                  {
                      V_KmuEmpDto ve = service.ReadV_KmuEmps(c => c.Empcode == emp).FirstOrDefault();



                      TeachPointCalcSumData sumdata = new TeachPointCalcSumData();
                      sumdata.ItemDatas = new List<TeachPointCalcItemData>();

                      if (ve != null)
                      {
                          sumdata.EmpCode = ve.Empcode;
                          sumdata.EmpName = ve.Empname;

                          foreach (var i in ilist)
                          {
                              if (i.TeachPointJobItems.Count() > 0 && i.TeachPointJobItems.Count(c => c.JobCode == ve.Jobcode.Trim()) == 0)
                              {
                                  continue;
                              }
                              TeachPointCalcItemData item = new TeachPointCalcItemData();
                              switch (i.ItemType)
                              {
                                  case "TeachTime":
                                      item = CalcTeachPoint_TeachTime(i, emp, sdate, edate, typeid);
                                      break;
                                  case "Act":
                                      item = CalcTeachPoint_Act(i, emp, sdate, edate);
                                      break;
                                  case "Form":
                                      item = CalcTeachPoint_Form(i, emp, sdate, edate);
                                      break;
                                  case "CheckAct":
                                      item = CalcTeachPoint_CheckAct(i, emp, sdate, edate);
                                      break;
                                  case "RefTeacher":
                                      item = CalcTeachPoint_RefTeacher(i, emp, sdate, edate);
                                      break;
                                  case "CheckForm":
                                      item = CalcTeachPoint_CheckForm(i, emp, sdate, edate);
                                      break;
                                  case "Upload":
                                      item = CalcTeachPoint_Upload(i, emp, sdate, edate);
                                      break;
                                  case "CheckReq":
                                      item = CalcTeachPoint_CheckReq(i, emp, sdate, edate);
                                      break;
                                  case "BlockTime":
                                      item = CalcTeachPoint_BlockTime(i, emp, sdate, edate);
                                      break;
                              }
                              item.ItemID = i.ItemID;
                              item.ItemName = i.ItemName;
                              if (i.TrainingType != null)
                              {
                                  item.ItemName += " - " + i.TrainingType;
                              }
                              sumdata.ItemDatas.Add(item);
                          }
                      }
                      else
                      {
                          sumdata.EmpCode = emp;
                          sumdata.EmpName = "員工資料不存在!";
                      }

                      result.Add(sumdata);
                  }
              }
              catch (Exception ex)
              {

              }

              return result;
          }
      }

      public OSCECertDto GetAvailableOSCECertData(string empcode, DateTime sdate, DateTime edate)
      {
          //OSCECertDto result = service.ReadOSCECerts(c => (c.Edate >= edate || (c.Edate >= sdate && c.Edate < edate)) && c.EmpCode == empcode && c.Status != "X").FirstOrDefault();
          using (EduActivityContextService service = new EduActivityContextService())
          {
              OSCECertDto result = service.ReadOSCECerts(c => c.EmpCode == empcode && c.Status != "X").OrderByDescending(c => c.CreateDate).FirstOrDefault();

              return result;
          }
      }


      private TeachPointCalcItemData CalcTeachPoint_TeachTime(TeachPointItem item, string empcode, DateTime sdate, DateTime edate, int typeid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              TeachPointCalcItemData result = new TeachPointCalcItemData();
              result.SumPoint = 0;
              List<TeachPointCalcItemDetailData> detlist = new List<TeachPointCalcItemDetailData>();
              V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == empcode).FirstOrDefault();
              string deptcode = "";
              if (emp != null)
              {
                  deptcode = emp.Deptcode.Trim();
              }

              List<TeachPointRef> rrlist = null;

              if (item.TeachPointRefs.Count(c => c.RefGroup == deptcode) > 0)
              {
                  rrlist = item.TeachPointRefs.Where(c => c.RefGroup == deptcode).ToList();
              }
              else
              {
                  rrlist = item.TeachPointRefs.Where(c => c.RefGroup == "Other").ToList();
              }

              List<string> dispActList = new List<string>();
              //var reflist = from r in service.UnitOfWork.TeachPointRefs
              //              join rr in service.UnitOfWork.TeachPointCalcTypeRefs
              //              on r.ItemID equals rr.TeachPointItem.ItemID
              //              where rr.TypeID == typeid && r.RefType == "Act"
              //              select r.RefID;

              //foreach(string id in reflist)
              //{
              //    if (!dispActList.Contains(id))
              //        dispActList.Add(id);
              //}

              //var reqlist = from r in service.UnitOfWork.TeachPointItemRequires
              //              join rr in service.UnitOfWork.TeachPointCalcTypeRefs
              //              on r.ItemID equals rr.TeachPointItem.ItemID
              //              where rr.TypeID == typeid && r.ReqType == "Act"
              //              select r.ReqID;

              //foreach (string id in reqlist)
              //{
              //    if (!dispActList.Contains(id))
              //        dispActList.Add(id);
              //}



              foreach (TeachPointRef rr in rrlist)
              {
                  string settingid = rr.RefID;
                  DataTable CurrentActRate = new DataTable();
                  DataTable CurrentRoleRate = new DataTable();
                  DataTable CurrentMixRate = new DataTable();
                  DataTable CurrentJobCode = new DataTable();
                  bool cbNeedAtt = true;
                  bool cbNeedStudent = true;

                  List<string> htTargetType = new List<string>();
                  #region 取設定
                  TeachTimeTypeDto selected = service.ReadTeachTimeTypes(c => c.SettingType == settingid).FirstOrDefault();
                  bool cbLoadForm = selected.LoadFormData;
                  if (selected != null)
                  {
                      cbNeedAtt = selected.NeedAttachment;
                      cbNeedStudent = selected.NeedMember;

                      IEnumerable<TeachTimeRateDto> list = GetTeachTimeRate(settingid);



                      CurrentActRate.Columns.Add("acttype");
                      CurrentActRate.Columns.Add("acttypename");
                      CurrentActRate.Columns.Add("actrate1");
                      CurrentActRate.Columns.Add("actrate2");
                      CurrentActRate.Columns.Add("actratestr");

                      foreach (TeachTimeRateDto rate in list.Where(c => c.CodeType == "httargettype"))
                      {
                          htTargetType.Add(rate.SettingCode);
                      }


                      foreach (TeachTimeRateDto rate in list.Where(c => c.CodeType == "acttype"))
                      {
                          string acttypename = "";
                          string acttype = rate.SettingCode;
                          EduActTypeDto acttypedto = GetActTypeById(Convert.ToInt32(acttype));
                          if (acttypedto != null)
                          {
                              acttypename = acttypedto.CLS_NAME;
                          }

                          DataRow dr = CurrentActRate.NewRow();
                          dr["acttype"] = acttype;
                          dr["acttypename"] = acttypename;
                          dr["actrate1"] = rate.Rate1;
                          dr["actrate2"] = rate.Rate2;
                          dr["actratestr"] = rate.Rate1.ToString() + ":" + rate.Rate2.ToString();
                          CurrentActRate.Rows.Add(dr);

                      }



                      CurrentRoleRate.Columns.Add("roletype");
                      CurrentRoleRate.Columns.Add("roletypename");
                      CurrentRoleRate.Columns.Add("rolerate1");
                      CurrentRoleRate.Columns.Add("rolerate2");
                      CurrentRoleRate.Columns.Add("roleratestr");

                      List<V_CodeRefDto> roles = GetCodeRefs("EduAct_ActRoleType");

                      foreach (TeachTimeRateDto rate in list.Where(c => c.CodeType == "roletype"))
                      {
                          DataRow dr = CurrentRoleRate.NewRow();
                          dr["roletype"] = rate.SettingCode;
                          V_CodeRefDto role = roles.Where(c => c.Code == rate.SettingCode).FirstOrDefault();

                          if (role != null)
                          {

                              dr["roletypename"] = role.Name;
                          }


                          dr["rolerate1"] = rate.Rate1;
                          dr["rolerate2"] = rate.Rate2;
                          dr["roleratestr"] = rate.Rate1.ToString() + ":" + rate.Rate2.ToString();
                          CurrentRoleRate.Rows.Add(dr);

                      }


                      CurrentMixRate.Columns.Add("acttype");
                      CurrentMixRate.Columns.Add("acttypename");
                      CurrentMixRate.Columns.Add("roletype");
                      CurrentMixRate.Columns.Add("roletypename");
                      CurrentMixRate.Columns.Add("mixrate1");
                      CurrentMixRate.Columns.Add("mixrate2");
                      CurrentMixRate.Columns.Add("mixratestr");
                      CurrentMixRate.Columns.Add("unit");

                      foreach (TeachTimeRateDto rate in list.Where(c => c.CodeType == "refroletype"))
                      {
                          DataRow dr = CurrentMixRate.NewRow();
                          dr["roletype"] = rate.SettingCode;
                          V_CodeRefDto role = roles.Where(c => c.Code == rate.SettingCode).FirstOrDefault();

                          if (role != null)
                          {

                              dr["roletypename"] = role.Name;
                          }

                          TeachTimeRateDto actdto = list.Where(c => c.SettingID == rate.RefID).FirstOrDefault();
                          if (actdto != null)
                          {
                              dr["acttype"] = actdto.SettingCode;
                              EduActTypeDto acttypedto = GetActTypeById(Convert.ToInt32(actdto.SettingCode));
                              if (acttypedto != null)
                              {
                                  dr["acttypename"] = acttypedto.CLS_NAME;
                              }
                          }


                          dr["mixrate1"] = rate.Rate1;
                          dr["mixrate2"] = rate.Rate2;
                          dr["mixratestr"] = rate.Rate1.ToString() + ":" + rate.Rate2.ToString() + (rate.Unit == null ? "" : rate.Unit);
                          dr["unit"] = (rate.Unit == null ? "" : rate.Unit);
                          CurrentMixRate.Rows.Add(dr);

                      }


                      CurrentJobCode.Columns.Add("JOB_CODE_X");
                      CurrentJobCode.Columns.Add("JOB_NAME");


                      if (list.Count(c => c.CodeType == "httargettype") > 0)
                      {
                          htTargetType = list.Where(c => c.CodeType == "httargettype").Select(c => c.SettingCode).ToList();
                      }
                  }
                  #endregion


                  DataTable resultdt = GetTeachTimeListData(sdate, edate.AddDays(1), CurrentActRate, CurrentRoleRate, CurrentMixRate, settingid, CurrentJobCode, cbNeedStudent, cbNeedAtt, empcode, new List<string>(), new List<string>(), htTargetType, true, true, dispActList, cbLoadForm);

                  foreach (DataRow s in resultdt.Rows)
                  {
                      TeachPointCalcItemDetailData det = new TeachPointCalcItemDetailData();

                      DateTime stime = DateTime.Now;
                      try
                      {
                          if (s["起訖時間"].ToString().Length >= 20)
                          {
                              stime = Convert.ToDateTime(s["起訖時間"].ToString().Substring(0, 20));
                          }
                          else
                          {
                              stime = Convert.ToDateTime(s["起訖時間"].ToString());
                          }
                      }
                      catch (Exception ex)
                      {

                      }
                      det.OrrcuTime = stime;
                      det.PointDesc = s["起訖時間"].ToString() + s["活動名稱"].ToString() + " 擔任" + s["身分別"].ToString();
                      decimal count = Convert.ToDecimal(s["加權後時數"]);

                      det.DetailPoint = Math.Round(count * item.EachPoint.Value, 4);
                      result.SumPoint += det.DetailPoint;
                      detlist.Add(det);

                  }

              }

              result.DetailData = detlist;
              return result;
          }
      }

      private TeachPointCalcItemData CalcTeachPoint_Act(TeachPointItem item, string empcode, DateTime sdate, DateTime edate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              DateTime realedate = edate.Date.AddDays(1).AddSeconds(-1);
              DateTime nowdate = DateTime.Now.Date.AddDays(1).AddSeconds(-1);
              TeachPointCalcItemData result = new TeachPointCalcItemData();
              result.SumPoint = 0;
              List<TeachPointCalcItemDetailData> detlist = new List<TeachPointCalcItemDetailData>();
              foreach (TeachPointRef rr in item.TeachPointRefs.Where(c => c.RefType == "Act"))
              {
                  List<int?> acts = (service.UnitOfWork as EduActivityContext).Fn_GetChildActType(Convert.ToInt32(rr.RefID)).Select(c => c.CLS_ID).ToList();
                  List<string> roles = new List<string>();
                  if (rr.RefGroup != "")
                  {
                      roles = item.TeachPointRefs.Where(c => c.RefType == "ActRole" && c.RefGroup == rr.RefGroup).Select(c => c.RefID).ToList();
                  }
                  List<string> actsstr = new List<string>();
                  foreach (int? a in acts)
                  {
                      if (a.HasValue)
                      {
                          if (!actsstr.Contains(a.ToString().Trim()))
                          {
                              actsstr.Add(a.ToString().Trim());

                          }
                      }
                  }

                  var sches = (from tar in service.UnitOfWork.EduActTargets
                               join role in service.UnitOfWork.V_CodeRefs
                               on new { id = tar.RoleType, type = "EduAct_ActRoleType" } equals new { id = role.Code, type = role.CodeType }
                               join s in service.UnitOfWork.EduStopActSchedules
                               on tar.EduStopActScheduleID equals s.EduStopActScheduleID
                               where
                               s.TimeFrom >= sdate
                               && s.TimeFrom <= realedate
                               && s.TimeFrom <= nowdate
                               && tar.TargetID == empcode
                               && (roles.Count == 0 || roles.Contains(tar.RoleType))
                               && actsstr.Contains(s.ActType)
                                       &&
                                       (s.EduStopActAttachments.Count > 0
                                       ||
                                       (from recref in service.UnitOfWork.RecordEduActRefs
                                        join rec in service.UnitOfWork.RecordInstances
                                        on recref.InstanceID equals rec.InstanceID
                                        where recref.EduStopActScheduleID == s.EduStopActScheduleID
                                        && rec.Status == "V"
                                        select rec
                                            ).Count() > 0
                                       )
                               orderby s.TimeFrom
                               select new { tar, role, s }).Distinct().ToList();


                  foreach (var s in sches)
                  {
                      TeachPointCalcItemDetailData det = new TeachPointCalcItemDetailData();
                      det.OrrcuTime = s.s.TimeFrom.Date;
                      det.PointDesc = s.s.TimeFrom.ToString("yyyy/MM/dd") + " " + s.tar.TimeFrom.ToString("HH:mm") + "~" + s.tar.TimeTo.ToString("HH:mm") + s.s.ActName + " 擔任" + s.role.Name;
                      decimal count = 1;
                      switch (item.PointUnit)
                      {
                          case "hr":
                              count = Convert.ToDecimal(Math.Floor((new DateTime(s.s.TimeFrom.Year, s.s.TimeFrom.Month, s.s.TimeFrom.Day, s.tar.TimeTo.Hour, s.tar.TimeTo.Minute, s.tar.TimeTo.Second) - new DateTime(s.s.TimeFrom.Year, s.s.TimeFrom.Month, s.s.TimeFrom.Day, s.tar.TimeFrom.Hour, s.tar.TimeFrom.Minute, s.tar.TimeFrom.Second)).TotalHours));
                              break;
                          case "row":
                              count = 1;
                              break;
                      }
                      det.DetailPoint = Math.Abs(count * item.EachPoint.Value);
                      result.SumPoint += det.DetailPoint;
                      detlist.Add(det);
                  }


              }

              result.DetailData = detlist;
              return result;
          }
      }



      private TeachPointCalcItemData CalcTeachPoint_Form(TeachPointItem item, string empcode, DateTime sdate, DateTime edate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              DateTime realedate = edate.Date.AddDays(1).AddSeconds(-1);
              TeachPointCalcItemData result = new TeachPointCalcItemData();
              result.SumPoint = 0;
              List<TeachPointCalcItemDetailData> detlist = new List<TeachPointCalcItemDetailData>();
              foreach (TeachPointRef rr in item.TeachPointRefs.Where(c => c.RefType == "Form"))
              {
                  int templateid = Convert.ToInt32(rr.RefID);
                  var forms = (from tar in service.UnitOfWork.FORM_INSTANCE_TARGETs
                               join ins in service.UnitOfWork.FORM_INSTANCEs
                               on tar.INSTANCE_ID equals ins.INSTANCE_ID
                               where
                               ins.INSTANCE_ALTER_DATETIME >= sdate
                               && ins.INSTANCE_ALTER_DATETIME <= realedate
                               && tar.TargetID == empcode
                               && ins.Status != '0'
                               && ins.TEMPLATE_ID == templateid
                               orderby ins.INSTANCE_ALTER_DATETIME
                               select new { tar, ins }).ToList();


                  foreach (var f in forms)
                  {
                      TeachPointCalcItemDetailData det = new TeachPointCalcItemDetailData();
                      det.OrrcuTime = f.ins.INSTANCE_ALTER_DATETIME.Value.Date;
                      det.PointDesc = f.ins.INSTANCE_ALTER_DATETIME.Value.ToString("yyyy/MM/dd HH:mm") + " 填寫 " + f.ins.INSTANCE_NAME;
                      decimal count = 1;
                      switch (item.PointUnit)
                      {
                          case "row":
                              count = 1;
                              break;
                      }
                      det.DetailPoint = count * item.EachPoint.Value;
                      result.SumPoint += det.DetailPoint;
                      detlist.Add(det);
                  }


              }

              result.DetailData = detlist;
              return result;
          }
      }


      private TeachPointCalcItemData CalcTeachPoint_Upload(TeachPointItem item, string empcode, DateTime sdate, DateTime edate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<DateTime[]> caldlist = new List<DateTime[]>();
              if (item.MaxPointEvalRange != null)
              {
                  caldlist = GetTeachPointCalcMonthList(sdate, edate, item.MaxPointEvalRange);
              }
              else
              {
                  caldlist.Add(new DateTime[] { sdate, edate });
              }


              TeachPointCalcItemData result = new TeachPointCalcItemData();
              result.SumPoint = 0;
              string hospcode = "KMUH";
              V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == empcode).FirstOrDefault();
                  
              if (emp != null)
              {
                  hospcode = emp.Hospcode;
              }
              result.DetailData = new List<TeachPointCalcItemDetailData>();

              DateTime redate = edate.Date.AddDays(1);
              var datalist = (from d in service.UnitOfWork.TeachPointEmpItemData
                              where d.ItemID == item.ItemID && d.Status != "X"
                              && d.OccurDate >= sdate && d.OccurDate < redate
                              && d.EmpCode == empcode
                              orderby d.OccurDate
                              select d).ToList();




              foreach (DateTime[] dinfo in caldlist)
              {
                  decimal dpoint = 0;


                  DateTime s = dinfo[0];
                  DateTime realedate = dinfo[1].AddDays(1);
                  DateTime nowdate = DateTime.Now.Date.AddDays(1).AddSeconds(-1);

                  bool hasfail = false;

                  foreach (TeachPointItemRequire req in item.TeachPointItemRequires)
                  {
                      if (req.ReqType == "Act")
                      {

                          List<string> checkid = new List<string>();
                          foreach (string id in req.ReqID.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries))
                          {
                              if (!checkid.Contains(id))
                              {
                                  checkid.Add(id);
                              }
                          }

                          if (req.ReqCount != null)
                          {

                              var allact = from act in service.UnitOfWork.EduStopActSchedules
                                           where checkid.Contains(act.ActType)
                                           && act.TimeFrom >= s && act.TimeFrom < realedate
                                           && act.HospCode == hospcode
                                           && act.TimeFrom <= nowdate
                                           &&
                                           (act.EduStopActAttachments.Count > 0
                                           ||
                                           (from recref in service.UnitOfWork.RecordEduActRefs
                                            join rec in service.UnitOfWork.RecordInstances
                                            on recref.InstanceID equals rec.InstanceID
                                            where recref.EduStopActScheduleID == act.EduStopActScheduleID
                                            && rec.Status == "V"
                                            select rec
                                                ).Count() > 0
                                           )
                                           orderby act.TimeFrom
                                           select act;
                              var joinact = allact.Where(c => c.EduActTargets.Count(d => d.TargetID == empcode) > 0);

                              if (joinact.Count() >= req.ReqCount.Value)
                              {
                              }
                              else
                              {
                                  hasfail = true;
                              }

                          }
                          else
                          {

                              var allact = from act in service.UnitOfWork.EduStopActSchedules
                                           where checkid.Contains(act.ActType)
                                           && act.TimeFrom >= s && act.TimeFrom < realedate
                                           && act.HospCode == hospcode
                                           && act.TimeFrom <= nowdate
                                           &&
                                           (act.EduStopActAttachments.Count > 0
                                           ||
                                           (from recref in service.UnitOfWork.RecordEduActRefs
                                            join rec in service.UnitOfWork.RecordInstances
                                            on recref.InstanceID equals rec.InstanceID
                                            where recref.EduStopActScheduleID == act.EduStopActScheduleID
                                            && rec.Status == "V"
                                            select rec
                                                ).Count() > 0
                                           )
                                           orderby act.TimeFrom
                                           select act;
                              var joinact = allact.Where(c => c.EduActTargets.Count(d => d.TargetID == empcode) > 0);

                              if (allact.Count() > 0)
                              {
                                  decimal joinactcount = Convert.ToDecimal(joinact.Count());
                                  decimal allactcount = Convert.ToDecimal(allact.Count());
                                  if ((joinactcount / allactcount) >= req.ReqRate.Value)
                                  {
                                  }
                                  else
                                  {
                                      hasfail = true;
                                  }
                              }
                              else
                              {
                                  hasfail = true;
                              }

                          }

                      }

                      if (req.ReqType == "Form")
                      {
                          List<int> checkid = new List<int>();
                          foreach (string id in req.ReqID.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries))
                          {
                              if (!checkid.Contains(Convert.ToInt32(id)))
                              {
                                  checkid.Add(Convert.ToInt32(id));
                              }
                          }

                          if (req.ReqCount != null)
                          {
                              var forms = from tar in service.UnitOfWork.FORM_INSTANCE_TARGETs
                                          where tar.TargetID == empcode
                                          && checkid.Contains(tar.FORM_INSTANCE.TEMPLATE_ID)
                                          && tar.FORM_INSTANCE.Status != '0'
                                          && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue
                                          && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME >= s
                                          && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME < realedate
                                          orderby tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME
                                          select tar;
                              if (forms.Count() >= req.ReqCount.Value)
                              {
                              }
                              else
                              {
                                  hasfail = true;
                              }


                          }
                          else
                          {
                              if (req.ReqRate != null)
                              {
                                  var forms = from tar in service.UnitOfWork.FORM_INSTANCE_TARGETs
                                              where tar.TargetID == empcode
                                              && checkid.Contains(tar.FORM_INSTANCE.TEMPLATE_ID)
                                                  //&& tar.FORM_INSTANCE.Status != '0'
                                              && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue
                                              && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME >= s
                                              && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME < realedate
                                              orderby tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME
                                              select tar;
                                  decimal allcount = Convert.ToDecimal(forms.Count());
                                  if (allcount == 0)
                                  {
                                      hasfail = true;
                                  }
                                  else
                                  {
                                      decimal donecount = Convert.ToDecimal(forms.Count(c => c.FORM_INSTANCE.Status != '0'));
                                      if ((donecount / allcount) >= req.ReqRate.Value)
                                      {
                                      }
                                      else
                                      {
                                          hasfail = true;
                                      }
                                  }
                              }
                          }
                      }

                  }
                  if (!hasfail)
                  {
                      List<TeachPointCalcItemDetailData> detlist = new List<TeachPointCalcItemDetailData>();
                      foreach (var rr in datalist.Where(c => c.OccurDate >= s && c.OccurDate < realedate).ToList())
                      {
                          TeachPointCalcItemDetailData det = new TeachPointCalcItemDetailData();
                          det.OrrcuTime = rr.OccurDate;
                          det.PointDesc = item.ItemName + " 次數" + rr.ItemCount.ToString();
                          if (rr.Remark != null && rr.Remark != "")
                          {
                              det.PointDesc = rr.Remark;
                          }


                          dpoint += rr.ItemCount;
                          det.DetailPoint = rr.ItemCount;


                          detlist.Add(det);
                      }

                      result.SumPoint += dpoint;
                      result.DetailData.AddRange(detlist);
                  }
              }



              return result;
          }
      }


      private TeachPointCalcItemData CalcTeachPoint_BlockTime(TeachPointItem item, string empcode, DateTime sdate, DateTime edate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<DateTime[]> caldlist = new List<DateTime[]>();
              if (item.MaxPointEvalRange != null)
              {
                  caldlist = GetTeachPointCalcMonthList(sdate, edate, item.MaxPointEvalRange);
              }
              else
              {
                  caldlist.Add(new DateTime[] { sdate, edate });
              }



              TeachPointCalcItemData result = new TeachPointCalcItemData();
              result.SumPoint = 0;
              string hospcode = "KMUH";
              V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == empcode).FirstOrDefault();

              if (emp != null)
              {
                  hospcode = emp.Hospcode;
              }
              result.DetailData = new List<TeachPointCalcItemDetailData>();

              DateTime redate = edate.Date.AddDays(1);
              var datalist = (from d in service.UnitOfWork.OSCEBlockTimes
                              where d.Status != "X"
                              && d.ClassDate >= sdate && d.ClassDate < redate
                              && d.EmpCode == empcode
                              orderby d.ClassDate
                              select d).ToList();




              foreach (DateTime[] dinfo in caldlist)
              {
                  decimal dpoint = 0;


                  DateTime s = dinfo[0];
                  DateTime realedate = dinfo[1].AddDays(1);
                  DateTime nowdate = DateTime.Now.Date.AddDays(1).AddSeconds(-1);

                  List<TeachPointCalcItemDetailData> detlist = new List<TeachPointCalcItemDetailData>();
                  foreach (var rr in datalist.Where(c => c.ClassDate >= s && c.ClassDate < realedate).ToList())
                  {
                      TeachPointCalcItemDetailData det = new TeachPointCalcItemDetailData();
                      det.OrrcuTime = rr.ClassDate.Value;
                      det.PointDesc = rr.ClassName + " 時數" + rr.TrainingTime.ToString();


                      dpoint += rr.TrainingTime.Value;
                      det.DetailPoint = rr.TrainingTime.Value;


                      detlist.Add(det);
                  }

                  result.SumPoint += dpoint;
                  result.DetailData.AddRange(detlist);

              }



              return result;
          }
      }


      private TeachPointCalcItemData CalcTeachPoint_CheckForm(TeachPointItem item, string empcode, DateTime sdate, DateTime edate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<DateTime[]> caldlist = new List<DateTime[]>();
              if (item.MaxPointEvalRange != null)
              {
                  caldlist = GetTeachPointCalcMonthList(sdate, edate, item.MaxPointEvalRange);
              }
              else
              {
                  caldlist.Add(new DateTime[] { sdate, edate });
              }


              TeachPointCalcItemData result = new TeachPointCalcItemData();
              result.DetailData = new List<TeachPointCalcItemDetailData>();
              result.SumPoint = 0;

              DateTime redate = edate.Date.AddDays(1);


              foreach (DateTime[] dinfo in caldlist)
              {
                  decimal dpoint = item.MaxPoint.Value;


                  DateTime s = dinfo[0];
                  DateTime realedate = dinfo[1].AddDays(1);


                  List<TeachPointCalcItemDetailData> detlist = new List<TeachPointCalcItemDetailData>();
                  bool hasfail = false;

                  foreach (TeachPointItemRequire req in item.TeachPointItemRequires)
                  {


                      List<int> checkid = new List<int>();
                      foreach (string id in req.ReqID.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries))
                      {
                          if (!checkid.Contains(Convert.ToInt32(id)))
                          {
                              checkid.Add(Convert.ToInt32(id));
                          }
                      }

                      if (req.ReqCount != null)
                      {
                          var forms = from tar in service.UnitOfWork.FORM_INSTANCE_TARGETs
                                      where tar.TargetID == empcode
                                      && checkid.Contains(tar.FORM_INSTANCE.TEMPLATE_ID)
                                      && tar.FORM_INSTANCE.Status != '0'
                                      && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue
                                      && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME >= s
                                      && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME < realedate
                                      orderby tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME
                                      select tar;
                          if (forms.Count() >= req.ReqCount.Value)
                          {
                              foreach (var form in forms.Take(Convert.ToInt32(req.ReqCount.Value)))
                              {
                                  TeachPointCalcItemDetailData det = new TeachPointCalcItemDetailData();

                                  det.OrrcuTime = form.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value;
                                  det.PointDesc = form.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.ToString("yyyy/MM/dd HH:mm") + " 填寫 " + form.FORM_INSTANCE.INSTANCE_NAME;

                                  det.DetailPoint = 0;

                                  detlist.Add(det);
                              }

                          }
                          else
                          {
                              hasfail = true;
                          }


                      }
                      else
                      {
                          if (req.ReqRate != null)
                          {
                              var forms = from tar in service.UnitOfWork.FORM_INSTANCE_TARGETs
                                          where tar.TargetID == empcode
                                          && checkid.Contains(tar.FORM_INSTANCE.TEMPLATE_ID)
                                              //&& tar.FORM_INSTANCE.Status != '0'
                                          && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue
                                          && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME >= s
                                          && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME < realedate
                                          orderby tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME
                                          select tar;
                              decimal allcount = Convert.ToDecimal(forms.Count());
                              if (allcount == 0)
                              {
                                  hasfail = true;
                              }
                              else
                              {
                                  decimal donecount = Convert.ToDecimal(forms.Count(c => c.FORM_INSTANCE.Status != '0'));
                                  if ((donecount / allcount) >= req.ReqRate.Value)
                                  {
                                      foreach (var form in forms.Where(c => c.FORM_INSTANCE.Status != '0').ToList())
                                      {
                                          TeachPointCalcItemDetailData det = new TeachPointCalcItemDetailData();

                                          det.OrrcuTime = form.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value;
                                          det.PointDesc = form.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.ToString("yyyy/MM/dd HH:mm") + " 填寫 " + form.FORM_INSTANCE.INSTANCE_NAME;

                                          det.DetailPoint = 0;

                                          detlist.Add(det);
                                      }

                                  }
                                  else
                                  {
                                      hasfail = true;
                                  }
                              }
                          }

                      }


                  }
                  if (!hasfail)
                  {
                      result.SumPoint += dpoint;
                      result.DetailData.AddRange(detlist);
                  }


              }

              return result;
          }
      }
      

      private TeachPointCalcItemData CalcTeachPoint_RefTeacher(TeachPointItem item, string empcode, DateTime sdate, DateTime edate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<DateTime[]> caldlist = new List<DateTime[]>();
              if (item.MaxPointEvalRange != null)
              {
                  caldlist = GetTeachPointCalcMonthList(sdate, edate, item.MaxPointEvalRange);
              }
              else
              {
                  caldlist.Add(new DateTime[] { sdate, edate });
              }


              TeachPointCalcItemData result = new TeachPointCalcItemData();
              result.DetailData = new List<TeachPointCalcItemDetailData>();
              result.SumPoint = 0;

              DateTime redate = edate.Date.AddDays(1);


              foreach (DateTime[] dinfo in caldlist)
              {
                  decimal dpoint = item.MaxPoint.Value;


                  DateTime s = dinfo[0];
                  DateTime realedate = dinfo[1].AddDays(1);


                  List<TeachPointCalcItemDetailData> detlist = new List<TeachPointCalcItemDetailData>();
                  bool hasfail = false;
                  List<string> groups = item.TeachPointRefs.Select(c => c.RefGroup).Distinct().ToList();

                  foreach (string g in groups)
                  {

                      TeachPointRef teachertype = item.TeachPointRefs.Where(c => c.RefGroup == g && c.RefType == "RefTeacher").FirstOrDefault();
                      TeachPointRef termjobcode = item.TeachPointRefs.Where(c => c.RefGroup == g && c.RefType == "TermJobCode").FirstOrDefault();
                      List<string> distermdeptcodes = item.TeachPointRefs.Where(c => c.RefGroup == g && c.RefType == "DisTermDeptCode").Select(c => c.RefID).ToList();
                      if (teachertype == null || termjobcode == null)
                      {
                          continue;
                      }



                      var allact = from tea in service.UnitOfWork.EduRefTeachers
                                   join term in service.UnitOfWork.EduTerms
                                   on tea.EduTermID equals term.EduTermID
                                   join ttype in service.UnitOfWork.EduTeacherTypes
                                   on tea.TeacherType equals ttype.Code
                                   where term.JobCode == termjobcode.RefID
                                   && tea.TeacherType == teachertype.RefID
                                   && ((term.DateFrom >= s && term.DateFrom < realedate) || (term.DateTo >= s && term.DateTo < realedate) || (term.DateFrom < s && term.DateTo > realedate))
                                   && tea.TeacherID == empcode
                                   && !distermdeptcodes.Contains(term.Department)
                                   orderby term.DateFrom
                                   select new { tea, term, ttype };

                      if (allact.Count() >= 1)
                      {
                          foreach (var act in allact.ToList())
                          {

                              TeachPointCalcItemDetailData det = new TeachPointCalcItemDetailData();

                              det.OrrcuTime = act.term.DateFrom.Date;
                              det.PointDesc = act.term.DateFrom.ToString("yyyy/MM/dd") + "~" + act.term.DateTo.ToString("yyyy/MM/dd") + " 擔任 " + act.term.Name + " 課程 " + act.ttype.Name;

                              det.DetailPoint = 0;

                              if (detlist.Count(c => c.OrrcuTime == det.OrrcuTime && c.PointDesc == det.PointDesc) == 0)
                              {
                                  detlist.Add(det);
                              }
                          }
                      }
                      else
                      {
                          hasfail = true;
                      }




                  }
                  if (!hasfail)
                  {
                      result.SumPoint += dpoint;
                      result.DetailData.AddRange(detlist);
                  }


              }

              return result;
          }
      }


      private TeachPointCalcItemData CalcTeachPoint_CheckAct(TeachPointItem item, string empcode, DateTime sdate, DateTime edate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<DateTime[]> caldlist = new List<DateTime[]>();
              if (item.MaxPointEvalRange != null)
              {
                  caldlist = GetTeachPointCalcMonthList(sdate, edate, item.MaxPointEvalRange);
              }
              else
              {
                  caldlist.Add(new DateTime[] { sdate, edate });
              }

              TeachPointCalcItemData result = new TeachPointCalcItemData();
              result.DetailData = new List<TeachPointCalcItemDetailData>();
              result.SumPoint = 0;
              string hospcode = "KMUH";
              V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == empcode).FirstOrDefault();

              if (emp != null)
              {
                  hospcode = emp.Hospcode;
              }
              DateTime redate = edate.Date.AddDays(1);


              foreach (DateTime[] dinfo in caldlist)
              {
                  decimal dpoint = item.MaxPoint.Value;


                  DateTime s = dinfo[0];
                  DateTime realedate = dinfo[1].AddDays(1);
                  DateTime nowdate = DateTime.Now.Date.AddDays(1).AddSeconds(-1);

                  List<TeachPointCalcItemDetailData> detlist = new List<TeachPointCalcItemDetailData>();
                  bool hasfail = false;

                  foreach (TeachPointItemRequire req in item.TeachPointItemRequires)
                  {


                      List<string> checkid = new List<string>();
                      foreach (string id in req.ReqID.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries))
                      {
                          if (!checkid.Contains(id))
                          {
                              checkid.Add(id);
                          }
                      }

                      if (req.ReqCount != null)
                      {

                          var allact = from act in service.UnitOfWork.EduStopActSchedules
                                       where checkid.Contains(act.ActType)
                                       && act.TimeFrom >= s && act.TimeFrom < realedate
                                       && act.HospCode == hospcode
                                       && act.TimeFrom <= nowdate
                                       &&
                                       (act.EduStopActAttachments.Count > 0
                                       ||
                                       (from recref in service.UnitOfWork.RecordEduActRefs
                                        join rec in service.UnitOfWork.RecordInstances
                                        on recref.InstanceID equals rec.InstanceID
                                        where recref.EduStopActScheduleID == act.EduStopActScheduleID
                                        && rec.Status == "V"
                                        select rec
                                            ).Count() > 0
                                       )
                                       orderby act.TimeFrom
                                       select act;
                          var joinact = allact.Where(c => c.EduActTargets.Count(d => d.TargetID == empcode) > 0);

                          if (joinact.Count() >= req.ReqCount.Value)
                          {
                              foreach (var act in joinact.Take(Convert.ToInt32(req.ReqCount.Value)).ToList())
                              {
                                  TeachPointCalcItemDetailData det = new TeachPointCalcItemDetailData();

                                  det.OrrcuTime = act.TimeFrom.Date;
                                  det.PointDesc = act.TimeFrom.ToString("yyyy/MM/dd HH:mm") + "~" + act.TimeTo.ToString("HH:mm") + " 出席 " + act.ActName;

                                  det.DetailPoint = 0;

                                  detlist.Add(det);
                              }
                          }
                          else
                          {
                              hasfail = true;
                          }

                      }
                      else
                      {

                          var allact = from act in service.UnitOfWork.EduStopActSchedules
                                       where checkid.Contains(act.ActType)
                                       && act.TimeFrom >= s && act.TimeFrom < realedate
                                       && act.HospCode == hospcode
                                       && act.TimeFrom <= nowdate
                                       &&
                                       (act.EduStopActAttachments.Count > 0
                                       ||
                                       (from recref in service.UnitOfWork.RecordEduActRefs
                                        join rec in service.UnitOfWork.RecordInstances
                                        on recref.InstanceID equals rec.InstanceID
                                        where recref.EduStopActScheduleID == act.EduStopActScheduleID
                                        && rec.Status == "V"
                                        select rec
                                            ).Count() > 0
                                       )
                                       orderby act.TimeFrom
                                       select act;
                          var joinact = allact.Where(c => c.EduActTargets.Count(d => d.TargetID == empcode) > 0);

                          if (allact.Count() > 0)
                          {
                              decimal joinactcount = Convert.ToDecimal(joinact.Count());
                              decimal allactcount = Convert.ToDecimal(allact.Count());
                              if ((joinactcount / allactcount) >= req.ReqRate.Value)
                              {
                                  foreach (var act in joinact.ToList())
                                  {
                                      TeachPointCalcItemDetailData det = new TeachPointCalcItemDetailData();

                                      det.OrrcuTime = act.TimeFrom.Date;
                                      det.PointDesc = act.TimeFrom.ToString("yyyy/MM/dd HH:mm") + "~" + act.TimeTo.ToString("HH:mm") + " 出席 " + act.ActName;

                                      det.DetailPoint = 0;

                                      detlist.Add(det);
                                  }

                              }
                              else
                              {
                                  hasfail = true;
                              }
                          }
                          else
                          {
                              hasfail = true;
                          }

                      }


                  }
                  if (!hasfail)
                  {
                      result.SumPoint += dpoint;
                      result.DetailData.AddRange(detlist);
                  }


              }

              return result;
          }
      }



      private TeachPointCalcItemData CalcTeachPoint_CheckReq(TeachPointItem item, string empcode, DateTime sdate, DateTime edate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<DateTime[]> caldlist = new List<DateTime[]>();
              if (item.MaxPointEvalRange != null)
              {
                  caldlist = GetTeachPointCalcMonthList(sdate, edate, item.MaxPointEvalRange);
              }
              else
              {
                  caldlist.Add(new DateTime[] { sdate, edate });
              }

              TeachPointCalcItemData result = new TeachPointCalcItemData();
              result.DetailData = new List<TeachPointCalcItemDetailData>();
              result.SumPoint = 0;
              string hospcode = "KMUH";
              V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == empcode).FirstOrDefault();

              if (emp != null)
              {
                  hospcode = emp.Hospcode;
              }
              DateTime redate = edate.Date.AddDays(1);


              foreach (DateTime[] dinfo in caldlist)
              {
                  decimal dpoint = item.MaxPoint.Value;


                  DateTime s = dinfo[0];
                  DateTime realedate = dinfo[1].AddDays(1);
                  DateTime nowdate = DateTime.Now.Date.AddDays(1).AddSeconds(-1);

                  List<TeachPointCalcItemDetailData> detlist = new List<TeachPointCalcItemDetailData>();
                  bool hasfail = false;

                  foreach (TeachPointItemRequire req in item.TeachPointItemRequires)
                  {
                      if (req.ReqType == "Act")
                      {

                          List<string> checkid = new List<string>();
                          foreach (string id in req.ReqID.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries))
                          {
                              if (!checkid.Contains(id))
                              {
                                  checkid.Add(id);
                              }
                          }

                          if (req.ReqCount != null)
                          {

                              var allact = from act in service.UnitOfWork.EduStopActSchedules
                                           where checkid.Contains(act.ActType)
                                           && act.TimeFrom >= s && act.TimeFrom < realedate
                                           && act.HospCode == hospcode
                                           && act.TimeFrom <= nowdate
                                           &&
                                           (act.EduStopActAttachments.Count > 0
                                           ||
                                           (from recref in service.UnitOfWork.RecordEduActRefs
                                            join rec in service.UnitOfWork.RecordInstances
                                            on recref.InstanceID equals rec.InstanceID
                                            where recref.EduStopActScheduleID == act.EduStopActScheduleID
                                            && rec.Status == "V"
                                            select rec
                                                ).Count() > 0
                                           )
                                           orderby act.TimeFrom
                                           select act;
                              var joinact = allact.Where(c => c.EduActTargets.Count(d => d.TargetID == empcode) > 0);

                              if (joinact.Count() >= req.ReqCount.Value)
                              {
                                  foreach (var act in joinact.Take(Convert.ToInt32(req.ReqCount.Value)).ToList())
                                  {
                                      TeachPointCalcItemDetailData det = new TeachPointCalcItemDetailData();

                                      det.OrrcuTime = act.TimeFrom.Date;
                                      det.PointDesc = act.TimeFrom.ToString("yyyy/MM/dd HH:mm") + "~" + act.TimeTo.ToString("HH:mm") + " 出席 " + act.ActName;

                                      det.DetailPoint = 0;

                                      detlist.Add(det);
                                  }
                              }
                              else
                              {
                                  hasfail = true;
                              }

                          }
                          else
                          {

                              var allact = from act in service.UnitOfWork.EduStopActSchedules
                                           where checkid.Contains(act.ActType)
                                           && act.TimeFrom >= s && act.TimeFrom < realedate
                                           && act.HospCode == hospcode
                                           && act.TimeFrom <= nowdate
                                           &&
                                           (act.EduStopActAttachments.Count > 0
                                           ||
                                           (from recref in service.UnitOfWork.RecordEduActRefs
                                            join rec in service.UnitOfWork.RecordInstances
                                            on recref.InstanceID equals rec.InstanceID
                                            where recref.EduStopActScheduleID == act.EduStopActScheduleID
                                            && rec.Status == "V"
                                            select rec
                                                ).Count() > 0
                                           )
                                           orderby act.TimeFrom
                                           select act;
                              var joinact = allact.Where(c => c.EduActTargets.Count(d => d.TargetID == empcode) > 0);

                              if (allact.Count() > 0)
                              {
                                  decimal joinactcount = Convert.ToDecimal(joinact.Count());
                                  decimal allactcount = Convert.ToDecimal(allact.Count());
                                  if ((joinactcount / allactcount) >= req.ReqRate.Value)
                                  {
                                      foreach (var act in joinact.ToList())
                                      {
                                          TeachPointCalcItemDetailData det = new TeachPointCalcItemDetailData();

                                          det.OrrcuTime = act.TimeFrom.Date;
                                          det.PointDesc = act.TimeFrom.ToString("yyyy/MM/dd HH:mm") + "~" + act.TimeTo.ToString("HH:mm") + " 出席 " + act.ActName;

                                          det.DetailPoint = 0;

                                          detlist.Add(det);
                                      }

                                  }
                                  else
                                  {
                                      hasfail = true;
                                  }
                              }
                              else
                              {
                                  hasfail = true;
                              }

                          }

                      }

                      if (req.ReqType == "Form")
                      {
                          List<int> checkid = new List<int>();
                          foreach (string id in req.ReqID.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries))
                          {
                              if (!checkid.Contains(Convert.ToInt32(id)))
                              {
                                  checkid.Add(Convert.ToInt32(id));
                              }
                          }

                          if (req.ReqCount != null)
                          {
                              var forms = from tar in service.UnitOfWork.FORM_INSTANCE_TARGETs
                                          where tar.TargetID == empcode
                                          && checkid.Contains(tar.FORM_INSTANCE.TEMPLATE_ID)
                                          && tar.FORM_INSTANCE.Status != '0'
                                          && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue
                                          && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME >= s
                                          && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME < realedate
                                          orderby tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME
                                          select tar;
                              if (forms.Count() >= req.ReqCount.Value)
                              {
                                  foreach (var form in forms.Take(Convert.ToInt32(req.ReqCount.Value)))
                                  {
                                      TeachPointCalcItemDetailData det = new TeachPointCalcItemDetailData();

                                      det.OrrcuTime = form.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value;
                                      det.PointDesc = form.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.ToString("yyyy/MM/dd HH:mm") + " 填寫 " + form.FORM_INSTANCE.INSTANCE_NAME;

                                      det.DetailPoint = 0;

                                      detlist.Add(det);
                                  }

                              }
                              else
                              {
                                  hasfail = true;
                              }


                          }
                          else
                          {
                              if (req.ReqRate != null)
                              {
                                  var forms = from tar in service.UnitOfWork.FORM_INSTANCE_TARGETs
                                              where tar.TargetID == empcode
                                              && checkid.Contains(tar.FORM_INSTANCE.TEMPLATE_ID)
                                                  //&& tar.FORM_INSTANCE.Status != '0'
                                              && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.HasValue
                                              && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME >= s
                                              && tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME < realedate
                                              orderby tar.FORM_INSTANCE.INSTANCE_ALTER_DATETIME
                                              select tar;
                                  decimal allcount = Convert.ToDecimal(forms.Count());
                                  if (allcount == 0)
                                  {
                                      hasfail = true;
                                  }
                                  else
                                  {
                                      decimal donecount = Convert.ToDecimal(forms.Count(c => c.FORM_INSTANCE.Status != '0'));
                                      if ((donecount / allcount) >= req.ReqRate.Value)
                                      {
                                          foreach (var form in forms.Where(c => c.FORM_INSTANCE.Status != '0').ToList())
                                          {
                                              TeachPointCalcItemDetailData det = new TeachPointCalcItemDetailData();

                                              det.OrrcuTime = form.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value;
                                              det.PointDesc = form.FORM_INSTANCE.INSTANCE_ALTER_DATETIME.Value.ToString("yyyy/MM/dd HH:mm") + " 填寫 " + form.FORM_INSTANCE.INSTANCE_NAME;

                                              det.DetailPoint = 0;

                                              detlist.Add(det);
                                          }

                                      }
                                      else
                                      {
                                          hasfail = true;
                                      }
                                  }
                              }
                          }
                      }

                  }
                  if (!hasfail)
                  {
                      result.SumPoint += dpoint;
                      result.DetailData.AddRange(detlist);
                  }


              }

              return result;
          }
      }


      /// <summary>
      /// 根據不同條件切出時間範圍內上線的各段計算時間
      /// </summary>
      /// <param name="sdate"></param>
      /// <param name="edate"></param>
      /// <param name="evalrange"></param>
      /// <returns></returns>
      public List<DateTime[]> GetTeachPointCalcMonthList(DateTime sdate, DateTime edate,string evalrange)
      {
          List<int> splitmonth = new List<int>();
          switch(evalrange)
          {
              case "eduyear":
                  splitmonth.Add(8);
                  break;
              case "term":
                  splitmonth.Add(2);
                  splitmonth.Add(8);
                  break;
              case "season":
                  splitmonth.Add(2);
                  splitmonth.Add(5);
                  splitmonth.Add(8);
                  splitmonth.Add(11);
                  break;
              case "month":
                  for (int i = 1; i <= 12; i++)
                  {
                      splitmonth.Add(i);
                  }
                  break;
          }

          List<DateTime[]> result = new List<DateTime[]>();

          DateTime s = sdate.Date;
          DateTime e = sdate.Date;

          while (e <= edate.Date)
          {
              if (e == edate.Date)
              {
                  result.Add(new DateTime[] { s, e });
              }
              else
              {

                  int yms = s.Year * 100 + s.Month;
                  int yme = e.Year * 100 + e.Month;

                  if (yms != yme)
                  {
                      if (splitmonth.Contains(e.Month))
                      {
                          result.Add(new DateTime[] { s, e.AddDays(-1) });
                          s = e;
                      }
                  }
              }
              e = e.AddDays(1);

          }


          return result;
      }

      #endregion

      #region 訓練時數

      public List<string[]> UploadTrainingTimeData(DataTable dt, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string[]> result = new List<string[]>();
              try
              {
                  int rowcount = 0;

                  foreach (DataRow dr in dt.Rows)
                  {
                      string color = "black";
                      string msg = "已上傳完成";
                      string inempcode = dr["職員編號"].ToString();
                      rowcount++;

                      if (inempcode != "")
                      {

                          V_KmuEmpDto temp = service.ReadV_KmuEmps(c => c.Empcode == inempcode).FirstOrDefault();

                          if (temp == null)
                          {
                              color = "red";
                              msg = "第" + rowcount.ToString() + "行:職員編號" + inempcode + "不存在";
                              result.Add(new string[] { msg, color });
                              continue;
                          }
                          TrainingTime data = new TrainingTime();

                          data.Status = "V";
                          data.CreateTime = DateTime.Now;
                          data.Creater = empcode;
                          data.EmpCode = inempcode;
                          data.ClassName = dr["課程說明"].ToString();
                          data.ClassType = dr["課程性質"].ToString();
                          data.EduYear = dr["學年度"].ToString();
                          data.Hospital = dr["地點"].ToString();
                          data.Role = dr["角色"].ToString();
                          if (dr["學期"] == DBNull.Value)
                          {
                              data.Semester = null;
                          }
                          else
                          {
                              try
                              {
                                  data.Semester = Convert.ToInt32(dr["學期"]);
                              }
                              catch (Exception ex)
                              {
                                  data.Semester = null;
                              }
                          }

                          try
                          {
                              data.TimeHour = Convert.ToDecimal(dr["時數"]);
                          }
                          catch
                          {
                              msg = "第" + rowcount.ToString() + "行:職員編號：" + inempcode + "上傳失敗:時數欄位格式錯誤";
                              color = "red";
                              continue;
                          }
                          try
                          {
                              data.TrainingTime1 = Convert.ToDateTime(dr["日期"]);
                          }
                          catch
                          {
                              msg = "第" + rowcount.ToString() + "行:職員編號：" + inempcode + "上傳失敗:日期欄位值[" + dr["日期"].ToString() + "]格式錯誤";
                              color = "red";
                              continue;
                          }




                          string intsql = @"INSERT INTO www_EduActivity.dbo.TrainingTime
(EduYear, Semester, Hospital, EmpCode, [Role], TrainingTime, TimeHour, ClassName, ClassType, Creater, CreateTime, Status) 
VALUES (@EduYear, @Semester, @Hospital, @EmpCode, @Role, @TrainingTime, @TimeHour, @ClassName, @ClassType, @Creater, @CreateTime, @Status)
                              ";
                          List<SqlParameter> sqlparms = new List<SqlParameter>();
                          sqlparms.Add(new SqlParameter("EduYear", GetDBObject(data.EduYear)));
                          sqlparms.Add(new SqlParameter("Semester", GetDBObject(data.Semester)));
                          sqlparms.Add(new SqlParameter("Hospital", GetDBObject(data.Hospital)));
                          sqlparms.Add(new SqlParameter("EmpCode", GetDBObject(data.EmpCode)));
                          sqlparms.Add(new SqlParameter("Role", GetDBObject(data.Role)));
                          sqlparms.Add(new SqlParameter("TrainingTime", GetDBObject(data.TrainingTime1)));
                          sqlparms.Add(new SqlParameter("TimeHour", GetDBObject(data.TimeHour)));
                          sqlparms.Add(new SqlParameter("ClassName", GetDBObject(data.ClassName)));
                          sqlparms.Add(new SqlParameter("ClassType", GetDBObject(data.ClassType)));
                          sqlparms.Add(new SqlParameter("Creater", GetDBObject(data.Creater)));
                          sqlparms.Add(new SqlParameter("CreateTime", GetDBObject(data.CreateTime)));
                          sqlparms.Add(new SqlParameter("Status", GetDBObject(data.Status)));
                          (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                          //service.UnitOfWork.Add(data);


                          try
                          {
                              service.UnitOfWork.SaveChanges();
                              color = "black";
                              msg = "第" + rowcount.ToString() + "行:職員編號" + inempcode + "，匯入成功";
                          }
                          catch (Exception ex)
                          {
                              service.UnitOfWork.ClearChanges();
                              msg = "第" + rowcount.ToString() + "行:職員編號：" + inempcode + "上傳失敗:" + ex.Message;
                              color = "red";
                          }


                      }
                      else
                      {

                          color = "red";
                          msg = "第" + rowcount.ToString() + "行:職員編號" + inempcode + "空白";
                          result.Add(new string[] { msg, color });
                          continue;

                      }

                      result.Add(new string[] { msg, color });
                  }
              }
              catch (Exception ex)
              {
                  result.Clear();
                  result.Add(new string[] { "檔案格式錯誤，請確認第一欄欄位名稱是否與範例相同:" + ex.Message, "red" });
              }
              finally
              {
                  service.UnitOfWork.ClearChanges();
              }
              return result;
          }
      }


      public List<TrainingTimeDto> QueryTrainingTimeEmpItemData(string empcodename, string creater, DateTime? sdate, DateTime? edate, DateTime? createsdate, DateTime? createedate,List<string> jobfilter)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string> empcodenames = empcodename.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).ToList();
              if (jobfilter == null)
              {
                  jobfilter = new List<string>();
              }
              try
              {
                  var datas = (from item in service.UnitOfWork.TrainingTimes
                               join emp in service.UnitOfWork.V_KmuEmps
                               on item.EmpCode equals emp.Empcode
                               join title in service.UnitOfWork.V_kmujobs
                                   //on emp.Jobcode.Trim() equals title.JOB_CODE_X.Trim()
                               on emp.Jobcode equals title.JOB_CODE_X
                               into temptitle
                               from title in temptitle.DefaultIfEmpty()
                               join cemp in service.UnitOfWork.V_KmuEmps
                               on item.Creater equals cemp.Empcode
                               where
                               (empcodenames.Count() == 0 || empcodenames.Contains(emp.Empcode) || empcodenames.Contains(emp.Empname))
                               &&
                               (creater == null || creater == "" || cemp.Empcode == creater || cemp.Empname == creater)
                               &&
                               (sdate == null || item.TrainingTime1.Value.Date >= sdate)
                               &&
                               (edate == null || item.TrainingTime1.Value.Date <= edate)
                               &&
                               (createsdate == null || item.CreateTime.Value.Date >= createsdate)
                               &&
                               (createedate == null || item.CreateTime.Value.Date <= createedate)
                               &&
                               (jobfilter == null || jobfilter.Count == 0 || jobfilter.Contains(emp.Jobcode))
                               && item.Status == "V"
                               orderby item.TrainingTime1 descending
                               select new { item, emp, cemp, title }).ToList();
                  List<TrainingTimeDto> result = new List<TrainingTimeDto>();
                  TrainingTimeAssembler asm = new TrainingTimeAssembler();
                  foreach (var data in datas)
                  {
                      TrainingTimeDto dto = asm.Assemble(data.item);
                      dto.EmpName = data.emp.Empname;
                      dto.CreateName = data.cemp.Empname;
                      dto.DepName = data.emp.Locname;
                      if (data.title != null)
                      {
                          dto.TitleName = data.title.JOB_NAME;
                      }
                      result.Add(dto);
                  }

                  return result;
              }
              catch (Exception ex)
              {
                  return null;
              }
          }
      }


      public string DeleteTrainingTimeEmpItemData(List<int> ids)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<TrainingTime> data = service.UnitOfWork.TrainingTimes.Where(c => ids.Contains(c.ID)).ToList();

              foreach (var d in data)
              {
                  d.Status = "X";
              }
              try
              {
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }


      #endregion

      #region OSCE認證

      public List<string[]> UploadOSCECertData(DataTable dt, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string[]> result = new List<string[]>();
              try
              {
                  int rowcount = 0;

                  foreach (DataRow dr in dt.Rows)
                  {
                      string color = "black";
                      string msg = "已上傳完成";
                      string inempcode = dr["empcode"].ToString();
                      string remark = dr["註記"].ToString();
                      rowcount++;

                      if (inempcode != "")
                      {

                          V_KmuEmpDto temp = service.ReadV_KmuEmps(c => c.Empcode == inempcode).FirstOrDefault();

                          if (temp == null)
                          {
                              color = "red";
                              msg = "第" + rowcount.ToString() + "行:職員編號" + inempcode + "不存在";
                              result.Add(new string[] { msg, color });
                              continue;
                          }
                          OSCECert data = new OSCECert();

                          data.EmpCode = inempcode;
                          data.CreateDate = DateTime.Now;
                          data.Creater = empcode;
                          data.EmpCode = inempcode;
                          data.Remark = remark;
                          data.Status = "V";


                          if (dr["sdate"] != DBNull.Value)
                          {
                              try
                              {
                                  data.Sdate = DateTime.ParseExact(dr["sdate"].ToString(), "yyyyMMdd", CultureInfo.CurrentCulture);
                              }
                              catch
                              {
                                  msg = "第" + rowcount.ToString() + "行:職員編號：" + inempcode + "上傳失敗:sdate欄位格式錯誤";
                                  color = "red";
                                  continue;
                              }
                          }
                          if (dr["edate"] != DBNull.Value)
                          {
                              try
                              {
                                  data.Edate = DateTime.ParseExact(dr["edate"].ToString(), "yyyyMMdd", CultureInfo.CurrentCulture);
                              }
                              catch
                              {
                                  msg = "第" + rowcount.ToString() + "行:職員編號：" + inempcode + "上傳失敗:edate欄位格式錯誤";
                                  color = "red";
                                  continue;
                              }
                          }




                          string intsql = @"INSERT INTO www_EduActivity.dbo.OSCECert
(EmpCode, Sdate, Edate, Creater, CreateDate, Status, Remark) 
VALUES (@EmpCode, @Sdate, @Edate, @Creater, @CreateDate, @Status, @Remark)

                              ";
                          List<SqlParameter> sqlparms = new List<SqlParameter>();
                          sqlparms.Add(new SqlParameter("EmpCode", GetDBObject(data.EmpCode)));
                          sqlparms.Add(new SqlParameter("Sdate", GetDBObject(data.Sdate)));
                          sqlparms.Add(new SqlParameter("Edate", GetDBObject(data.Edate)));
                          sqlparms.Add(new SqlParameter("Creater", GetDBObject(data.Creater)));
                          sqlparms.Add(new SqlParameter("CreateDate", GetDBObject(data.CreateDate)));
                          sqlparms.Add(new SqlParameter("Status", GetDBObject(data.Status)));
                          sqlparms.Add(new SqlParameter("Remark", GetDBObject(data.Remark)));
                          (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                          //service.UnitOfWork.Add(data);


                          try
                          {
                              service.UnitOfWork.SaveChanges();
                              color = "black";
                              msg = "第" + rowcount.ToString() + "行:職員編號" + inempcode + "，匯入成功";
                          }
                          catch (Exception ex)
                          {
                              service.UnitOfWork.ClearChanges();
                              msg = "第" + rowcount.ToString() + "行:職員編號：" + inempcode + "上傳失敗:" + ex.Message;
                              color = "red";
                          }


                      }
                      else
                      {

                          color = "red";
                          msg = "第" + rowcount.ToString() + "行:職員編號" + inempcode + "空白";
                          result.Add(new string[] { msg, color });
                          continue;

                      }

                      result.Add(new string[] { msg, color });
                  }
              }
              catch (Exception ex)
              {
                  result.Clear();
                  result.Add(new string[] { "檔案格式錯誤，請確認第一欄欄位名稱是否與範例相同:" + ex.Message, "red" });
              }
              finally
              {
                  service.UnitOfWork.ClearChanges();
              }
              return result;
          }
      }


      public List<OSCECertDto> QueryOSCECertEmpItemData(string empcodename, string creater, DateTime? sdates, DateTime? sdatee, DateTime? edates, DateTime? edatee)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string> empcodenames = empcodename.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).ToList();

              try
              {
                  var datas = (from item in service.UnitOfWork.OSCECerts
                               join emp in service.UnitOfWork.V_KmuEmps
                               on item.EmpCode equals emp.Empcode
                               join cemp in service.UnitOfWork.V_KmuEmps
                               on item.Creater equals cemp.Empcode
                               where
                               (empcodenames.Count() == 0 || empcodenames.Contains(emp.Empcode) || empcodenames.Contains(emp.Empname))
                               &&
                               (creater == null || creater == "" || cemp.Empcode == creater || cemp.Empname == creater)
                               &&
                               (sdates == null || (sdates != null && item.Sdate >= sdates))
                               &&
                               (sdatee == null || (sdatee != null && item.Sdate <= sdatee))
                               &&
                               (edates == null || (edates != null && item.Edate >= edates))
                               &&
                               (edatee == null || (edatee != null && item.Edate <= edatee))
                               && item.Status != "X"
                               orderby item.Edate descending
                               select new { item, emp, cemp }).ToList();
                  List<OSCECertDto> result = new List<OSCECertDto>();
                  OSCECertAssembler asm = new OSCECertAssembler();
                  foreach (var data in datas)
                  {
                      OSCECertDto dto = asm.Assemble(data.item);
                      dto.EmpName = data.emp.Empname;
                      dto.CreateName = data.cemp.Empname;
                      result.Add(dto);
                  }

                  return result;
              }
              catch (Exception ex)
              {
                  return null;
              }
          }
      }


      public string DeleteOSCECertEmpItemData(List<int> ids)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<OSCECert> data = service.UnitOfWork.OSCECerts.Where(c => ids.Contains(c.ID)).ToList();

              foreach (var d in data)
              {
                  d.Status = "X";
              }
              try
              {
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }
      #endregion

      #region OSCE 學校Block時數

      public List<string[]> UploadOSCEBlockTime(DataTable dt, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string[]> result = new List<string[]>();
              try
              {
                  int rowcount = 0;

                  foreach (DataRow dr in dt.Rows)
                  {
                      string color = "black";
                      string msg = "已上傳完成";
                      string inempcode = dr["員工編號"].ToString();
                      rowcount++;

                      if (inempcode != "")
                      {

                          V_KmuEmpDto temp = service.ReadV_KmuEmps(c => c.Empcode == inempcode).FirstOrDefault();

                          if (temp == null)
                          {
                              color = "red";
                              msg = "第" + rowcount.ToString() + "行:職員編號" + inempcode + "不存在";
                              result.Add(new string[] { msg, color });
                              continue;
                          }
                          OSCEBlockTime data = new OSCEBlockTime();

                          data.EmpCode = inempcode;

                          data.CreateDate = DateTime.Now;
                          data.Creater = empcode;
                          data.EmpCode = inempcode;
                          data.ClassName = dr["課程名稱"].ToString();
                          data.TrainingTime = Convert.ToDecimal(dr["時數(小時)"]);
                          data.Status = "V";



                          try
                          {
                              data.ClassDate = DateTime.ParseExact(dr["課程日期"].ToString(), "yyyyMMdd", CultureInfo.CurrentCulture);
                          }
                          catch
                          {
                              msg = "第" + rowcount.ToString() + "行:職員編號：" + inempcode + "上傳失敗:課程日期欄位格式錯誤";
                              color = "red";
                              continue;
                          }



                          string intsql = @"INSERT INTO www_EduActivity.dbo.OSCEBlockTime
(EmpCode, ClassName, ClassDate, TrainingTime, Creater, CreateDate, Status) 
VALUES (@EmpCode, @ClassName, @ClassDate, @TrainingTime, @Creater, @CreateDate, @Status)

                              ";
                          List<SqlParameter> sqlparms = new List<SqlParameter>();
                          sqlparms.Add(new SqlParameter("EmpCode", GetDBObject(data.EmpCode)));
                          sqlparms.Add(new SqlParameter("ClassName", GetDBObject(data.ClassName)));
                          sqlparms.Add(new SqlParameter("ClassDate", GetDBObject(data.ClassDate)));
                          sqlparms.Add(new SqlParameter("TrainingTime", GetDBObject(data.TrainingTime)));
                          sqlparms.Add(new SqlParameter("Creater", GetDBObject(data.Creater)));
                          sqlparms.Add(new SqlParameter("CreateDate", GetDBObject(data.CreateDate)));
                          sqlparms.Add(new SqlParameter("Status", GetDBObject(data.Status)));
                          (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                          //service.UnitOfWork.Add(data);


                          try
                          {
                              service.UnitOfWork.SaveChanges();
                              color = "black";
                              msg = "第" + rowcount.ToString() + "行:職員編號" + inempcode + "，匯入成功";
                          }
                          catch (Exception ex)
                          {
                              service.UnitOfWork.ClearChanges();
                              msg = "第" + rowcount.ToString() + "行:職員編號：" + inempcode + "上傳失敗:" + ex.Message;
                              color = "red";
                          }


                      }
                      else
                      {

                          color = "red";
                          msg = "第" + rowcount.ToString() + "行:職員編號" + inempcode + "空白";
                          result.Add(new string[] { msg, color });
                          continue;

                      }

                      result.Add(new string[] { msg, color });
                  }
              }
              catch (Exception ex)
              {
                  result.Clear();
                  result.Add(new string[] { "檔案格式錯誤，請確認第一欄欄位名稱是否與範例相同:" + ex.Message, "red" });
              }
              finally
              {
                  service.UnitOfWork.ClearChanges();
              }
              return result;
          }
      }


      public List<OSCEBlockTimeDto> QueryOSCEBlockTimeEmpItemData(string empcodename, string creater, DateTime? dates, DateTime? datee, DateTime? createdates, DateTime? createdatee)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string> empcodenames = empcodename.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).ToList();

              try
              {
                  var datas = (from item in service.UnitOfWork.OSCEBlockTimes
                               join emp in service.UnitOfWork.V_KmuEmps
                               on item.EmpCode equals emp.Empcode
                               join cemp in service.UnitOfWork.V_KmuEmps
                               on item.Creater equals cemp.Empcode
                               where
                               (empcodenames.Count() == 0 || empcodenames.Contains(emp.Empcode) || empcodenames.Contains(emp.Empname))
                               &&
                               (creater == null || creater == "" || cemp.Empcode == creater || cemp.Empname == creater)
                               &&
                               (dates == null || (dates != null && item.ClassDate >= dates))
                               &&
                               (datee == null || (datee != null && item.ClassDate <= datee))
                               &&
                               (createdates == null || (createdates != null && item.CreateDate >= createdates))
                               &&
                               (createdatee == null || (createdatee != null && item.CreateDate <= createdatee))
                               && item.Status != "X"
                               orderby item.ClassDate descending
                               select new { item, emp, cemp }).ToList();
                  List<OSCEBlockTimeDto> result = new List<OSCEBlockTimeDto>();
                  OSCEBlockTimeAssembler asm = new OSCEBlockTimeAssembler();
                  foreach (var data in datas)
                  {
                      OSCEBlockTimeDto dto = asm.Assemble(data.item);
                      dto.EmpName = data.emp.Empname;
                      dto.CreateName = data.cemp.Empname;

                      result.Add(dto);
                  }

                  return result;
              }
              catch (Exception ex)
              {
                  return null;
              }
          }
      }


      public string DeleteOSCEBlockTimeEmpItemData(List<int> ids)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<OSCEBlockTime> data = service.UnitOfWork.OSCEBlockTimes.Where(c => ids.Contains(c.ID)).ToList();

              foreach (var d in data)
              {
                  d.Status = "X";
              }
              try
              {
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }
      #endregion


      #region 常用清單

      public List<MyListDto> GetMyList(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<MyList> list = service.UnitOfWork.MyLists.Where(c => c.Creater == empcode).ToList();
              MyListAssembler lasm = new MyListAssembler();
              MyListDetAssembler detasm = new MyListDetAssembler();
              List<MyListDto> result = new List<MyListDto>();
              foreach (MyList data in list)
              {
                  MyListDto dto = lasm.Assemble(data);
                  //dto.MyListDets = detasm.Assemble(data.MyListDets).ToList();
                  result.Add(dto);
              }
              return result;
          }
      }
      public List<MyListDetDto> GetMyListDet(string listid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var datas = from det in service.UnitOfWork.MyListDets
                          join emp in service.UnitOfWork.V_KmuEmps
                          on det.EmpCode equals emp.Empcode
                          join jobs in service.UnitOfWork.V_kmujobs
                          on emp.Jobcode equals jobs.JOB_CODE_X
                          into tempjob
                          from jobs in tempjob.DefaultIfEmpty()
                          where det.ListID == listid
                          select new { det, emp, jobs };

              MyListDetAssembler asm = new MyListDetAssembler();
              List<MyListDetDto> result = new List<MyListDetDto>();

              foreach (var data in datas)
              {
                  MyListDetDto dto = asm.Assemble(data.det);
                  dto.EmpName = data.emp.Empname;
                  dto.JobCode = data.emp.Jobcode;
                  if (data.jobs != null)
                  {
                      dto.JobName = data.jobs.JOB_NAME;
                  }

                  result.Add(dto);
              }

              return result;
          }

      }


      public string CreateMyList(string empcode, string listname,bool ispublic)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  MyListDto dto = new MyListDto();
                  dto.ListID = GetSerialNo("EduAct_MyListID");
                  dto.Creater = empcode;
                  dto.CreateDate = DateTime.Now;
                  dto.IsPublic = ispublic;
                  dto.ListName = listname;
                  service.CreateMyList(dto);
                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      public string AddMyListEmp(string listid, string empcode, string remark)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  MyListDetDto dto = new MyListDetDto();
                  dto.ListID = listid;
                  dto.EmpCode = empcode;
                  dto.Remark = remark;
                  service.CreateMyListDet(dto);
                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }
      
      public string DeleteMyList(string listid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  service.DeleteMyListDets(service.ReadMyListDets(c => c.ListID == listid), false);
                  service.DeleteMyLists(service.ReadMyLists(c => c.ListID == listid), false);

                  service.UnitOfWork.SaveChanges();

                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();

                  return ex.Message;
              }
          }
      }

      public string DeleteMyListEmp(string listid,string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  service.DeleteMyListDets(service.ReadMyListDets(c => c.ListID == listid && c.EmpCode == empcode));
                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      #endregion

      #region 會議記錄
      public List<RecordTemplateDto> GetRecordTemplateList(bool showdisable = false)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadRecordTemplates(c => showdisable || c.Status == "V").OrderBy(c => c.DisplayOrder).ToList();
          }
      }

      public RecordTemplateDto GetRecordTemplateByID(int templateid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadRecordTemplates(c => c.TemplateID == templateid).FirstOrDefault();
          }
      }




      public string CreateRecordInstance(int templateid, string empcode, string actid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  EduStopActScheduleDto sch = service.ReadEduStopActSchedules(c => c.EduStopActScheduleID == actid).FirstOrDefault();

                  string insid = GetSerialNo("EduAct_RecInsID");
                  RecordInstance ins = new RecordInstance();
                  ins.CreateDate = DateTime.Now;
                  ins.Creater = empcode;
                  ins.InstanceID = insid;
                  ins.TemplateID = templateid;
                  ins.Sdate = DateTime.Now.Date;
                  ins.Edate = DateTime.Now.Date;
                  ins.Title = "";
                  if(sch!= null)
                  {
                      ins.Title = sch.ActName;
                      ins.Sdate = sch.TimeFrom;
                      ins.Edate = sch.TimeTo;
                      ins.DeptCode = sch.DeptCode;
                      ins.HospCode = sch.HospCode;
                  }

                  ins.Status = "0";
                  ins.SignMethod = "0";

                  service.UnitOfWork.Add(ins);

                  if (actid != null)
                  {
                      RecordEduActRef ree = new RecordEduActRef();
                      ree.CreateDate = DateTime.Now;
                      ree.Creater = empcode;
                      ree.InstanceID = insid;
                      ree.EduStopActScheduleID = actid;
                      service.UnitOfWork.Add(ree);
                  }


                  service.UnitOfWork.SaveChanges();
                  return insid;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return null;
              }
          }
      }

      public List<RecordInstanceDto> GetActRefRecord(string actid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var datas = (from ree in service.UnitOfWork.RecordEduActRefs
                           join rec in service.UnitOfWork.RecordInstances
                           on ree.InstanceID equals rec.InstanceID
                           where ree.EduStopActScheduleID == actid
                           select rec).ToList();
              List<RecordInstanceDto> result = new List<RecordInstanceDto>();
              foreach (var data in datas)
              {

                  RecordInstanceAssembler asm = new RecordInstanceAssembler();
                  RecordInstanceDto dto = asm.Assemble(data);
                  dto.TemplateName = data.RecordTemplate.TemplateName;
                  result.Add(dto);
              }

              return result;
          }
      }
      

      public string DeleteRecordActRef(string instanceid,string actid,string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  RecordEduActRef ree = service.UnitOfWork.RecordEduActRefs.Where(c => c.InstanceID == instanceid && c.EduStopActScheduleID == actid).FirstOrDefault();
                  if (ree == null)
                  {
                      return null;
                  }

                  service.UnitOfWork.Delete(ree);

                  service.UnitOfWork.SaveChanges();

                  return null;

              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      public string CreateRecordActRef(string instanceid, string actid, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  //foreach (var v in service.UnitOfWork.RecordEduActRefs.Where(c => c.InstanceID == instanceid))
                  //{
                  //    service.UnitOfWork.Delete(v);
                  //}
                  RecordEduActRef ree = service.UnitOfWork.RecordEduActRefs.Where(c => c.InstanceID == instanceid && c.EduStopActScheduleID == actid).FirstOrDefault();

                  if (ree == null)
                  {
                      ree = new RecordEduActRef();

                      ree.CreateDate = DateTime.Now;
                      ree.Creater = empcode;
                      ree.InstanceID = instanceid;
                      ree.EduStopActScheduleID = actid;
                      service.UnitOfWork.Add(ree);

                      service.UnitOfWork.SaveChanges();
                  }
                  return null;

              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      public string ImportRecordSignIn(string actid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              EduStopActSchedule sch = service.UnitOfWork.EduStopActSchedules.Where(c => c.EduStopActScheduleID == actid).FirstOrDefault();
              if (sch == null)
              {
                  return "活動編號錯誤";
              }
              var signins = (from s in service.UnitOfWork.RecordInsSignIns
                             join r in service.UnitOfWork.RecordEduActRefs
                             on s.InstanceID equals r.InstanceID
                             where r.EduStopActScheduleID == actid
                             select s).ToList();
              if (signins.Count == 0)
              {
                  return "查無簽到資料";
              }
              List<string> empcode = service.UnitOfWork.EduActTargets.Where(c => c.EduStopActScheduleID == actid).Select(c => c.TargetID).ToList();

              foreach (RecordInsSignIn i in signins)
              {
                  if (!empcode.Contains(i.EmpCode))
                  {
                      EduActTarget t = new EduActTarget();
                      t.CheckInTime = i.SignTime;
                      t.EduStopActScheduleID = actid;
                      t.RoleType = i.RoleType;
                      t.TargetID = i.EmpCode;
                      t.TargetJob = i.TargetJob;
                      t.TargetType = "EmpCode";
                      t.TimeFrom = sch.TimeFrom;
                      t.TimeTo = sch.TimeTo;
                      service.UnitOfWork.Add(t);
                      empcode.Add(i.EmpCode);
                  }
              }

              try
              {
                  service.UnitOfWork.SaveChanges();
                  RefreshEduActHasTargets(actid);
                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;

              }
          }
      }

      public List<RecordInstanceDto> SearchRecordInstances(string empcodename, DateTime? recdate, DateTime? recdateend, string keyword, int? rectemplateid, string hospcode, string deptcode, string signer, string status, bool showtemp = false, bool publiconly = false)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var ins = (from rec in service.UnitOfWork.RecordInstances
                         join emp in service.UnitOfWork.V_KmuEmps
                         on rec.Creater equals emp.Empcode
                         join dep in service.UnitOfWork.V_departments
                         on new { hosp = rec.HospCode, depcode = rec.DeptCode } equals new { hosp = dep.Hospcode, depcode = dep.Deptcode }
                         where

                         (recdate == null || rec.Sdate.Value.Date >= recdate)
                         && (recdateend == null || rec.Sdate.Value.Date <= recdateend)
                         && (keyword == "" || keyword == null || rec.Title.Contains(keyword))
                         && (showtemp || rec.RecordEduActRefs.Count() == 0)
                         && (showtemp || (rec.Status == "1" || rec.Status == "2" || rec.Status == "V"))
                         && (status == "" || status == null || rec.Status == status)
                         && rec.Status != "X"
                         && (rectemplateid == null || rec.TemplateID == rectemplateid.Value)
                         && (hospcode == "" || hospcode == null || deptcode == "" || deptcode == null || rec.HospCode == hospcode)
                         && (deptcode == "" || deptcode == null || rec.DeptCode == deptcode)
                         && (signer == "" || signer == null || rec.RecordInsViewers.Count(c => c.Viewer == signer) > 0)
                         && (empcodename == "" || emp.Empcode == empcodename || emp.Empname == empcodename)
                         && (!publiconly || (publiconly && rec.IsPublic))
                         select new { rec, emp, dep }).ToList();

              List<RecordInstanceDto> result = new List<RecordInstanceDto>();
              RecordInstanceAssembler asm = new RecordInstanceAssembler();
              RecordEduActRefAssembler refasm = new RecordEduActRefAssembler();
              foreach (var i in ins)
              {
                  RecordInstanceDto dto = asm.Assemble(i.rec);
                  dto.CreaterName = i.emp.Empname;
                  dto.DeptName = i.dep.Deptname;
                  dto.TemplateName = i.rec.RecordTemplate.TemplateName;
                  dto.RecordEduActRefs = refasm.Assemble(i.rec.RecordEduActRefs).ToList();

                  result.Add(dto);
              }



              return result;
          }

      }


      public List<RecordInstanceDto> PersonalSearchRecordInstances(string empcodename, DateTime? recdate, DateTime? recdateend, string keyword, int? rectemplateid, string hospcode, string deptcode, string signer, string joiner, string status, string queryemp)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var ins = (from rec in service.UnitOfWork.RecordInstances
                         join emp in service.UnitOfWork.V_KmuEmps
                         on rec.Creater equals emp.Empcode
                         join dep in service.UnitOfWork.V_departments
                         on new { hosp = rec.HospCode, depcode = rec.DeptCode } equals new { hosp = dep.Hospcode, depcode = dep.Deptcode }
                         join viewer in service.UnitOfWork.RecordInsViewers
                         on new { insid = rec.InstanceID, v = signer } equals new { insid = viewer.InstanceID, v = viewer.Viewer }
                         into tempv
                         from viewer in tempv.DefaultIfEmpty()
                         join reader in service.UnitOfWork.RecordInsReaders
                         on new { insid = rec.InstanceID, r = joiner } equals new { insid = reader.InstanceID, r = reader.Reader }
                         into tempr
                         from reader in tempr.DefaultIfEmpty()
                         join sr in service.UnitOfWork.RecordInsSignIns
                         on new { insid = rec.InstanceID, r = joiner } equals new { insid = sr.InstanceID, r = sr.EmpCode }
                         into temps
                         from sr in temps.DefaultIfEmpty()
                         where
                         (emp.Empcode == empcodename || emp.Empname == empcodename || empcodename == "")
                         && (rec.Sdate.Value.Date >= recdate)
                         && (rec.Sdate.Value.Date <= recdateend)
                         && rec.Status != "X"
                         && (keyword == "" || keyword == null || rec.Title.Contains(keyword))
                         && (status == "" || status == null || rec.Status == status)
                         && (rectemplateid == null || rec.TemplateID == rectemplateid.Value)
                         && (hospcode == "" || hospcode == null || rec.HospCode == hospcode)
                         && (deptcode == "" || deptcode == null || rec.DeptCode == deptcode)
                         && (signer == "" || signer == null || tempv != null)
                         && (joiner == "" || joiner == null || sr != null || tempr != null)
                         && (rec.IsPublic || signer != "" || empcodename == queryemp || rec.RecordInsReaders.Count(c => c.Reader == queryemp) > 0)
                         select new { rec, emp, dep }).ToList();

              List<RecordInstanceDto> result = new List<RecordInstanceDto>();
              RecordInstanceAssembler asm = new RecordInstanceAssembler();
              RecordEduActRefAssembler refasm = new RecordEduActRefAssembler();
              foreach (var i in ins)
              {
                  RecordInstanceDto dto = asm.Assemble(i.rec);
                  dto.CreaterName = i.emp.Empname;
                  dto.DeptName = i.dep.Deptname;
                  dto.TemplateName = i.rec.RecordTemplate.TemplateName;
                  dto.RecordEduActRefs = refasm.Assemble(i.rec.RecordEduActRefs).ToList();

                  result.Add(dto);
              }



              return result;
          }
      }

      public List<RecordInstanceDto> GetMyRecordInstances(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var ins = (from i in service.UnitOfWork.RecordInstances
                        join dep in service.UnitOfWork.V_departments
                        on new { depcode = i.DeptCode, hospcode = i.HospCode } equals new { depcode = dep.Deptcode, hospcode = dep.Hospcode }
                        into tempdep
                        from dep in tempdep.DefaultIfEmpty()
                        where i.Creater == empcode && i.Status != "X"
                        orderby i.Sdate
                        select new { i, dep }).ToList();
              
              List<RecordInstanceDto> result = new List<RecordInstanceDto>();
              RecordInstanceAssembler asm = new RecordInstanceAssembler();
              RecordEduActRefAssembler refasm = new RecordEduActRefAssembler();
              foreach (var i in ins)
              {
                  RecordInstanceDto dto = asm.Assemble(i.i);
                  if (i.dep != null)
                  {
                      dto.DeptName = i.dep.Deptname;
                  }
                  dto.TemplateName = i.i.RecordTemplate.TemplateName;
                  dto.RecordEduActRefs = refasm.Assemble(i.i.RecordEduActRefs).ToList();
                  if ((i.i.Status == "1" || i.i.Status == "2") && i.i.RecordInsViewers.Count(c => c.ViewStatus != null) == 0)
                  {
                      dto.AllowGetBack = true;
                  }
                  else
                  {
                      dto.AllowGetBack = false;
                  }


                  result.Add(dto);
              }



              return result;
          }
      }


      public string GetBackMyRecordInstances(string instanceid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              RecordInstance i = service.UnitOfWork.RecordInstances.Where(c => c.InstanceID == instanceid).FirstOrDefault();

              if ((i.Status == "0" || i.Status == "1" || i.Status == "2") && i.RecordInsViewers.Count(c => c.ViewStatus != null) == 0)
              {
                  i.Status = "0";
                  service.UnitOfWork.SaveChanges();
              }
              else
              {
                  return "本記錄已有人進行審核無法終止";
              }
              return null;
          }
      }

      public RecordInstanceDto GetRecordInstance(string instanceid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              RecordInstanceDto result = new RecordInstanceDto();
              RecordInstanceAssembler asm = new RecordInstanceAssembler();
              RecordInsDetAssembler detasm = new RecordInsDetAssembler();
              RecordTemplateAssembler tasm = new RecordTemplateAssembler();
              RecordInsViewerAssembler vasm = new RecordInsViewerAssembler();
              RecordInsReaderAssembler rasm = new RecordInsReaderAssembler();

              var insdata = (from ins in service.UnitOfWork.RecordInstances
                             join emp in service.UnitOfWork.V_KmuEmps
                             on ins.Creater equals emp.Empcode
                             join dep in service.UnitOfWork.V_departments
                             on new { hosp = ins.HospCode, depcode = ins.DeptCode } equals new { hosp = dep.Hospcode, depcode = dep.Deptcode }
                             into tempdep
                             from dep in tempdep.DefaultIfEmpty()
                             where ins.InstanceID == instanceid
                             select new { ins, emp, dep }).FirstOrDefault();

              result = asm.Assemble(insdata.ins);
              if (insdata.dep != null)
              {
                  result.DeptName = insdata.dep.Deptname;
              }
              result.CreaterName = insdata.emp.Empname;
              result.RecordInsDets = detasm.Assemble(insdata.ins.RecordInsDets).ToList();
              result.RecordTemplate = tasm.Assemble(insdata.ins.RecordTemplate);
              result.RecordInsViewers = GetRecordInsViewer(insdata.ins.InstanceID); //vasm.Assemble(insdata.ins.RecordInsViewers).ToList();
              result.RecordInsReaders = GetRecordInsReader(insdata.ins.InstanceID); //rasm.Assemble(insdata.ins.RecordInsReaders).ToList();
              return result;
          }
      }

      public string DeleteRecordInstance(string instanceid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  RecordInstance ins = service.UnitOfWork.RecordInstances.Where(c => c.InstanceID == instanceid).FirstOrDefault();
                  if (ins != null)
                  {
                      ins.Status = "X";
                      foreach (var r in ins.RecordEduActRefs)
                      {
                          service.UnitOfWork.Delete(r);
                      }


                      service.UnitOfWork.SaveChanges();

                      return null;
                  }
                  else
                  {
                      return "找不到該筆會議記錄";
                  }
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();

                  return ex.Message;
              }
          }
      }

      public List<RecordInsSignInDto> GetRecordSignInList(string instanceid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var list = from si in service.UnitOfWork.RecordInsSignIns
                         join emp in service.UnitOfWork.V_KmuEmps
                         on si.EmpCode equals emp.Empcode
                         join rtype in service.UnitOfWork.V_CodeRefs
                         on new { t = si.RoleType, ct = "EduAct_ActRoleType" } equals new { t = rtype.Code, ct = rtype.CodeType }
                         into temprtype
                         from rtype in temprtype.DefaultIfEmpty()
                         where si.InstanceID == instanceid
                         orderby si.SignTime
                         select new { si, emp, rtype };
              RecordInsSignInAssembler asm = new RecordInsSignInAssembler();
              List<RecordInsSignInDto> result = new List<RecordInsSignInDto>();

              foreach (var l in list)
              {
                  RecordInsSignInDto dto = asm.Assemble(l.si);
                  dto.EmpName = l.emp.Empname;
                  dto.RoleName = l.rtype == null ? "一般出席者" : l.rtype.Name;

                  result.Add(dto);
              }
              return result;
          }
      }

      public void RemoveRecordSignIn(string instanceid, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  RecordInsSignIn s = service.UnitOfWork.RecordInsSignIns.Where(c => c.InstanceID == instanceid && c.EmpCode == empcode).FirstOrDefault();
                  if (s != null)
                  {
                      service.UnitOfWork.Delete(s);
                      service.UnitOfWork.SaveChanges();
                  }
              }
              catch
              {

              }
          }
      }

      public string SignInRecordIns(string instanceid, string empcode, string roletype, string path)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              RecordInstance ins = service.UnitOfWork.RecordInstances.Where(c => c.InstanceID == instanceid).FirstOrDefault();
              if (ins == null)
              {
                  return "參數錯誤，簽到失敗";
              }

              if (ins.Status != "0" && ins.Status != "1")
              {
                  return "本筆記錄已送審無法再簽到";
              }

              if (service.UnitOfWork.RecordInsSignIns.Count(c => c.InstanceID == instanceid && c.EmpCode == empcode) > 0)
              {
                  return "已有簽到資料";
              }
              else
              {


                  try
                  {

                      RecordInsSignIn si = new RecordInsSignIn();
                      si.EmpCode = empcode;
                      si.InstanceID = instanceid;
                      si.SignTime = DateTime.Now;
                      si.RoleType = roletype;
                      V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == empcode).FirstOrDefault();
                      if (emp != null)
                      {
                          si.TargetJob = emp.Jobcode;
                      }
                      si.SignPath = path;
                      service.UnitOfWork.Add(si);
                      service.UnitOfWork.SaveChanges();
                      return "簽到完成";
                  }
                  catch (Exception ex)
                  {
                      return "簽到失敗:" + ex.Message;
                  }
              }
          }
      }

      private object GetDBObject(object input)
      {
          if(input == null)
          {
              return DBNull.Value;
          }
          else
          {
              return input;
          }
      }
      public string UpdateRecordInsViewer(string instanceid, List<RecordInsViewerDto> list)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {


                  service.DeleteRecordInsViewers(service.ReadRecordInsViewers(c => c.InstanceID == instanceid));
                  foreach (RecordInsViewerDto dto in list)
                  {

                      string intsql = @"INSERT INTO www_EduActivity.dbo.RecordInsViewer
(InstanceID, ViewOrder, Viewer, ViewStatus, ViewTime, ViewMemo) 
VALUES (@InstanceID, @ViewOrder, @Viewer, @ViewStatus, @ViewTime, @ViewMemo)

                              ";
                      List<SqlParameter> sqlparms = new List<SqlParameter>();
                      sqlparms.Add(new SqlParameter("InstanceID", GetDBObject(dto.InstanceID)));
                      sqlparms.Add(new SqlParameter("ViewOrder", GetDBObject(dto.ViewOrder)));
                      sqlparms.Add(new SqlParameter("Viewer", GetDBObject(dto.Viewer)));
                      
                      sqlparms.Add(new SqlParameter("ViewStatus", GetDBObject(dto.ViewStatus)));

                      sqlparms.Add(new SqlParameter("ViewTime", GetDBObject(dto.ViewTime)));

                      sqlparms.Add(new SqlParameter("ViewMemo", GetDBObject(dto.ViewMemo)));
                      (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());
                      service.UnitOfWork.SaveChanges();
                      //service.CreateRecordInsViewer(dto);
                  }

                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      public string UpdateRecordInsReader(string instanceid, List<RecordInsReaderDto> list)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  var currentreader = service.ReadRecordInsReaders(c => c.InstanceID == instanceid).ToList();

                  foreach(var r in currentreader)
                  {
                      if(list.Count(c=> c.Reader == r.Reader) == 0)
                      {
                          service.DeleteRecordInsReader(r, false);
                      }
                  }

                  foreach (var dto in list)
                  {
                      if (currentreader.Count(c => c.Reader == dto.Reader) == 0)
                      {
                          string intsql = @"INSERT INTO www_EduActivity.dbo.RecordInsReader
(InstanceID, Reader, FirstReadTime) 
VALUES (@InstanceID, @Reader, @FirstReadTime)
                              ";
                          List<SqlParameter> sqlparms = new List<SqlParameter>();
                          sqlparms.Add(new SqlParameter("InstanceID", GetDBObject(dto.InstanceID)));
                          sqlparms.Add(new SqlParameter("Reader", GetDBObject(dto.Reader)));
                          sqlparms.Add(new SqlParameter("FirstReadTime", GetDBObject(dto.FirstReadTime)));
                          
                          (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                          //service.CreateRecordInsReader(dto, false);
                      }
                  }

                  service.UnitOfWork.SaveChanges();

                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }


      public List<RecordInsViewerDto> GetRecordInsViewer(string instanceid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var list = service.ReadRecordInsViewers(c => c.InstanceID == instanceid).OrderBy(c => c.ViewOrder).ToList();

              foreach(var i in list)
              {
                  V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == i.Viewer).FirstOrDefault();
                  if(emp!= null)
                  {
                      i.EmpName = emp.Empname;
                  }
              }

              return list;
          }
      }

      public List<RecordInsReaderDto> GetRecordInsReader(string instanceid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var list = service.ReadRecordInsReaders(c => c.InstanceID == instanceid).OrderBy(c => c.Reader).ToList();

              foreach (var i in list)
              {
                  V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == i.Reader).FirstOrDefault();
                  if (emp != null)
                  {
                      i.EmpName = emp.Empname;
                  }
              }
              return list;
          }
      }

      public List<RecordInstanceRejectLogDto> GetRecordInsRejectLog(string instanceid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var logs = (from log in service.UnitOfWork.RecordInstanceRejectLogs
                          join emp in service.UnitOfWork.V_KmuEmps
                          on log.EmpCode equals emp.Empcode
                          where log.InstanceID == instanceid
                          select new { log, emp }).ToList();
              RecordInstanceRejectLogAssembler asm = new RecordInstanceRejectLogAssembler();

              List<RecordInstanceRejectLogDto> result = new List<RecordInstanceRejectLogDto>();
              foreach (var log in logs)
              {
                  RecordInstanceRejectLogDto dto = asm.Assemble(log.log);
                  dto.EmpName = log.emp.Empname;

                  result.Add(dto);
              }

              return result;
          }
      }

      public string UpdateRecordInstanceStatus(RecordInstanceDto ins, string status, string empcode, bool withlog = false, string logmsg = "")
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              //3->2
              //2->1
              //2->0
              if ((ins.Status == "3" && status == "2") || (ins.Status != "0" && status == "0"))
              {
                  var viewer = GetRecordInsViewer(ins.InstanceID);
                  foreach (var v in viewer)
                  {
                      v.ViewStatus = null;
                  }
                  service.UpdateRecordInsViewers(viewer, false);
              }

              if (ins.Status == "2" && status == "V")
              {
                  var viewer = GetRecordInsViewer(ins.InstanceID);
                  foreach (var v in viewer)
                  {
                      v.ViewStatus = "同意";

                  }
                  service.UpdateRecordInsViewers(viewer, false);
              }

              if (withlog)
              {
                  RecordInstanceRejectLogDto log = new RecordInstanceRejectLogDto();
                  log.InstanceID = ins.InstanceID;
                  log.EmpCode = empcode;
                  log.NewStatus = status;
                  log.OldStatus = ins.Status;
                  log.RejectReason = logmsg;
                  log.RejectTime = DateTime.Now;

                  string intsql = @"INSERT INTO www_EduActivity.dbo.RecordInstanceRejectLog
(InstanceID, EmpCode, RejectReason, OldStatus, NewStatus, RejectTime) 
VALUES (@InstanceID, @EmpCode, @RejectReason, @OldStatus, @NewStatus, @RejectTime)

                              ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("InstanceID", GetDBObject(log.InstanceID)));
                  sqlparms.Add(new SqlParameter("EmpCode", GetDBObject(log.EmpCode)));
                  sqlparms.Add(new SqlParameter("RejectReason", GetDBObject(log.RejectReason)));
                  sqlparms.Add(new SqlParameter("OldStatus", GetDBObject(log.OldStatus)));
                  sqlparms.Add(new SqlParameter("NewStatus", GetDBObject(log.NewStatus)));
                  sqlparms.Add(new SqlParameter("RejectTime", GetDBObject(log.RejectTime)));
                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());



                  //service.CreateRecordInstanceRejectLog(log, false);
              }

              ins.Status = status;
              ins.Modifier = empcode;
              ins.ModifyDate = DateTime.Now;
              service.UpdateRecordInstance(ins, false);



              try
              {
                  service.UnitOfWork.SaveChanges();

                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }

      public string UpdateRecordInstance(RecordInstanceDto ins, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              ins.Modifier = empcode;
              ins.ModifyDate = DateTime.Now;
              service.UpdateRecordInstance(ins, false);

              foreach (RecordInsDetDto dto in ins.RecordInsDets)
              {
                  RecordInsDet det = service.UnitOfWork.RecordInsDets.Where(c => c.InstanceID == dto.InstanceID && c.ControlID == dto.ControlID).FirstOrDefault();
                  if (det == null)
                  {
                      det = new RecordInsDet();
                      det.InstanceID = dto.InstanceID;
                      det.ControlID = dto.ControlID;
                      service.UnitOfWork.Add(det);
                  }
                  det.ControlValue = dto.ControlValue;

              }

              try
              {
                  service.UnitOfWork.SaveChanges();

                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }

      


      #endregion

      #region 問卷
      public List<EduQuestionDto> GetEduQuestion(int templateid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduQuestions(c => c.TEMPLATE_ID == templateid).OrderBy(c => c.Sdate).ToList();
          }
      }

      public EduQuestionDto GetEduQuestionByID(int id)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduQuestions(c => c.ID == id).FirstOrDefault();
          }
      }

      public List<EduQuestionDto> GetNotFinishQuestion(string empcode, List<string> roles)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              DateTime nowdate = DateTime.Now.Date;

              var data = from q in service.UnitOfWork.EduQuestions
                         where q.Sdate <= nowdate && q.Edate >= nowdate
                         select q;

              List<EduQuestionDto> result = new List<EduQuestionDto>();
              EduQuestionAssembler asm = new EduQuestionAssembler();
              List<EduQuestionDto> haswrite = new List<EduQuestionDto>();
              foreach (var d in data)
              {
                  bool issend = false;
                  string[] tars = d.TargetRole.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
                  foreach (string t in tars)
                  {
                      if (roles.Contains(t))
                      {
                          issend = true;
                      }
                  }

                  if (haswrite.Count(c => c.QGroup == d.QGroup) > 0)
                  {
                      issend = false;
                  }

                  if (issend)
                  {
                      DateTime edate = d.Edate.AddDays(1);
                      if (service.UnitOfWork.FORM_INSTANCEs.Count(c => c.TEMPLATE_ID == d.TEMPLATE_ID && c.INSTANCE_CREATE_DATETIME >= d.Sdate && c.INSTANCE_CREATE_DATETIME < edate && c.TargetID == empcode) == 0)
                      {
                          result.Add(asm.Assemble(d));
                      }
                      else
                      {
                          haswrite.Add(asm.Assemble(d));
                      }
                  }
              }

              return result;
          }
      }
      #endregion

      #region 教學工作評估mail
      public void InsertMonthlyTeachPointCalcData(string empcode, DateTime caldate, DateTime sdate, DateTime edate
          , string param0
          , string param1
          , string param2
          , string param3
          , string param4
          , string param5
          , string param6
          , string param7
          , string param8
          , string param9
          , string param10
          , string param11
          , string param12
          , string param13
          )
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {

              List<MonthlyTeachPointCalcDatumDto> exlatest = service.ReadMonthlyTeachPointCalcData(c => c.EmpCode == empcode && c.IsLatest).ToList();

              foreach (var item in exlatest)
              {
                  item.IsLatest = false;
              }

              service.UpdateMonthlyTeachPointCalcData(exlatest);

              MonthlyTeachPointCalcDatumDto thedatedata = service.ReadMonthlyTeachPointCalcData(c => c.EmpCode == empcode && c.CalDate == caldate).FirstOrDefault();
              if (thedatedata == null)
              {
                  thedatedata = new MonthlyTeachPointCalcDatumDto();
                  thedatedata.EmpCode = empcode;
                  thedatedata.CalDate = caldate;
                  thedatedata.IsLatest = true;
                  thedatedata.Sdate = sdate;
                  thedatedata.Edate = edate;
                  thedatedata.Param0 = param0;
                  thedatedata.Param1 = param1;
                  thedatedata.Param2 = param2;
                  thedatedata.Param3 = param3;
                  thedatedata.Param4 = param4;
                  thedatedata.Param5 = param5;
                  thedatedata.Param6 = param6;
                  thedatedata.Param7 = param7;
                  thedatedata.Param8 = param8;
                  thedatedata.Param9 = param9;
                  thedatedata.Param10 = param10;
                  thedatedata.Param11 = param11;
                  thedatedata.Param12 = param12;
                  thedatedata.Param13 = param13;
                  service.CreateMonthlyTeachPointCalcDatum(thedatedata);
              }
              else
              {
                  thedatedata.IsLatest = true;
                  thedatedata.Sdate = sdate;
                  thedatedata.Edate = edate;
                  thedatedata.Param0 = param0;
                  thedatedata.Param1 = param1;
                  thedatedata.Param2 = param2;
                  thedatedata.Param3 = param3;
                  thedatedata.Param4 = param4;
                  thedatedata.Param5 = param5;
                  thedatedata.Param6 = param6;
                  thedatedata.Param7 = param7;
                  thedatedata.Param8 = param8;
                  thedatedata.Param9 = param9;
                  thedatedata.Param10 = param10;
                  thedatedata.Param11 = param11;
                  thedatedata.Param12 = param12;
                  thedatedata.Param13 = param13;
                  service.UpdateMonthlyTeachPointCalcDatum(thedatedata);
              }
          }
      }

      public MonthlyTeachPointCalcDatumDto GetPersonalMonthlyTeachPoint(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              MonthlyTeachPointCalcDatumDto result = service.ReadMonthlyTeachPointCalcData(c => c.EmpCode == empcode && c.IsLatest).FirstOrDefault();

              return result;
          }
      }


      #endregion

      #region 表單類別設定

      public List<FormCategoryDto> GetFormCategoryList(int templateid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              FormCategoryAssembler asm = new FormCategoryAssembler();

              var datas = from cat in service.UnitOfWork.FormCategories
                          join rel in service.UnitOfWork.FormCategoryRefs
                          on new { catid = cat.ID, tmpid = templateid } equals new { catid = rel.CategoryID, tmpid = rel.TEMPLATE_ID }
                          into temprel
                          from rel in temprel.DefaultIfEmpty()
                          select new { cat, rel };
              List<FormCategoryDto> result = new List<FormCategoryDto>();
              foreach (var data in datas)
              {
                  FormCategoryDto cat = asm.Assemble(data.cat);
                  cat.IsRel = data.rel != null;
                  result.Add(cat);
              }


              return result;
          }

      }

      public void SaveFormCategoryRef(int templateid, List<int> categorys)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              service.DeleteFormCategoryRefs(service.ReadFormCategoryRefs(c => c.TEMPLATE_ID == templateid).ToList());

              foreach (int i in categorys)
              {
                  FormCategoryRefDto r = new FormCategoryRefDto();
                  r.TEMPLATE_ID = templateid;
                  r.CategoryID = i;
                  service.CreateFormCategoryRef(r);

              }
          }
      }

      public string AddFormCategory(string categoryname,string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string result = null;

              FormCategoryDto dto = service.ReadFormCategories(c => c.CategoryName == categoryname).FirstOrDefault();
              if (dto != null)
              {
                  result = "本類別已存在";
                  return result;
              }
              dto = new FormCategoryDto();
              dto.CategoryName = categoryname;
              dto.CreateDate = DateTime.Now;
              dto.Creater = empcode;
              service.CreateFormCategory(dto);

              return result;
          }
      }

      public List<FormCategoryDto> GetFormCategory()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var datas = from cat in service.UnitOfWork.FormCategories
                          join emp in service.UnitOfWork.V_KmuEmps
                          on cat.Creater equals emp.Empcode
                          into tempemp
                          from emp in tempemp.DefaultIfEmpty()
                          orderby cat.CreateDate descending
                          select new { cat, emp };
              List<FormCategoryDto> result = new List<FormCategoryDto>();

              FormCategoryAssembler asm = new FormCategoryAssembler();

              foreach (var data in datas)
              {
                  FormCategoryDto dto = asm.Assemble(data.cat);
                  dto.CreaterName = data.emp == null ? null : data.emp.Empname;
                  result.Add(dto);
              }

              return result;
          }
      }

      public string DeleteFormCategory(int id)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string result = null;

              service.DeleteFormCategoryRefs(service.ReadFormCategoryRefs(c => c.CategoryID == id), false);

              service.DeleteFormCategories(service.ReadFormCategories(c => c.ID == id), false);

              try
              {
                  service.UnitOfWork.SaveChanges();
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  result = ex.Message;
              }


              return result;
          }
      }

      public string UpdateFormCategory(int id, string name)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string result = null;

              FormCategoryDto cat = service.ReadFormCategories(c => c.ID == id).FirstOrDefault();
              if (cat != null)
              {
                  cat.CategoryName = name;
                  service.UpdateFormCategory(cat, false);
              }

              try
              {
                  service.UnitOfWork.SaveChanges();
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  result = ex.Message;
              }


              return result;
          }
      }


      #endregion

      #region 課程通過要求

      public List<V_CodeRefDto> GetEduTermFormReqType()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadV_CodeRefs(c => c.CodeType == "EduAct_FormReqType").OrderBy(c => c.ShowSeq).ToList();
          }
      }

      public List<EduTermFormReqTemplateDto> GetFormReqTemplates(string creater)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduTermFormReqTemplates(c => c.Creater == creater).ToList();
          }
      }


      private string GetEduTermFormReqName(string reqtype, int reqid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string reqname = null;
              switch (reqtype)
              {
                  case "Form":
                      reqname = service.UnitOfWork.FORM_TEMPLATEs.Where(c => c.TEMPLATE_ID == reqid).Select(c => c.TEMPLATE_NAME).FirstOrDefault();
                      break;
                  case "Category":
                      reqname = service.UnitOfWork.FormCategories.Where(c => c.ID == reqid).Select(c => c.CategoryName).FirstOrDefault();
                      break;
              }

              return reqname;
          }
      }

      public List<EduTermFormReqDto> GetEduTermFromReq(string edutermid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduTermFormReqDto> result = new List<EduTermFormReqDto>();
              var reqs = from q in service.UnitOfWork.EduTermFormReqs
                         join qt in service.UnitOfWork.V_CodeRefs
                         on new { ctype = "EduAct_FormReqType", qtype = q.ReqType } equals new { ctype = qt.CodeType, qtype = qt.Code }
                         where q.EduTermID == edutermid
                         select new { q, qt };
              EduTermFormReqAssembler asm = new EduTermFormReqAssembler();

              foreach (var r in reqs)
              {
                  EduTermFormReqDto dto = asm.Assemble(r.q);
                  dto.ReqTypeName = r.qt.Name;
                  dto.ReqName = GetEduTermFormReqName(r.q.ReqType, r.q.ReqID);

                  result.Add(dto);
              }


              return result;
          }
      }


      public List<EduTermFormReqTemplateDetDto> GetEduTermFromReqTemplateDet(int templateid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduTermFormReqTemplateDetDto> result = new List<EduTermFormReqTemplateDetDto>();

              var reqs = from q in service.UnitOfWork.EduTermFormReqTemplateDets
                         join qt in service.UnitOfWork.V_CodeRefs
                         on new { ctype = "EduAct_FormReqType", qtype = q.ReqType } equals new { ctype = qt.CodeType, qtype = qt.Code }
                         where q.TemplateID == templateid
                         select new { q, qt };
              EduTermFormReqTemplateDetAssembler asm = new EduTermFormReqTemplateDetAssembler();

              foreach (var r in reqs)
              {
                  EduTermFormReqTemplateDetDto dto = asm.Assemble(r.q);
                  dto.ReqTypeName = r.qt.Name;
                  dto.ReqName = GetEduTermFormReqName(r.q.ReqType, r.q.ReqID);

                  result.Add(dto);
              }

              return result;
          }
      }

      public List<EduTermFormReqTemplateDto> GetEduTermFormReqTemplate()
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduTermFormReqTemplateDto> result = new List<EduTermFormReqTemplateDto>();

              var reqs = from t in service.UnitOfWork.EduTermFormReqTemplates
                         join emp in service.UnitOfWork.V_KmuEmps
                         on t.Creater equals emp.Empcode
                         select new { t, emp };
              EduTermFormReqTemplateAssembler asm = new EduTermFormReqTemplateAssembler();

              foreach (var r in reqs)
              {
                  EduTermFormReqTemplateDto dto = asm.Assemble(r.t);
                  dto.CreaterName = r.emp.Empname;

                  result.Add(dto);
              }

              return result;
          }
      }

      public BoolMessage CreateEduTermFormReqTemplate(string templatename, List<EduTermFormReqTemplateDetDto> dets, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              BoolMessage result = new BoolMessage(false, null);
              try
              {
                  EduTermFormReqTemplate newtemp = new EduTermFormReqTemplate();
                  newtemp.TemplateName = templatename;
                  newtemp.Creater = empcode;
                  newtemp.CreateDate = DateTime.Now;


                  string intsql = @"INSERT INTO www_EduActivity.dbo.EduTermFormReqTemplate
(TemplateName, Creater, CreateDate, Modifier, ModifyDate) 
VALUES (@TemplateName, @Creater, @CreateDate, @Modifier, @ModifyDate)

                              ";
                  List<SqlParameter> sqlparms = new List<SqlParameter>();
                  sqlparms.Add(new SqlParameter("TemplateName", GetDBObject(newtemp.TemplateName)));
                  sqlparms.Add(new SqlParameter("Creater", GetDBObject(newtemp.Creater)));
                  sqlparms.Add(new SqlParameter("CreateDate", GetDBObject(newtemp.CreateDate)));
                  sqlparms.Add(new SqlParameter("Modifier", GetDBObject(newtemp.Modifier)));
                  sqlparms.Add(new SqlParameter("ModifyDate", GetDBObject(newtemp.ModifyDate)));
                  (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                  newtemp.TemplateID = service.UnitOfWork.EduTermFormReqTemplates.Max(c => c.TemplateID);

                  //service.UnitOfWork.Add(newtemp);
                  service.UnitOfWork.SaveChanges();

                  foreach (var det in dets)
                  {
                      det.TemplateID = newtemp.TemplateID;
                      service.CreateEduTermFormReqTemplateDet(det, false);
                  }



                  service.UnitOfWork.SaveChanges();
                  result = new BoolMessage(true, null);
              }
              catch (Exception ex)
              {
                  result = new BoolMessage(false, ex.Message);
              }

              return result;
          }
      }

      public BoolMessage CreateEduTermFormReq(string edutermid, List<EduTermFormReqDto> reqs, string templatename)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              BoolMessage result = new BoolMessage(false, null);
              try
              {
                  int templateid = 0;
                  if (templatename != null && reqs.Count > 0)
                  {
                      EduTermFormReqTemplate template = new EduTermFormReqTemplate();
                      template.Creater = reqs.Select(c => c.Creater).FirstOrDefault();
                      template.CreateDate = DateTime.Now;
                      template.TemplateName = templatename;


                      string intsql = @"INSERT INTO www_EduActivity.dbo.EduTermFormReqTemplate
(TemplateName, Creater, CreateDate, Modifier, ModifyDate) 
VALUES (@TemplateName, @Creater, @CreateDate, @Modifier, @ModifyDate)

                              ";
                      List<SqlParameter> sqlparms = new List<SqlParameter>();
                      sqlparms.Add(new SqlParameter("TemplateName", GetDBObject(template.TemplateName)));
                      sqlparms.Add(new SqlParameter("Creater", GetDBObject(template.Creater)));
                      sqlparms.Add(new SqlParameter("CreateDate", GetDBObject(template.CreateDate)));
                      sqlparms.Add(new SqlParameter("Modifier", GetDBObject(template.Modifier)));
                      sqlparms.Add(new SqlParameter("ModifyDate", GetDBObject(template.ModifyDate)));
                      (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());


                      //service.UnitOfWork.Add(template);
                      service.UnitOfWork.SaveChanges();
                      templateid = service.UnitOfWork.EduTermFormReqTemplates.Max(c => c.TemplateID);
                  }
                  service.DeleteEduTermFormReqs(service.ReadEduTermFormReqs(c => c.EduTermID == edutermid), false);

                  foreach (var req in reqs)
                  {
                      if (templatename != null)
                      {
                          EduTermFormReqTemplateDetDto tdto = new EduTermFormReqTemplateDetDto();
                          tdto.NeedPass = req.NeedPass;
                          tdto.ReqCount = req.ReqCount;
                          tdto.ReqID = req.ReqID;
                          tdto.ReqType = req.ReqType;
                          tdto.TemplateID = templateid;
                          service.CreateEduTermFormReqTemplateDet(tdto, false);

                      }
                      req.CreateDate = DateTime.Now;
                      service.CreateEduTermFormReq(req, false);
                  }
                  service.UnitOfWork.SaveChanges();
                  result = new BoolMessage(true, null);
              }
              catch (Exception ex)
              {
                  result = new BoolMessage(false, ex.Message);
              }

              return result;
          }
      }

      public bool CheckTemplateName(string templatename, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              if (service.ReadEduTermFormReqTemplates(c => c.Creater == empcode && c.TemplateName == templatename).Count() > 0)
              {
                  return false;
              }
              else
              {
                  return true;
              }
          }
      }

      #endregion

      #region 新學習歷程
      public List<EduMemberTermPassDto> QueryEduMemberTermWithPass(string empcode, bool withpass, string edutermid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduMemberTermPassDto> parentdtos = new List<EduMemberTermPassDto>();
              List<EduMemberTermPassDto> result = new List<EduMemberTermPassDto>();

              var members = (from mem in service.UnitOfWork.Members
                             join rundown in service.UnitOfWork.EduTeamMemberRundowns on mem.MemberID equals rundown.MemberID
                             join emp in service.UnitOfWork.V_KmuEmps on mem.IsHospMember equals emp.Empcode
                             join term in service.UnitOfWork.EduTerms on rundown.EduTermID equals term.EduTermID
                             join dept in service.UnitOfWork.V_departments
                             on new { deptcode = term.DepCode, hospcode = term.Hospital } equals new { deptcode = dept.Deptcode, hospcode = dept.Shorthospcode }
                             join jobdata in service.UnitOfWork.V_CodeRefs on new { codetype = "EduAct_JobSerial", code = term.JobCode } equals new 
                             { codetype = jobdata.CodeType, 
                               code = jobdata.Code 
                             }
                             where emp.Empcode == empcode && (service.UnitOfWork.EduTermFormReqs.Count(c => c.EduTermID == term.EduTermID) > 0
                             || service.UnitOfWork.EduFormTemplateLists.Count(c => c.EduTermID == term.EduTermID) > 0
                             || !withpass) && (edutermid == null || term.EduTermID == edutermid)
                             orderby emp.Idno, term.DateFrom
                             select new { mem, rundown, emp, term, dept, jobdata }).ToList();



              foreach (var mem in members)
              {
                  EduMemberTermPassDto dto = new EduMemberTermPassDto();
                  dto.EduTermID = mem.term.EduTermID;
                  dto.ParentEduTermID = mem.term.ParentEduTermID;
                  dto.TermName = mem.term.Name; //GetEduTermFullName(mem.term);
                  dto.Sdate = mem.term.DateFrom;
                  dto.Edate = mem.term.DateTo;
                  dto.JobName = mem.jobdata.Name;

                  parentdtos.AddRange(GetParentEduMemberTerms(mem.term));


                  List<EduTermFormReqDto> reqs = GetEduTermFromReq(mem.term.EduTermID);

                  for (int i = 0; i < reqs.Count;i++ )
                  {
                      EduTermFormReqDto req = reqs[i];
                      CheckFormReq(empcode, ref req);
                      reqs[i] = req;
                  }

                  dto.TermReqs = reqs;
                  List<int> existsforms = new List<int>();
                  foreach (var i in reqs)
                  {
                      foreach (var form in i.MemberPassForms)
                      {
                          if (!existsforms.Contains(form.INSTANCE_ID))
                          {
                              existsforms.Add(form.INSTANCE_ID);
                          }
                      }
                  }


                  List<FORM_INSTANCEDto> otherforms = (from ins in service.UnitOfWork.FORM_INSTANCEs
                                                       where ins.INHOSPID == mem.term.EduTermID
                                                       && (ins.TargetID == mem.mem.IsHospMember || ins.EvalTargetID == mem.mem.MemberID)
                                                       && !existsforms.Contains(ins.INSTANCE_ID)
                                                       && ins.Status != '0'
                                                       && ins.PARENT_INSTANCE_ID == null
                                                       select new FORM_INSTANCEDto { INSTANCE_ID = ins.INSTANCE_ID, INSTANCE_NAME = ins.INSTANCE_NAME, IsPass = ins.IsPass, INSTANCE_ALTER_DATETIME = ins.INSTANCE_ALTER_DATETIME, INSTANCE_CREATE_DATETIME = ins.INSTANCE_CREATE_DATETIME, DISPLAY_TO_EVALTARGET = ins.FORM_TEMPLATE.DISPLAY_TO_EVALTARGET }).ToList();

                  existsforms.AddRange(otherforms.Select(c => c.INSTANCE_ID));

                  List<int> pidlist = (from ins in service.UnitOfWork.FORM_INSTANCEs
                                       where ins.INHOSPID == mem.term.EduTermID
                                       && (ins.TargetID == mem.mem.IsHospMember || ins.EvalTargetID == mem.mem.MemberID)
                                       && !existsforms.Contains(ins.INSTANCE_ID)
                                       && ins.Status != '0'
                                       && ins.PARENT_INSTANCE_ID != null
                                       && service.UnitOfWork.FORM_INSTANCEs.Count(c => c.PARENT_INSTANCE_ID == ins.PARENT_INSTANCE_ID && c.Status == '0') == 0
                                       select ins.PARENT_INSTANCE_ID.Value).Distinct().ToList();

                  foreach(int pid in pidlist)
                  {
                      FORM_INSTANCEDto pdto = (from ins in service.UnitOfWork.FORM_INSTANCEs
                                               join pins in service.UnitOfWork.FORM_INSTANCEs
                                               on ins.PARENT_INSTANCE_ID equals pins.INSTANCE_ID
                                               where ins.PARENT_INSTANCE_ID == pid
                                               && !existsforms.Contains(ins.INSTANCE_ID)
                                               orderby ins.INSTANCE_ID descending
                                               select new FORM_INSTANCEDto { INSTANCE_ID = ins.INSTANCE_ID, INSTANCE_NAME = pins.INSTANCE_NAME, IsPass = ins.IsPass, INSTANCE_ALTER_DATETIME = ins.INSTANCE_ALTER_DATETIME, INSTANCE_CREATE_DATETIME = ins.INSTANCE_CREATE_DATETIME, DISPLAY_TO_EVALTARGET = pins.FORM_TEMPLATE.DISPLAY_TO_EVALTARGET }).FirstOrDefault();
                      otherforms.Add(pdto);
                      existsforms.Add(pdto.INSTANCE_ID);
                  }

                  dto.OtherForms = otherforms;

                  if (dto.OtherForms.Count > 0 || dto.TermReqs.Count > 0)
                  {
                      result.Add(dto);
                  }
              }

              result.AddRange(parentdtos.Where(c => result.Count(d => d.EduTermID == c.EduTermID) == 0));

              return result;
          }

      }

      private List<EduMemberTermPassDto> GetParentEduMemberTerms(EduTerm term)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduMemberTermPassDto> result = new List<EduMemberTermPassDto>();
              if (term.EduTerm1 != null)
              {
                  EduTerm tempterm = term.EduTerm1;
                  do
                  {
                      EduMemberTermPassDto dto = new EduMemberTermPassDto();
                      dto.EduTermID = tempterm.EduTermID;
                      dto.ParentEduTermID = tempterm.ParentEduTermID;
                      dto.TermName = tempterm.Name;
                      dto.Sdate = tempterm.DateFrom;
                      dto.Edate = tempterm.DateTo;
                      result.Add(dto);
                      tempterm = tempterm.EduTerm1;
                  } while (tempterm != null);
              }

              return result;
          }
      }


      private void CheckFormReq(string empcode, ref EduTermFormReqDto req)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              int reqid = req.ReqID;
              bool needpass = req.NeedPass;
              string edutermid = req.EduTermID;
              var currentmem = (from mem in service.UnitOfWork.Members
                               join rd in service.UnitOfWork.EduTeamMemberRundowns
                               on mem.MemberID equals rd.MemberID
                               where rd.EduTermID == edutermid
                               && mem.IsHospMember == empcode
                               select mem).FirstOrDefault();
              string memberid = null;
              if(currentmem!=null)
              { 
                  memberid = currentmem.MemberID;
              }
              switch (req.ReqType)
              {
                  case "Form":
                      var forms = (from ins in service.UnitOfWork.FORM_INSTANCEs
                                   where ins.TEMPLATE_ID == reqid
                                   && (ins.TargetID == empcode || ins.EvalTargetID == memberid)
                                   && (!needpass || (needpass && ins.IsPass == true))
                                   && ins.INHOSPID == edutermid
                                   select new FORM_INSTANCEDto { INSTANCE_ID = ins.INSTANCE_ID, INSTANCE_NAME = ins.INSTANCE_NAME, INSTANCE_ALTER_DATETIME = ins.INSTANCE_CREATE_DATETIME, INSTANCE_CREATE_DATETIME = ins.INSTANCE_CREATE_DATETIME, DISPLAY_TO_EVALTARGET = ins.FORM_TEMPLATE.DISPLAY_TO_EVALTARGET }).ToList();
                      req.MemberPassForms = forms;
                      req.MemberPassCount = forms.Count;
                      break;
                  case "Category":
                      var cates =  service.ReadFormCategoryRefs(c=> c.CategoryID == reqid).Select(c=> c.TEMPLATE_ID).ToList();
                      var catforms = (from ins in service.UnitOfWork.FORM_INSTANCEs
                                      where (cates.Contains(ins.TEMPLATE_ID) || (ins.FORM_TEMPLATE.PARENT_TEMPLATE_ID.HasValue && cates.Contains(ins.FORM_TEMPLATE.PARENT_TEMPLATE_ID.Value)))
                                      && (ins.TargetID == empcode || ins.EvalTargetID == memberid)
                                      && (!needpass || (needpass && ins.IsPass == true))
                                      && ins.INHOSPID == edutermid
                                      select new FORM_INSTANCEDto { INSTANCE_ID = ins.INSTANCE_ID, INSTANCE_NAME = ins.INSTANCE_NAME, DISPLAY_TO_EVALTARGET = ins.FORM_TEMPLATE.DISPLAY_TO_EVALTARGET }).ToList();
                      req.MemberPassForms = catforms;
                      req.MemberPassCount = catforms.Count;

                      break;
              }
          }
      }

      


      #endregion

      #region 課程開課序號設定

      public string SettingEdutermSchoolSeq(List<string> edutermids, string seq1, string seq2)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  foreach (string id in edutermids)
                  {
                      var eduterm = service.UnitOfWork.EduTerms.Where(c => c.EduTermID == id).FirstOrDefault();
                      if (eduterm != null)
                      {
                          eduterm.SchoolSeqNo1 = seq1;
                          eduterm.SchoolSeqNo2 = seq2;
                      }
                  }
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch(Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }

      #endregion


      #region 醫事教師教學點數_部門代碼
      public string GetDeptmentFuzzy()
      {
          using (var Service = new EduActivityContextService())
          {
              string result = "";
              var Dtos = Service.ReadV_departments();
              foreach (var d in Dtos)
              {
                  result += d.Deptcode + "-" + d.Deptname;
              }
              return result;
          }
      }
      #endregion

    #region 個人片語功能
      public string AddSentences(string empcode, string sen, bool ispublic)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  EduSentenceDto dto = new EduSentenceDto();
                  dto.IsPublic = ispublic;
                  dto.CreateDate = DateTime.Now;
                  dto.EmpCode = empcode;
                  dto.Sentence = sen;
                  service.CreateEduSentence(dto);
                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }


      public string EditSentences(int id, string sen, bool ispublic)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  EduSentenceDto dto = service.ReadEduSentences(c => c.ID == id).FirstOrDefault();
                  if (dto != null)
                  {
                      dto.IsPublic = ispublic;
                      dto.ModifyDate = DateTime.Now;
                      dto.Sentence = sen;
                      service.UpdateEduSentence(dto);
                      return null;
                  }
                  else
                  {
                      return "找不到這筆資料";
                  }
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }


      public string DeleteSentences(int id)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  EduSentenceDto dto = service.ReadEduSentences(c => c.ID == id).FirstOrDefault();
                  if (dto != null)
                  {
                      service.DeleteEduSentence(dto);
                      return null;
                  }
                  else
                  {
                      return "找不到這筆資料";
                  }
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }


      public List<EduSentenceDto> GetMySentences(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduSentences(c => c.EmpCode == empcode).ToList();
          }
      }

      public List<EduSentenceDto> GetPublicSentences(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadEduSentences(c => c.EmpCode != empcode && c.IsPublic).ToList();
          }
      }

      #endregion
      #region iKASA

      #region login
      public List<iKASAPersonInfo> GetiKASALoginInfo(string idno)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<iKASAPersonInfo> result = new List<iKASAPersonInfo>();
              List<V_KmuEmpDto> emps = service.ReadV_KmuEmps(c => c.Idno == idno).ToList();
              foreach (V_KmuEmpDto emp in emps)
              {
                  bool hasdata = false;
                  var mems = from m in service.UnitOfWork.Members
                             join mt in service.UnitOfWork.V_CodeRefs
                             on new { membertype = m.MemberType, codetype = "EduAct_JobCode" } equals new { membertype = mt.Code, codetype = mt.CodeType }
                             where m.IsHospMember == emp.Empcode
                             select new { m, mt };


                  foreach (var mem in mems)
                  {
                      iKASAPersonInfo info = new iKASAPersonInfo();
                      info.dateform = mem.m.DateFrom;
                      info.dateto = mem.m.DateTo;
                      info.empcode = emp.Empcode;
                      info.membercode = mem.m.MemberCode;
                      info.membertype = mem.m.MemberType;
                      info.membertypename = mem.mt.Name;
                      info.memberid = mem.m.MemberID;
                      EduTeamMember tm = service.UnitOfWork.EduTeamMembers.Where(c => c.MemberID == info.memberid).FirstOrDefault();
                      if (tm != null && tm.EduTeam != null)
                      {
                          info.teamcode = tm.EduTeamCode;
                          info.teamname = tm.EduTeam.EduTeamName;
                          info.topteamcode = GetTopTeamCode(info.teamcode);
                          info.allteamcodes = GetEmpAllTeamCode(info.teamcode);
                          result.Add(info);
                          hasdata = true;
                      }
                  }

                  var auths = from au in service.UnitOfWork.AuthRoles
                              join eu in service.UnitOfWork.AccountRoles
                              on au.RoleID equals eu.RoleID
                              where au.RoleID.StartsWith("iKER")
                              && eu.EmpCode == emp.Empcode
                              select new { au, eu };

                  foreach (var auth in auths)
                  {
                      iKASAPersonInfo info = new iKASAPersonInfo();
                      info.dateform = DateTime.Now.Date;
                      info.dateto = DateTime.Now.Date.AddDays(1);
                      info.empcode = emp.Empcode;
                      info.membercode = emp.Empcode;
                      info.membertype = auth.au.RoleID;
                      info.membertypename = auth.au.RoleName;
                      info.memberid = emp.Empcode + "_" + auth.au.RoleID;

                      info.teamcode = auth.au.RoleID;
                      info.teamname = auth.au.RoleName;
                      info.topteamcode = auth.au.RoleID;
                      info.allteamcodes = new List<string> { auth.au.RoleID };
                      result.Add(info);

                      hasdata = true;
                  }
                  if(!hasdata)
                  {
                      iKASAPersonInfo info = new iKASAPersonInfo();
                      info.dateform = DateTime.Now.Date;
                      info.dateto = DateTime.Now.Date.AddDays(1);
                      info.empcode = emp.Empcode;
                      info.membercode = emp.Empcode;
                      info.membertype = "iKNormal";
                      info.membertypename = "iKASA使用者";
                      info.memberid = emp.Empcode + "_" + "iKNormal";

                      info.teamcode = "iKNormal";
                      info.teamname = "iKASA使用者";
                      info.topteamcode = "iKNormal";
                      info.allteamcodes = new List<string> { "iKNormal" };
                      result.Add(info);
                      
                  }

              }
              return result.OrderByDescending(c => c.dateform).ToList();
          }
      }


      #endregion

      #region menu
      public List<IKASA_MenuDto> GetiKASAMenu(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadIKASA_Menus(c => c.Isshow == "Y").OrderBy(c => c.Displayorder).ToList();
          }
      }



      public List<IKASA_MenuDto> GetiKASAMenu(iKASAPersonInfo pinfo)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              IKASA_MenuAssembler asm = new IKASA_MenuAssembler();
              var menus = asm.Assemble((from m in service.UnitOfWork.IKASA_Menus
                                        join mf in service.UnitOfWork.IKASA_MenuRefs
                                        on m.Menuid equals mf.Menuid
                                        where (mf.Membertype == pinfo.membertype || mf.Membertype == null)
                                        && (pinfo.allteamcodes.Contains(mf.Topteamcode) || mf.Topteamcode == null)
                                        && m.Isshow == "Y"
                                        && (m.Enabledate == null || m.Enabledate <= DateTime.Now)
                                        && (m.Disabledate == null || m.Disabledate >= DateTime.Now)
                                        orderby m.Displayorder
                                        select m).Distinct());
              return menus.ToList();
          }
      }


      public IKASA_MenuDto GetMenuItemByID(string menuid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadIKASA_Menus(c => c.Menuid == menuid).FirstOrDefault();
          }
      }

      public List<IKASA_MenuParamDto> GetMenuItemParamByID(string menuid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadIKASA_MenuParams(c => c.Menuid == menuid).ToList();
          }
      }

      #endregion

      #region EduScore實習各階段評量

      public List<string[]> UploadEduScore(DataTable dt, string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string[]> result = new List<string[]>();
              try
              {
                  int rowcount = 0;

                  foreach (DataRow dr in dt.Rows)
                  {
                      string color = "black";
                      string msg = "已上傳完成";
                      string inempcode = dr["員工編號"].ToString();
                      rowcount++;

                      if (inempcode != "")
                      {

                          V_KmuEmpDto temp = service.ReadV_KmuEmps(c => c.Empcode == inempcode).FirstOrDefault();

                          if (temp == null)
                          {
                              color = "red";
                              msg = "第" + rowcount.ToString() + "行:職員編號" + inempcode + "不存在";
                              result.Add(new string[] { msg, color });
                              continue;
                          }
                          EduScore data = new EduScore();

                          data.Empcode = inempcode;

                          data.Uploadtime = DateTime.Now;
                          data.Uploader = empcode;
                          data.Membercode = dr["學號"].ToString();
                          data.Deplevel = dr["系級"].ToString();
                          data.Classname = dr["實習課程名稱"].ToString();
                          data.Score = Convert.ToDecimal(dr["總成績"].ToString());
                          data.Status = "V";


                          string intsql = @"INSERT INTO www_EduActivity.dbo.EduScore
(empcode, membercode, deplevel, classname, Score, uploader, uploadtime, Status) 
VALUES (@empcode, @membercode, @deplevel, @classname, @Score, @uploader, @uploadtime, @Status)

                              ";
                          List<SqlParameter> sqlparms = new List<SqlParameter>();
                          sqlparms.Add(new SqlParameter("empcode", GetDBObject(data.Empcode)));
                          sqlparms.Add(new SqlParameter("membercode", GetDBObject(data.Membercode)));
                          sqlparms.Add(new SqlParameter("deplevel", GetDBObject(data.Deplevel)));
                          sqlparms.Add(new SqlParameter("classname", GetDBObject(data.Classname)));
                          sqlparms.Add(new SqlParameter("Score", GetDBObject(data.Score)));
                          sqlparms.Add(new SqlParameter("uploader", GetDBObject(data.Uploader)));
                          sqlparms.Add(new SqlParameter("uploadtime", GetDBObject(data.Uploadtime)));
                          sqlparms.Add(new SqlParameter("Status", GetDBObject(data.Status)));
                          (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());



                          //service.UnitOfWork.Add(data);


                          try
                          {
                              service.UnitOfWork.SaveChanges();
                              color = "black";
                              msg = "第" + rowcount.ToString() + "行，匯入成功";
                          }
                          catch (Exception ex)
                          {
                              service.UnitOfWork.ClearChanges();
                              msg = "第" + rowcount.ToString() + "行，上傳失敗:" + ex.Message;
                              color = "red";
                          }


                      }
                      else
                      {

                          color = "red";
                          msg = "第" + rowcount.ToString() + "行:職員編號" + inempcode + "空白";
                          result.Add(new string[] { msg, color });
                          continue;

                      }

                      result.Add(new string[] { msg, color });
                  }
              }
              catch (Exception ex)
              {
                  result.Clear();
                  result.Add(new string[] { "檔案格式錯誤，請確認第一欄欄位名稱是否與範例相同:" + ex.Message, "red" });
              }
              finally
              {
                  service.UnitOfWork.ClearChanges();
              }
              return result;
          }
      }


      public List<EduScoreDto> QueryEduScoreData(string empcodename, string creater, DateTime? createdates, DateTime? createdatee)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string> empcodenames = empcodename.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).ToList();

              try
              {
                  var datas = (from item in service.UnitOfWork.EduScores
                               join emp in service.UnitOfWork.V_KmuEmps
                               on item.Empcode equals emp.Empcode
                               join cemp in service.UnitOfWork.V_KmuEmps
                               on item.Uploader equals cemp.Empcode
                               where
                               (empcodenames.Count() == 0 || empcodenames.Contains(emp.Empcode) || empcodenames.Contains(emp.Empname))
                               &&
                               (creater == null || creater == "" || cemp.Empcode == creater || cemp.Empname == creater)
                               &&
                               (createdates == null || (createdates != null && item.Uploadtime >= createdates))
                               &&
                               (createdatee == null || (createdatee != null && item.Uploadtime <= createdatee))
                               && item.Status != "X"
                               orderby item.Id
                               select new { item, emp, cemp }).ToList();
                  List<EduScoreDto> result = new List<EduScoreDto>();
                  EduScoreAssembler asm = new EduScoreAssembler();
                  foreach (var data in datas)
                  {
                      EduScoreDto dto = asm.Assemble(data.item);
                      dto.EmpName = data.emp.Empname;
                      dto.CreateName = data.cemp.Empname;

                      result.Add(dto);
                  }

                  return result;
              }
              catch (Exception ex)
              {
                  return null;
              }
          }
      }


      public string DeleteEduScoreData(List<int> ids)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<EduScore> data = service.UnitOfWork.EduScores.Where(c => ids.Contains(c.Id)).ToList();

              foreach (var d in data)
              {
                  d.Status = "X";
              }
              try
              {
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch (Exception ex)
              {
                  service.UnitOfWork.ClearChanges();
                  return ex.Message;
              }
          }
      }
      #endregion

      #region OSCE

      private const string ikasaExamIDOwner = "iKASA_ExamID";
      public BoolMessage CreateiKasaOSCEExam(string examname, string empcode, DateTime examdate, decimal passscore, int passstage, string hospcode, List<IKASA_OSCEExamStageDto> stages)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              BoolMessage result = new BoolMessage(false, null);
              try
              {
                  IKASA_OSCEExamDto dto = new IKASA_OSCEExamDto();
                  dto.CreateDate = DateTime.Now;
                  dto.Creater = empcode;
                  dto.ExamDate = examdate;
                  dto.ExamID = GetSerialNo(ikasaExamIDOwner);
                  dto.ExamName = examname;
                  dto.HospCode = hospcode;
                  dto.PassScore = passscore;
                  dto.PassStage = passstage;
                  service.CreateIKASA_OSCEExam(dto, false);
                  foreach (var stage in stages)
                  {
                      stage.ExamID = dto.ExamID;
                      service.CreateIKASA_OSCEExamStage(stage, false);
                  }

                  service.UnitOfWork.SaveChanges();
                  result = new BoolMessage(true, dto.ExamID);

              }
              catch (Exception ex)
              {
                  result = new BoolMessage(false, ex.Message);
              }
              return result;
          }
      }

      public BoolMessage SaveiKasaOSCEExam(string examid, string examname, DateTime examdate, decimal passscore, int passstage, string hospcode, List<IKASA_OSCEExamStageDto> stages)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              BoolMessage result = new BoolMessage(false, null);
              try
              {
                  IKASA_OSCEExamDto dto = service.ReadIKASA_OSCEExams(c => c.ExamID == examid).FirstOrDefault();
                  if (dto != null)
                  {
                      dto.ExamDate = examdate;
                      dto.ExamName = examname;
                      dto.HospCode = hospcode;
                      dto.PassScore = passscore;
                      dto.PassStage = passstage;
                      service.UpdateIKASA_OSCEExam(dto, false);

                      service.DeleteIKASA_OSCEExamStages(service.ReadIKASA_OSCEExamStages(c => c.ExamID == examid), false);
                      (service.UnitOfWork as EduActivityContext).FlushChanges(true);

                      foreach (var stage in stages)
                      {
                          stage.ExamID = dto.ExamID;
                          service.CreateIKASA_OSCEExamStage(stage, false);
                      }
                      service.UnitOfWork.SaveChanges();
                  }
                  result = new BoolMessage(true, dto.ExamID);
              }
              catch (Exception ex)
              {
                  result = new BoolMessage(false, ex.Message);
              }
              return result;
          }
      }

      public BoolMessage DeleteiKasaOSCEExam(string examid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              BoolMessage result = new BoolMessage(false, null);
              try
              {
                  IKASA_OSCEExamDto dto = service.ReadIKASA_OSCEExams(c => c.ExamID == examid).FirstOrDefault();
                  if (dto != null)
                  {
                      dto.DeleteFlag = "X";
                      dto.DeleteTime = DateTime.Now;

                      service.UpdateIKASA_OSCEExam(dto);
                  }
                  result = new BoolMessage(true, dto.ExamID);
              }
              catch (Exception ex)
              {
                  result = new BoolMessage(false, ex.Message);
              }
              return result;
          }
      }

      public List<IKASA_OSCEExamDto> GetiKasaOSCEExams(string examname, DateTime? examdate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadIKASA_OSCEExams(c =>
                  (examname == null || c.ExamName.Contains(examname))
                  &&
                  (examdate == null || (examdate != null && c.ExamDate == examdate))
                  &&
                  c.DeleteFlag == null
                  ).ToList();
          }
      }

      public IKASA_OSCEExamDto GetiKasaOSCEExam(string examid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              IKASA_OSCEExamAssembler asm = new IKASA_OSCEExamAssembler();
              IKASA_OSCEExamScoreAssembler scasm = new IKASA_OSCEExamScoreAssembler();
              IKASA_OSCEExamStageAssembler stasm = new IKASA_OSCEExamStageAssembler();
              var exam = service.UnitOfWork.IKASA_OSCEExams.Where(c => c.ExamID == examid).FirstOrDefault();
              IKASA_OSCEExamDto dto = null;
              if (exam != null)
              {
                  dto = asm.Assemble(exam);
                  dto.IKASA_OSCEExamScores = scasm.Assemble(exam.IKASA_OSCEExamScores).ToList();
                  dto.IKASA_OSCEExamStages = stasm.Assemble(exam.IKASA_OSCEExamStages).ToList();
              }

              return dto;
          }
      }

      public List<IKASA_OSCEExamDto> GetEmpiKasaOSCEExamData(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<IKASA_OSCEExamDto> result = new List<IKASA_OSCEExamDto>();

              V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == empcode).FirstOrDefault();
              if (emp == null)
              {
                  return result;
              }
              IKASA_OSCEExamAssembler asm = new IKASA_OSCEExamAssembler();
              IKASA_OSCEExamScoreAssembler scasm = new IKASA_OSCEExamScoreAssembler();
              IKASA_OSCEExamStageAssembler stasm = new IKASA_OSCEExamStageAssembler();
              var datas = (from exam in service.UnitOfWork.IKASA_OSCEExams
                           join hosp in service.UnitOfWork.V_hosps
                           on exam.HospCode equals hosp.Unitcode
                           where exam.IKASA_OSCEExamScores.Count(c => c.EmpCode == empcode) > 0
                           && exam.DeleteFlag == null
                           orderby exam.ExamDate
                           select new { exam, hosp }
                               ).ToList();
              foreach (var data in datas)
              {
                  IKASA_OSCEExamDto dto = asm.Assemble(data.exam);
                  dto.HospName = data.hosp.Unitname_all;
                  dto.QEmpCode = empcode;
                  dto.QEmpName = emp.Empname;

                  dto.IKASA_OSCEExamStages = stasm.Assemble(data.exam.IKASA_OSCEExamStages.OrderBy(c => c.StageNo)).ToList();
                  dto.IKASA_OSCEExamScores = scasm.Assemble(data.exam.IKASA_OSCEExamScores.Where(c => c.IKASA_OSCEExam.IKASA_OSCEExamStages.Count(d => d.StageNo == c.StageNo) > 0)).ToList();

                  GetiKASA_OSCE_ExamRankOrder(ref dto);

                  Dictionary<string, int> scorediv = GetScoreLevelDiv(dto.IKASA_OSCEExamScores.Select(c => c.EmpCode).Distinct().Count(), new List<string>() { "A", "B", "<font color='Red'>C</font>", "<font color='Red'>D</font>" });

                  foreach (var sc in dto.IKASA_OSCEExamScores)
                  {
                      if (sc.EmpCode == "D070070" && sc.StageNo == 3)
                      {

                      }
                      foreach (string key in scorediv.Keys)
                      {
                          if (sc.Rank <= scorediv[key])
                          {
                              sc.ScoreLevel = key;
                              break;
                          }
                      }

                      foreach (string key in scorediv.Keys)
                      {
                          if (sc.TotalRank <= scorediv[key])
                          {
                              sc.TotalScoreLevel = key;
                              break;
                          }
                      }
                  }


                  dto.IKASA_OSCEExamScores = dto.IKASA_OSCEExamScores.Where(c => c.EmpCode == empcode).ToList();
                  if (dto.IKASA_OSCEExamScores.Count > 0)
                  {
                      dto.QExamIdno = dto.IKASA_OSCEExamScores.FirstOrDefault().ExamIDNo;

                      dto.QScoreLevel = dto.IKASA_OSCEExamScores.FirstOrDefault().TotalScoreLevel;
                  }

                  dto.QPassStageCount = 0;

                  foreach (var stage in dto.IKASA_OSCEExamStages)
                  {
                      var sc = dto.IKASA_OSCEExamScores.Where(c => c.StageNo == stage.StageNo).FirstOrDefault();
                      if (sc != null)
                      {
                          sc.StageName = stage.StageName;
                          sc.PassScore = stage.PassScore.Value;
                          sc.IsPass = sc.Score >= sc.PassScore;
                          if (sc.IsPass)
                          {
                              dto.QPassStageCount++;
                          }
                      }
                  }
                  if (dto.IKASA_OSCEExamScores.Count > 0)
                  {
                      dto.QTotalScore = dto.IKASA_OSCEExamScores.Sum(c => c.Score);
                      dto.QScoreRate = dto.IKASA_OSCEExamScores.Average(c => c.Score);
                  }
                  result.Add(dto);
              }

              return result;
          }
      }

      private Dictionary<string, int> GetScoreLevelDiv(int datacount, List<string> levels)
      {
          Dictionary<string, int> result = new Dictionary<string, int>();
          int levelcount = levels.Count;
          double levelrate = 1.0 / Convert.ToDouble(levelcount);
          for (int i = 1; i <= levelcount; i++)
          {
              int maxrank = Convert.ToInt32(Math.Floor(levelrate * Convert.ToDouble(i) * Convert.ToDouble(datacount)));
              if(maxrank ==0)
              {
                  maxrank = 1;
              }
              if (i - 1 > 0)
              {
                  if (maxrank == result[levels[i - 2]])
                  {
                      maxrank++;
                  }
              }

              result.Add(levels[i - 1], maxrank);
              
          }
          return result;
      }

      private void GetiKASA_OSCE_ExamRankOrder(ref IKASA_OSCEExamDto exam)
      {
          foreach (var stage in exam.IKASA_OSCEExamStages)
          {
              int count = 0;
              decimal exscore = 0;
              int buffcount = 0;
              foreach (var sc in exam.IKASA_OSCEExamScores.Where(c => c.StageNo == stage.StageNo).OrderByDescending(c => c.Score))
              {
                  if (sc.Score != exscore)
                  {
                      count += buffcount + 1;
                      buffcount = 0;
                  }
                  else
                  {
                      buffcount++;
                  }

                  sc.Rank = count;
                  exscore = sc.Score;
              }
          }


          var total = exam.IKASA_OSCEExamScores.GroupBy(c => c.EmpCode).Select(c => new { empcode = c.Key, score = c.Sum(b => b.Score) }).OrderByDescending(c => c.score).ToList();
          int tcount = 0;
          decimal texscore = 0;
          int tbuffcount = 0;
          foreach(var t in total)
          {
              if (t.score != texscore)
              {
                  tcount += tbuffcount + 1;
                  tbuffcount = 0;
              }
              else
              {
                  tbuffcount++;
              }

              foreach(var ss in exam.IKASA_OSCEExamScores.Where(c=> c.EmpCode == t.empcode))
              {
                  ss.TotalRank = tcount;
              }

              texscore = t.score;
          }
      }


      public BoolMessage UploadiKasaOSCEScore(string examid, List<IKASA_OSCEExamScoreDto> list)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              BoolMessage result = new BoolMessage(true, null);

              try
              {
                  service.DeleteIKASA_OSCEExamScores(service.ReadIKASA_OSCEExamScores(c => c.ExamID == examid), false);
                  (service.UnitOfWork as EduActivityContext).FlushChanges(true);

                  foreach (var score in list)
                  {
                      score.ExamID = examid;
                      if (score.EmpCode.Length == 7 && score.EmpCode.StartsWith("0"))
                      {
                          score.EmpCode = score.EmpCode.Substring(1);
                      }
                      service.CreateIKASA_OSCEExamScore(score, false);
                  }
                  service.UnitOfWork.SaveChanges();
              }
              catch (Exception ex)
              {
                  result = new BoolMessage(false, ex.Message);
              }

              return result;
          }
      }

      #endregion

      #region 儀錶板
      public DataTable GetiKASAIPDData(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {

              List<IKASA_IPDDataCountDto> data = service.ReadIKASA_IPDDataCounts(c => c.EmpCode == empcode).OrderBy(c => c.SDATE).ToList();
              DataTable result = new DataTable();
              result.Columns.Add("月份");

              List<DateTime> datelist = data.Select(c => c.SDATE).Distinct().OrderByDescending(c => c).ToList();

              foreach (DateTime date in datelist)
              {
                  result.Columns.Add(date.ToString("yyyyMM"));
              }

              DataRow drPrimaryCare = result.NewRow();
              drPrimaryCare["月份"] = "PrimaryCare人數";
              DataRow drIPDNote = result.NewRow();
              drIPDNote["月份"] = "病歷篇數";
              DataRow drWorkHr = result.NewRow();
              drWorkHr["月份"] = "排班時數";

              foreach (var d in data)
              {
                  drPrimaryCare[d.SDATE.ToString("yyyyMM")] = d.PrimaryCareCount == null ? 0 : d.PrimaryCareCount.Value;
                  drIPDNote[d.SDATE.ToString("yyyyMM")] = d.IPDNoteCount == null ? 0 : d.IPDNoteCount.Value;
                  drWorkHr[d.SDATE.ToString("yyyyMM")] = d.WorkHour == null ? 0 : d.WorkHour.Value;
              }
              result.Rows.Add(drPrimaryCare);
              result.Rows.Add(drIPDNote);
              result.Rows.Add(drWorkHr);

              return result;
          }
      }

      public List<iKasaChartData> GetiKasaFormFinishRate(string empcode, string memberid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<iKasaChartData> result = new List<iKasaChartData>();
              string sql = @"select a.INSTANCE_ID
,a.expireDate
,c.Status
from FORM_INSTANCES a
inner join FORM_INSTANCE_TARGETS c on a.INSTANCE_ID = c.INSTANCE_ID
where 
(a.PARENT_INSTANCE_ID is null 
or
(a.PARENT_INSTANCE_ID is not null and
not exists (select 1 from FORM_INSTANCES b where b.PARENT_INSTANCE_ID = a.parent_instance_id and b.TEMPLATE_ID < a.template_id and b.status ='0' )
)
)
and (a.TargetID = @empcode)
";
              /*
              string sql = @"select a.INSTANCE_ID
    ,(select max(e.expireDate) from FORM_INSTANCES e where e.INSTANCE_ID = a.INSTANCE_ID or e.PARENT_INSTANCE_ID = a.INSTANCE_ID ) as expiredate
    , case when not exists (select 1 from FORM_INSTANCES f where f.PARENT_INSTANCE_ID = a.INSTANCE_ID ) then a.Status
    else (select min(g.status) from FORM_INSTANCES g where g.PARENT_INSTANCE_ID = a.INSTANCE_ID)
    end status
    from FORM_INSTANCES a
    where a.inhospid in
    (select b.EduTermID
    from EduTerm b
    inner join EduTeamMemberRundown c on c.EduTermID = b.EduTermID
    where c.MemberID = @memberid
    )
    and a.PARENT_INSTANCE_ID is null 
    and (a.TargetID = @empcode or exists (select 1 from FORM_INSTANCES d where d.PARENT_INSTANCE_ID = a.INSTANCE_ID and d.targetid = @empcode ) )
    ";*/

              var data = (service.UnitOfWork as EduActivityContext).ExecuteQuery<iKasaFormFinishObject>(sql, new SqlParameter("@memberid", GetDBObject(memberid)), new SqlParameter("@empcode", GetDBObject(empcode)));

              int totalcount = 0;
              int finishcount = 0;
              int notfinishcount = 0;
              int expirenotfinishcount = 0;

              foreach (var d in data)
              {
                  totalcount++;
                  if (d.status == "1")
                  {
                      finishcount++;
                  }
                  else
                  {
                      if (d.expiredate >= DateTime.Now)
                      {
                          notfinishcount++;
                      }
                      else
                      {
                          expirenotfinishcount++;
                      }
                  }
              }

              if (totalcount == 0)
              {
              }
              else
              {
                  double r1 = (Convert.ToDouble(finishcount) / Convert.ToDouble(totalcount)) * Convert.ToDouble(100);
                  double r2 = (Convert.ToDouble(notfinishcount) / Convert.ToDouble(totalcount)) * Convert.ToDouble(100);
                  double r3 = Convert.ToDouble(100) - r1 - r2;
                  result.Add(new iKasaChartData() { Name = "已完成", Value = r1 });
                  result.Add(new iKasaChartData() { Name = "未完成", Value = r2 });
                  result.Add(new iKasaChartData() { Name = "逾期未完成", Value = r3 });
              }

              return result;
          }
      }
      #endregion

      #region 會議紀錄

      public List<RecordInstanceDto> GetiKasaMemberRecordInstance(string empcode, List<string> groupids)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<RecordInstanceDto> result = new List<RecordInstanceDto>();

              var recs = from rec in service.UnitOfWork.RecordInstances
                         join dep in service.UnitOfWork.V_departments
                         on
                         new { dept= rec.DeptCode, hosp = rec.HospCode } equals new { dept = dep.Deptcode,hosp = dep.Hospcode }
                         where rec.Status == "V"
                         && (
                         rec.RecordInsReaders.Count(c => c.Reader == empcode) > 0
                         ||
                         rec.RecordInsSignIns.Count(c => c.EmpCode == empcode) > 0
                         ||
                         rec.RecordInsViewers.Count(c => c.Viewer == empcode) > 0
                         ||
                         rec.Recoder == empcode
                         )
                         && groupids.Contains(rec.TemplateID.ToString())
                         select new RecordInstanceDto { InstanceID = rec.InstanceID, Sdate = rec.Sdate, Title = rec.Title, DeptName = dep.Deptname };
              result = recs.ToList();

              foreach (var r in result)
              {
                  r.Title = r.DeptName + " " + r.Title;
                  r.Title += "(" + r.Sdate.Value.ToString("yyyy/MM/dd") + ")";
              }

              return result;
          }
      }

      #endregion

      #region 表單

      public List<FORM_INSTANCEDto> GetiKasaMemberFormList(string memberid, string groupid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              int catid = Convert.ToInt32(groupid);

              var members = from mem in service.UnitOfWork.Members
                            join rundown in service.UnitOfWork.EduTeamMemberRundowns
                            on mem.MemberID equals rundown.MemberID
                            join term in service.UnitOfWork.EduTerms
                            on rundown.EduTermID equals term.EduTermID
                            where
                            mem.MemberID == memberid
                            orderby term.DateFrom
                            select new { mem, rundown, term };
              List<FORM_INSTANCEDto> result = new List<FORM_INSTANCEDto>();
              List<int> existsforms = new List<int>();
              foreach (var mem in members)
              {

                  List<FORM_INSTANCEDto> otherforms = (from ins in service.UnitOfWork.FORM_INSTANCEs
                                                       where ins.INHOSPID == mem.term.EduTermID
                                                       && (ins.TargetID == mem.mem.IsHospMember || ins.EvalTargetID == mem.mem.MemberID)
                                                       && service.UnitOfWork.FormCategoryRefs.Count(c => c.CategoryID == catid && c.TEMPLATE_ID == ins.TEMPLATE_ID) > 0
                                                       && !existsforms.Contains(ins.INSTANCE_ID)
                                                       && ins.Status != '0'
                                                       && ins.PARENT_INSTANCE_ID == null
                                                       select new FORM_INSTANCEDto { INSTANCE_ID = ins.INSTANCE_ID, INSTANCE_NAME = ins.INSTANCE_NAME, IsPass = ins.IsPass, INSTANCE_ALTER_DATETIME = ins.INSTANCE_ALTER_DATETIME, INSTANCE_CREATE_DATETIME = ins.INSTANCE_CREATE_DATETIME, DISPLAY_TO_EVALTARGET = ins.FORM_TEMPLATE.DISPLAY_TO_EVALTARGET, INHOSPID = ins.INHOSPID }).ToList();

                  existsforms.AddRange(otherforms.Select(c => c.INSTANCE_ID));

                  List<int> pidlist = (from ins in service.UnitOfWork.FORM_INSTANCEs
                                       where ins.INHOSPID == mem.term.EduTermID
                                       && (ins.TargetID == mem.mem.IsHospMember || ins.EvalTargetID == mem.mem.MemberID)
                                       && !existsforms.Contains(ins.INSTANCE_ID)
                                       && ins.Status != '0'
                                       && ins.PARENT_INSTANCE_ID != null
                                       && service.UnitOfWork.FORM_INSTANCEs.Count(c => c.PARENT_INSTANCE_ID == ins.PARENT_INSTANCE_ID && c.Status == '0') == 0
                                       && service.UnitOfWork.FormCategoryRefs.Count(c => c.CategoryID == catid && c.TEMPLATE_ID == ins.FORM_TEMPLATE.PARENT_TEMPLATE_ID) > 0
                                       select ins.PARENT_INSTANCE_ID.Value).Distinct().ToList();

                  foreach (int pid in pidlist)
                  {
                      FORM_INSTANCEDto pdto = (from ins in service.UnitOfWork.FORM_INSTANCEs
                                               join pins in service.UnitOfWork.FORM_INSTANCEs
                                               on ins.PARENT_INSTANCE_ID equals pins.INSTANCE_ID
                                               where ins.PARENT_INSTANCE_ID == pid
                                               && !existsforms.Contains(ins.INSTANCE_ID)
                                               orderby ins.INSTANCE_ID descending
                                               select new FORM_INSTANCEDto { INSTANCE_ID = ins.INSTANCE_ID, INSTANCE_NAME = pins.INSTANCE_NAME, IsPass = ins.IsPass, INSTANCE_ALTER_DATETIME = ins.INSTANCE_ALTER_DATETIME, INSTANCE_CREATE_DATETIME = ins.INSTANCE_CREATE_DATETIME, DISPLAY_TO_EVALTARGET = pins.FORM_TEMPLATE.DISPLAY_TO_EVALTARGET, INHOSPID = pins.INHOSPID }).FirstOrDefault();
                      otherforms.Add(pdto);
                      existsforms.Add(pdto.INSTANCE_ID);
                  }

                  result.AddRange(otherforms);
              }


              foreach (var f in result)
              {
                  try
                  {
                      if (f.INHOSPID != null)
                      {
                          //f.INSTANCE_NAME += "(" + GetEduTermFullName(f.INHOSPID) + ")";

                          f.INHOSPID = GetEduTermFullName(f.INHOSPID);
                      }

                  }
                  catch (Exception ex)
                  {

                  }
              }
              return result;
          }
      }

      #endregion

      #region 急診病摘+紅十字

      public List<IKASA_ERCaseDto> GetERCase(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<IKASA_ERCaseDto> result = new List<IKASA_ERCaseDto>();
              var ercases = from c in service.UnitOfWork.IKASA_ERCases
                            join dops in service.UnitOfWork.IKASA_ERCase_Evals
                            on new { id = c.ID, type = "DOPS" } equals new { id = dops.CaseID, type = dops.EvalType }
                            into tempdops
                            from dops in tempdops.DefaultIfEmpty()
                            join epa in service.UnitOfWork.IKASA_ERCase_Evals
                            on new { id = c.ID, type = "EPA" } equals new { id = epa.CaseID, type = epa.EvalType }
                            into tempepa
                            from epa in tempepa.DefaultIfEmpty()
                            where c.EMPCODE == empcode
                            select new { c, dops, epa };
              IKASA_ERCaseAssembler asm = new IKASA_ERCaseAssembler();
              
              foreach(var cs in ercases)
              {
                  IKASA_ERCaseDto dto = asm.Assemble(cs.c);

                  if(cs.dops!= null)
                  {
                      dto.DOPSStatus = cs.dops.Status;
                  }

                  if (cs.epa != null)
                  {
                      dto.EPAStatus = cs.epa.Status;
                  }
                  result.Add(dto);
              }

              return result;
          }
      }

      public List<IKASA_ERCaseDto> GetNeedSignERCase(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var cases = from c in service.UnitOfWork.IKASA_ERCases
                          join e in service.UnitOfWork.IKASA_ERCase_Evals
                          on c.ID equals e.CaseID
                          join emp in service.UnitOfWork.V_KmuEmps
                          on c.EMPCODE equals emp.Empcode
                          where e.TeacherID == empcode
                          && e.Status == "0"
                          select new { c, e.EvalType, emp.Empname, EvalID = e.ID };

              IKASA_ERCaseAssembler asm = new IKASA_ERCaseAssembler();


              List<IKASA_ERCaseDto> result = new List<IKASA_ERCaseDto>();

              foreach(var c in cases)
              {
                  IKASA_ERCaseDto dto = asm.Assemble(c.c);

                  dto.EmpName = c.Empname;
                  dto.EvalType = c.EvalType;
                  dto.EvalID = c.EvalID;

                  result.Add(dto);
              }

              return result;
          }
      }

      public IKASA_ERCaseDto GetERCaseByID(int ID)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              IKASA_ERCaseDto result = service.ReadIKASA_ERCases(c => c.ID == ID).FirstOrDefault();
              return result;
          }
      }

      public IKASA_ERCase_EvalDto GetERCaseEval(int CaseID,string evaltype)
      {

          using (EduActivityContextService service = new EduActivityContextService())
          {
              IKASA_ERCase_EvalDto dto = service.ReadIKASA_ERCase_Evals(c => c.CaseID == CaseID && c.EvalType == evaltype).FirstOrDefault();

              if (dto != null)
              {
                  
                  dto.IKASA_ERCase_EvalDets = service.ReadIKASA_ERCase_EvalDets(c => c.EvalID == dto.ID).ToList();
              }

              return dto;
          }

      }
      
      public GoodVSDatumDto GetGoodVSData(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var data = service.ReadGoodVSData(c => c.員工編號 == empcode).FirstOrDefault();
              return data;
          }
      }

      public List<GoodVSDataDeDto> GetGoodVSDataDes(string empcode,string eduyear)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              var data = service.ReadGoodVSDataDes(c=> c.職編 == empcode && c.期別.Contains(eduyear)).ToList();
              return data;
          }
      }

      public string CreateERCaseEval(int caseid, string evaltype, string teacherid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  var caseeval = GetERCaseEval(caseid, evaltype);
                  if (caseeval == null)
                  {


                      caseeval = new IKASA_ERCase_EvalDto();
                      caseeval.CaseID = caseid;
                      caseeval.CreateDate = DateTime.Now;
                      caseeval.EvalType = evaltype;
                      caseeval.Status = "0";
                      caseeval.TeacherID = teacherid;

                      string intsql = @"INSERT INTO www_EduActivity.dbo.iKASA_ERCase_Eval
(EvalType, CreateDate, TeacherID, Status, SubmitTime, CaseID) 
VALUES (@EvalType, @CreateDate, @TeacherID, @Status, @SubmitTime, @CaseID)


                              ";
                      List<SqlParameter> sqlparms = new List<SqlParameter>();
                      sqlparms.Add(new SqlParameter("EvalType", GetDBObject(caseeval.EvalType)));
                      sqlparms.Add(new SqlParameter("CreateDate", GetDBObject(caseeval.CreateDate)));
                      sqlparms.Add(new SqlParameter("TeacherID", GetDBObject(caseeval.TeacherID)));
                      sqlparms.Add(new SqlParameter("Status", GetDBObject(caseeval.Status)));
                      sqlparms.Add(new SqlParameter("SubmitTime", GetDBObject(caseeval.SubmitTime)));
                      sqlparms.Add(new SqlParameter("CaseID", GetDBObject(caseeval.CaseID)));

                      
                      (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());

                      service.UnitOfWork.SaveChanges();


                      //service.CreateIKASA_ERCase_Eval(caseeval);
                  }
                  return null;
              }
              catch(Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      public string SubmitERCaseEvalDet(int caseid, int evalid, List<IKASA_ERCase_EvalDetDto> ctrlvalues)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  var caseeval = service.UnitOfWork.IKASA_ERCase_Evals.Where(c => c.ID == evalid).FirstOrDefault();
                  caseeval.Status = "V";
                  caseeval.SubmitTime = DateTime.Now;
                  foreach (var data in ctrlvalues)
                  {
                      var det = service.UnitOfWork.IKASA_ERCase_EvalDets.Where(c => c.ControlID == data.ControlID && c.EvalID == data.EvalID).FirstOrDefault();
                      if (det != null)
                      {
                          det.ControlValue = data.ControlValue;
                      }
                      else
                      {
                          service.CreateIKASA_ERCase_EvalDet(data, false);
                      }

                  }

                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
      }

      public string UpdateERCase(IKASA_ERCaseDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  service.UpdateIKASA_ERCase(dto);
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }

              return null;
          }
      }

      public string DeleteERCase(IKASA_ERCaseDto dto)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  service.DeleteIKASA_ERCase(dto);
              }
              catch(Exception ex)
              {
                  return ex.Message;
              }

              return null;
          }
      }

      public string AddERCase(List<IKASA_ERCaseDto> input)
      {


          return null;
      }

      public List<IPDNoteObject> GetIPDNoteData(string empcode, DateTime sdate, DateTime edate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string sql = "select * from openquery(ORA92IPD,'select a.SERIALNO,a.CHARTNO,a.NOTE_DATE,a.CREATE_DATE,a.NOTE_DATA, b.DEPT_CODE, b.DEPT_NAME from ipd.IPDNOTE_TRACKMODIFY a inner join psn.kmudep b on a.emr_DEPT_CODE = b.DEPT_CODE where a.CREATE_USER=''@empcode'' and A.NOTE_DATE between to_date(''@sdate'',''YYYYMMDD'') and to_date(''@edate'',''YYYYMMDD'') and status = ''v''')";
              sql = sql.Replace("@empcode", empcode).Replace("@sdate", sdate.ToString("yyyyMMdd")).Replace("@edate", edate.ToString("yyyyMMdd"));

              List<IPDNoteObject> result = (service.UnitOfWork as EduActivityContext).ExecuteQuery<IPDNoteObject>(sql).ToList();
              return result;
          }
      }

      public List<IPDNoteObject> GetIPDNoteDetailData(string serialno)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string sql = "select * from openquery(ORA92IPD,'select a.SERIALNO,a.NOTE_DATA from ipd.IPDNOTE_TRACKMODIFY a where a.serialno=''@serialno''')";
              sql = sql.Replace("@serialno", serialno);

              List<IPDNoteObject> result = (service.UnitOfWork as EduActivityContext).ExecuteQuery<IPDNoteObject>(sql).ToList();
              return result;
          }
      }

      public List<ERMemsObject> GetERmems(string empcode, DateTime sdate, DateTime edate,string chartno)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              string sql = @"
select * from 
openquery(ORA92IPD,'select distinct to_char(a.mem_enter_date)||''_''||to_char(a.mem_seq) as serialno,a.mem_chart_no as chart_no, 
rpad(substr(a.mem_patient_name,1,1),lengthb(mem_patient_name),''Ｏ'') as patient_name, a.mem_enter_date as enter_date
, a.mem_noon_no as noon_no,EKO.EKO_CODE as dept_code,''急診''|| EKO.EKO_CODE_NAME as dept_name
,A.MEM_DISEASE_CLASS as DISEASE_CLASS, d.icd_code, d.chinese_name
from opd.rtxmem a 
inner join opd.rtxfemu femu on a.mem_chart_no = femu.femu_chart_no
and a.mem_noon_no = femu.femu_noon_no
and femu.femu_DEPT = ''1600'' and a.mem_enter_date = femu.femu_register_date
 left join psn.kmudep b on a.mem_opd_ipd_dept = b.DEPT_CODE
 left join soap.rtxdgn c on c.dgn_dept = ''1600'' and a.mem_chart_no = c.dgn_chart_no and a.mem_noon_no = c.dgn_noon_no and a.mem_register_date = c.dgn_register_date
 left join MA.V_ICDCODEALL d on trim(c.dgn_icd_code_1) = trim(d.icd_code) and d.cmopcs=''CM''
 left join OPD.RTBEKO eko on EKO_KIND = ''DP'' and A.MEM_EMG_DEPT_NO = eko.eko_code
 where  trim(femu.femu_user_id) =''@empcode''  and 
A.mem_enter_date between @sdate and @edate
@chartfilter
') 

order by enter_date ";
              sql = sql.Replace("@empcode", empcode).Replace("@sdate", (sdate.Year - 1911).ToString() + sdate.ToString("MMdd")).Replace("@edate", (edate.Year - 1911).ToString() + edate.ToString("MMdd"));

              if(chartno == null || chartno == "")
              {
                  sql = sql.Replace("@chartfilter", "");
              }
              else
              {
                  sql = sql.Replace("@chartfilter", " and a.mem_chart_no = ''" + chartno + "'' ");
              }

              List<SqlParameter> sqlparms = new List<SqlParameter>();
              sqlparms.Add(new SqlParameter("chartno", GetDBObject(chartno)));

              List<ERMemsObject> result = (service.UnitOfWork as EduActivityContext).ExecuteQuery<ERMemsObject>(sql, sqlparms.ToArray()).ToList();

              List<IKASA_ERCaseDto> er = service.ReadIKASA_ERCases(c=> c.EMPCODE == empcode && c.SOURCE_SYSTEM == "ERMems").ToList();

              result = (from r in result
                       where er.Count(c=> c.SOURCE_ID == r.SERIALNO) == 0
                       select r
                       ).ToList();

              return result;
          }
      }

      public string CreateERCase(List<IKASA_ERCaseDto> list)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  foreach (var l in list)
                  {


                      string intsql = @"INSERT INTO www_EduActivity.dbo.iKASA_ERCase
(EMPCODE, SOURCE_SYSTEM, SOURCE_ID, CHART_NO, ICD_CODE, DISEASE_CLASS, DEPT_CODE, IN_DATE, [PROCEDURE], STATUS, SIGN_TEACHER, SIGN_DATE, SIGN_NOTE, ICD_NAME, DEPT_NAME, DOPSID, EPAID) 
VALUES (@EMPCODE, @SOURCE_SYSTEM, @SOURCE_ID, @CHART_NO, @ICD_CODE, @DISEASE_CLASS, @DEPT_CODE, @IN_DATE, @PROCEDURE, @STATUS, @SIGN_TEACHER, @SIGN_DATE, 
@SIGN_NOTE, @ICD_NAME, @DEPT_NAME, @DOPSID, @EPAID)

                              ";
                      List<SqlParameter> sqlparms = new List<SqlParameter>();
                      sqlparms.Add(new SqlParameter("EMPCODE", GetDBObject(l.EMPCODE)));
                      sqlparms.Add(new SqlParameter("SOURCE_SYSTEM", GetDBObject(l.SOURCE_SYSTEM)));
                      sqlparms.Add(new SqlParameter("SOURCE_ID", GetDBObject(l.SOURCE_ID)));
                      sqlparms.Add(new SqlParameter("CHART_NO", GetDBObject(l.CHART_NO)));
                      sqlparms.Add(new SqlParameter("ICD_CODE", GetDBObject(l.ICD_CODE)));
                      sqlparms.Add(new SqlParameter("DISEASE_CLASS", GetDBObject(l.DISEASE_CLASS)));
                      sqlparms.Add(new SqlParameter("DEPT_CODE", GetDBObject(l.DEPT_CODE)));
                      sqlparms.Add(new SqlParameter("IN_DATE", GetDBObject(l.IN_DATE)));
                      sqlparms.Add(new SqlParameter("PROCEDURE", GetDBObject(l.PROCEDURE)));
                      sqlparms.Add(new SqlParameter("STATUS", GetDBObject(l.STATUS)));
                      sqlparms.Add(new SqlParameter("SIGN_TEACHER", GetDBObject(l.SIGN_TEACHER)));
                      sqlparms.Add(new SqlParameter("SIGN_DATE", GetDBObject(l.SIGN_DATE)));
                      sqlparms.Add(new SqlParameter("SIGN_NOTE", GetDBObject(l.SIGN_NOTE)));
                      sqlparms.Add(new SqlParameter("ICD_NAME", GetDBObject(l.ICD_NAME)));
                      sqlparms.Add(new SqlParameter("DEPT_NAME", GetDBObject(l.DEPT_NAME)));
                      sqlparms.Add(new SqlParameter("DOPSID", GetDBObject(l.DOPSID)));
                      sqlparms.Add(new SqlParameter("EPAID", GetDBObject(l.EPAID)));
                      (service.UnitOfWork as EduActivityContext).ExecuteNonQuery(intsql, sqlparms.ToArray());
      
                      //service.CreateIKASA_ERCase(l, false);
                  }
                  service.UnitOfWork.SaveChanges();
                  return null;
              }
              catch(Exception ex)
              {
                  service.UnitOfWork.ClearChanges();

                  return ex.Message;
              }
          }
      }

      #endregion

      #region 檔案上傳

      public List<IKASA_UploadFileDto> GetiKasaUploadFiles(string category)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<IKASA_UploadFileDto> list = service.ReadIKASA_UploadFiles(c => c.DeleteTime == null && c.FileCategory == category).ToList();
              return list;
          }
      }

      public bool UploadiKasaFile(string creater, string category,string title, string description, string filename, byte[] data, string filepath)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  string id = Guid.NewGuid().ToString();
                  File.WriteAllBytes(filepath + id + "_" + filename, data);
                  IKASA_UploadFileDto dto = new IKASA_UploadFileDto();
                  dto.ID = id;
                  dto.FileCategory = category;
                  dto.CreateDate = DateTime.Now;
                  dto.Creater = creater;
                  dto.Description = description;
                  dto.DisplayTitle = title;
                  dto.FileName = filename;
                  dto.FilePath = filepath;
                  service.CreateIKASA_UploadFile(dto);
                  return true;
              }
              catch(Exception ex)
              {
                  return false;
              }

          }
      }

      #endregion

      #region 活動檔案上傳

      public List<IKASA_ActUploadFileDto> GetiKasaActUploadFiles(string category,string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<IKASA_ActUploadFileDto> list = service.ReadIKASA_ActUploadFiles(c => c.DeleteTime == null && c.FileCategory == category && c.Creater == empcode).OrderByDescending(c => c.ActDate).ToList();
              return list;
          }
      }

      public bool UploadiKasaActFile(string creater, string category, string title, string description, string filename, byte[] data, string filepath, DateTime actdate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  string id = Guid.NewGuid().ToString();
                  File.WriteAllBytes(filepath + id + "_" + filename, data);
                  IKASA_ActUploadFileDto dto = new IKASA_ActUploadFileDto();
                  dto.ID = id;
                  dto.FileCategory = category;
                  dto.CreateDate = DateTime.Now;
                  dto.Creater = creater;
                  dto.Description = description;
                  dto.DisplayTitle = title;
                  dto.FileName = filename;
                  dto.FilePath = filepath;
                  dto.ActDate = actdate;
                  service.CreateIKASA_ActUploadFile(dto);
                  return true;
              }
              catch (Exception ex)
              {
                  return false;
              }

          }
      }


      public bool DeleteiKasaActFile(string fileid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  IKASA_ActUploadFileDto dto = service.ReadIKASA_ActUploadFiles(c => c.ID == fileid).FirstOrDefault();
                  if(dto!= null)
                  {
                      dto.DeleteTime = DateTime.Now;
                      service.UpdateIKASA_ActUploadFile(dto);
                  }
                  return true;
              }
              catch (Exception ex)
              {
                  return false;
              }

          }
      }


      #endregion

      #region 急診成績

      
      public BoolMessage CreateiKasaERExam(string examname, string empcode, DateTime examdate, string hospcode, List<IKASA_ERExamStageDto> stages)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              BoolMessage result = new BoolMessage(false, null);
              try
              {
                  IKASA_ERExamDto dto = new IKASA_ERExamDto();
                  dto.CreateDate = DateTime.Now;
                  dto.Creater = empcode;
                  dto.ExamDate = examdate;
                  dto.ExamID = GetSerialNo(ikasaExamIDOwner);
                  dto.ExamName = examname;
                  dto.HospCode = hospcode;

                  service.CreateIKASA_ERExam(dto, false);
                  foreach (var stage in stages)
                  {
                      stage.ExamID = dto.ExamID;
                      service.CreateIKASA_ERExamStage(stage, false);
                  }

                  service.UnitOfWork.SaveChanges();
                  result = new BoolMessage(true, dto.ExamID);

              }
              catch (Exception ex)
              {
                  result = new BoolMessage(false, ex.Message);
              }
              return result;
          }
      }

      public BoolMessage SaveiKasaERExam(string examid, string examname, DateTime examdate, string hospcode, List<IKASA_ERExamStageDto> stages)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              BoolMessage result = new BoolMessage(false, null);
              try
              {
                  IKASA_ERExamDto dto = service.ReadIKASA_ERExams(c => c.ExamID == examid).FirstOrDefault();
                  if (dto != null)
                  {
                      dto.ExamDate = examdate;
                      dto.ExamName = examname;
                      dto.HospCode = hospcode;

                      service.UpdateIKASA_ERExam(dto, false);

                      service.DeleteIKASA_ERExamStages(service.ReadIKASA_ERExamStages(c => c.ExamID == examid), false);
                      (service.UnitOfWork as EduActivityContext).FlushChanges(true);

                      foreach (var stage in stages)
                      {
                          stage.ExamID = dto.ExamID;
                          service.CreateIKASA_ERExamStage(stage, false);
                      }
                      service.UnitOfWork.SaveChanges();
                  }
                  result = new BoolMessage(true, dto.ExamID);
              }
              catch (Exception ex)
              {
                  result = new BoolMessage(false, ex.Message);
              }
              return result;
          }
      }

      public BoolMessage DeleteiKasaERExam(string examid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              BoolMessage result = new BoolMessage(false, null);
              try
              {
                  IKASA_ERExamDto dto = service.ReadIKASA_ERExams(c => c.ExamID == examid).FirstOrDefault();
                  if (dto != null)
                  {
                      dto.DeleteFlag = "X";
                      dto.DeleteTime = DateTime.Now;

                      service.UpdateIKASA_ERExam(dto);
                  }
                  result = new BoolMessage(true, dto.ExamID);
              }
              catch (Exception ex)
              {
                  result = new BoolMessage(false, ex.Message);
              }
              return result;
          }
      }

      public List<IKASA_ERExamDto> GetiKasaERExams(string examname, DateTime? examdate)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              return service.ReadIKASA_ERExams(c =>
                  (examname == null || c.ExamName.Contains(examname))
                  &&
                  (examdate == null || (examdate != null && c.ExamDate == examdate))
                  &&
                  c.DeleteFlag == null
                  ).ToList();
          }
      }

      public IKASA_ERExamDto GetiKasaERExam(string examid)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              IKASA_ERExamAssembler asm = new IKASA_ERExamAssembler();
              IKASA_ERExamScoreAssembler scasm = new IKASA_ERExamScoreAssembler();
              IKASA_ERExamStageAssembler stasm = new IKASA_ERExamStageAssembler();
              var exam = service.UnitOfWork.IKASA_ERExams.Where(c => c.ExamID == examid).FirstOrDefault();
              IKASA_ERExamDto dto = null;
              if (exam != null)
              {
                  
                  dto = asm.Assemble(exam);
                  dto.IKASA_ERExamScores = scasm.Assemble(exam.IKASA_ERExamScores).ToList();
                  dto.IKASA_ERExamStages = stasm.Assemble(exam.IKASA_ERExamStages).ToList();
              }

              return dto;
          }
      }


      public BoolMessage UploadiKasaERScore(string examid, List<IKASA_ERExamScoreDto> list)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              BoolMessage result = new BoolMessage(true, null);

              try
              {
                  service.DeleteIKASA_ERExamScores(service.ReadIKASA_ERExamScores(c => c.ExamID == examid), false);
                  (service.UnitOfWork as EduActivityContext).FlushChanges(true);

                  foreach (var score in list)
                  {
                      score.ExamID = examid;
                      if (score.EmpCode.Length == 7 && score.EmpCode.StartsWith("0"))
                      {
                          score.EmpCode = score.EmpCode.Substring(1);
                      }
                      service.CreateIKASA_ERExamScore(score, false);
                  }
                  service.UnitOfWork.SaveChanges();
              }
              catch (Exception ex)
              {
                  result = new BoolMessage(false, ex.Message);
              }

              return result;
          }
      }


      public List<IKASA_ERExamDto> GetEmpiKasaERExamData(string empcode)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<IKASA_ERExamDto> result = new List<IKASA_ERExamDto>();

              V_KmuEmpDto emp = service.ReadV_KmuEmps(c => c.Empcode == empcode).FirstOrDefault();
              if (emp == null)
              {
                  return result;
              }
              IKASA_ERExamAssembler asm = new IKASA_ERExamAssembler();
              IKASA_ERExamScoreAssembler scasm = new IKASA_ERExamScoreAssembler();
              IKASA_ERExamStageAssembler stasm = new IKASA_ERExamStageAssembler();
              var datas = (from exam in service.UnitOfWork.IKASA_ERExams
                           join hosp in service.UnitOfWork.V_hosps
                           on exam.HospCode equals hosp.Unitcode
                           where exam.IKASA_ERExamScores.Count(c => c.EmpCode == empcode) > 0
                           && exam.DeleteFlag == null
                           orderby exam.ExamDate
                           select new { exam, hosp }
                               ).ToList();
              foreach (var data in datas)
              {
                  IKASA_ERExamDto dto = asm.Assemble(data.exam);
                  dto.HospName = data.hosp.Unitname_all;
                  dto.QEmpCode = empcode;
                  dto.QEmpName = emp.Empname;

                  dto.IKASA_ERExamStages = stasm.Assemble(data.exam.IKASA_ERExamStages.OrderBy(c => c.StageNo)).ToList();
                  dto.IKASA_ERExamScores = scasm.Assemble(data.exam.IKASA_ERExamScores.Where(c => c.IKASA_ERExam.IKASA_ERExamStages.Count(d => d.StageNo == c.StageNo) > 0)).ToList();


                  Dictionary<string, int> scorediv = GetScoreLevelDiv(dto.IKASA_ERExamScores.Select(c => c.EmpCode).Distinct().Count(), new List<string>() { "A", "B", "<font color='Red'>C</font>", "<font color='Red'>D</font>" });

                  foreach (var sc in dto.IKASA_ERExamScores)
                  {

                      foreach (string key in scorediv.Keys)
                      {
                          if (sc.Rank <= scorediv[key])
                          {
                              sc.ScoreLevel = key;
                              break;
                          }
                      }

                      foreach (string key in scorediv.Keys)
                      {
                          if (sc.TotalRank <= scorediv[key])
                          {
                              sc.TotalScoreLevel = key;
                              break;
                          }
                      }
                  }


                  dto.IKASA_ERExamScores = dto.IKASA_ERExamScores.Where(c => c.EmpCode == empcode).ToList();
                  if (dto.IKASA_ERExamScores.Count > 0)
                  {
                      dto.QExamIdno = dto.IKASA_ERExamScores.FirstOrDefault().ExamIDNo;

                      dto.QScoreLevel = dto.IKASA_ERExamScores.FirstOrDefault().TotalScoreLevel;
                  }

                  dto.QPassStageCount = 0;

                  foreach (var stage in dto.IKASA_ERExamStages)
                  {
                      var sc = dto.IKASA_ERExamScores.Where(c => c.StageNo == stage.StageNo).FirstOrDefault();
                      if (sc != null)
                      {
                          sc.StageName = stage.StageName;
                          sc.PassScore = stage.PassScore.Value;
                          sc.IsPass = sc.Score >= sc.PassScore;
                          if (sc.IsPass)
                          {
                              dto.QPassStageCount++;
                          }
                      }
                  }
                  if (dto.IKASA_ERExamScores.Count > 0)
                  {
                      dto.QTotalScore = dto.IKASA_ERExamScores.Sum(c => c.Score);
                      dto.QScoreRate = dto.IKASA_ERExamScores.Average(c => c.Score);
                  }
                  result.Add(dto);
              }

              return result;
          }
      }



      #endregion

      #region 醫事人員教學點數上傳_NEW

      public List<MedicalTeachPointDto> ReadMedicalTeachPoint(string year, string month, string hospcode, string deptcode)
      {
          try
          {
              DateTime thedate = new DateTime(Convert.ToInt32(year), Convert.ToInt32(month), 1);
              DateTime edate = thedate.AddMonths(1);
              using (EduActivityContextService service = new EduActivityContextService())
              {
                  List<MedicalTeachPointDto> list = service.ReadMedicalTeachPoints(c => c.DeptCode == deptcode && (c.HospCode == hospcode || c.HospCode == null) && c.DataDate >= thedate && c.DataDate < edate).OrderBy(c => c.EmpCode).ToList();

                  foreach (MedicalTeachPointDto dto in list)
                  {
                      V_KmuEmpDto emp = GetVKmuEmpByEmpCode(dto.EmpCode);

                      if (emp != null)
                      {
                          dto.EmpName = emp.Empname;
                      }

                      switch (dto.ReviewStatus)
                      {
                          case "0":
                              dto.StatusName = "未送審";
                              break;
                          case "1":
                              dto.StatusName = "審核中";
                              break;
                          case "V":
                              dto.StatusName = "已審核";
                              break;
                      }

                  }

                  return list;
              }
          }
          catch (Exception ex)
          {
              throw ex;
          }
      }

      public string DeleteMedicalTeachPoint(string id)
      {
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  service.DeleteMedicalTeachPoints(service.ReadMedicalTeachPoints(c => c.ID == id));
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
          return null;
      }

      public string CleanMedicalTeachPoint(string year, string month, string hospcode, string deptcode)
      {
          DateTime thedate = new DateTime(Convert.ToInt32(year), Convert.ToInt32(month), 1);
          DateTime edate = thedate.AddMonths(1);
          using (EduActivityContextService service = new EduActivityContextService())
          {
              try
              {
                  service.DeleteMedicalTeachPoints(service.ReadMedicalTeachPoints(c => c.DeptCode == deptcode && c.HospCode == hospcode && c.DataDate >= thedate && c.DataDate < edate));
              }
              catch (Exception ex)
              {
                  return ex.Message;
              }
          }
          return null;
      }


      public List<string[]> UploadMedicalTeachPoint(DataTable dt, string year, string month, string hospcode, string deptcode, string creater)
      {

          using (EduActivityContextService service = new EduActivityContextService())
          {
              List<string[]> result = new List<string[]>();
              try
              {

                  foreach (DataRow dr in dt.Rows)
                  {
                      MedicalTeachPointDto dto = new MedicalTeachPointDto();
                      dto.ID = GetSerialNo("EduAct_MedicalTPID");
                      dto.BaseRatio = Convert.ToDecimal(dr[""]);

                  }

              }
              catch (Exception ex)
              {
                  result.Clear();
                  result.Add(new string[] { "檔案格式錯誤，請確認第一欄欄位名稱是否與範例相同，檔案中請勿使用excel公式計算數值", "red" });
              }
              return result;
          }
      }

      #endregion

      #endregion

      #endregion IEduActivityAppService Members


      #region 傑出表現

      public List<OutstandindPerformance> GetOutstandPer(int id) //主表
      {
          using (EduActivityContextService Service = new EduActivityContextService())
          {
              List<OutstandindPerformance> result = new List<OutstandindPerformance>();

              var dto = (from dt in Service.UnitOfWork.OutstandindPerformances where dt.ID == id select new OutstandindPerformance {ID = dt.ID }).ToList();
              
              return result;
          }
      }

      public List<OutstandindAttendee> GetOutstandAttend() //子表
      {
          using (EduActivityContextService Service = new EduActivityContextService())
          {
              return null;
          }
      }
      #endregion
  }
}