

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Collections;
using System.Collections.Generic;
using Telerik.OpenAccess;
using AppFramework.Specifications;
using KMU.EduActivity.DomainModel.Entities;
using KMU.EduActivity.ApplicationLayer.Assemblers;
using KMU.EduActivity.ApplicationLayer.DTO;
using KMU.EduActivity.Infrastructure.Data.Repositories;

namespace KMU.EduActivity.ApplicationLayer.Services
{
	public partial class EduActivityContextService : IEduActivityContextService
	{
		private IEduActivityContextUnitOfWork unitOfWork;
		public IEduActivityContextUnitOfWork UnitOfWork
		{
			get
			{
				if (this.unitOfWork == null)
				{
					string connectionStringName = string.IsNullOrEmpty(this.ConnectionStringName) ? "dsEduActivity" : this.ConnectionStringName;
					var connectionString = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName].ConnectionString;
					this.unitOfWork = new EduActivityContext(connectionString);
				}
				return this.unitOfWork;
			}
			set
			{
				this.unitOfWork = value;
			}
		}


		public string ConnectionStringName { get; set; }


		#region IDisposable Members


		public void Dispose()
		{
			//dispose all resources
			IDisposable context = this.unitOfWork as IDisposable;
			if (context != null)
			{
				context.Dispose();
			}
		}
		#endregion IDisposable Members


		#region EduTermCode CRUD Operations


		private IEduTermCodeService edutermcode;
		public virtual IEduTermCodeService EduTermCodeService
		{
			get
			{
				if (this.edutermcode == null)
				{
					IEduTermCodeAssembler assembler = new EduTermCodeAssembler();
					IEduTermCodeRepository repository = new EduTermCodeRepository(this.UnitOfWork);
					this.edutermcode = new EduTermCodeService(assembler, repository);
				}
				return this.edutermcode;
			}
		}


		public IEnumerable<EduTermCodeDto> ReadEduTermCodes()
		{
			return this.EduTermCodeService.GetAll();
		}


		public IEnumerable<EduTermCodeDto> ReadEduTermCodes(Expression<Func<EduTermCode, bool>> filter)
		{
			return this.EduTermCodeService.Find(filter);
		}


		public IEnumerable<EduTermCodeDto> ReadEduTermCodes(ISpecification<EduTermCode> specification)
		{
			return this.EduTermCodeService.Find(specification.GetExpression());
		}


		public IEnumerable<EduTermCodeDto> ReadEduTermCodesPaged(int startIndex, int pageSize)
		{
			return this.EduTermCodeService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduTermCodeDto> ReadEduTermCodesFiltered(string sortExpression, string filterExpression)
		{
			return this.EduTermCodeService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduTermCodeDto> ReadEduTermCodesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduTermCodeService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduTermCodeDto ReadEduTermCodes(string dtoKey)
		{
			return this.EduTermCodeService.GetByKey(dtoKey);
		}


		public int EduTermCodesCount()
		{
			return this.EduTermCodeService.Count();
		}


		public int EduTermCodesCountFiltered(string filterExpression)
		{
			return this.EduTermCodeService.Count(filterExpression);
		}


		public string CreateEduTermCode(EduTermCodeDto edutermcode, bool doSaveChanges = true)
		{
			string key = this.EduTermCodeService.Add(edutermcode);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduTermCode(EduTermCodeDto edutermcode, bool doSaveChanges = true)
		{
			this.EduTermCodeService.Update(edutermcode);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduTermCodes(IEnumerable<EduTermCodeDto> edutermcodes, bool doSaveChanges = true)
		{
			if (edutermcodes == null)
			{
				return;
			}
			foreach (EduTermCodeDto instance in edutermcodes)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTermCodeService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduTermCode(EduTermCodeDto edutermcode, bool doSaveChanges = true)
		{
			this.EduTermCodeService.Delete(edutermcode);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduTermCodes(IEnumerable<EduTermCodeDto> edutermcodes, bool doSaveChanges = true)
		{
			if (edutermcodes == null)
			{
				return;
			}
			foreach (EduTermCodeDto instance in edutermcodes)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTermCodeService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduTermCode CRUD Operations


		#region Member CRUD Operations


		private IMemberService member;
		public virtual IMemberService MemberService
		{
			get
			{
				if (this.member == null)
				{
					IMemberAssembler assembler = new MemberAssembler();
					IMemberRepository repository = new MemberRepository(this.UnitOfWork);
					this.member = new MemberService(assembler, repository);
				}
				return this.member;
			}
		}


		public IEnumerable<MemberDto> ReadMembers()
		{
			return this.MemberService.GetAll();
		}


		public IEnumerable<MemberDto> ReadMembers(Expression<Func<Member, bool>> filter)
		{
			return this.MemberService.Find(filter);
		}


		public IEnumerable<MemberDto> ReadMembers(ISpecification<Member> specification)
		{
			return this.MemberService.Find(specification.GetExpression());
		}


		public IEnumerable<MemberDto> ReadMembersPaged(int startIndex, int pageSize)
		{
			return this.MemberService.Find(startIndex, pageSize);
		}


		public IEnumerable<MemberDto> ReadMembersFiltered(string sortExpression, string filterExpression)
		{
			return this.MemberService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<MemberDto> ReadMembersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.MemberService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public MemberDto ReadMembers(string dtoKey)
		{
			return this.MemberService.GetByKey(dtoKey);
		}


		public int MembersCount()
		{
			return this.MemberService.Count();
		}


		public int MembersCountFiltered(string filterExpression)
		{
			return this.MemberService.Count(filterExpression);
		}


		public string CreateMember(MemberDto member, bool doSaveChanges = true)
		{
			string key = this.MemberService.Add(member);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateMember(MemberDto member, bool doSaveChanges = true)
		{
			this.MemberService.Update(member);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateMembers(IEnumerable<MemberDto> members, bool doSaveChanges = true)
		{
			if (members == null)
			{
				return;
			}
			foreach (MemberDto instance in members)
			{
				if (instance == null)
				{
					continue;
				}


				this.MemberService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteMember(MemberDto member, bool doSaveChanges = true)
		{
			this.MemberService.Delete(member);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteMembers(IEnumerable<MemberDto> members, bool doSaveChanges = true)
		{
			if (members == null)
			{
				return;
			}
			foreach (MemberDto instance in members)
			{
				if (instance == null)
				{
					continue;
				}


				this.MemberService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion Member CRUD Operations


		#region EduTeamMember CRUD Operations


		private IEduTeamMemberService eduteammember;
		public virtual IEduTeamMemberService EduTeamMemberService
		{
			get
			{
				if (this.eduteammember == null)
				{
					IEduTeamMemberAssembler assembler = new EduTeamMemberAssembler();
					IEduTeamMemberRepository repository = new EduTeamMemberRepository(this.UnitOfWork);
					this.eduteammember = new EduTeamMemberService(assembler, repository);
				}
				return this.eduteammember;
			}
		}


		public IEnumerable<EduTeamMemberDto> ReadEduTeamMembers()
		{
			return this.EduTeamMemberService.GetAll();
		}


		public IEnumerable<EduTeamMemberDto> ReadEduTeamMembers(Expression<Func<EduTeamMember, bool>> filter)
		{
			return this.EduTeamMemberService.Find(filter);
		}


		public IEnumerable<EduTeamMemberDto> ReadEduTeamMembers(ISpecification<EduTeamMember> specification)
		{
			return this.EduTeamMemberService.Find(specification.GetExpression());
		}


		public IEnumerable<EduTeamMemberDto> ReadEduTeamMembersPaged(int startIndex, int pageSize)
		{
			return this.EduTeamMemberService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduTeamMemberDto> ReadEduTeamMembersFiltered(string sortExpression, string filterExpression)
		{
			return this.EduTeamMemberService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduTeamMemberDto> ReadEduTeamMembersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduTeamMemberService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduTeamMemberDto ReadEduTeamMembers(string dtoKey)
		{
			return this.EduTeamMemberService.GetByKey(dtoKey);
		}


		public int EduTeamMembersCount()
		{
			return this.EduTeamMemberService.Count();
		}


		public int EduTeamMembersCountFiltered(string filterExpression)
		{
			return this.EduTeamMemberService.Count(filterExpression);
		}


		public string CreateEduTeamMember(EduTeamMemberDto eduteammember, bool doSaveChanges = true)
		{
			string key = this.EduTeamMemberService.Add(eduteammember);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduTeamMember(EduTeamMemberDto eduteammember, bool doSaveChanges = true)
		{
			this.EduTeamMemberService.Update(eduteammember);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduTeamMembers(IEnumerable<EduTeamMemberDto> eduteammembers, bool doSaveChanges = true)
		{
			if (eduteammembers == null)
			{
				return;
			}
			foreach (EduTeamMemberDto instance in eduteammembers)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTeamMemberService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduTeamMember(EduTeamMemberDto eduteammember, bool doSaveChanges = true)
		{
			this.EduTeamMemberService.Delete(eduteammember);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduTeamMembers(IEnumerable<EduTeamMemberDto> eduteammembers, bool doSaveChanges = true)
		{
			if (eduteammembers == null)
			{
				return;
			}
			foreach (EduTeamMemberDto instance in eduteammembers)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTeamMemberService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduTeamMember CRUD Operations


		#region EduTeamRundown CRUD Operations


		private IEduTeamRundownService eduteamrundown;
		public virtual IEduTeamRundownService EduTeamRundownService
		{
			get
			{
				if (this.eduteamrundown == null)
				{
					IEduTeamRundownAssembler assembler = new EduTeamRundownAssembler();
					IEduTeamRundownRepository repository = new EduTeamRundownRepository(this.UnitOfWork);
					this.eduteamrundown = new EduTeamRundownService(assembler, repository);
				}
				return this.eduteamrundown;
			}
		}


		public IEnumerable<EduTeamRundownDto> ReadEduTeamRundowns()
		{
			return this.EduTeamRundownService.GetAll();
		}


		public IEnumerable<EduTeamRundownDto> ReadEduTeamRundowns(Expression<Func<EduTeamRundown, bool>> filter)
		{
			return this.EduTeamRundownService.Find(filter);
		}


		public IEnumerable<EduTeamRundownDto> ReadEduTeamRundowns(ISpecification<EduTeamRundown> specification)
		{
			return this.EduTeamRundownService.Find(specification.GetExpression());
		}


		public IEnumerable<EduTeamRundownDto> ReadEduTeamRundownsPaged(int startIndex, int pageSize)
		{
			return this.EduTeamRundownService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduTeamRundownDto> ReadEduTeamRundownsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduTeamRundownService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduTeamRundownDto> ReadEduTeamRundownsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduTeamRundownService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduTeamRundownDto ReadEduTeamRundowns(string dtoKey)
		{
			return this.EduTeamRundownService.GetByKey(dtoKey);
		}


		public int EduTeamRundownsCount()
		{
			return this.EduTeamRundownService.Count();
		}


		public int EduTeamRundownsCountFiltered(string filterExpression)
		{
			return this.EduTeamRundownService.Count(filterExpression);
		}


		public string CreateEduTeamRundown(EduTeamRundownDto eduteamrundown, bool doSaveChanges = true)
		{
			string key = this.EduTeamRundownService.Add(eduteamrundown);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduTeamRundown(EduTeamRundownDto eduteamrundown, bool doSaveChanges = true)
		{
			this.EduTeamRundownService.Update(eduteamrundown);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduTeamRundowns(IEnumerable<EduTeamRundownDto> eduteamrundowns, bool doSaveChanges = true)
		{
			if (eduteamrundowns == null)
			{
				return;
			}
			foreach (EduTeamRundownDto instance in eduteamrundowns)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTeamRundownService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduTeamRundown(EduTeamRundownDto eduteamrundown, bool doSaveChanges = true)
		{
			this.EduTeamRundownService.Delete(eduteamrundown);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduTeamRundowns(IEnumerable<EduTeamRundownDto> eduteamrundowns, bool doSaveChanges = true)
		{
			if (eduteamrundowns == null)
			{
				return;
			}
			foreach (EduTeamRundownDto instance in eduteamrundowns)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTeamRundownService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduTeamRundown CRUD Operations


		#region EduTeamMemberRundown CRUD Operations


		private IEduTeamMemberRundownService eduteammemberrundown;
		public virtual IEduTeamMemberRundownService EduTeamMemberRundownService
		{
			get
			{
				if (this.eduteammemberrundown == null)
				{
					IEduTeamMemberRundownAssembler assembler = new EduTeamMemberRundownAssembler();
					IEduTeamMemberRundownRepository repository = new EduTeamMemberRundownRepository(this.UnitOfWork);
					this.eduteammemberrundown = new EduTeamMemberRundownService(assembler, repository);
				}
				return this.eduteammemberrundown;
			}
		}


		public IEnumerable<EduTeamMemberRundownDto> ReadEduTeamMemberRundowns()
		{
			return this.EduTeamMemberRundownService.GetAll();
		}


		public IEnumerable<EduTeamMemberRundownDto> ReadEduTeamMemberRundowns(Expression<Func<EduTeamMemberRundown, bool>> filter)
		{
			return this.EduTeamMemberRundownService.Find(filter);
		}


		public IEnumerable<EduTeamMemberRundownDto> ReadEduTeamMemberRundowns(ISpecification<EduTeamMemberRundown> specification)
		{
			return this.EduTeamMemberRundownService.Find(specification.GetExpression());
		}


		public IEnumerable<EduTeamMemberRundownDto> ReadEduTeamMemberRundownsPaged(int startIndex, int pageSize)
		{
			return this.EduTeamMemberRundownService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduTeamMemberRundownDto> ReadEduTeamMemberRundownsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduTeamMemberRundownService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduTeamMemberRundownDto> ReadEduTeamMemberRundownsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduTeamMemberRundownService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduTeamMemberRundownDto ReadEduTeamMemberRundowns(string dtoKey)
		{
			return this.EduTeamMemberRundownService.GetByKey(dtoKey);
		}


		public int EduTeamMemberRundownsCount()
		{
			return this.EduTeamMemberRundownService.Count();
		}


		public int EduTeamMemberRundownsCountFiltered(string filterExpression)
		{
			return this.EduTeamMemberRundownService.Count(filterExpression);
		}


		public string CreateEduTeamMemberRundown(EduTeamMemberRundownDto eduteammemberrundown, bool doSaveChanges = true)
		{
			string key = this.EduTeamMemberRundownService.Add(eduteammemberrundown);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduTeamMemberRundown(EduTeamMemberRundownDto eduteammemberrundown, bool doSaveChanges = true)
		{
			this.EduTeamMemberRundownService.Update(eduteammemberrundown);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduTeamMemberRundowns(IEnumerable<EduTeamMemberRundownDto> eduteammemberrundowns, bool doSaveChanges = true)
		{
			if (eduteammemberrundowns == null)
			{
				return;
			}
			foreach (EduTeamMemberRundownDto instance in eduteammemberrundowns)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTeamMemberRundownService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduTeamMemberRundown(EduTeamMemberRundownDto eduteammemberrundown, bool doSaveChanges = true)
		{
			this.EduTeamMemberRundownService.Delete(eduteammemberrundown);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduTeamMemberRundowns(IEnumerable<EduTeamMemberRundownDto> eduteammemberrundowns, bool doSaveChanges = true)
		{
			if (eduteammemberrundowns == null)
			{
				return;
			}
			foreach (EduTeamMemberRundownDto instance in eduteammemberrundowns)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTeamMemberRundownService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduTeamMemberRundown CRUD Operations


		#region EduTeam CRUD Operations


		private IEduTeamService eduteam;
		public virtual IEduTeamService EduTeamService
		{
			get
			{
				if (this.eduteam == null)
				{
					IEduTeamAssembler assembler = new EduTeamAssembler();
					IEduTeamRepository repository = new EduTeamRepository(this.UnitOfWork);
					this.eduteam = new EduTeamService(assembler, repository);
				}
				return this.eduteam;
			}
		}


		public IEnumerable<EduTeamDto> ReadEduTeams()
		{
			return this.EduTeamService.GetAll();
		}


		public IEnumerable<EduTeamDto> ReadEduTeams(Expression<Func<EduTeam, bool>> filter)
		{
			return this.EduTeamService.Find(filter);
		}


		public IEnumerable<EduTeamDto> ReadEduTeams(ISpecification<EduTeam> specification)
		{
			return this.EduTeamService.Find(specification.GetExpression());
		}


		public IEnumerable<EduTeamDto> ReadEduTeamsPaged(int startIndex, int pageSize)
		{
			return this.EduTeamService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduTeamDto> ReadEduTeamsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduTeamService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduTeamDto> ReadEduTeamsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduTeamService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduTeamDto ReadEduTeams(string dtoKey)
		{
			return this.EduTeamService.GetByKey(dtoKey);
		}


		public int EduTeamsCount()
		{
			return this.EduTeamService.Count();
		}


		public int EduTeamsCountFiltered(string filterExpression)
		{
			return this.EduTeamService.Count(filterExpression);
		}


		public string CreateEduTeam(EduTeamDto eduteam, bool doSaveChanges = true)
		{
			string key = this.EduTeamService.Add(eduteam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduTeam(EduTeamDto eduteam, bool doSaveChanges = true)
		{
			this.EduTeamService.Update(eduteam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduTeams(IEnumerable<EduTeamDto> eduteams, bool doSaveChanges = true)
		{
			if (eduteams == null)
			{
				return;
			}
			foreach (EduTeamDto instance in eduteams)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTeamService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduTeam(EduTeamDto eduteam, bool doSaveChanges = true)
		{
			this.EduTeamService.Delete(eduteam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduTeams(IEnumerable<EduTeamDto> eduteams, bool doSaveChanges = true)
		{
			if (eduteams == null)
			{
				return;
			}
			foreach (EduTeamDto instance in eduteams)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTeamService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduTeam CRUD Operations


		#region EduActTopic CRUD Operations


		private IEduActTopicService eduacttopic;
		public virtual IEduActTopicService EduActTopicService
		{
			get
			{
				if (this.eduacttopic == null)
				{
					IEduActTopicAssembler assembler = new EduActTopicAssembler();
					IEduActTopicRepository repository = new EduActTopicRepository(this.UnitOfWork);
					this.eduacttopic = new EduActTopicService(assembler, repository);
				}
				return this.eduacttopic;
			}
		}


		public IEnumerable<EduActTopicDto> ReadEduActTopics()
		{
			return this.EduActTopicService.GetAll();
		}


		public IEnumerable<EduActTopicDto> ReadEduActTopics(Expression<Func<EduActTopic, bool>> filter)
		{
			return this.EduActTopicService.Find(filter);
		}


		public IEnumerable<EduActTopicDto> ReadEduActTopics(ISpecification<EduActTopic> specification)
		{
			return this.EduActTopicService.Find(specification.GetExpression());
		}


		public IEnumerable<EduActTopicDto> ReadEduActTopicsPaged(int startIndex, int pageSize)
		{
			return this.EduActTopicService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduActTopicDto> ReadEduActTopicsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduActTopicService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduActTopicDto> ReadEduActTopicsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduActTopicService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduActTopicDto ReadEduActTopics(string dtoKey)
		{
			return this.EduActTopicService.GetByKey(dtoKey);
		}


		public int EduActTopicsCount()
		{
			return this.EduActTopicService.Count();
		}


		public int EduActTopicsCountFiltered(string filterExpression)
		{
			return this.EduActTopicService.Count(filterExpression);
		}


		public string CreateEduActTopic(EduActTopicDto eduacttopic, bool doSaveChanges = true)
		{
			string key = this.EduActTopicService.Add(eduacttopic);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduActTopic(EduActTopicDto eduacttopic, bool doSaveChanges = true)
		{
			this.EduActTopicService.Update(eduacttopic);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduActTopics(IEnumerable<EduActTopicDto> eduacttopics, bool doSaveChanges = true)
		{
			if (eduacttopics == null)
			{
				return;
			}
			foreach (EduActTopicDto instance in eduacttopics)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduActTopicService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduActTopic(EduActTopicDto eduacttopic, bool doSaveChanges = true)
		{
			this.EduActTopicService.Delete(eduacttopic);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduActTopics(IEnumerable<EduActTopicDto> eduacttopics, bool doSaveChanges = true)
		{
			if (eduacttopics == null)
			{
				return;
			}
			foreach (EduActTopicDto instance in eduacttopics)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduActTopicService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduActTopic CRUD Operations


		#region EduStopActSchedule CRUD Operations


		private IEduStopActScheduleService edustopactschedule;
		public virtual IEduStopActScheduleService EduStopActScheduleService
		{
			get
			{
				if (this.edustopactschedule == null)
				{
					IEduStopActScheduleAssembler assembler = new EduStopActScheduleAssembler();
					IEduStopActScheduleRepository repository = new EduStopActScheduleRepository(this.UnitOfWork);
					this.edustopactschedule = new EduStopActScheduleService(assembler, repository);
				}
				return this.edustopactschedule;
			}
		}


		public IEnumerable<EduStopActScheduleDto> ReadEduStopActSchedules()
		{
			return this.EduStopActScheduleService.GetAll();
		}


		public IEnumerable<EduStopActScheduleDto> ReadEduStopActSchedules(Expression<Func<EduStopActSchedule, bool>> filter)
		{
			return this.EduStopActScheduleService.Find(filter);
		}


		public IEnumerable<EduStopActScheduleDto> ReadEduStopActSchedules(ISpecification<EduStopActSchedule> specification)
		{
			return this.EduStopActScheduleService.Find(specification.GetExpression());
		}


		public IEnumerable<EduStopActScheduleDto> ReadEduStopActSchedulesPaged(int startIndex, int pageSize)
		{
			return this.EduStopActScheduleService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduStopActScheduleDto> ReadEduStopActSchedulesFiltered(string sortExpression, string filterExpression)
		{
			return this.EduStopActScheduleService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduStopActScheduleDto> ReadEduStopActSchedulesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduStopActScheduleService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduStopActScheduleDto ReadEduStopActSchedules(string dtoKey)
		{
			return this.EduStopActScheduleService.GetByKey(dtoKey);
		}


		public int EduStopActSchedulesCount()
		{
			return this.EduStopActScheduleService.Count();
		}


		public int EduStopActSchedulesCountFiltered(string filterExpression)
		{
			return this.EduStopActScheduleService.Count(filterExpression);
		}


		public string CreateEduStopActSchedule(EduStopActScheduleDto edustopactschedule, bool doSaveChanges = true)
		{
			string key = this.EduStopActScheduleService.Add(edustopactschedule);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduStopActSchedule(EduStopActScheduleDto edustopactschedule, bool doSaveChanges = true)
		{
			this.EduStopActScheduleService.Update(edustopactschedule);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduStopActSchedules(IEnumerable<EduStopActScheduleDto> edustopactschedules, bool doSaveChanges = true)
		{
			if (edustopactschedules == null)
			{
				return;
			}
			foreach (EduStopActScheduleDto instance in edustopactschedules)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduStopActScheduleService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduStopActSchedule(EduStopActScheduleDto edustopactschedule, bool doSaveChanges = true)
		{
			this.EduStopActScheduleService.Delete(edustopactschedule);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduStopActSchedules(IEnumerable<EduStopActScheduleDto> edustopactschedules, bool doSaveChanges = true)
		{
			if (edustopactschedules == null)
			{
				return;
			}
			foreach (EduStopActScheduleDto instance in edustopactschedules)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduStopActScheduleService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduStopActSchedule CRUD Operations


		#region Form_ToDo_List CRUD Operations


		private IForm_ToDo_ListService form_todo_list;
		public virtual IForm_ToDo_ListService Form_ToDo_ListService
		{
			get
			{
				if (this.form_todo_list == null)
				{
					IForm_ToDo_ListAssembler assembler = new Form_ToDo_ListAssembler();
					IForm_ToDo_ListRepository repository = new Form_ToDo_ListRepository(this.UnitOfWork);
					this.form_todo_list = new Form_ToDo_ListService(assembler, repository);
				}
				return this.form_todo_list;
			}
		}


		public IEnumerable<Form_ToDo_ListDto> ReadForm_ToDo_Lists()
		{
			return this.Form_ToDo_ListService.GetAll();
		}


		public IEnumerable<Form_ToDo_ListDto> ReadForm_ToDo_Lists(Expression<Func<Form_ToDo_List, bool>> filter)
		{
			return this.Form_ToDo_ListService.Find(filter);
		}


		public IEnumerable<Form_ToDo_ListDto> ReadForm_ToDo_Lists(ISpecification<Form_ToDo_List> specification)
		{
			return this.Form_ToDo_ListService.Find(specification.GetExpression());
		}


		public IEnumerable<Form_ToDo_ListDto> ReadForm_ToDo_ListsPaged(int startIndex, int pageSize)
		{
			return this.Form_ToDo_ListService.Find(startIndex, pageSize);
		}


		public IEnumerable<Form_ToDo_ListDto> ReadForm_ToDo_ListsFiltered(string sortExpression, string filterExpression)
		{
			return this.Form_ToDo_ListService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<Form_ToDo_ListDto> ReadForm_ToDo_ListsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.Form_ToDo_ListService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public Form_ToDo_ListDto ReadForm_ToDo_Lists(string dtoKey)
		{
			return this.Form_ToDo_ListService.GetByKey(dtoKey);
		}


		public int Form_ToDo_ListsCount()
		{
			return this.Form_ToDo_ListService.Count();
		}


		public int Form_ToDo_ListsCountFiltered(string filterExpression)
		{
			return this.Form_ToDo_ListService.Count(filterExpression);
		}


		public string CreateForm_ToDo_List(Form_ToDo_ListDto form_todo_list, bool doSaveChanges = true)
		{
			string key = this.Form_ToDo_ListService.Add(form_todo_list);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateForm_ToDo_List(Form_ToDo_ListDto form_todo_list, bool doSaveChanges = true)
		{
			this.Form_ToDo_ListService.Update(form_todo_list);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateForm_ToDo_Lists(IEnumerable<Form_ToDo_ListDto> form_todo_lists, bool doSaveChanges = true)
		{
			if (form_todo_lists == null)
			{
				return;
			}
			foreach (Form_ToDo_ListDto instance in form_todo_lists)
			{
				if (instance == null)
				{
					continue;
				}


				this.Form_ToDo_ListService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteForm_ToDo_List(Form_ToDo_ListDto form_todo_list, bool doSaveChanges = true)
		{
			this.Form_ToDo_ListService.Delete(form_todo_list);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteForm_ToDo_Lists(IEnumerable<Form_ToDo_ListDto> form_todo_lists, bool doSaveChanges = true)
		{
			if (form_todo_lists == null)
			{
				return;
			}
			foreach (Form_ToDo_ListDto instance in form_todo_lists)
			{
				if (instance == null)
				{
					continue;
				}


				this.Form_ToDo_ListService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion Form_ToDo_List CRUD Operations


		#region EduTermFormInstance CRUD Operations


		private IEduTermFormInstanceService edutermforminstance;
		public virtual IEduTermFormInstanceService EduTermFormInstanceService
		{
			get
			{
				if (this.edutermforminstance == null)
				{
					IEduTermFormInstanceAssembler assembler = new EduTermFormInstanceAssembler();
					IEduTermFormInstanceRepository repository = new EduTermFormInstanceRepository(this.UnitOfWork);
					this.edutermforminstance = new EduTermFormInstanceService(assembler, repository);
				}
				return this.edutermforminstance;
			}
		}


		public IEnumerable<EduTermFormInstanceDto> ReadEduTermFormInstances()
		{
			return this.EduTermFormInstanceService.GetAll();
		}


		public IEnumerable<EduTermFormInstanceDto> ReadEduTermFormInstances(Expression<Func<EduTermFormInstance, bool>> filter)
		{
			return this.EduTermFormInstanceService.Find(filter);
		}


		public IEnumerable<EduTermFormInstanceDto> ReadEduTermFormInstances(ISpecification<EduTermFormInstance> specification)
		{
			return this.EduTermFormInstanceService.Find(specification.GetExpression());
		}


		public IEnumerable<EduTermFormInstanceDto> ReadEduTermFormInstancesPaged(int startIndex, int pageSize)
		{
			return this.EduTermFormInstanceService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduTermFormInstanceDto> ReadEduTermFormInstancesFiltered(string sortExpression, string filterExpression)
		{
			return this.EduTermFormInstanceService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduTermFormInstanceDto> ReadEduTermFormInstancesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduTermFormInstanceService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduTermFormInstanceDto ReadEduTermFormInstances(string dtoKey)
		{
			return this.EduTermFormInstanceService.GetByKey(dtoKey);
		}


		public int EduTermFormInstancesCount()
		{
			return this.EduTermFormInstanceService.Count();
		}


		public int EduTermFormInstancesCountFiltered(string filterExpression)
		{
			return this.EduTermFormInstanceService.Count(filterExpression);
		}


		public string CreateEduTermFormInstance(EduTermFormInstanceDto edutermforminstance, bool doSaveChanges = true)
		{
			string key = this.EduTermFormInstanceService.Add(edutermforminstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduTermFormInstance(EduTermFormInstanceDto edutermforminstance, bool doSaveChanges = true)
		{
			this.EduTermFormInstanceService.Update(edutermforminstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduTermFormInstances(IEnumerable<EduTermFormInstanceDto> edutermforminstances, bool doSaveChanges = true)
		{
			if (edutermforminstances == null)
			{
				return;
			}
			foreach (EduTermFormInstanceDto instance in edutermforminstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTermFormInstanceService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduTermFormInstance(EduTermFormInstanceDto edutermforminstance, bool doSaveChanges = true)
		{
			this.EduTermFormInstanceService.Delete(edutermforminstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduTermFormInstances(IEnumerable<EduTermFormInstanceDto> edutermforminstances, bool doSaveChanges = true)
		{
			if (edutermforminstances == null)
			{
				return;
			}
			foreach (EduTermFormInstanceDto instance in edutermforminstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTermFormInstanceService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduTermFormInstance CRUD Operations


		#region EduFormTemplateTarget CRUD Operations


		private IEduFormTemplateTargetService eduformtemplatetarget;
		public virtual IEduFormTemplateTargetService EduFormTemplateTargetService
		{
			get
			{
				if (this.eduformtemplatetarget == null)
				{
					IEduFormTemplateTargetAssembler assembler = new EduFormTemplateTargetAssembler();
					IEduFormTemplateTargetRepository repository = new EduFormTemplateTargetRepository(this.UnitOfWork);
					this.eduformtemplatetarget = new EduFormTemplateTargetService(assembler, repository);
				}
				return this.eduformtemplatetarget;
			}
		}


		public IEnumerable<EduFormTemplateTargetDto> ReadEduFormTemplateTargets()
		{
			return this.EduFormTemplateTargetService.GetAll();
		}


		public IEnumerable<EduFormTemplateTargetDto> ReadEduFormTemplateTargets(Expression<Func<EduFormTemplateTarget, bool>> filter)
		{
			return this.EduFormTemplateTargetService.Find(filter);
		}


		public IEnumerable<EduFormTemplateTargetDto> ReadEduFormTemplateTargets(ISpecification<EduFormTemplateTarget> specification)
		{
			return this.EduFormTemplateTargetService.Find(specification.GetExpression());
		}


		public IEnumerable<EduFormTemplateTargetDto> ReadEduFormTemplateTargetsPaged(int startIndex, int pageSize)
		{
			return this.EduFormTemplateTargetService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduFormTemplateTargetDto> ReadEduFormTemplateTargetsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduFormTemplateTargetService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduFormTemplateTargetDto> ReadEduFormTemplateTargetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduFormTemplateTargetService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduFormTemplateTargetDto ReadEduFormTemplateTargets(string dtoKey)
		{
			return this.EduFormTemplateTargetService.GetByKey(dtoKey);
		}


		public int EduFormTemplateTargetsCount()
		{
			return this.EduFormTemplateTargetService.Count();
		}


		public int EduFormTemplateTargetsCountFiltered(string filterExpression)
		{
			return this.EduFormTemplateTargetService.Count(filterExpression);
		}


		public string CreateEduFormTemplateTarget(EduFormTemplateTargetDto eduformtemplatetarget, bool doSaveChanges = true)
		{
			string key = this.EduFormTemplateTargetService.Add(eduformtemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduFormTemplateTarget(EduFormTemplateTargetDto eduformtemplatetarget, bool doSaveChanges = true)
		{
			this.EduFormTemplateTargetService.Update(eduformtemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduFormTemplateTargets(IEnumerable<EduFormTemplateTargetDto> eduformtemplatetargets, bool doSaveChanges = true)
		{
			if (eduformtemplatetargets == null)
			{
				return;
			}
			foreach (EduFormTemplateTargetDto instance in eduformtemplatetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduFormTemplateTargetService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduFormTemplateTarget(EduFormTemplateTargetDto eduformtemplatetarget, bool doSaveChanges = true)
		{
			this.EduFormTemplateTargetService.Delete(eduformtemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduFormTemplateTargets(IEnumerable<EduFormTemplateTargetDto> eduformtemplatetargets, bool doSaveChanges = true)
		{
			if (eduformtemplatetargets == null)
			{
				return;
			}
			foreach (EduFormTemplateTargetDto instance in eduformtemplatetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduFormTemplateTargetService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduFormTemplateTarget CRUD Operations


		#region EduFormTemplateList CRUD Operations


		private IEduFormTemplateListService eduformtemplatelist;
		public virtual IEduFormTemplateListService EduFormTemplateListService
		{
			get
			{
				if (this.eduformtemplatelist == null)
				{
					IEduFormTemplateListAssembler assembler = new EduFormTemplateListAssembler();
					IEduFormTemplateListRepository repository = new EduFormTemplateListRepository(this.UnitOfWork);
					this.eduformtemplatelist = new EduFormTemplateListService(assembler, repository);
				}
				return this.eduformtemplatelist;
			}
		}


		public IEnumerable<EduFormTemplateListDto> ReadEduFormTemplateLists()
		{
			return this.EduFormTemplateListService.GetAll();
		}


		public IEnumerable<EduFormTemplateListDto> ReadEduFormTemplateLists(Expression<Func<EduFormTemplateList, bool>> filter)
		{
			return this.EduFormTemplateListService.Find(filter);
		}


		public IEnumerable<EduFormTemplateListDto> ReadEduFormTemplateLists(ISpecification<EduFormTemplateList> specification)
		{
			return this.EduFormTemplateListService.Find(specification.GetExpression());
		}


		public IEnumerable<EduFormTemplateListDto> ReadEduFormTemplateListsPaged(int startIndex, int pageSize)
		{
			return this.EduFormTemplateListService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduFormTemplateListDto> ReadEduFormTemplateListsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduFormTemplateListService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduFormTemplateListDto> ReadEduFormTemplateListsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduFormTemplateListService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduFormTemplateListDto ReadEduFormTemplateLists(string dtoKey)
		{
			return this.EduFormTemplateListService.GetByKey(dtoKey);
		}


		public int EduFormTemplateListsCount()
		{
			return this.EduFormTemplateListService.Count();
		}


		public int EduFormTemplateListsCountFiltered(string filterExpression)
		{
			return this.EduFormTemplateListService.Count(filterExpression);
		}


		public string CreateEduFormTemplateList(EduFormTemplateListDto eduformtemplatelist, bool doSaveChanges = true)
		{
			string key = this.EduFormTemplateListService.Add(eduformtemplatelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduFormTemplateList(EduFormTemplateListDto eduformtemplatelist, bool doSaveChanges = true)
		{
			this.EduFormTemplateListService.Update(eduformtemplatelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduFormTemplateLists(IEnumerable<EduFormTemplateListDto> eduformtemplatelists, bool doSaveChanges = true)
		{
			if (eduformtemplatelists == null)
			{
				return;
			}
			foreach (EduFormTemplateListDto instance in eduformtemplatelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduFormTemplateListService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduFormTemplateList(EduFormTemplateListDto eduformtemplatelist, bool doSaveChanges = true)
		{
			this.EduFormTemplateListService.Delete(eduformtemplatelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduFormTemplateLists(IEnumerable<EduFormTemplateListDto> eduformtemplatelists, bool doSaveChanges = true)
		{
			if (eduformtemplatelists == null)
			{
				return;
			}
			foreach (EduFormTemplateListDto instance in eduformtemplatelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduFormTemplateListService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduFormTemplateList CRUD Operations


		#region EduStop CRUD Operations


		private IEduStopService edustop;
		public virtual IEduStopService EduStopService
		{
			get
			{
				if (this.edustop == null)
				{
					IEduStopAssembler assembler = new EduStopAssembler();
					IEduStopRepository repository = new EduStopRepository(this.UnitOfWork);
					this.edustop = new EduStopService(assembler, repository);
				}
				return this.edustop;
			}
		}


		public IEnumerable<EduStopDto> ReadEduStops()
		{
			return this.EduStopService.GetAll();
		}


		public IEnumerable<EduStopDto> ReadEduStops(Expression<Func<EduStop, bool>> filter)
		{
			return this.EduStopService.Find(filter);
		}


		public IEnumerable<EduStopDto> ReadEduStops(ISpecification<EduStop> specification)
		{
			return this.EduStopService.Find(specification.GetExpression());
		}


		public IEnumerable<EduStopDto> ReadEduStopsPaged(int startIndex, int pageSize)
		{
			return this.EduStopService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduStopDto> ReadEduStopsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduStopService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduStopDto> ReadEduStopsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduStopService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduStopDto ReadEduStops(string dtoKey)
		{
			return this.EduStopService.GetByKey(dtoKey);
		}


		public int EduStopsCount()
		{
			return this.EduStopService.Count();
		}


		public int EduStopsCountFiltered(string filterExpression)
		{
			return this.EduStopService.Count(filterExpression);
		}


		public string CreateEduStop(EduStopDto edustop, bool doSaveChanges = true)
		{
			string key = this.EduStopService.Add(edustop);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduStop(EduStopDto edustop, bool doSaveChanges = true)
		{
			this.EduStopService.Update(edustop);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduStops(IEnumerable<EduStopDto> edustops, bool doSaveChanges = true)
		{
			if (edustops == null)
			{
				return;
			}
			foreach (EduStopDto instance in edustops)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduStopService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduStop(EduStopDto edustop, bool doSaveChanges = true)
		{
			this.EduStopService.Delete(edustop);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduStops(IEnumerable<EduStopDto> edustops, bool doSaveChanges = true)
		{
			if (edustops == null)
			{
				return;
			}
			foreach (EduStopDto instance in edustops)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduStopService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduStop CRUD Operations


		#region EduTerm CRUD Operations


		private IEduTermService eduterm;
		public virtual IEduTermService EduTermService
		{
			get
			{
				if (this.eduterm == null)
				{
					IEduTermAssembler assembler = new EduTermAssembler();
					IEduTermRepository repository = new EduTermRepository(this.UnitOfWork);
					this.eduterm = new EduTermService(assembler, repository);
				}
				return this.eduterm;
			}
		}


		public IEnumerable<EduTermDto> ReadEduTerms()
		{
			return this.EduTermService.GetAll();
		}


		public IEnumerable<EduTermDto> ReadEduTerms(Expression<Func<EduTerm, bool>> filter)
		{
			return this.EduTermService.Find(filter);
		}


		public IEnumerable<EduTermDto> ReadEduTerms(ISpecification<EduTerm> specification)
		{
			return this.EduTermService.Find(specification.GetExpression());
		}


		public IEnumerable<EduTermDto> ReadEduTermsPaged(int startIndex, int pageSize)
		{
			return this.EduTermService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduTermDto> ReadEduTermsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduTermService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduTermDto> ReadEduTermsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduTermService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduTermDto ReadEduTerms(string dtoKey)
		{
			return this.EduTermService.GetByKey(dtoKey);
		}


		public int EduTermsCount()
		{
			return this.EduTermService.Count();
		}


		public int EduTermsCountFiltered(string filterExpression)
		{
			return this.EduTermService.Count(filterExpression);
		}


		public string CreateEduTerm(EduTermDto eduterm, bool doSaveChanges = true)
		{
			string key = this.EduTermService.Add(eduterm);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduTerm(EduTermDto eduterm, bool doSaveChanges = true)
		{
			this.EduTermService.Update(eduterm);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduTerms(IEnumerable<EduTermDto> eduterms, bool doSaveChanges = true)
		{
			if (eduterms == null)
			{
				return;
			}
			foreach (EduTermDto instance in eduterms)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTermService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduTerm(EduTermDto eduterm, bool doSaveChanges = true)
		{
			this.EduTermService.Delete(eduterm);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduTerms(IEnumerable<EduTermDto> eduterms, bool doSaveChanges = true)
		{
			if (eduterms == null)
			{
				return;
			}
			foreach (EduTermDto instance in eduterms)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTermService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduTerm CRUD Operations


		#region V_ExpireFormInstance CRUD Operations


		private IV_ExpireFormInstanceService v_expireforminstance;
		public virtual IV_ExpireFormInstanceService V_ExpireFormInstanceService
		{
			get
			{
				if (this.v_expireforminstance == null)
				{
					IV_ExpireFormInstanceAssembler assembler = new V_ExpireFormInstanceAssembler();
					IV_ExpireFormInstanceRepository repository = new V_ExpireFormInstanceRepository(this.UnitOfWork);
					this.v_expireforminstance = new V_ExpireFormInstanceService(assembler, repository);
				}
				return this.v_expireforminstance;
			}
		}


		public IEnumerable<V_ExpireFormInstanceDto> ReadV_ExpireFormInstances()
		{
			return this.V_ExpireFormInstanceService.GetAll();
		}


		public IEnumerable<V_ExpireFormInstanceDto> ReadV_ExpireFormInstances(Expression<Func<V_ExpireFormInstance, bool>> filter)
		{
			return this.V_ExpireFormInstanceService.Find(filter);
		}


		public IEnumerable<V_ExpireFormInstanceDto> ReadV_ExpireFormInstances(ISpecification<V_ExpireFormInstance> specification)
		{
			return this.V_ExpireFormInstanceService.Find(specification.GetExpression());
		}


		public IEnumerable<V_ExpireFormInstanceDto> ReadV_ExpireFormInstancesPaged(int startIndex, int pageSize)
		{
			return this.V_ExpireFormInstanceService.Find(startIndex, pageSize);
		}


		public IEnumerable<V_ExpireFormInstanceDto> ReadV_ExpireFormInstancesFiltered(string sortExpression, string filterExpression)
		{
			return this.V_ExpireFormInstanceService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<V_ExpireFormInstanceDto> ReadV_ExpireFormInstancesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.V_ExpireFormInstanceService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public V_ExpireFormInstanceDto ReadV_ExpireFormInstances(string dtoKey)
		{
			return this.V_ExpireFormInstanceService.GetByKey(dtoKey);
		}


		public int V_ExpireFormInstancesCount()
		{
			return this.V_ExpireFormInstanceService.Count();
		}


		public int V_ExpireFormInstancesCountFiltered(string filterExpression)
		{
			return this.V_ExpireFormInstanceService.Count(filterExpression);
		}


		public string CreateV_ExpireFormInstance(V_ExpireFormInstanceDto v_expireforminstance, bool doSaveChanges = true)
		{
			string key = this.V_ExpireFormInstanceService.Add(v_expireforminstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateV_ExpireFormInstance(V_ExpireFormInstanceDto v_expireforminstance, bool doSaveChanges = true)
		{
			this.V_ExpireFormInstanceService.Update(v_expireforminstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateV_ExpireFormInstances(IEnumerable<V_ExpireFormInstanceDto> v_expireforminstances, bool doSaveChanges = true)
		{
			if (v_expireforminstances == null)
			{
				return;
			}
			foreach (V_ExpireFormInstanceDto instance in v_expireforminstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_ExpireFormInstanceService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteV_ExpireFormInstance(V_ExpireFormInstanceDto v_expireforminstance, bool doSaveChanges = true)
		{
			this.V_ExpireFormInstanceService.Delete(v_expireforminstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteV_ExpireFormInstances(IEnumerable<V_ExpireFormInstanceDto> v_expireforminstances, bool doSaveChanges = true)
		{
			if (v_expireforminstances == null)
			{
				return;
			}
			foreach (V_ExpireFormInstanceDto instance in v_expireforminstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_ExpireFormInstanceService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion V_ExpireFormInstance CRUD Operations


		#region EduTeacherType CRUD Operations


		private IEduTeacherTypeService eduteachertype;
		public virtual IEduTeacherTypeService EduTeacherTypeService
		{
			get
			{
				if (this.eduteachertype == null)
				{
					IEduTeacherTypeAssembler assembler = new EduTeacherTypeAssembler();
					IEduTeacherTypeRepository repository = new EduTeacherTypeRepository(this.UnitOfWork);
					this.eduteachertype = new EduTeacherTypeService(assembler, repository);
				}
				return this.eduteachertype;
			}
		}


		public IEnumerable<EduTeacherTypeDto> ReadEduTeacherTypes()
		{
			return this.EduTeacherTypeService.GetAll();
		}


		public IEnumerable<EduTeacherTypeDto> ReadEduTeacherTypes(Expression<Func<EduTeacherType, bool>> filter)
		{
			return this.EduTeacherTypeService.Find(filter);
		}


		public IEnumerable<EduTeacherTypeDto> ReadEduTeacherTypes(ISpecification<EduTeacherType> specification)
		{
			return this.EduTeacherTypeService.Find(specification.GetExpression());
		}


		public IEnumerable<EduTeacherTypeDto> ReadEduTeacherTypesPaged(int startIndex, int pageSize)
		{
			return this.EduTeacherTypeService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduTeacherTypeDto> ReadEduTeacherTypesFiltered(string sortExpression, string filterExpression)
		{
			return this.EduTeacherTypeService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduTeacherTypeDto> ReadEduTeacherTypesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduTeacherTypeService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduTeacherTypeDto ReadEduTeacherTypes(string dtoKey)
		{
			return this.EduTeacherTypeService.GetByKey(dtoKey);
		}


		public int EduTeacherTypesCount()
		{
			return this.EduTeacherTypeService.Count();
		}


		public int EduTeacherTypesCountFiltered(string filterExpression)
		{
			return this.EduTeacherTypeService.Count(filterExpression);
		}


		public string CreateEduTeacherType(EduTeacherTypeDto eduteachertype, bool doSaveChanges = true)
		{
			string key = this.EduTeacherTypeService.Add(eduteachertype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduTeacherType(EduTeacherTypeDto eduteachertype, bool doSaveChanges = true)
		{
			this.EduTeacherTypeService.Update(eduteachertype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduTeacherTypes(IEnumerable<EduTeacherTypeDto> eduteachertypes, bool doSaveChanges = true)
		{
			if (eduteachertypes == null)
			{
				return;
			}
			foreach (EduTeacherTypeDto instance in eduteachertypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTeacherTypeService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduTeacherType(EduTeacherTypeDto eduteachertype, bool doSaveChanges = true)
		{
			this.EduTeacherTypeService.Delete(eduteachertype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduTeacherTypes(IEnumerable<EduTeacherTypeDto> eduteachertypes, bool doSaveChanges = true)
		{
			if (eduteachertypes == null)
			{
				return;
			}
			foreach (EduTeacherTypeDto instance in eduteachertypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTeacherTypeService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduTeacherType CRUD Operations


		#region EduRefTeacher CRUD Operations


		private IEduRefTeacherService edurefteacher;
		public virtual IEduRefTeacherService EduRefTeacherService
		{
			get
			{
				if (this.edurefteacher == null)
				{
					IEduRefTeacherAssembler assembler = new EduRefTeacherAssembler();
					IEduRefTeacherRepository repository = new EduRefTeacherRepository(this.UnitOfWork);
					this.edurefteacher = new EduRefTeacherService(assembler, repository);
				}
				return this.edurefteacher;
			}
		}


		public IEnumerable<EduRefTeacherDto> ReadEduRefTeachers()
		{
			return this.EduRefTeacherService.GetAll();
		}


		public IEnumerable<EduRefTeacherDto> ReadEduRefTeachers(Expression<Func<EduRefTeacher, bool>> filter)
		{
			return this.EduRefTeacherService.Find(filter);
		}


		public IEnumerable<EduRefTeacherDto> ReadEduRefTeachers(ISpecification<EduRefTeacher> specification)
		{
			return this.EduRefTeacherService.Find(specification.GetExpression());
		}


		public IEnumerable<EduRefTeacherDto> ReadEduRefTeachersPaged(int startIndex, int pageSize)
		{
			return this.EduRefTeacherService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduRefTeacherDto> ReadEduRefTeachersFiltered(string sortExpression, string filterExpression)
		{
			return this.EduRefTeacherService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduRefTeacherDto> ReadEduRefTeachersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduRefTeacherService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduRefTeacherDto ReadEduRefTeachers(string dtoKey)
		{
			return this.EduRefTeacherService.GetByKey(dtoKey);
		}


		public int EduRefTeachersCount()
		{
			return this.EduRefTeacherService.Count();
		}


		public int EduRefTeachersCountFiltered(string filterExpression)
		{
			return this.EduRefTeacherService.Count(filterExpression);
		}


		public string CreateEduRefTeacher(EduRefTeacherDto edurefteacher, bool doSaveChanges = true)
		{
			string key = this.EduRefTeacherService.Add(edurefteacher);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduRefTeacher(EduRefTeacherDto edurefteacher, bool doSaveChanges = true)
		{
			this.EduRefTeacherService.Update(edurefteacher);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduRefTeachers(IEnumerable<EduRefTeacherDto> edurefteachers, bool doSaveChanges = true)
		{
			if (edurefteachers == null)
			{
				return;
			}
			foreach (EduRefTeacherDto instance in edurefteachers)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduRefTeacherService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduRefTeacher(EduRefTeacherDto edurefteacher, bool doSaveChanges = true)
		{
			this.EduRefTeacherService.Delete(edurefteacher);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduRefTeachers(IEnumerable<EduRefTeacherDto> edurefteachers, bool doSaveChanges = true)
		{
			if (edurefteachers == null)
			{
				return;
			}
			foreach (EduRefTeacherDto instance in edurefteachers)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduRefTeacherService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduRefTeacher CRUD Operations


		#region V_CodeRef CRUD Operations


		private IV_CodeRefService v_coderef;
		public virtual IV_CodeRefService V_CodeRefService
		{
			get
			{
				if (this.v_coderef == null)
				{
					IV_CodeRefAssembler assembler = new V_CodeRefAssembler();
					IV_CodeRefRepository repository = new V_CodeRefRepository(this.UnitOfWork);
					this.v_coderef = new V_CodeRefService(assembler, repository);
				}
				return this.v_coderef;
			}
		}


		public IEnumerable<V_CodeRefDto> ReadV_CodeRefs()
		{
			return this.V_CodeRefService.GetAll();
		}


		public IEnumerable<V_CodeRefDto> ReadV_CodeRefs(Expression<Func<V_CodeRef, bool>> filter)
		{
			return this.V_CodeRefService.Find(filter);
		}


		public IEnumerable<V_CodeRefDto> ReadV_CodeRefs(ISpecification<V_CodeRef> specification)
		{
			return this.V_CodeRefService.Find(specification.GetExpression());
		}


		public IEnumerable<V_CodeRefDto> ReadV_CodeRefsPaged(int startIndex, int pageSize)
		{
			return this.V_CodeRefService.Find(startIndex, pageSize);
		}


		public IEnumerable<V_CodeRefDto> ReadV_CodeRefsFiltered(string sortExpression, string filterExpression)
		{
			return this.V_CodeRefService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<V_CodeRefDto> ReadV_CodeRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.V_CodeRefService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public V_CodeRefDto ReadV_CodeRefs(string dtoKey)
		{
			return this.V_CodeRefService.GetByKey(dtoKey);
		}


		public int V_CodeRefsCount()
		{
			return this.V_CodeRefService.Count();
		}


		public int V_CodeRefsCountFiltered(string filterExpression)
		{
			return this.V_CodeRefService.Count(filterExpression);
		}


		public string CreateV_CodeRef(V_CodeRefDto v_coderef, bool doSaveChanges = true)
		{
			string key = this.V_CodeRefService.Add(v_coderef);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateV_CodeRef(V_CodeRefDto v_coderef, bool doSaveChanges = true)
		{
			this.V_CodeRefService.Update(v_coderef);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateV_CodeRefs(IEnumerable<V_CodeRefDto> v_coderefs, bool doSaveChanges = true)
		{
			if (v_coderefs == null)
			{
				return;
			}
			foreach (V_CodeRefDto instance in v_coderefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_CodeRefService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteV_CodeRef(V_CodeRefDto v_coderef, bool doSaveChanges = true)
		{
			this.V_CodeRefService.Delete(v_coderef);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteV_CodeRefs(IEnumerable<V_CodeRefDto> v_coderefs, bool doSaveChanges = true)
		{
			if (v_coderefs == null)
			{
				return;
			}
			foreach (V_CodeRefDto instance in v_coderefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_CodeRefService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion V_CodeRef CRUD Operations


		#region EduActTarget CRUD Operations


		private IEduActTargetService eduacttarget;
		public virtual IEduActTargetService EduActTargetService
		{
			get
			{
				if (this.eduacttarget == null)
				{
					IEduActTargetAssembler assembler = new EduActTargetAssembler();
					IEduActTargetRepository repository = new EduActTargetRepository(this.UnitOfWork);
					this.eduacttarget = new EduActTargetService(assembler, repository);
				}
				return this.eduacttarget;
			}
		}


		public IEnumerable<EduActTargetDto> ReadEduActTargets()
		{
			return this.EduActTargetService.GetAll();
		}


		public IEnumerable<EduActTargetDto> ReadEduActTargets(Expression<Func<EduActTarget, bool>> filter)
		{
			return this.EduActTargetService.Find(filter);
		}


		public IEnumerable<EduActTargetDto> ReadEduActTargets(ISpecification<EduActTarget> specification)
		{
			return this.EduActTargetService.Find(specification.GetExpression());
		}


		public IEnumerable<EduActTargetDto> ReadEduActTargetsPaged(int startIndex, int pageSize)
		{
			return this.EduActTargetService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduActTargetDto> ReadEduActTargetsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduActTargetService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduActTargetDto> ReadEduActTargetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduActTargetService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduActTargetDto ReadEduActTargets(string dtoKey)
		{
			return this.EduActTargetService.GetByKey(dtoKey);
		}


		public int EduActTargetsCount()
		{
			return this.EduActTargetService.Count();
		}


		public int EduActTargetsCountFiltered(string filterExpression)
		{
			return this.EduActTargetService.Count(filterExpression);
		}


		public string CreateEduActTarget(EduActTargetDto eduacttarget, bool doSaveChanges = true)
		{
			string key = this.EduActTargetService.Add(eduacttarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduActTarget(EduActTargetDto eduacttarget, bool doSaveChanges = true)
		{
			this.EduActTargetService.Update(eduacttarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduActTargets(IEnumerable<EduActTargetDto> eduacttargets, bool doSaveChanges = true)
		{
			if (eduacttargets == null)
			{
				return;
			}
			foreach (EduActTargetDto instance in eduacttargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduActTargetService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduActTarget(EduActTargetDto eduacttarget, bool doSaveChanges = true)
		{
			this.EduActTargetService.Delete(eduacttarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduActTargets(IEnumerable<EduActTargetDto> eduacttargets, bool doSaveChanges = true)
		{
			if (eduacttargets == null)
			{
				return;
			}
			foreach (EduActTargetDto instance in eduacttargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduActTargetService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduActTarget CRUD Operations


		#region V_department CRUD Operations


		private IV_departmentService v_department;
		public virtual IV_departmentService V_departmentService
		{
			get
			{
				if (this.v_department == null)
				{
					IV_departmentAssembler assembler = new V_departmentAssembler();
					IV_departmentRepository repository = new V_departmentRepository(this.UnitOfWork);
					this.v_department = new V_departmentService(assembler, repository);
				}
				return this.v_department;
			}
		}


		public IEnumerable<V_departmentDto> ReadV_departments()
		{
			return this.V_departmentService.GetAll();
		}


		public IEnumerable<V_departmentDto> ReadV_departments(Expression<Func<V_department, bool>> filter)
		{
			return this.V_departmentService.Find(filter);
		}


		public IEnumerable<V_departmentDto> ReadV_departments(ISpecification<V_department> specification)
		{
			return this.V_departmentService.Find(specification.GetExpression());
		}


		public IEnumerable<V_departmentDto> ReadV_departmentsPaged(int startIndex, int pageSize)
		{
			return this.V_departmentService.Find(startIndex, pageSize);
		}


		public IEnumerable<V_departmentDto> ReadV_departmentsFiltered(string sortExpression, string filterExpression)
		{
			return this.V_departmentService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<V_departmentDto> ReadV_departmentsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.V_departmentService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public V_departmentDto ReadV_departments(string dtoKey)
		{
			return this.V_departmentService.GetByKey(dtoKey);
		}


		public int V_departmentsCount()
		{
			return this.V_departmentService.Count();
		}


		public int V_departmentsCountFiltered(string filterExpression)
		{
			return this.V_departmentService.Count(filterExpression);
		}


		public string CreateV_department(V_departmentDto v_department, bool doSaveChanges = true)
		{
			string key = this.V_departmentService.Add(v_department);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateV_department(V_departmentDto v_department, bool doSaveChanges = true)
		{
			this.V_departmentService.Update(v_department);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateV_departments(IEnumerable<V_departmentDto> v_departments, bool doSaveChanges = true)
		{
			if (v_departments == null)
			{
				return;
			}
			foreach (V_departmentDto instance in v_departments)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_departmentService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteV_department(V_departmentDto v_department, bool doSaveChanges = true)
		{
			this.V_departmentService.Delete(v_department);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteV_departments(IEnumerable<V_departmentDto> v_departments, bool doSaveChanges = true)
		{
			if (v_departments == null)
			{
				return;
			}
			foreach (V_departmentDto instance in v_departments)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_departmentService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion V_department CRUD Operations


		#region V_kmujob CRUD Operations


		private IV_kmujobService v_kmujob;
		public virtual IV_kmujobService V_kmujobService
		{
			get
			{
				if (this.v_kmujob == null)
				{
					IV_kmujobAssembler assembler = new V_kmujobAssembler();
					IV_kmujobRepository repository = new V_kmujobRepository(this.UnitOfWork);
					this.v_kmujob = new V_kmujobService(assembler, repository);
				}
				return this.v_kmujob;
			}
		}


		public IEnumerable<V_kmujobDto> ReadV_kmujobs()
		{
			return this.V_kmujobService.GetAll();
		}


		public IEnumerable<V_kmujobDto> ReadV_kmujobs(Expression<Func<V_kmujob, bool>> filter)
		{
			return this.V_kmujobService.Find(filter);
		}


		public IEnumerable<V_kmujobDto> ReadV_kmujobs(ISpecification<V_kmujob> specification)
		{
			return this.V_kmujobService.Find(specification.GetExpression());
		}


		public IEnumerable<V_kmujobDto> ReadV_kmujobsPaged(int startIndex, int pageSize)
		{
			return this.V_kmujobService.Find(startIndex, pageSize);
		}


		public IEnumerable<V_kmujobDto> ReadV_kmujobsFiltered(string sortExpression, string filterExpression)
		{
			return this.V_kmujobService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<V_kmujobDto> ReadV_kmujobsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.V_kmujobService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public V_kmujobDto ReadV_kmujobs(string dtoKey)
		{
			return this.V_kmujobService.GetByKey(dtoKey);
		}


		public int V_kmujobsCount()
		{
			return this.V_kmujobService.Count();
		}


		public int V_kmujobsCountFiltered(string filterExpression)
		{
			return this.V_kmujobService.Count(filterExpression);
		}


		public string CreateV_kmujob(V_kmujobDto v_kmujob, bool doSaveChanges = true)
		{
			string key = this.V_kmujobService.Add(v_kmujob);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateV_kmujob(V_kmujobDto v_kmujob, bool doSaveChanges = true)
		{
			this.V_kmujobService.Update(v_kmujob);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateV_kmujobs(IEnumerable<V_kmujobDto> v_kmujobs, bool doSaveChanges = true)
		{
			if (v_kmujobs == null)
			{
				return;
			}
			foreach (V_kmujobDto instance in v_kmujobs)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_kmujobService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteV_kmujob(V_kmujobDto v_kmujob, bool doSaveChanges = true)
		{
			this.V_kmujobService.Delete(v_kmujob);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteV_kmujobs(IEnumerable<V_kmujobDto> v_kmujobs, bool doSaveChanges = true)
		{
			if (v_kmujobs == null)
			{
				return;
			}
			foreach (V_kmujobDto instance in v_kmujobs)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_kmujobService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion V_kmujob CRUD Operations


		#region EduStopActAttachment CRUD Operations


		private IEduStopActAttachmentService edustopactattachment;
		public virtual IEduStopActAttachmentService EduStopActAttachmentService
		{
			get
			{
				if (this.edustopactattachment == null)
				{
					IEduStopActAttachmentAssembler assembler = new EduStopActAttachmentAssembler();
					IEduStopActAttachmentRepository repository = new EduStopActAttachmentRepository(this.UnitOfWork);
					this.edustopactattachment = new EduStopActAttachmentService(assembler, repository);
				}
				return this.edustopactattachment;
			}
		}


		public IEnumerable<EduStopActAttachmentDto> ReadEduStopActAttachments()
		{
			return this.EduStopActAttachmentService.GetAll();
		}


		public IEnumerable<EduStopActAttachmentDto> ReadEduStopActAttachments(Expression<Func<EduStopActAttachment, bool>> filter)
		{
			return this.EduStopActAttachmentService.Find(filter);
		}


		public IEnumerable<EduStopActAttachmentDto> ReadEduStopActAttachments(ISpecification<EduStopActAttachment> specification)
		{
			return this.EduStopActAttachmentService.Find(specification.GetExpression());
		}


		public IEnumerable<EduStopActAttachmentDto> ReadEduStopActAttachmentsPaged(int startIndex, int pageSize)
		{
			return this.EduStopActAttachmentService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduStopActAttachmentDto> ReadEduStopActAttachmentsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduStopActAttachmentService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduStopActAttachmentDto> ReadEduStopActAttachmentsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduStopActAttachmentService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduStopActAttachmentDto ReadEduStopActAttachments(string dtoKey)
		{
			return this.EduStopActAttachmentService.GetByKey(dtoKey);
		}


		public int EduStopActAttachmentsCount()
		{
			return this.EduStopActAttachmentService.Count();
		}


		public int EduStopActAttachmentsCountFiltered(string filterExpression)
		{
			return this.EduStopActAttachmentService.Count(filterExpression);
		}


		public string CreateEduStopActAttachment(EduStopActAttachmentDto edustopactattachment, bool doSaveChanges = true)
		{
			string key = this.EduStopActAttachmentService.Add(edustopactattachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduStopActAttachment(EduStopActAttachmentDto edustopactattachment, bool doSaveChanges = true)
		{
			this.EduStopActAttachmentService.Update(edustopactattachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduStopActAttachments(IEnumerable<EduStopActAttachmentDto> edustopactattachments, bool doSaveChanges = true)
		{
			if (edustopactattachments == null)
			{
				return;
			}
			foreach (EduStopActAttachmentDto instance in edustopactattachments)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduStopActAttachmentService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduStopActAttachment(EduStopActAttachmentDto edustopactattachment, bool doSaveChanges = true)
		{
			this.EduStopActAttachmentService.Delete(edustopactattachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduStopActAttachments(IEnumerable<EduStopActAttachmentDto> edustopactattachments, bool doSaveChanges = true)
		{
			if (edustopactattachments == null)
			{
				return;
			}
			foreach (EduStopActAttachmentDto instance in edustopactattachments)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduStopActAttachmentService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduStopActAttachment CRUD Operations


		#region V_MemeberRundown CRUD Operations


		private IV_MemeberRundownService v_memeberrundown;
		public virtual IV_MemeberRundownService V_MemeberRundownService
		{
			get
			{
				if (this.v_memeberrundown == null)
				{
					IV_MemeberRundownAssembler assembler = new V_MemeberRundownAssembler();
					IV_MemeberRundownRepository repository = new V_MemeberRundownRepository(this.UnitOfWork);
					this.v_memeberrundown = new V_MemeberRundownService(assembler, repository);
				}
				return this.v_memeberrundown;
			}
		}


		public IEnumerable<V_MemeberRundownDto> ReadV_MemeberRundowns()
		{
			return this.V_MemeberRundownService.GetAll();
		}


		public IEnumerable<V_MemeberRundownDto> ReadV_MemeberRundowns(Expression<Func<V_MemeberRundown, bool>> filter)
		{
			return this.V_MemeberRundownService.Find(filter);
		}


		public IEnumerable<V_MemeberRundownDto> ReadV_MemeberRundowns(ISpecification<V_MemeberRundown> specification)
		{
			return this.V_MemeberRundownService.Find(specification.GetExpression());
		}


		public IEnumerable<V_MemeberRundownDto> ReadV_MemeberRundownsPaged(int startIndex, int pageSize)
		{
			return this.V_MemeberRundownService.Find(startIndex, pageSize);
		}


		public IEnumerable<V_MemeberRundownDto> ReadV_MemeberRundownsFiltered(string sortExpression, string filterExpression)
		{
			return this.V_MemeberRundownService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<V_MemeberRundownDto> ReadV_MemeberRundownsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.V_MemeberRundownService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public V_MemeberRundownDto ReadV_MemeberRundowns(string dtoKey)
		{
			return this.V_MemeberRundownService.GetByKey(dtoKey);
		}


		public int V_MemeberRundownsCount()
		{
			return this.V_MemeberRundownService.Count();
		}


		public int V_MemeberRundownsCountFiltered(string filterExpression)
		{
			return this.V_MemeberRundownService.Count(filterExpression);
		}


		public string CreateV_MemeberRundown(V_MemeberRundownDto v_memeberrundown, bool doSaveChanges = true)
		{
			string key = this.V_MemeberRundownService.Add(v_memeberrundown);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateV_MemeberRundown(V_MemeberRundownDto v_memeberrundown, bool doSaveChanges = true)
		{
			this.V_MemeberRundownService.Update(v_memeberrundown);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateV_MemeberRundowns(IEnumerable<V_MemeberRundownDto> v_memeberrundowns, bool doSaveChanges = true)
		{
			if (v_memeberrundowns == null)
			{
				return;
			}
			foreach (V_MemeberRundownDto instance in v_memeberrundowns)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_MemeberRundownService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteV_MemeberRundown(V_MemeberRundownDto v_memeberrundown, bool doSaveChanges = true)
		{
			this.V_MemeberRundownService.Delete(v_memeberrundown);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteV_MemeberRundowns(IEnumerable<V_MemeberRundownDto> v_memeberrundowns, bool doSaveChanges = true)
		{
			if (v_memeberrundowns == null)
			{
				return;
			}
			foreach (V_MemeberRundownDto instance in v_memeberrundowns)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_MemeberRundownService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion V_MemeberRundown CRUD Operations


		#region AutoEduFormTemplateTarget CRUD Operations


		private IAutoEduFormTemplateTargetService autoeduformtemplatetarget;
		public virtual IAutoEduFormTemplateTargetService AutoEduFormTemplateTargetService
		{
			get
			{
				if (this.autoeduformtemplatetarget == null)
				{
					IAutoEduFormTemplateTargetAssembler assembler = new AutoEduFormTemplateTargetAssembler();
					IAutoEduFormTemplateTargetRepository repository = new AutoEduFormTemplateTargetRepository(this.UnitOfWork);
					this.autoeduformtemplatetarget = new AutoEduFormTemplateTargetService(assembler, repository);
				}
				return this.autoeduformtemplatetarget;
			}
		}


		public IEnumerable<AutoEduFormTemplateTargetDto> ReadAutoEduFormTemplateTargets()
		{
			return this.AutoEduFormTemplateTargetService.GetAll();
		}


		public IEnumerable<AutoEduFormTemplateTargetDto> ReadAutoEduFormTemplateTargets(Expression<Func<AutoEduFormTemplateTarget, bool>> filter)
		{
			return this.AutoEduFormTemplateTargetService.Find(filter);
		}


		public IEnumerable<AutoEduFormTemplateTargetDto> ReadAutoEduFormTemplateTargets(ISpecification<AutoEduFormTemplateTarget> specification)
		{
			return this.AutoEduFormTemplateTargetService.Find(specification.GetExpression());
		}


		public IEnumerable<AutoEduFormTemplateTargetDto> ReadAutoEduFormTemplateTargetsPaged(int startIndex, int pageSize)
		{
			return this.AutoEduFormTemplateTargetService.Find(startIndex, pageSize);
		}


		public IEnumerable<AutoEduFormTemplateTargetDto> ReadAutoEduFormTemplateTargetsFiltered(string sortExpression, string filterExpression)
		{
			return this.AutoEduFormTemplateTargetService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<AutoEduFormTemplateTargetDto> ReadAutoEduFormTemplateTargetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.AutoEduFormTemplateTargetService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public AutoEduFormTemplateTargetDto ReadAutoEduFormTemplateTargets(string dtoKey)
		{
			return this.AutoEduFormTemplateTargetService.GetByKey(dtoKey);
		}


		public int AutoEduFormTemplateTargetsCount()
		{
			return this.AutoEduFormTemplateTargetService.Count();
		}


		public int AutoEduFormTemplateTargetsCountFiltered(string filterExpression)
		{
			return this.AutoEduFormTemplateTargetService.Count(filterExpression);
		}


		public string CreateAutoEduFormTemplateTarget(AutoEduFormTemplateTargetDto autoeduformtemplatetarget, bool doSaveChanges = true)
		{
			string key = this.AutoEduFormTemplateTargetService.Add(autoeduformtemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateAutoEduFormTemplateTarget(AutoEduFormTemplateTargetDto autoeduformtemplatetarget, bool doSaveChanges = true)
		{
			this.AutoEduFormTemplateTargetService.Update(autoeduformtemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateAutoEduFormTemplateTargets(IEnumerable<AutoEduFormTemplateTargetDto> autoeduformtemplatetargets, bool doSaveChanges = true)
		{
			if (autoeduformtemplatetargets == null)
			{
				return;
			}
			foreach (AutoEduFormTemplateTargetDto instance in autoeduformtemplatetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.AutoEduFormTemplateTargetService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteAutoEduFormTemplateTarget(AutoEduFormTemplateTargetDto autoeduformtemplatetarget, bool doSaveChanges = true)
		{
			this.AutoEduFormTemplateTargetService.Delete(autoeduformtemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteAutoEduFormTemplateTargets(IEnumerable<AutoEduFormTemplateTargetDto> autoeduformtemplatetargets, bool doSaveChanges = true)
		{
			if (autoeduformtemplatetargets == null)
			{
				return;
			}
			foreach (AutoEduFormTemplateTargetDto instance in autoeduformtemplatetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.AutoEduFormTemplateTargetService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion AutoEduFormTemplateTarget CRUD Operations


		#region AutoEduFormTemplateList CRUD Operations


		private IAutoEduFormTemplateListService autoeduformtemplatelist;
		public virtual IAutoEduFormTemplateListService AutoEduFormTemplateListService
		{
			get
			{
				if (this.autoeduformtemplatelist == null)
				{
					IAutoEduFormTemplateListAssembler assembler = new AutoEduFormTemplateListAssembler();
					IAutoEduFormTemplateListRepository repository = new AutoEduFormTemplateListRepository(this.UnitOfWork);
					this.autoeduformtemplatelist = new AutoEduFormTemplateListService(assembler, repository);
				}
				return this.autoeduformtemplatelist;
			}
		}


		public IEnumerable<AutoEduFormTemplateListDto> ReadAutoEduFormTemplateLists()
		{
			return this.AutoEduFormTemplateListService.GetAll();
		}


		public IEnumerable<AutoEduFormTemplateListDto> ReadAutoEduFormTemplateLists(Expression<Func<AutoEduFormTemplateList, bool>> filter)
		{
			return this.AutoEduFormTemplateListService.Find(filter);
		}


		public IEnumerable<AutoEduFormTemplateListDto> ReadAutoEduFormTemplateLists(ISpecification<AutoEduFormTemplateList> specification)
		{
			return this.AutoEduFormTemplateListService.Find(specification.GetExpression());
		}


		public IEnumerable<AutoEduFormTemplateListDto> ReadAutoEduFormTemplateListsPaged(int startIndex, int pageSize)
		{
			return this.AutoEduFormTemplateListService.Find(startIndex, pageSize);
		}


		public IEnumerable<AutoEduFormTemplateListDto> ReadAutoEduFormTemplateListsFiltered(string sortExpression, string filterExpression)
		{
			return this.AutoEduFormTemplateListService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<AutoEduFormTemplateListDto> ReadAutoEduFormTemplateListsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.AutoEduFormTemplateListService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public AutoEduFormTemplateListDto ReadAutoEduFormTemplateLists(string dtoKey)
		{
			return this.AutoEduFormTemplateListService.GetByKey(dtoKey);
		}


		public int AutoEduFormTemplateListsCount()
		{
			return this.AutoEduFormTemplateListService.Count();
		}


		public int AutoEduFormTemplateListsCountFiltered(string filterExpression)
		{
			return this.AutoEduFormTemplateListService.Count(filterExpression);
		}


		public string CreateAutoEduFormTemplateList(AutoEduFormTemplateListDto autoeduformtemplatelist, bool doSaveChanges = true)
		{
			string key = this.AutoEduFormTemplateListService.Add(autoeduformtemplatelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateAutoEduFormTemplateList(AutoEduFormTemplateListDto autoeduformtemplatelist, bool doSaveChanges = true)
		{
			this.AutoEduFormTemplateListService.Update(autoeduformtemplatelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateAutoEduFormTemplateLists(IEnumerable<AutoEduFormTemplateListDto> autoeduformtemplatelists, bool doSaveChanges = true)
		{
			if (autoeduformtemplatelists == null)
			{
				return;
			}
			foreach (AutoEduFormTemplateListDto instance in autoeduformtemplatelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.AutoEduFormTemplateListService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteAutoEduFormTemplateList(AutoEduFormTemplateListDto autoeduformtemplatelist, bool doSaveChanges = true)
		{
			this.AutoEduFormTemplateListService.Delete(autoeduformtemplatelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteAutoEduFormTemplateLists(IEnumerable<AutoEduFormTemplateListDto> autoeduformtemplatelists, bool doSaveChanges = true)
		{
			if (autoeduformtemplatelists == null)
			{
				return;
			}
			foreach (AutoEduFormTemplateListDto instance in autoeduformtemplatelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.AutoEduFormTemplateListService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion AutoEduFormTemplateList CRUD Operations


		#region JobFormSetting CRUD Operations


		private IJobFormSettingService jobformsetting;
		public virtual IJobFormSettingService JobFormSettingService
		{
			get
			{
				if (this.jobformsetting == null)
				{
					IJobFormSettingAssembler assembler = new JobFormSettingAssembler();
					IJobFormSettingRepository repository = new JobFormSettingRepository(this.UnitOfWork);
					this.jobformsetting = new JobFormSettingService(assembler, repository);
				}
				return this.jobformsetting;
			}
		}


		public IEnumerable<JobFormSettingDto> ReadJobFormSettings()
		{
			return this.JobFormSettingService.GetAll();
		}


		public IEnumerable<JobFormSettingDto> ReadJobFormSettings(Expression<Func<JobFormSetting, bool>> filter)
		{
			return this.JobFormSettingService.Find(filter);
		}


		public IEnumerable<JobFormSettingDto> ReadJobFormSettings(ISpecification<JobFormSetting> specification)
		{
			return this.JobFormSettingService.Find(specification.GetExpression());
		}


		public IEnumerable<JobFormSettingDto> ReadJobFormSettingsPaged(int startIndex, int pageSize)
		{
			return this.JobFormSettingService.Find(startIndex, pageSize);
		}


		public IEnumerable<JobFormSettingDto> ReadJobFormSettingsFiltered(string sortExpression, string filterExpression)
		{
			return this.JobFormSettingService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<JobFormSettingDto> ReadJobFormSettingsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.JobFormSettingService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public JobFormSettingDto ReadJobFormSettings(string dtoKey)
		{
			return this.JobFormSettingService.GetByKey(dtoKey);
		}


		public int JobFormSettingsCount()
		{
			return this.JobFormSettingService.Count();
		}


		public int JobFormSettingsCountFiltered(string filterExpression)
		{
			return this.JobFormSettingService.Count(filterExpression);
		}


		public string CreateJobFormSetting(JobFormSettingDto jobformsetting, bool doSaveChanges = true)
		{
			string key = this.JobFormSettingService.Add(jobformsetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateJobFormSetting(JobFormSettingDto jobformsetting, bool doSaveChanges = true)
		{
			this.JobFormSettingService.Update(jobformsetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateJobFormSettings(IEnumerable<JobFormSettingDto> jobformsettings, bool doSaveChanges = true)
		{
			if (jobformsettings == null)
			{
				return;
			}
			foreach (JobFormSettingDto instance in jobformsettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.JobFormSettingService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteJobFormSetting(JobFormSettingDto jobformsetting, bool doSaveChanges = true)
		{
			this.JobFormSettingService.Delete(jobformsetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteJobFormSettings(IEnumerable<JobFormSettingDto> jobformsettings, bool doSaveChanges = true)
		{
			if (jobformsettings == null)
			{
				return;
			}
			foreach (JobFormSettingDto instance in jobformsettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.JobFormSettingService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion JobFormSetting CRUD Operations


		#region SchedulerLog CRUD Operations


		private ISchedulerLogService schedulerlog;
		public virtual ISchedulerLogService SchedulerLogService
		{
			get
			{
				if (this.schedulerlog == null)
				{
					ISchedulerLogAssembler assembler = new SchedulerLogAssembler();
					ISchedulerLogRepository repository = new SchedulerLogRepository(this.UnitOfWork);
					this.schedulerlog = new SchedulerLogService(assembler, repository);
				}
				return this.schedulerlog;
			}
		}


		public IEnumerable<SchedulerLogDto> ReadSchedulerLogs()
		{
			return this.SchedulerLogService.GetAll();
		}


		public IEnumerable<SchedulerLogDto> ReadSchedulerLogs(Expression<Func<SchedulerLog, bool>> filter)
		{
			return this.SchedulerLogService.Find(filter);
		}


		public IEnumerable<SchedulerLogDto> ReadSchedulerLogs(ISpecification<SchedulerLog> specification)
		{
			return this.SchedulerLogService.Find(specification.GetExpression());
		}


		public IEnumerable<SchedulerLogDto> ReadSchedulerLogsPaged(int startIndex, int pageSize)
		{
			return this.SchedulerLogService.Find(startIndex, pageSize);
		}


		public IEnumerable<SchedulerLogDto> ReadSchedulerLogsFiltered(string sortExpression, string filterExpression)
		{
			return this.SchedulerLogService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<SchedulerLogDto> ReadSchedulerLogsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.SchedulerLogService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public SchedulerLogDto ReadSchedulerLogs(string dtoKey)
		{
			return this.SchedulerLogService.GetByKey(dtoKey);
		}


		public int SchedulerLogsCount()
		{
			return this.SchedulerLogService.Count();
		}


		public int SchedulerLogsCountFiltered(string filterExpression)
		{
			return this.SchedulerLogService.Count(filterExpression);
		}


		public string CreateSchedulerLog(SchedulerLogDto schedulerlog, bool doSaveChanges = true)
		{
			string key = this.SchedulerLogService.Add(schedulerlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateSchedulerLog(SchedulerLogDto schedulerlog, bool doSaveChanges = true)
		{
			this.SchedulerLogService.Update(schedulerlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateSchedulerLogs(IEnumerable<SchedulerLogDto> schedulerlogs, bool doSaveChanges = true)
		{
			if (schedulerlogs == null)
			{
				return;
			}
			foreach (SchedulerLogDto instance in schedulerlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SchedulerLogService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteSchedulerLog(SchedulerLogDto schedulerlog, bool doSaveChanges = true)
		{
			this.SchedulerLogService.Delete(schedulerlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteSchedulerLogs(IEnumerable<SchedulerLogDto> schedulerlogs, bool doSaveChanges = true)
		{
			if (schedulerlogs == null)
			{
				return;
			}
			foreach (SchedulerLogDto instance in schedulerlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.SchedulerLogService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion SchedulerLog CRUD Operations


		#region News_Attachment CRUD Operations


		private INews_AttachmentService news_attachment;
		public virtual INews_AttachmentService News_AttachmentService
		{
			get
			{
				if (this.news_attachment == null)
				{
					INews_AttachmentAssembler assembler = new News_AttachmentAssembler();
					INews_AttachmentRepository repository = new News_AttachmentRepository(this.UnitOfWork);
					this.news_attachment = new News_AttachmentService(assembler, repository);
				}
				return this.news_attachment;
			}
		}


		public IEnumerable<News_AttachmentDto> ReadNews_Attachments()
		{
			return this.News_AttachmentService.GetAll();
		}


		public IEnumerable<News_AttachmentDto> ReadNews_Attachments(Expression<Func<News_Attachment, bool>> filter)
		{
			return this.News_AttachmentService.Find(filter);
		}


		public IEnumerable<News_AttachmentDto> ReadNews_Attachments(ISpecification<News_Attachment> specification)
		{
			return this.News_AttachmentService.Find(specification.GetExpression());
		}


		public IEnumerable<News_AttachmentDto> ReadNews_AttachmentsPaged(int startIndex, int pageSize)
		{
			return this.News_AttachmentService.Find(startIndex, pageSize);
		}


		public IEnumerable<News_AttachmentDto> ReadNews_AttachmentsFiltered(string sortExpression, string filterExpression)
		{
			return this.News_AttachmentService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<News_AttachmentDto> ReadNews_AttachmentsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.News_AttachmentService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public News_AttachmentDto ReadNews_Attachments(string dtoKey)
		{
			return this.News_AttachmentService.GetByKey(dtoKey);
		}


		public int News_AttachmentsCount()
		{
			return this.News_AttachmentService.Count();
		}


		public int News_AttachmentsCountFiltered(string filterExpression)
		{
			return this.News_AttachmentService.Count(filterExpression);
		}


		public string CreateNews_Attachment(News_AttachmentDto news_attachment, bool doSaveChanges = true)
		{
			string key = this.News_AttachmentService.Add(news_attachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateNews_Attachment(News_AttachmentDto news_attachment, bool doSaveChanges = true)
		{
			this.News_AttachmentService.Update(news_attachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateNews_Attachments(IEnumerable<News_AttachmentDto> news_attachments, bool doSaveChanges = true)
		{
			if (news_attachments == null)
			{
				return;
			}
			foreach (News_AttachmentDto instance in news_attachments)
			{
				if (instance == null)
				{
					continue;
				}


				this.News_AttachmentService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteNews_Attachment(News_AttachmentDto news_attachment, bool doSaveChanges = true)
		{
			this.News_AttachmentService.Delete(news_attachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteNews_Attachments(IEnumerable<News_AttachmentDto> news_attachments, bool doSaveChanges = true)
		{
			if (news_attachments == null)
			{
				return;
			}
			foreach (News_AttachmentDto instance in news_attachments)
			{
				if (instance == null)
				{
					continue;
				}


				this.News_AttachmentService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion News_Attachment CRUD Operations


		#region News CRUD Operations


		private INewsService news;
		public virtual INewsService NewsService
		{
			get
			{
				if (this.news == null)
				{
					INewsAssembler assembler = new NewsAssembler();
					INewsRepository repository = new NewsRepository(this.UnitOfWork);
					this.news = new NewsService(assembler, repository);
				}
				return this.news;
			}
		}


		public IEnumerable<NewsDto> ReadNews()
		{
			return this.NewsService.GetAll();
		}


		public IEnumerable<NewsDto> ReadNews(Expression<Func<News, bool>> filter)
		{
			return this.NewsService.Find(filter);
		}


		public IEnumerable<NewsDto> ReadNews(ISpecification<News> specification)
		{
			return this.NewsService.Find(specification.GetExpression());
		}


		public IEnumerable<NewsDto> ReadNewsPaged(int startIndex, int pageSize)
		{
			return this.NewsService.Find(startIndex, pageSize);
		}


		public IEnumerable<NewsDto> ReadNewsFiltered(string sortExpression, string filterExpression)
		{
			return this.NewsService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<NewsDto> ReadNewsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.NewsService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public NewsDto ReadNews(string dtoKey)
		{
			return this.NewsService.GetByKey(dtoKey);
		}


		public int NewsCount()
		{
			return this.NewsService.Count();
		}


		public int NewsCountFiltered(string filterExpression)
		{
			return this.NewsService.Count(filterExpression);
		}


		public string CreateNews(NewsDto news, bool doSaveChanges = true)
		{
			string key = this.NewsService.Add(news);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateNews(NewsDto news, bool doSaveChanges = true)
		{
			this.NewsService.Update(news);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateNews(IEnumerable<NewsDto> news, bool doSaveChanges = true)
		{
			if (news == null)
			{
				return;
			}
			foreach (NewsDto instance in news)
			{
				if (instance == null)
				{
					continue;
				}


				this.NewsService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteNews(NewsDto news, bool doSaveChanges = true)
		{
			this.NewsService.Delete(news);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteNews(IEnumerable<NewsDto> news, bool doSaveChanges = true)
		{
			if (news == null)
			{
				return;
			}
			foreach (NewsDto instance in news)
			{
				if (instance == null)
				{
					continue;
				}


				this.NewsService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion News CRUD Operations


		#region EduActType CRUD Operations


		private IEduActTypeService eduacttype;
		public virtual IEduActTypeService EduActTypeService
		{
			get
			{
				if (this.eduacttype == null)
				{
					IEduActTypeAssembler assembler = new EduActTypeAssembler();
					IEduActTypeRepository repository = new EduActTypeRepository(this.UnitOfWork);
					this.eduacttype = new EduActTypeService(assembler, repository);
				}
				return this.eduacttype;
			}
		}


		public IEnumerable<EduActTypeDto> ReadEduActTypes()
		{
			return this.EduActTypeService.GetAll();
		}


		public IEnumerable<EduActTypeDto> ReadEduActTypes(Expression<Func<EduActType, bool>> filter)
		{
			return this.EduActTypeService.Find(filter);
		}


		public IEnumerable<EduActTypeDto> ReadEduActTypes(ISpecification<EduActType> specification)
		{
			return this.EduActTypeService.Find(specification.GetExpression());
		}


		public IEnumerable<EduActTypeDto> ReadEduActTypesPaged(int startIndex, int pageSize)
		{
			return this.EduActTypeService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduActTypeDto> ReadEduActTypesFiltered(string sortExpression, string filterExpression)
		{
			return this.EduActTypeService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduActTypeDto> ReadEduActTypesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduActTypeService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduActTypeDto ReadEduActTypes(string dtoKey)
		{
			return this.EduActTypeService.GetByKey(dtoKey);
		}


		public int EduActTypesCount()
		{
			return this.EduActTypeService.Count();
		}


		public int EduActTypesCountFiltered(string filterExpression)
		{
			return this.EduActTypeService.Count(filterExpression);
		}


		public string CreateEduActType(EduActTypeDto eduacttype, bool doSaveChanges = true)
		{
			string key = this.EduActTypeService.Add(eduacttype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduActType(EduActTypeDto eduacttype, bool doSaveChanges = true)
		{
			this.EduActTypeService.Update(eduacttype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduActTypes(IEnumerable<EduActTypeDto> eduacttypes, bool doSaveChanges = true)
		{
			if (eduacttypes == null)
			{
				return;
			}
			foreach (EduActTypeDto instance in eduacttypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduActTypeService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduActType(EduActTypeDto eduacttype, bool doSaveChanges = true)
		{
			this.EduActTypeService.Delete(eduacttype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduActTypes(IEnumerable<EduActTypeDto> eduacttypes, bool doSaveChanges = true)
		{
			if (eduacttypes == null)
			{
				return;
			}
			foreach (EduActTypeDto instance in eduacttypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduActTypeService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduActType CRUD Operations


		#region FORM_INSTANCE_ATTACHMENT CRUD Operations


		private IFORM_INSTANCE_ATTACHMENTService form_instance_attachment;
		public virtual IFORM_INSTANCE_ATTACHMENTService FORM_INSTANCE_ATTACHMENTService
		{
			get
			{
				if (this.form_instance_attachment == null)
				{
					IFORM_INSTANCE_ATTACHMENTAssembler assembler = new FORM_INSTANCE_ATTACHMENTAssembler();
					IFORM_INSTANCE_ATTACHMENTRepository repository = new FORM_INSTANCE_ATTACHMENTRepository(this.UnitOfWork);
					this.form_instance_attachment = new FORM_INSTANCE_ATTACHMENTService(assembler, repository);
				}
				return this.form_instance_attachment;
			}
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs()
		{
			return this.FORM_INSTANCE_ATTACHMENTService.GetAll();
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs(Expression<Func<FORM_INSTANCE_ATTACHMENT, bool>> filter)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTs(ISpecification<FORM_INSTANCE_ATTACHMENT> specification)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_ATTACHMENTDto> ReadFORM_INSTANCE_ATTACHMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public FORM_INSTANCE_ATTACHMENTDto ReadFORM_INSTANCE_ATTACHMENTs(string dtoKey)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.GetByKey(dtoKey);
		}


		public int FORM_INSTANCE_ATTACHMENTsCount()
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Count();
		}


		public int FORM_INSTANCE_ATTACHMENTsCountFiltered(string filterExpression)
		{
			return this.FORM_INSTANCE_ATTACHMENTService.Count(filterExpression);
		}


		public string CreateFORM_INSTANCE_ATTACHMENT(FORM_INSTANCE_ATTACHMENTDto form_instance_attachment, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCE_ATTACHMENTService.Add(form_instance_attachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE_ATTACHMENT(FORM_INSTANCE_ATTACHMENTDto form_instance_attachment, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_ATTACHMENTService.Update(form_instance_attachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCE_ATTACHMENTs(IEnumerable<FORM_INSTANCE_ATTACHMENTDto> form_instance_attachments, bool doSaveChanges = true)
		{
			if (form_instance_attachments == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_ATTACHMENTDto instance in form_instance_attachments)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_ATTACHMENTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE_ATTACHMENT(FORM_INSTANCE_ATTACHMENTDto form_instance_attachment, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_ATTACHMENTService.Delete(form_instance_attachment);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCE_ATTACHMENTs(IEnumerable<FORM_INSTANCE_ATTACHMENTDto> form_instance_attachments, bool doSaveChanges = true)
		{
			if (form_instance_attachments == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_ATTACHMENTDto instance in form_instance_attachments)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_ATTACHMENTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion FORM_INSTANCE_ATTACHMENT CRUD Operations


		#region EduActViewTarget CRUD Operations


		private IEduActViewTargetService eduactviewtarget;
		public virtual IEduActViewTargetService EduActViewTargetService
		{
			get
			{
				if (this.eduactviewtarget == null)
				{
					IEduActViewTargetAssembler assembler = new EduActViewTargetAssembler();
					IEduActViewTargetRepository repository = new EduActViewTargetRepository(this.UnitOfWork);
					this.eduactviewtarget = new EduActViewTargetService(assembler, repository);
				}
				return this.eduactviewtarget;
			}
		}


		public IEnumerable<EduActViewTargetDto> ReadEduActViewTargets()
		{
			return this.EduActViewTargetService.GetAll();
		}


		public IEnumerable<EduActViewTargetDto> ReadEduActViewTargets(Expression<Func<EduActViewTarget, bool>> filter)
		{
			return this.EduActViewTargetService.Find(filter);
		}


		public IEnumerable<EduActViewTargetDto> ReadEduActViewTargets(ISpecification<EduActViewTarget> specification)
		{
			return this.EduActViewTargetService.Find(specification.GetExpression());
		}


		public IEnumerable<EduActViewTargetDto> ReadEduActViewTargetsPaged(int startIndex, int pageSize)
		{
			return this.EduActViewTargetService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduActViewTargetDto> ReadEduActViewTargetsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduActViewTargetService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduActViewTargetDto> ReadEduActViewTargetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduActViewTargetService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduActViewTargetDto ReadEduActViewTargets(string dtoKey)
		{
			return this.EduActViewTargetService.GetByKey(dtoKey);
		}


		public int EduActViewTargetsCount()
		{
			return this.EduActViewTargetService.Count();
		}


		public int EduActViewTargetsCountFiltered(string filterExpression)
		{
			return this.EduActViewTargetService.Count(filterExpression);
		}


		public string CreateEduActViewTarget(EduActViewTargetDto eduactviewtarget, bool doSaveChanges = true)
		{
			string key = this.EduActViewTargetService.Add(eduactviewtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduActViewTarget(EduActViewTargetDto eduactviewtarget, bool doSaveChanges = true)
		{
			this.EduActViewTargetService.Update(eduactviewtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduActViewTargets(IEnumerable<EduActViewTargetDto> eduactviewtargets, bool doSaveChanges = true)
		{
			if (eduactviewtargets == null)
			{
				return;
			}
			foreach (EduActViewTargetDto instance in eduactviewtargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduActViewTargetService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduActViewTarget(EduActViewTargetDto eduactviewtarget, bool doSaveChanges = true)
		{
			this.EduActViewTargetService.Delete(eduactviewtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduActViewTargets(IEnumerable<EduActViewTargetDto> eduactviewtargets, bool doSaveChanges = true)
		{
			if (eduactviewtargets == null)
			{
				return;
			}
			foreach (EduActViewTargetDto instance in eduactviewtargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduActViewTargetService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduActViewTarget CRUD Operations


		#region EduMenu CRUD Operations


		private IEduMenuService edumenu;
		public virtual IEduMenuService EduMenuService
		{
			get
			{
				if (this.edumenu == null)
				{
					IEduMenuAssembler assembler = new EduMenuAssembler();
					IEduMenuRepository repository = new EduMenuRepository(this.UnitOfWork);
					this.edumenu = new EduMenuService(assembler, repository);
				}
				return this.edumenu;
			}
		}


		public IEnumerable<EduMenuDto> ReadEduMenus()
		{
			return this.EduMenuService.GetAll();
		}


		public IEnumerable<EduMenuDto> ReadEduMenus(Expression<Func<EduMenu, bool>> filter)
		{
			return this.EduMenuService.Find(filter);
		}


		public IEnumerable<EduMenuDto> ReadEduMenus(ISpecification<EduMenu> specification)
		{
			return this.EduMenuService.Find(specification.GetExpression());
		}


		public IEnumerable<EduMenuDto> ReadEduMenusPaged(int startIndex, int pageSize)
		{
			return this.EduMenuService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduMenuDto> ReadEduMenusFiltered(string sortExpression, string filterExpression)
		{
			return this.EduMenuService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduMenuDto> ReadEduMenusPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduMenuService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduMenuDto ReadEduMenus(string dtoKey)
		{
			return this.EduMenuService.GetByKey(dtoKey);
		}


		public int EduMenusCount()
		{
			return this.EduMenuService.Count();
		}


		public int EduMenusCountFiltered(string filterExpression)
		{
			return this.EduMenuService.Count(filterExpression);
		}


		public string CreateEduMenu(EduMenuDto edumenu, bool doSaveChanges = true)
		{
			string key = this.EduMenuService.Add(edumenu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduMenu(EduMenuDto edumenu, bool doSaveChanges = true)
		{
			this.EduMenuService.Update(edumenu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduMenus(IEnumerable<EduMenuDto> edumenus, bool doSaveChanges = true)
		{
			if (edumenus == null)
			{
				return;
			}
			foreach (EduMenuDto instance in edumenus)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduMenuService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduMenu(EduMenuDto edumenu, bool doSaveChanges = true)
		{
			this.EduMenuService.Delete(edumenu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduMenus(IEnumerable<EduMenuDto> edumenus, bool doSaveChanges = true)
		{
			if (edumenus == null)
			{
				return;
			}
			foreach (EduMenuDto instance in edumenus)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduMenuService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduMenu CRUD Operations


		#region AuthRole CRUD Operations


		private IAuthRoleService authrole;
		public virtual IAuthRoleService AuthRoleService
		{
			get
			{
				if (this.authrole == null)
				{
					IAuthRoleAssembler assembler = new AuthRoleAssembler();
					IAuthRoleRepository repository = new AuthRoleRepository(this.UnitOfWork);
					this.authrole = new AuthRoleService(assembler, repository);
				}
				return this.authrole;
			}
		}


		public IEnumerable<AuthRoleDto> ReadAuthRoles()
		{
			return this.AuthRoleService.GetAll();
		}


		public IEnumerable<AuthRoleDto> ReadAuthRoles(Expression<Func<AuthRole, bool>> filter)
		{
			return this.AuthRoleService.Find(filter);
		}


		public IEnumerable<AuthRoleDto> ReadAuthRoles(ISpecification<AuthRole> specification)
		{
			return this.AuthRoleService.Find(specification.GetExpression());
		}


		public IEnumerable<AuthRoleDto> ReadAuthRolesPaged(int startIndex, int pageSize)
		{
			return this.AuthRoleService.Find(startIndex, pageSize);
		}


		public IEnumerable<AuthRoleDto> ReadAuthRolesFiltered(string sortExpression, string filterExpression)
		{
			return this.AuthRoleService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<AuthRoleDto> ReadAuthRolesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.AuthRoleService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public AuthRoleDto ReadAuthRoles(string dtoKey)
		{
			return this.AuthRoleService.GetByKey(dtoKey);
		}


		public int AuthRolesCount()
		{
			return this.AuthRoleService.Count();
		}


		public int AuthRolesCountFiltered(string filterExpression)
		{
			return this.AuthRoleService.Count(filterExpression);
		}


		public string CreateAuthRole(AuthRoleDto authrole, bool doSaveChanges = true)
		{
			string key = this.AuthRoleService.Add(authrole);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateAuthRole(AuthRoleDto authrole, bool doSaveChanges = true)
		{
			this.AuthRoleService.Update(authrole);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateAuthRoles(IEnumerable<AuthRoleDto> authroles, bool doSaveChanges = true)
		{
			if (authroles == null)
			{
				return;
			}
			foreach (AuthRoleDto instance in authroles)
			{
				if (instance == null)
				{
					continue;
				}


				this.AuthRoleService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteAuthRole(AuthRoleDto authrole, bool doSaveChanges = true)
		{
			this.AuthRoleService.Delete(authrole);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteAuthRoles(IEnumerable<AuthRoleDto> authroles, bool doSaveChanges = true)
		{
			if (authroles == null)
			{
				return;
			}
			foreach (AuthRoleDto instance in authroles)
			{
				if (instance == null)
				{
					continue;
				}


				this.AuthRoleService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion AuthRole CRUD Operations


		#region AuthMenu CRUD Operations


		private IAuthMenuService authmenu;
		public virtual IAuthMenuService AuthMenuService
		{
			get
			{
				if (this.authmenu == null)
				{
					IAuthMenuAssembler assembler = new AuthMenuAssembler();
					IAuthMenuRepository repository = new AuthMenuRepository(this.UnitOfWork);
					this.authmenu = new AuthMenuService(assembler, repository);
				}
				return this.authmenu;
			}
		}


		public IEnumerable<AuthMenuDto> ReadAuthMenus()
		{
			return this.AuthMenuService.GetAll();
		}


		public IEnumerable<AuthMenuDto> ReadAuthMenus(Expression<Func<AuthMenu, bool>> filter)
		{
			return this.AuthMenuService.Find(filter);
		}


		public IEnumerable<AuthMenuDto> ReadAuthMenus(ISpecification<AuthMenu> specification)
		{
			return this.AuthMenuService.Find(specification.GetExpression());
		}


		public IEnumerable<AuthMenuDto> ReadAuthMenusPaged(int startIndex, int pageSize)
		{
			return this.AuthMenuService.Find(startIndex, pageSize);
		}


		public IEnumerable<AuthMenuDto> ReadAuthMenusFiltered(string sortExpression, string filterExpression)
		{
			return this.AuthMenuService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<AuthMenuDto> ReadAuthMenusPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.AuthMenuService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public AuthMenuDto ReadAuthMenus(string dtoKey)
		{
			return this.AuthMenuService.GetByKey(dtoKey);
		}


		public int AuthMenusCount()
		{
			return this.AuthMenuService.Count();
		}


		public int AuthMenusCountFiltered(string filterExpression)
		{
			return this.AuthMenuService.Count(filterExpression);
		}


		public string CreateAuthMenu(AuthMenuDto authmenu, bool doSaveChanges = true)
		{
			string key = this.AuthMenuService.Add(authmenu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateAuthMenu(AuthMenuDto authmenu, bool doSaveChanges = true)
		{
			this.AuthMenuService.Update(authmenu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateAuthMenus(IEnumerable<AuthMenuDto> authmenus, bool doSaveChanges = true)
		{
			if (authmenus == null)
			{
				return;
			}
			foreach (AuthMenuDto instance in authmenus)
			{
				if (instance == null)
				{
					continue;
				}


				this.AuthMenuService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteAuthMenu(AuthMenuDto authmenu, bool doSaveChanges = true)
		{
			this.AuthMenuService.Delete(authmenu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteAuthMenus(IEnumerable<AuthMenuDto> authmenus, bool doSaveChanges = true)
		{
			if (authmenus == null)
			{
				return;
			}
			foreach (AuthMenuDto instance in authmenus)
			{
				if (instance == null)
				{
					continue;
				}


				this.AuthMenuService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion AuthMenu CRUD Operations


		#region AccountRole CRUD Operations


		private IAccountRoleService accountrole;
		public virtual IAccountRoleService AccountRoleService
		{
			get
			{
				if (this.accountrole == null)
				{
					IAccountRoleAssembler assembler = new AccountRoleAssembler();
					IAccountRoleRepository repository = new AccountRoleRepository(this.UnitOfWork);
					this.accountrole = new AccountRoleService(assembler, repository);
				}
				return this.accountrole;
			}
		}


		public IEnumerable<AccountRoleDto> ReadAccountRoles()
		{
			return this.AccountRoleService.GetAll();
		}


		public IEnumerable<AccountRoleDto> ReadAccountRoles(Expression<Func<AccountRole, bool>> filter)
		{
			return this.AccountRoleService.Find(filter);
		}


		public IEnumerable<AccountRoleDto> ReadAccountRoles(ISpecification<AccountRole> specification)
		{
			return this.AccountRoleService.Find(specification.GetExpression());
		}


		public IEnumerable<AccountRoleDto> ReadAccountRolesPaged(int startIndex, int pageSize)
		{
			return this.AccountRoleService.Find(startIndex, pageSize);
		}


		public IEnumerable<AccountRoleDto> ReadAccountRolesFiltered(string sortExpression, string filterExpression)
		{
			return this.AccountRoleService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<AccountRoleDto> ReadAccountRolesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.AccountRoleService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public AccountRoleDto ReadAccountRoles(string dtoKey)
		{
			return this.AccountRoleService.GetByKey(dtoKey);
		}


		public int AccountRolesCount()
		{
			return this.AccountRoleService.Count();
		}


		public int AccountRolesCountFiltered(string filterExpression)
		{
			return this.AccountRoleService.Count(filterExpression);
		}


		public string CreateAccountRole(AccountRoleDto accountrole, bool doSaveChanges = true)
		{
			string key = this.AccountRoleService.Add(accountrole);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateAccountRole(AccountRoleDto accountrole, bool doSaveChanges = true)
		{
			this.AccountRoleService.Update(accountrole);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateAccountRoles(IEnumerable<AccountRoleDto> accountroles, bool doSaveChanges = true)
		{
			if (accountroles == null)
			{
				return;
			}
			foreach (AccountRoleDto instance in accountroles)
			{
				if (instance == null)
				{
					continue;
				}


				this.AccountRoleService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteAccountRole(AccountRoleDto accountrole, bool doSaveChanges = true)
		{
			this.AccountRoleService.Delete(accountrole);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteAccountRoles(IEnumerable<AccountRoleDto> accountroles, bool doSaveChanges = true)
		{
			if (accountroles == null)
			{
				return;
			}
			foreach (AccountRoleDto instance in accountroles)
			{
				if (instance == null)
				{
					continue;
				}


				this.AccountRoleService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion AccountRole CRUD Operations


		#region V_KmuEmp CRUD Operations


		private IV_KmuEmpService v_kmuemp;
		public virtual IV_KmuEmpService V_KmuEmpService
		{
			get
			{
				if (this.v_kmuemp == null)
				{
					IV_KmuEmpAssembler assembler = new V_KmuEmpAssembler();
					IV_KmuEmpRepository repository = new V_KmuEmpRepository(this.UnitOfWork);
					this.v_kmuemp = new V_KmuEmpService(assembler, repository);
				}
				return this.v_kmuemp;
			}
		}


		public IEnumerable<V_KmuEmpDto> ReadV_KmuEmps()
		{
			return this.V_KmuEmpService.GetAll();
		}


		public IEnumerable<V_KmuEmpDto> ReadV_KmuEmps(Expression<Func<V_KmuEmp, bool>> filter)
		{
			return this.V_KmuEmpService.Find(filter);
		}


		public IEnumerable<V_KmuEmpDto> ReadV_KmuEmps(ISpecification<V_KmuEmp> specification)
		{
			return this.V_KmuEmpService.Find(specification.GetExpression());
		}


		public IEnumerable<V_KmuEmpDto> ReadV_KmuEmpsPaged(int startIndex, int pageSize)
		{
			return this.V_KmuEmpService.Find(startIndex, pageSize);
		}


		public IEnumerable<V_KmuEmpDto> ReadV_KmuEmpsFiltered(string sortExpression, string filterExpression)
		{
			return this.V_KmuEmpService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<V_KmuEmpDto> ReadV_KmuEmpsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.V_KmuEmpService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public V_KmuEmpDto ReadV_KmuEmps(string dtoKey)
		{
			return this.V_KmuEmpService.GetByKey(dtoKey);
		}


		public int V_KmuEmpsCount()
		{
			return this.V_KmuEmpService.Count();
		}


		public int V_KmuEmpsCountFiltered(string filterExpression)
		{
			return this.V_KmuEmpService.Count(filterExpression);
		}


		public string CreateV_KmuEmp(V_KmuEmpDto v_kmuemp, bool doSaveChanges = true)
		{
			string key = this.V_KmuEmpService.Add(v_kmuemp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateV_KmuEmp(V_KmuEmpDto v_kmuemp, bool doSaveChanges = true)
		{
			this.V_KmuEmpService.Update(v_kmuemp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateV_KmuEmps(IEnumerable<V_KmuEmpDto> v_kmuemps, bool doSaveChanges = true)
		{
			if (v_kmuemps == null)
			{
				return;
			}
			foreach (V_KmuEmpDto instance in v_kmuemps)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_KmuEmpService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteV_KmuEmp(V_KmuEmpDto v_kmuemp, bool doSaveChanges = true)
		{
			this.V_KmuEmpService.Delete(v_kmuemp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteV_KmuEmps(IEnumerable<V_KmuEmpDto> v_kmuemps, bool doSaveChanges = true)
		{
			if (v_kmuemps == null)
			{
				return;
			}
			foreach (V_KmuEmpDto instance in v_kmuemps)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_KmuEmpService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion V_KmuEmp CRUD Operations


		#region FORM_INSTANCE CRUD Operations


		private IFORM_INSTANCEService form_instance;
		public virtual IFORM_INSTANCEService FORM_INSTANCEService
		{
			get
			{
				if (this.form_instance == null)
				{
					IFORM_INSTANCEAssembler assembler = new FORM_INSTANCEAssembler();
					IFORM_INSTANCERepository repository = new FORM_INSTANCERepository(this.UnitOfWork);
					this.form_instance = new FORM_INSTANCEService(assembler, repository);
				}
				return this.form_instance;
			}
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs()
		{
			return this.FORM_INSTANCEService.GetAll();
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs(Expression<Func<FORM_INSTANCE, bool>> filter)
		{
			return this.FORM_INSTANCEService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEs(ISpecification<FORM_INSTANCE> specification)
		{
			return this.FORM_INSTANCEService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCEService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCEDto> ReadFORM_INSTANCEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public FORM_INSTANCEDto ReadFORM_INSTANCEs(string dtoKey)
		{
			return this.FORM_INSTANCEService.GetByKey(dtoKey);
		}


		public int FORM_INSTANCEsCount()
		{
			return this.FORM_INSTANCEService.Count();
		}


		public int FORM_INSTANCEsCountFiltered(string filterExpression)
		{
			return this.FORM_INSTANCEService.Count(filterExpression);
		}


		public string CreateFORM_INSTANCE(FORM_INSTANCEDto form_instance, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCEService.Add(form_instance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE(FORM_INSTANCEDto form_instance, bool doSaveChanges = true)
		{
			this.FORM_INSTANCEService.Update(form_instance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCEs(IEnumerable<FORM_INSTANCEDto> form_instances, bool doSaveChanges = true)
		{
			if (form_instances == null)
			{
				return;
			}
			foreach (FORM_INSTANCEDto instance in form_instances)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE(FORM_INSTANCEDto form_instance, bool doSaveChanges = true)
		{
			this.FORM_INSTANCEService.Delete(form_instance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCEs(IEnumerable<FORM_INSTANCEDto> form_instances, bool doSaveChanges = true)
		{
			if (form_instances == null)
			{
				return;
			}
			foreach (FORM_INSTANCEDto instance in form_instances)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion FORM_INSTANCE CRUD Operations


		#region FORM_INSTANCE_TARGET CRUD Operations


		private IFORM_INSTANCE_TARGETService form_instance_target;
		public virtual IFORM_INSTANCE_TARGETService FORM_INSTANCE_TARGETService
		{
			get
			{
				if (this.form_instance_target == null)
				{
					IFORM_INSTANCE_TARGETAssembler assembler = new FORM_INSTANCE_TARGETAssembler();
					IFORM_INSTANCE_TARGETRepository repository = new FORM_INSTANCE_TARGETRepository(this.UnitOfWork);
					this.form_instance_target = new FORM_INSTANCE_TARGETService(assembler, repository);
				}
				return this.form_instance_target;
			}
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs()
		{
			return this.FORM_INSTANCE_TARGETService.GetAll();
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs(Expression<Func<FORM_INSTANCE_TARGET, bool>> filter)
		{
			return this.FORM_INSTANCE_TARGETService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETs(ISpecification<FORM_INSTANCE_TARGET> specification)
		{
			return this.FORM_INSTANCE_TARGETService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCE_TARGETService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_TARGETService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_TARGETDto> ReadFORM_INSTANCE_TARGETsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_TARGETService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public FORM_INSTANCE_TARGETDto ReadFORM_INSTANCE_TARGETs(string dtoKey)
		{
			return this.FORM_INSTANCE_TARGETService.GetByKey(dtoKey);
		}


		public int FORM_INSTANCE_TARGETsCount()
		{
			return this.FORM_INSTANCE_TARGETService.Count();
		}


		public int FORM_INSTANCE_TARGETsCountFiltered(string filterExpression)
		{
			return this.FORM_INSTANCE_TARGETService.Count(filterExpression);
		}


		public string CreateFORM_INSTANCE_TARGET(FORM_INSTANCE_TARGETDto form_instance_target, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCE_TARGETService.Add(form_instance_target);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE_TARGET(FORM_INSTANCE_TARGETDto form_instance_target, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_TARGETService.Update(form_instance_target);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCE_TARGETs(IEnumerable<FORM_INSTANCE_TARGETDto> form_instance_targets, bool doSaveChanges = true)
		{
			if (form_instance_targets == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_TARGETDto instance in form_instance_targets)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_TARGETService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE_TARGET(FORM_INSTANCE_TARGETDto form_instance_target, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_TARGETService.Delete(form_instance_target);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCE_TARGETs(IEnumerable<FORM_INSTANCE_TARGETDto> form_instance_targets, bool doSaveChanges = true)
		{
			if (form_instance_targets == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_TARGETDto instance in form_instance_targets)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_TARGETService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion FORM_INSTANCE_TARGET CRUD Operations


		#region FORM_TEMPLATE CRUD Operations


		private IFORM_TEMPLATEService form_template;
		public virtual IFORM_TEMPLATEService FORM_TEMPLATEService
		{
			get
			{
				if (this.form_template == null)
				{
					IFORM_TEMPLATEAssembler assembler = new FORM_TEMPLATEAssembler();
					IFORM_TEMPLATERepository repository = new FORM_TEMPLATERepository(this.UnitOfWork);
					this.form_template = new FORM_TEMPLATEService(assembler, repository);
				}
				return this.form_template;
			}
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs()
		{
			return this.FORM_TEMPLATEService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs(Expression<Func<FORM_TEMPLATE, bool>> filter)
		{
			return this.FORM_TEMPLATEService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEs(ISpecification<FORM_TEMPLATE> specification)
		{
			return this.FORM_TEMPLATEService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATEService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATEService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATEDto> ReadFORM_TEMPLATEsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATEService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public FORM_TEMPLATEDto ReadFORM_TEMPLATEs(string dtoKey)
		{
			return this.FORM_TEMPLATEService.GetByKey(dtoKey);
		}


		public int FORM_TEMPLATEsCount()
		{
			return this.FORM_TEMPLATEService.Count();
		}


		public int FORM_TEMPLATEsCountFiltered(string filterExpression)
		{
			return this.FORM_TEMPLATEService.Count(filterExpression);
		}


		public string CreateFORM_TEMPLATE(FORM_TEMPLATEDto form_template, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATEService.Add(form_template);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE(FORM_TEMPLATEDto form_template, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATEService.Update(form_template);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATEs(IEnumerable<FORM_TEMPLATEDto> form_templates, bool doSaveChanges = true)
		{
			if (form_templates == null)
			{
				return;
			}
			foreach (FORM_TEMPLATEDto instance in form_templates)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATEService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE(FORM_TEMPLATEDto form_template, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATEService.Delete(form_template);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATEs(IEnumerable<FORM_TEMPLATEDto> form_templates, bool doSaveChanges = true)
		{
			if (form_templates == null)
			{
				return;
			}
			foreach (FORM_TEMPLATEDto instance in form_templates)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATEService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion FORM_TEMPLATE CRUD Operations


		#region MessageBoard CRUD Operations


		private IMessageBoardService messageboard;
		public virtual IMessageBoardService MessageBoardService
		{
			get
			{
				if (this.messageboard == null)
				{
					IMessageBoardAssembler assembler = new MessageBoardAssembler();
					IMessageBoardRepository repository = new MessageBoardRepository(this.UnitOfWork);
					this.messageboard = new MessageBoardService(assembler, repository);
				}
				return this.messageboard;
			}
		}


		public IEnumerable<MessageBoardDto> ReadMessageBoards()
		{
			return this.MessageBoardService.GetAll();
		}


		public IEnumerable<MessageBoardDto> ReadMessageBoards(Expression<Func<MessageBoard, bool>> filter)
		{
			return this.MessageBoardService.Find(filter);
		}


		public IEnumerable<MessageBoardDto> ReadMessageBoards(ISpecification<MessageBoard> specification)
		{
			return this.MessageBoardService.Find(specification.GetExpression());
		}


		public IEnumerable<MessageBoardDto> ReadMessageBoardsPaged(int startIndex, int pageSize)
		{
			return this.MessageBoardService.Find(startIndex, pageSize);
		}


		public IEnumerable<MessageBoardDto> ReadMessageBoardsFiltered(string sortExpression, string filterExpression)
		{
			return this.MessageBoardService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<MessageBoardDto> ReadMessageBoardsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.MessageBoardService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public MessageBoardDto ReadMessageBoards(string dtoKey)
		{
			return this.MessageBoardService.GetByKey(dtoKey);
		}


		public int MessageBoardsCount()
		{
			return this.MessageBoardService.Count();
		}


		public int MessageBoardsCountFiltered(string filterExpression)
		{
			return this.MessageBoardService.Count(filterExpression);
		}


		public string CreateMessageBoard(MessageBoardDto messageboard, bool doSaveChanges = true)
		{
			string key = this.MessageBoardService.Add(messageboard);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateMessageBoard(MessageBoardDto messageboard, bool doSaveChanges = true)
		{
			this.MessageBoardService.Update(messageboard);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateMessageBoards(IEnumerable<MessageBoardDto> messageboards, bool doSaveChanges = true)
		{
			if (messageboards == null)
			{
				return;
			}
			foreach (MessageBoardDto instance in messageboards)
			{
				if (instance == null)
				{
					continue;
				}


				this.MessageBoardService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteMessageBoard(MessageBoardDto messageboard, bool doSaveChanges = true)
		{
			this.MessageBoardService.Delete(messageboard);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteMessageBoards(IEnumerable<MessageBoardDto> messageboards, bool doSaveChanges = true)
		{
			if (messageboards == null)
			{
				return;
			}
			foreach (MessageBoardDto instance in messageboards)
			{
				if (instance == null)
				{
					continue;
				}


				this.MessageBoardService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion MessageBoard CRUD Operations


		#region AutoEduFormTemplateExcept CRUD Operations


		private IAutoEduFormTemplateExceptService autoeduformtemplateexcept;
		public virtual IAutoEduFormTemplateExceptService AutoEduFormTemplateExceptService
		{
			get
			{
				if (this.autoeduformtemplateexcept == null)
				{
					IAutoEduFormTemplateExceptAssembler assembler = new AutoEduFormTemplateExceptAssembler();
					IAutoEduFormTemplateExceptRepository repository = new AutoEduFormTemplateExceptRepository(this.UnitOfWork);
					this.autoeduformtemplateexcept = new AutoEduFormTemplateExceptService(assembler, repository);
				}
				return this.autoeduformtemplateexcept;
			}
		}


		public IEnumerable<AutoEduFormTemplateExceptDto> ReadAutoEduFormTemplateExcepts()
		{
			return this.AutoEduFormTemplateExceptService.GetAll();
		}


		public IEnumerable<AutoEduFormTemplateExceptDto> ReadAutoEduFormTemplateExcepts(Expression<Func<AutoEduFormTemplateExcept, bool>> filter)
		{
			return this.AutoEduFormTemplateExceptService.Find(filter);
		}


		public IEnumerable<AutoEduFormTemplateExceptDto> ReadAutoEduFormTemplateExcepts(ISpecification<AutoEduFormTemplateExcept> specification)
		{
			return this.AutoEduFormTemplateExceptService.Find(specification.GetExpression());
		}


		public IEnumerable<AutoEduFormTemplateExceptDto> ReadAutoEduFormTemplateExceptsPaged(int startIndex, int pageSize)
		{
			return this.AutoEduFormTemplateExceptService.Find(startIndex, pageSize);
		}


		public IEnumerable<AutoEduFormTemplateExceptDto> ReadAutoEduFormTemplateExceptsFiltered(string sortExpression, string filterExpression)
		{
			return this.AutoEduFormTemplateExceptService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<AutoEduFormTemplateExceptDto> ReadAutoEduFormTemplateExceptsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.AutoEduFormTemplateExceptService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public AutoEduFormTemplateExceptDto ReadAutoEduFormTemplateExcepts(string dtoKey)
		{
			return this.AutoEduFormTemplateExceptService.GetByKey(dtoKey);
		}


		public int AutoEduFormTemplateExceptsCount()
		{
			return this.AutoEduFormTemplateExceptService.Count();
		}


		public int AutoEduFormTemplateExceptsCountFiltered(string filterExpression)
		{
			return this.AutoEduFormTemplateExceptService.Count(filterExpression);
		}


		public string CreateAutoEduFormTemplateExcept(AutoEduFormTemplateExceptDto autoeduformtemplateexcept, bool doSaveChanges = true)
		{
			string key = this.AutoEduFormTemplateExceptService.Add(autoeduformtemplateexcept);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateAutoEduFormTemplateExcept(AutoEduFormTemplateExceptDto autoeduformtemplateexcept, bool doSaveChanges = true)
		{
			this.AutoEduFormTemplateExceptService.Update(autoeduformtemplateexcept);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateAutoEduFormTemplateExcepts(IEnumerable<AutoEduFormTemplateExceptDto> autoeduformtemplateexcepts, bool doSaveChanges = true)
		{
			if (autoeduformtemplateexcepts == null)
			{
				return;
			}
			foreach (AutoEduFormTemplateExceptDto instance in autoeduformtemplateexcepts)
			{
				if (instance == null)
				{
					continue;
				}


				this.AutoEduFormTemplateExceptService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteAutoEduFormTemplateExcept(AutoEduFormTemplateExceptDto autoeduformtemplateexcept, bool doSaveChanges = true)
		{
			this.AutoEduFormTemplateExceptService.Delete(autoeduformtemplateexcept);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteAutoEduFormTemplateExcepts(IEnumerable<AutoEduFormTemplateExceptDto> autoeduformtemplateexcepts, bool doSaveChanges = true)
		{
			if (autoeduformtemplateexcepts == null)
			{
				return;
			}
			foreach (AutoEduFormTemplateExceptDto instance in autoeduformtemplateexcepts)
			{
				if (instance == null)
				{
					continue;
				}


				this.AutoEduFormTemplateExceptService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion AutoEduFormTemplateExcept CRUD Operations


		#region FORM_TEMPLATE_ELEMENT CRUD Operations


		private IFORM_TEMPLATE_ELEMENTService form_template_element;
		public virtual IFORM_TEMPLATE_ELEMENTService FORM_TEMPLATE_ELEMENTService
		{
			get
			{
				if (this.form_template_element == null)
				{
					IFORM_TEMPLATE_ELEMENTAssembler assembler = new FORM_TEMPLATE_ELEMENTAssembler();
					IFORM_TEMPLATE_ELEMENTRepository repository = new FORM_TEMPLATE_ELEMENTRepository(this.UnitOfWork);
					this.form_template_element = new FORM_TEMPLATE_ELEMENTService(assembler, repository);
				}
				return this.form_template_element;
			}
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs()
		{
			return this.FORM_TEMPLATE_ELEMENTService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs(Expression<Func<FORM_TEMPLATE_ELEMENT, bool>> filter)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTs(ISpecification<FORM_TEMPLATE_ELEMENT> specification)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_ELEMENTDto> ReadFORM_TEMPLATE_ELEMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public FORM_TEMPLATE_ELEMENTDto ReadFORM_TEMPLATE_ELEMENTs(string dtoKey)
		{
			return this.FORM_TEMPLATE_ELEMENTService.GetByKey(dtoKey);
		}


		public int FORM_TEMPLATE_ELEMENTsCount()
		{
			return this.FORM_TEMPLATE_ELEMENTService.Count();
		}


		public int FORM_TEMPLATE_ELEMENTsCountFiltered(string filterExpression)
		{
			return this.FORM_TEMPLATE_ELEMENTService.Count(filterExpression);
		}


		public string CreateFORM_TEMPLATE_ELEMENT(FORM_TEMPLATE_ELEMENTDto form_template_element, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_ELEMENTService.Add(form_template_element);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_ELEMENT(FORM_TEMPLATE_ELEMENTDto form_template_element, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_ELEMENTService.Update(form_template_element);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_ELEMENTs(IEnumerable<FORM_TEMPLATE_ELEMENTDto> form_template_elements, bool doSaveChanges = true)
		{
			if (form_template_elements == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_ELEMENTDto instance in form_template_elements)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_ELEMENTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_ELEMENT(FORM_TEMPLATE_ELEMENTDto form_template_element, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_ELEMENTService.Delete(form_template_element);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_ELEMENTs(IEnumerable<FORM_TEMPLATE_ELEMENTDto> form_template_elements, bool doSaveChanges = true)
		{
			if (form_template_elements == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_ELEMENTDto instance in form_template_elements)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_ELEMENTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion FORM_TEMPLATE_ELEMENT CRUD Operations


		#region FORM_INSTANCE_ELEMENT CRUD Operations


		private IFORM_INSTANCE_ELEMENTService form_instance_element;
		public virtual IFORM_INSTANCE_ELEMENTService FORM_INSTANCE_ELEMENTService
		{
			get
			{
				if (this.form_instance_element == null)
				{
					IFORM_INSTANCE_ELEMENTAssembler assembler = new FORM_INSTANCE_ELEMENTAssembler();
					IFORM_INSTANCE_ELEMENTRepository repository = new FORM_INSTANCE_ELEMENTRepository(this.UnitOfWork);
					this.form_instance_element = new FORM_INSTANCE_ELEMENTService(assembler, repository);
				}
				return this.form_instance_element;
			}
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs()
		{
			return this.FORM_INSTANCE_ELEMENTService.GetAll();
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs(Expression<Func<FORM_INSTANCE_ELEMENT, bool>> filter)
		{
			return this.FORM_INSTANCE_ELEMENTService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTs(ISpecification<FORM_INSTANCE_ELEMENT> specification)
		{
			return this.FORM_INSTANCE_ELEMENTService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCE_ELEMENTService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_ELEMENTService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_ELEMENTDto> ReadFORM_INSTANCE_ELEMENTsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_ELEMENTService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public FORM_INSTANCE_ELEMENTDto ReadFORM_INSTANCE_ELEMENTs(string dtoKey)
		{
			return this.FORM_INSTANCE_ELEMENTService.GetByKey(dtoKey);
		}


		public int FORM_INSTANCE_ELEMENTsCount()
		{
			return this.FORM_INSTANCE_ELEMENTService.Count();
		}


		public int FORM_INSTANCE_ELEMENTsCountFiltered(string filterExpression)
		{
			return this.FORM_INSTANCE_ELEMENTService.Count(filterExpression);
		}


		public string CreateFORM_INSTANCE_ELEMENT(FORM_INSTANCE_ELEMENTDto form_instance_element, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCE_ELEMENTService.Add(form_instance_element);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE_ELEMENT(FORM_INSTANCE_ELEMENTDto form_instance_element, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_ELEMENTService.Update(form_instance_element);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCE_ELEMENTs(IEnumerable<FORM_INSTANCE_ELEMENTDto> form_instance_elements, bool doSaveChanges = true)
		{
			if (form_instance_elements == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_ELEMENTDto instance in form_instance_elements)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_ELEMENTService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE_ELEMENT(FORM_INSTANCE_ELEMENTDto form_instance_element, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_ELEMENTService.Delete(form_instance_element);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCE_ELEMENTs(IEnumerable<FORM_INSTANCE_ELEMENTDto> form_instance_elements, bool doSaveChanges = true)
		{
			if (form_instance_elements == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_ELEMENTDto instance in form_instance_elements)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_ELEMENTService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion FORM_INSTANCE_ELEMENT CRUD Operations


		#region EduFormStasticPermission CRUD Operations


		private IEduFormStasticPermissionService eduformstasticpermission;
		public virtual IEduFormStasticPermissionService EduFormStasticPermissionService
		{
			get
			{
				if (this.eduformstasticpermission == null)
				{
					IEduFormStasticPermissionAssembler assembler = new EduFormStasticPermissionAssembler();
					IEduFormStasticPermissionRepository repository = new EduFormStasticPermissionRepository(this.UnitOfWork);
					this.eduformstasticpermission = new EduFormStasticPermissionService(assembler, repository);
				}
				return this.eduformstasticpermission;
			}
		}


		public IEnumerable<EduFormStasticPermissionDto> ReadEduFormStasticPermissions()
		{
			return this.EduFormStasticPermissionService.GetAll();
		}


		public IEnumerable<EduFormStasticPermissionDto> ReadEduFormStasticPermissions(Expression<Func<EduFormStasticPermission, bool>> filter)
		{
			return this.EduFormStasticPermissionService.Find(filter);
		}


		public IEnumerable<EduFormStasticPermissionDto> ReadEduFormStasticPermissions(ISpecification<EduFormStasticPermission> specification)
		{
			return this.EduFormStasticPermissionService.Find(specification.GetExpression());
		}


		public IEnumerable<EduFormStasticPermissionDto> ReadEduFormStasticPermissionsPaged(int startIndex, int pageSize)
		{
			return this.EduFormStasticPermissionService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduFormStasticPermissionDto> ReadEduFormStasticPermissionsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduFormStasticPermissionService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduFormStasticPermissionDto> ReadEduFormStasticPermissionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduFormStasticPermissionService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduFormStasticPermissionDto ReadEduFormStasticPermissions(string dtoKey)
		{
			return this.EduFormStasticPermissionService.GetByKey(dtoKey);
		}


		public int EduFormStasticPermissionsCount()
		{
			return this.EduFormStasticPermissionService.Count();
		}


		public int EduFormStasticPermissionsCountFiltered(string filterExpression)
		{
			return this.EduFormStasticPermissionService.Count(filterExpression);
		}


		public string CreateEduFormStasticPermission(EduFormStasticPermissionDto eduformstasticpermission, bool doSaveChanges = true)
		{
			string key = this.EduFormStasticPermissionService.Add(eduformstasticpermission);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduFormStasticPermission(EduFormStasticPermissionDto eduformstasticpermission, bool doSaveChanges = true)
		{
			this.EduFormStasticPermissionService.Update(eduformstasticpermission);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduFormStasticPermissions(IEnumerable<EduFormStasticPermissionDto> eduformstasticpermissions, bool doSaveChanges = true)
		{
			if (eduformstasticpermissions == null)
			{
				return;
			}
			foreach (EduFormStasticPermissionDto instance in eduformstasticpermissions)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduFormStasticPermissionService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduFormStasticPermission(EduFormStasticPermissionDto eduformstasticpermission, bool doSaveChanges = true)
		{
			this.EduFormStasticPermissionService.Delete(eduformstasticpermission);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduFormStasticPermissions(IEnumerable<EduFormStasticPermissionDto> eduformstasticpermissions, bool doSaveChanges = true)
		{
			if (eduformstasticpermissions == null)
			{
				return;
			}
			foreach (EduFormStasticPermissionDto instance in eduformstasticpermissions)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduFormStasticPermissionService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduFormStasticPermission CRUD Operations


		#region DepSecDatum CRUD Operations


		private IDepSecDatumService depsecdatum;
		public virtual IDepSecDatumService DepSecDatumService
		{
			get
			{
				if (this.depsecdatum == null)
				{
					IDepSecDatumAssembler assembler = new DepSecDatumAssembler();
					IDepSecDatumRepository repository = new DepSecDatumRepository(this.UnitOfWork);
					this.depsecdatum = new DepSecDatumService(assembler, repository);
				}
				return this.depsecdatum;
			}
		}


		public IEnumerable<DepSecDatumDto> ReadDepSecData()
		{
			return this.DepSecDatumService.GetAll();
		}


		public IEnumerable<DepSecDatumDto> ReadDepSecData(Expression<Func<DepSecDatum, bool>> filter)
		{
			return this.DepSecDatumService.Find(filter);
		}


		public IEnumerable<DepSecDatumDto> ReadDepSecData(ISpecification<DepSecDatum> specification)
		{
			return this.DepSecDatumService.Find(specification.GetExpression());
		}


		public IEnumerable<DepSecDatumDto> ReadDepSecDataPaged(int startIndex, int pageSize)
		{
			return this.DepSecDatumService.Find(startIndex, pageSize);
		}


		public IEnumerable<DepSecDatumDto> ReadDepSecDataFiltered(string sortExpression, string filterExpression)
		{
			return this.DepSecDatumService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<DepSecDatumDto> ReadDepSecDataPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.DepSecDatumService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public DepSecDatumDto ReadDepSecData(string dtoKey)
		{
			return this.DepSecDatumService.GetByKey(dtoKey);
		}


		public int DepSecDataCount()
		{
			return this.DepSecDatumService.Count();
		}


		public int DepSecDataCountFiltered(string filterExpression)
		{
			return this.DepSecDatumService.Count(filterExpression);
		}


		public string CreateDepSecDatum(DepSecDatumDto depsecdatum, bool doSaveChanges = true)
		{
			string key = this.DepSecDatumService.Add(depsecdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateDepSecDatum(DepSecDatumDto depsecdatum, bool doSaveChanges = true)
		{
			this.DepSecDatumService.Update(depsecdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateDepSecData(IEnumerable<DepSecDatumDto> depsecdata, bool doSaveChanges = true)
		{
			if (depsecdata == null)
			{
				return;
			}
			foreach (DepSecDatumDto instance in depsecdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.DepSecDatumService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteDepSecDatum(DepSecDatumDto depsecdatum, bool doSaveChanges = true)
		{
			this.DepSecDatumService.Delete(depsecdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteDepSecData(IEnumerable<DepSecDatumDto> depsecdata, bool doSaveChanges = true)
		{
			if (depsecdata == null)
			{
				return;
			}
			foreach (DepSecDatumDto instance in depsecdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.DepSecDatumService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion DepSecDatum CRUD Operations


		#region TeachTimeType CRUD Operations


		private ITeachTimeTypeService teachtimetype;
		public virtual ITeachTimeTypeService TeachTimeTypeService
		{
			get
			{
				if (this.teachtimetype == null)
				{
					ITeachTimeTypeAssembler assembler = new TeachTimeTypeAssembler();
					ITeachTimeTypeRepository repository = new TeachTimeTypeRepository(this.UnitOfWork);
					this.teachtimetype = new TeachTimeTypeService(assembler, repository);
				}
				return this.teachtimetype;
			}
		}


		public IEnumerable<TeachTimeTypeDto> ReadTeachTimeTypes()
		{
			return this.TeachTimeTypeService.GetAll();
		}


		public IEnumerable<TeachTimeTypeDto> ReadTeachTimeTypes(Expression<Func<TeachTimeType, bool>> filter)
		{
			return this.TeachTimeTypeService.Find(filter);
		}


		public IEnumerable<TeachTimeTypeDto> ReadTeachTimeTypes(ISpecification<TeachTimeType> specification)
		{
			return this.TeachTimeTypeService.Find(specification.GetExpression());
		}


		public IEnumerable<TeachTimeTypeDto> ReadTeachTimeTypesPaged(int startIndex, int pageSize)
		{
			return this.TeachTimeTypeService.Find(startIndex, pageSize);
		}


		public IEnumerable<TeachTimeTypeDto> ReadTeachTimeTypesFiltered(string sortExpression, string filterExpression)
		{
			return this.TeachTimeTypeService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TeachTimeTypeDto> ReadTeachTimeTypesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TeachTimeTypeService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public TeachTimeTypeDto ReadTeachTimeTypes(string dtoKey)
		{
			return this.TeachTimeTypeService.GetByKey(dtoKey);
		}


		public int TeachTimeTypesCount()
		{
			return this.TeachTimeTypeService.Count();
		}


		public int TeachTimeTypesCountFiltered(string filterExpression)
		{
			return this.TeachTimeTypeService.Count(filterExpression);
		}


		public string CreateTeachTimeType(TeachTimeTypeDto teachtimetype, bool doSaveChanges = true)
		{
			string key = this.TeachTimeTypeService.Add(teachtimetype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTeachTimeType(TeachTimeTypeDto teachtimetype, bool doSaveChanges = true)
		{
			this.TeachTimeTypeService.Update(teachtimetype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTeachTimeTypes(IEnumerable<TeachTimeTypeDto> teachtimetypes, bool doSaveChanges = true)
		{
			if (teachtimetypes == null)
			{
				return;
			}
			foreach (TeachTimeTypeDto instance in teachtimetypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachTimeTypeService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTeachTimeType(TeachTimeTypeDto teachtimetype, bool doSaveChanges = true)
		{
			this.TeachTimeTypeService.Delete(teachtimetype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTeachTimeTypes(IEnumerable<TeachTimeTypeDto> teachtimetypes, bool doSaveChanges = true)
		{
			if (teachtimetypes == null)
			{
				return;
			}
			foreach (TeachTimeTypeDto instance in teachtimetypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachTimeTypeService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion TeachTimeType CRUD Operations


		#region TeachTimeRate CRUD Operations


		private ITeachTimeRateService teachtimerate;
		public virtual ITeachTimeRateService TeachTimeRateService
		{
			get
			{
				if (this.teachtimerate == null)
				{
					ITeachTimeRateAssembler assembler = new TeachTimeRateAssembler();
					ITeachTimeRateRepository repository = new TeachTimeRateRepository(this.UnitOfWork);
					this.teachtimerate = new TeachTimeRateService(assembler, repository);
				}
				return this.teachtimerate;
			}
		}


		public IEnumerable<TeachTimeRateDto> ReadTeachTimeRates()
		{
			return this.TeachTimeRateService.GetAll();
		}


		public IEnumerable<TeachTimeRateDto> ReadTeachTimeRates(Expression<Func<TeachTimeRate, bool>> filter)
		{
			return this.TeachTimeRateService.Find(filter);
		}


		public IEnumerable<TeachTimeRateDto> ReadTeachTimeRates(ISpecification<TeachTimeRate> specification)
		{
			return this.TeachTimeRateService.Find(specification.GetExpression());
		}


		public IEnumerable<TeachTimeRateDto> ReadTeachTimeRatesPaged(int startIndex, int pageSize)
		{
			return this.TeachTimeRateService.Find(startIndex, pageSize);
		}


		public IEnumerable<TeachTimeRateDto> ReadTeachTimeRatesFiltered(string sortExpression, string filterExpression)
		{
			return this.TeachTimeRateService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TeachTimeRateDto> ReadTeachTimeRatesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TeachTimeRateService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public TeachTimeRateDto ReadTeachTimeRates(string dtoKey)
		{
			return this.TeachTimeRateService.GetByKey(dtoKey);
		}


		public int TeachTimeRatesCount()
		{
			return this.TeachTimeRateService.Count();
		}


		public int TeachTimeRatesCountFiltered(string filterExpression)
		{
			return this.TeachTimeRateService.Count(filterExpression);
		}


		public string CreateTeachTimeRate(TeachTimeRateDto teachtimerate, bool doSaveChanges = true)
		{
			string key = this.TeachTimeRateService.Add(teachtimerate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTeachTimeRate(TeachTimeRateDto teachtimerate, bool doSaveChanges = true)
		{
			this.TeachTimeRateService.Update(teachtimerate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTeachTimeRates(IEnumerable<TeachTimeRateDto> teachtimerates, bool doSaveChanges = true)
		{
			if (teachtimerates == null)
			{
				return;
			}
			foreach (TeachTimeRateDto instance in teachtimerates)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachTimeRateService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTeachTimeRate(TeachTimeRateDto teachtimerate, bool doSaveChanges = true)
		{
			this.TeachTimeRateService.Delete(teachtimerate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTeachTimeRates(IEnumerable<TeachTimeRateDto> teachtimerates, bool doSaveChanges = true)
		{
			if (teachtimerates == null)
			{
				return;
			}
			foreach (TeachTimeRateDto instance in teachtimerates)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachTimeRateService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion TeachTimeRate CRUD Operations


		#region NewsViewTarget CRUD Operations


		private INewsViewTargetService newsviewtarget;
		public virtual INewsViewTargetService NewsViewTargetService
		{
			get
			{
				if (this.newsviewtarget == null)
				{
					INewsViewTargetAssembler assembler = new NewsViewTargetAssembler();
					INewsViewTargetRepository repository = new NewsViewTargetRepository(this.UnitOfWork);
					this.newsviewtarget = new NewsViewTargetService(assembler, repository);
				}
				return this.newsviewtarget;
			}
		}


		public IEnumerable<NewsViewTargetDto> ReadNewsViewTargets()
		{
			return this.NewsViewTargetService.GetAll();
		}


		public IEnumerable<NewsViewTargetDto> ReadNewsViewTargets(Expression<Func<NewsViewTarget, bool>> filter)
		{
			return this.NewsViewTargetService.Find(filter);
		}


		public IEnumerable<NewsViewTargetDto> ReadNewsViewTargets(ISpecification<NewsViewTarget> specification)
		{
			return this.NewsViewTargetService.Find(specification.GetExpression());
		}


		public IEnumerable<NewsViewTargetDto> ReadNewsViewTargetsPaged(int startIndex, int pageSize)
		{
			return this.NewsViewTargetService.Find(startIndex, pageSize);
		}


		public IEnumerable<NewsViewTargetDto> ReadNewsViewTargetsFiltered(string sortExpression, string filterExpression)
		{
			return this.NewsViewTargetService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<NewsViewTargetDto> ReadNewsViewTargetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.NewsViewTargetService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public NewsViewTargetDto ReadNewsViewTargets(string dtoKey)
		{
			return this.NewsViewTargetService.GetByKey(dtoKey);
		}


		public int NewsViewTargetsCount()
		{
			return this.NewsViewTargetService.Count();
		}


		public int NewsViewTargetsCountFiltered(string filterExpression)
		{
			return this.NewsViewTargetService.Count(filterExpression);
		}


		public string CreateNewsViewTarget(NewsViewTargetDto newsviewtarget, bool doSaveChanges = true)
		{
			string key = this.NewsViewTargetService.Add(newsviewtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateNewsViewTarget(NewsViewTargetDto newsviewtarget, bool doSaveChanges = true)
		{
			this.NewsViewTargetService.Update(newsviewtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateNewsViewTargets(IEnumerable<NewsViewTargetDto> newsviewtargets, bool doSaveChanges = true)
		{
			if (newsviewtargets == null)
			{
				return;
			}
			foreach (NewsViewTargetDto instance in newsviewtargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.NewsViewTargetService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteNewsViewTarget(NewsViewTargetDto newsviewtarget, bool doSaveChanges = true)
		{
			this.NewsViewTargetService.Delete(newsviewtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteNewsViewTargets(IEnumerable<NewsViewTargetDto> newsviewtargets, bool doSaveChanges = true)
		{
			if (newsviewtargets == null)
			{
				return;
			}
			foreach (NewsViewTargetDto instance in newsviewtargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.NewsViewTargetService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion NewsViewTarget CRUD Operations


		#region HealTeachTime CRUD Operations


		private IHealTeachTimeService healteachtime;
		public virtual IHealTeachTimeService HealTeachTimeService
		{
			get
			{
				if (this.healteachtime == null)
				{
					IHealTeachTimeAssembler assembler = new HealTeachTimeAssembler();
					IHealTeachTimeRepository repository = new HealTeachTimeRepository(this.UnitOfWork);
					this.healteachtime = new HealTeachTimeService(assembler, repository);
				}
				return this.healteachtime;
			}
		}


		public IEnumerable<HealTeachTimeDto> ReadHealTeachTimes()
		{
			return this.HealTeachTimeService.GetAll();
		}


		public IEnumerable<HealTeachTimeDto> ReadHealTeachTimes(Expression<Func<HealTeachTime, bool>> filter)
		{
			return this.HealTeachTimeService.Find(filter);
		}


		public IEnumerable<HealTeachTimeDto> ReadHealTeachTimes(ISpecification<HealTeachTime> specification)
		{
			return this.HealTeachTimeService.Find(specification.GetExpression());
		}


		public IEnumerable<HealTeachTimeDto> ReadHealTeachTimesPaged(int startIndex, int pageSize)
		{
			return this.HealTeachTimeService.Find(startIndex, pageSize);
		}


		public IEnumerable<HealTeachTimeDto> ReadHealTeachTimesFiltered(string sortExpression, string filterExpression)
		{
			return this.HealTeachTimeService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<HealTeachTimeDto> ReadHealTeachTimesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.HealTeachTimeService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public HealTeachTimeDto ReadHealTeachTimes(string dtoKey)
		{
			return this.HealTeachTimeService.GetByKey(dtoKey);
		}


		public int HealTeachTimesCount()
		{
			return this.HealTeachTimeService.Count();
		}


		public int HealTeachTimesCountFiltered(string filterExpression)
		{
			return this.HealTeachTimeService.Count(filterExpression);
		}


		public string CreateHealTeachTime(HealTeachTimeDto healteachtime, bool doSaveChanges = true)
		{
			string key = this.HealTeachTimeService.Add(healteachtime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateHealTeachTime(HealTeachTimeDto healteachtime, bool doSaveChanges = true)
		{
			this.HealTeachTimeService.Update(healteachtime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateHealTeachTimes(IEnumerable<HealTeachTimeDto> healteachtimes, bool doSaveChanges = true)
		{
			if (healteachtimes == null)
			{
				return;
			}
			foreach (HealTeachTimeDto instance in healteachtimes)
			{
				if (instance == null)
				{
					continue;
				}


				this.HealTeachTimeService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteHealTeachTime(HealTeachTimeDto healteachtime, bool doSaveChanges = true)
		{
			this.HealTeachTimeService.Delete(healteachtime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteHealTeachTimes(IEnumerable<HealTeachTimeDto> healteachtimes, bool doSaveChanges = true)
		{
			if (healteachtimes == null)
			{
				return;
			}
			foreach (HealTeachTimeDto instance in healteachtimes)
			{
				if (instance == null)
				{
					continue;
				}


				this.HealTeachTimeService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion HealTeachTime CRUD Operations


		#region ScoreSettingJob CRUD Operations


		private IScoreSettingJobService scoresettingjob;
		public virtual IScoreSettingJobService ScoreSettingJobService
		{
			get
			{
				if (this.scoresettingjob == null)
				{
					IScoreSettingJobAssembler assembler = new ScoreSettingJobAssembler();
					IScoreSettingJobRepository repository = new ScoreSettingJobRepository(this.UnitOfWork);
					this.scoresettingjob = new ScoreSettingJobService(assembler, repository);
				}
				return this.scoresettingjob;
			}
		}


		public IEnumerable<ScoreSettingJobDto> ReadScoreSettingJobs()
		{
			return this.ScoreSettingJobService.GetAll();
		}


		public IEnumerable<ScoreSettingJobDto> ReadScoreSettingJobs(Expression<Func<ScoreSettingJob, bool>> filter)
		{
			return this.ScoreSettingJobService.Find(filter);
		}


		public IEnumerable<ScoreSettingJobDto> ReadScoreSettingJobs(ISpecification<ScoreSettingJob> specification)
		{
			return this.ScoreSettingJobService.Find(specification.GetExpression());
		}


		public IEnumerable<ScoreSettingJobDto> ReadScoreSettingJobsPaged(int startIndex, int pageSize)
		{
			return this.ScoreSettingJobService.Find(startIndex, pageSize);
		}


		public IEnumerable<ScoreSettingJobDto> ReadScoreSettingJobsFiltered(string sortExpression, string filterExpression)
		{
			return this.ScoreSettingJobService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ScoreSettingJobDto> ReadScoreSettingJobsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ScoreSettingJobService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public ScoreSettingJobDto ReadScoreSettingJobs(string dtoKey)
		{
			return this.ScoreSettingJobService.GetByKey(dtoKey);
		}


		public int ScoreSettingJobsCount()
		{
			return this.ScoreSettingJobService.Count();
		}


		public int ScoreSettingJobsCountFiltered(string filterExpression)
		{
			return this.ScoreSettingJobService.Count(filterExpression);
		}


		public string CreateScoreSettingJob(ScoreSettingJobDto scoresettingjob, bool doSaveChanges = true)
		{
			string key = this.ScoreSettingJobService.Add(scoresettingjob);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateScoreSettingJob(ScoreSettingJobDto scoresettingjob, bool doSaveChanges = true)
		{
			this.ScoreSettingJobService.Update(scoresettingjob);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateScoreSettingJobs(IEnumerable<ScoreSettingJobDto> scoresettingjobs, bool doSaveChanges = true)
		{
			if (scoresettingjobs == null)
			{
				return;
			}
			foreach (ScoreSettingJobDto instance in scoresettingjobs)
			{
				if (instance == null)
				{
					continue;
				}


				this.ScoreSettingJobService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteScoreSettingJob(ScoreSettingJobDto scoresettingjob, bool doSaveChanges = true)
		{
			this.ScoreSettingJobService.Delete(scoresettingjob);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteScoreSettingJobs(IEnumerable<ScoreSettingJobDto> scoresettingjobs, bool doSaveChanges = true)
		{
			if (scoresettingjobs == null)
			{
				return;
			}
			foreach (ScoreSettingJobDto instance in scoresettingjobs)
			{
				if (instance == null)
				{
					continue;
				}


				this.ScoreSettingJobService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion ScoreSettingJob CRUD Operations


		#region ScoreSettingDetail CRUD Operations


		private IScoreSettingDetailService scoresettingdetail;
		public virtual IScoreSettingDetailService ScoreSettingDetailService
		{
			get
			{
				if (this.scoresettingdetail == null)
				{
					IScoreSettingDetailAssembler assembler = new ScoreSettingDetailAssembler();
					IScoreSettingDetailRepository repository = new ScoreSettingDetailRepository(this.UnitOfWork);
					this.scoresettingdetail = new ScoreSettingDetailService(assembler, repository);
				}
				return this.scoresettingdetail;
			}
		}


		public IEnumerable<ScoreSettingDetailDto> ReadScoreSettingDetails()
		{
			return this.ScoreSettingDetailService.GetAll();
		}


		public IEnumerable<ScoreSettingDetailDto> ReadScoreSettingDetails(Expression<Func<ScoreSettingDetail, bool>> filter)
		{
			return this.ScoreSettingDetailService.Find(filter);
		}


		public IEnumerable<ScoreSettingDetailDto> ReadScoreSettingDetails(ISpecification<ScoreSettingDetail> specification)
		{
			return this.ScoreSettingDetailService.Find(specification.GetExpression());
		}


		public IEnumerable<ScoreSettingDetailDto> ReadScoreSettingDetailsPaged(int startIndex, int pageSize)
		{
			return this.ScoreSettingDetailService.Find(startIndex, pageSize);
		}


		public IEnumerable<ScoreSettingDetailDto> ReadScoreSettingDetailsFiltered(string sortExpression, string filterExpression)
		{
			return this.ScoreSettingDetailService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ScoreSettingDetailDto> ReadScoreSettingDetailsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ScoreSettingDetailService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public ScoreSettingDetailDto ReadScoreSettingDetails(string dtoKey)
		{
			return this.ScoreSettingDetailService.GetByKey(dtoKey);
		}


		public int ScoreSettingDetailsCount()
		{
			return this.ScoreSettingDetailService.Count();
		}


		public int ScoreSettingDetailsCountFiltered(string filterExpression)
		{
			return this.ScoreSettingDetailService.Count(filterExpression);
		}


		public string CreateScoreSettingDetail(ScoreSettingDetailDto scoresettingdetail, bool doSaveChanges = true)
		{
			string key = this.ScoreSettingDetailService.Add(scoresettingdetail);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateScoreSettingDetail(ScoreSettingDetailDto scoresettingdetail, bool doSaveChanges = true)
		{
			this.ScoreSettingDetailService.Update(scoresettingdetail);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateScoreSettingDetails(IEnumerable<ScoreSettingDetailDto> scoresettingdetails, bool doSaveChanges = true)
		{
			if (scoresettingdetails == null)
			{
				return;
			}
			foreach (ScoreSettingDetailDto instance in scoresettingdetails)
			{
				if (instance == null)
				{
					continue;
				}


				this.ScoreSettingDetailService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteScoreSettingDetail(ScoreSettingDetailDto scoresettingdetail, bool doSaveChanges = true)
		{
			this.ScoreSettingDetailService.Delete(scoresettingdetail);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteScoreSettingDetails(IEnumerable<ScoreSettingDetailDto> scoresettingdetails, bool doSaveChanges = true)
		{
			if (scoresettingdetails == null)
			{
				return;
			}
			foreach (ScoreSettingDetailDto instance in scoresettingdetails)
			{
				if (instance == null)
				{
					continue;
				}


				this.ScoreSettingDetailService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion ScoreSettingDetail CRUD Operations


		#region ScoreSetting CRUD Operations


		private IScoreSettingService scoresetting;
		public virtual IScoreSettingService ScoreSettingService
		{
			get
			{
				if (this.scoresetting == null)
				{
					IScoreSettingAssembler assembler = new ScoreSettingAssembler();
					IScoreSettingRepository repository = new ScoreSettingRepository(this.UnitOfWork);
					this.scoresetting = new ScoreSettingService(assembler, repository);
				}
				return this.scoresetting;
			}
		}


		public IEnumerable<ScoreSettingDto> ReadScoreSettings()
		{
			return this.ScoreSettingService.GetAll();
		}


		public IEnumerable<ScoreSettingDto> ReadScoreSettings(Expression<Func<ScoreSetting, bool>> filter)
		{
			return this.ScoreSettingService.Find(filter);
		}


		public IEnumerable<ScoreSettingDto> ReadScoreSettings(ISpecification<ScoreSetting> specification)
		{
			return this.ScoreSettingService.Find(specification.GetExpression());
		}


		public IEnumerable<ScoreSettingDto> ReadScoreSettingsPaged(int startIndex, int pageSize)
		{
			return this.ScoreSettingService.Find(startIndex, pageSize);
		}


		public IEnumerable<ScoreSettingDto> ReadScoreSettingsFiltered(string sortExpression, string filterExpression)
		{
			return this.ScoreSettingService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ScoreSettingDto> ReadScoreSettingsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ScoreSettingService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public ScoreSettingDto ReadScoreSettings(string dtoKey)
		{
			return this.ScoreSettingService.GetByKey(dtoKey);
		}


		public int ScoreSettingsCount()
		{
			return this.ScoreSettingService.Count();
		}


		public int ScoreSettingsCountFiltered(string filterExpression)
		{
			return this.ScoreSettingService.Count(filterExpression);
		}


		public string CreateScoreSetting(ScoreSettingDto scoresetting, bool doSaveChanges = true)
		{
			string key = this.ScoreSettingService.Add(scoresetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateScoreSetting(ScoreSettingDto scoresetting, bool doSaveChanges = true)
		{
			this.ScoreSettingService.Update(scoresetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateScoreSettings(IEnumerable<ScoreSettingDto> scoresettings, bool doSaveChanges = true)
		{
			if (scoresettings == null)
			{
				return;
			}
			foreach (ScoreSettingDto instance in scoresettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.ScoreSettingService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteScoreSetting(ScoreSettingDto scoresetting, bool doSaveChanges = true)
		{
			this.ScoreSettingService.Delete(scoresetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteScoreSettings(IEnumerable<ScoreSettingDto> scoresettings, bool doSaveChanges = true)
		{
			if (scoresettings == null)
			{
				return;
			}
			foreach (ScoreSettingDto instance in scoresettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.ScoreSettingService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion ScoreSetting CRUD Operations


		#region ScoreInstanceDetail CRUD Operations


		private IScoreInstanceDetailService scoreinstancedetail;
		public virtual IScoreInstanceDetailService ScoreInstanceDetailService
		{
			get
			{
				if (this.scoreinstancedetail == null)
				{
					IScoreInstanceDetailAssembler assembler = new ScoreInstanceDetailAssembler();
					IScoreInstanceDetailRepository repository = new ScoreInstanceDetailRepository(this.UnitOfWork);
					this.scoreinstancedetail = new ScoreInstanceDetailService(assembler, repository);
				}
				return this.scoreinstancedetail;
			}
		}


		public IEnumerable<ScoreInstanceDetailDto> ReadScoreInstanceDetails()
		{
			return this.ScoreInstanceDetailService.GetAll();
		}


		public IEnumerable<ScoreInstanceDetailDto> ReadScoreInstanceDetails(Expression<Func<ScoreInstanceDetail, bool>> filter)
		{
			return this.ScoreInstanceDetailService.Find(filter);
		}


		public IEnumerable<ScoreInstanceDetailDto> ReadScoreInstanceDetails(ISpecification<ScoreInstanceDetail> specification)
		{
			return this.ScoreInstanceDetailService.Find(specification.GetExpression());
		}


		public IEnumerable<ScoreInstanceDetailDto> ReadScoreInstanceDetailsPaged(int startIndex, int pageSize)
		{
			return this.ScoreInstanceDetailService.Find(startIndex, pageSize);
		}


		public IEnumerable<ScoreInstanceDetailDto> ReadScoreInstanceDetailsFiltered(string sortExpression, string filterExpression)
		{
			return this.ScoreInstanceDetailService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ScoreInstanceDetailDto> ReadScoreInstanceDetailsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ScoreInstanceDetailService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public ScoreInstanceDetailDto ReadScoreInstanceDetails(string dtoKey)
		{
			return this.ScoreInstanceDetailService.GetByKey(dtoKey);
		}


		public int ScoreInstanceDetailsCount()
		{
			return this.ScoreInstanceDetailService.Count();
		}


		public int ScoreInstanceDetailsCountFiltered(string filterExpression)
		{
			return this.ScoreInstanceDetailService.Count(filterExpression);
		}


		public string CreateScoreInstanceDetail(ScoreInstanceDetailDto scoreinstancedetail, bool doSaveChanges = true)
		{
			string key = this.ScoreInstanceDetailService.Add(scoreinstancedetail);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateScoreInstanceDetail(ScoreInstanceDetailDto scoreinstancedetail, bool doSaveChanges = true)
		{
			this.ScoreInstanceDetailService.Update(scoreinstancedetail);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateScoreInstanceDetails(IEnumerable<ScoreInstanceDetailDto> scoreinstancedetails, bool doSaveChanges = true)
		{
			if (scoreinstancedetails == null)
			{
				return;
			}
			foreach (ScoreInstanceDetailDto instance in scoreinstancedetails)
			{
				if (instance == null)
				{
					continue;
				}


				this.ScoreInstanceDetailService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteScoreInstanceDetail(ScoreInstanceDetailDto scoreinstancedetail, bool doSaveChanges = true)
		{
			this.ScoreInstanceDetailService.Delete(scoreinstancedetail);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteScoreInstanceDetails(IEnumerable<ScoreInstanceDetailDto> scoreinstancedetails, bool doSaveChanges = true)
		{
			if (scoreinstancedetails == null)
			{
				return;
			}
			foreach (ScoreInstanceDetailDto instance in scoreinstancedetails)
			{
				if (instance == null)
				{
					continue;
				}


				this.ScoreInstanceDetailService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion ScoreInstanceDetail CRUD Operations


		#region ScoreInstance CRUD Operations


		private IScoreInstanceService scoreinstance;
		public virtual IScoreInstanceService ScoreInstanceService
		{
			get
			{
				if (this.scoreinstance == null)
				{
					IScoreInstanceAssembler assembler = new ScoreInstanceAssembler();
					IScoreInstanceRepository repository = new ScoreInstanceRepository(this.UnitOfWork);
					this.scoreinstance = new ScoreInstanceService(assembler, repository);
				}
				return this.scoreinstance;
			}
		}


		public IEnumerable<ScoreInstanceDto> ReadScoreInstances()
		{
			return this.ScoreInstanceService.GetAll();
		}


		public IEnumerable<ScoreInstanceDto> ReadScoreInstances(Expression<Func<ScoreInstance, bool>> filter)
		{
			return this.ScoreInstanceService.Find(filter);
		}


		public IEnumerable<ScoreInstanceDto> ReadScoreInstances(ISpecification<ScoreInstance> specification)
		{
			return this.ScoreInstanceService.Find(specification.GetExpression());
		}


		public IEnumerable<ScoreInstanceDto> ReadScoreInstancesPaged(int startIndex, int pageSize)
		{
			return this.ScoreInstanceService.Find(startIndex, pageSize);
		}


		public IEnumerable<ScoreInstanceDto> ReadScoreInstancesFiltered(string sortExpression, string filterExpression)
		{
			return this.ScoreInstanceService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ScoreInstanceDto> ReadScoreInstancesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ScoreInstanceService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public ScoreInstanceDto ReadScoreInstances(string dtoKey)
		{
			return this.ScoreInstanceService.GetByKey(dtoKey);
		}


		public int ScoreInstancesCount()
		{
			return this.ScoreInstanceService.Count();
		}


		public int ScoreInstancesCountFiltered(string filterExpression)
		{
			return this.ScoreInstanceService.Count(filterExpression);
		}


		public string CreateScoreInstance(ScoreInstanceDto scoreinstance, bool doSaveChanges = true)
		{
			string key = this.ScoreInstanceService.Add(scoreinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateScoreInstance(ScoreInstanceDto scoreinstance, bool doSaveChanges = true)
		{
			this.ScoreInstanceService.Update(scoreinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateScoreInstances(IEnumerable<ScoreInstanceDto> scoreinstances, bool doSaveChanges = true)
		{
			if (scoreinstances == null)
			{
				return;
			}
			foreach (ScoreInstanceDto instance in scoreinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.ScoreInstanceService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteScoreInstance(ScoreInstanceDto scoreinstance, bool doSaveChanges = true)
		{
			this.ScoreInstanceService.Delete(scoreinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteScoreInstances(IEnumerable<ScoreInstanceDto> scoreinstances, bool doSaveChanges = true)
		{
			if (scoreinstances == null)
			{
				return;
			}
			foreach (ScoreInstanceDto instance in scoreinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.ScoreInstanceService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion ScoreInstance CRUD Operations


		#region HealTeachTimeRate CRUD Operations


		private IHealTeachTimeRateService healteachtimerate;
		public virtual IHealTeachTimeRateService HealTeachTimeRateService
		{
			get
			{
				if (this.healteachtimerate == null)
				{
					IHealTeachTimeRateAssembler assembler = new HealTeachTimeRateAssembler();
					IHealTeachTimeRateRepository repository = new HealTeachTimeRateRepository(this.UnitOfWork);
					this.healteachtimerate = new HealTeachTimeRateService(assembler, repository);
				}
				return this.healteachtimerate;
			}
		}


		public IEnumerable<HealTeachTimeRateDto> ReadHealTeachTimeRates()
		{
			return this.HealTeachTimeRateService.GetAll();
		}


		public IEnumerable<HealTeachTimeRateDto> ReadHealTeachTimeRates(Expression<Func<HealTeachTimeRate, bool>> filter)
		{
			return this.HealTeachTimeRateService.Find(filter);
		}


		public IEnumerable<HealTeachTimeRateDto> ReadHealTeachTimeRates(ISpecification<HealTeachTimeRate> specification)
		{
			return this.HealTeachTimeRateService.Find(specification.GetExpression());
		}


		public IEnumerable<HealTeachTimeRateDto> ReadHealTeachTimeRatesPaged(int startIndex, int pageSize)
		{
			return this.HealTeachTimeRateService.Find(startIndex, pageSize);
		}


		public IEnumerable<HealTeachTimeRateDto> ReadHealTeachTimeRatesFiltered(string sortExpression, string filterExpression)
		{
			return this.HealTeachTimeRateService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<HealTeachTimeRateDto> ReadHealTeachTimeRatesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.HealTeachTimeRateService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public HealTeachTimeRateDto ReadHealTeachTimeRates(string dtoKey)
		{
			return this.HealTeachTimeRateService.GetByKey(dtoKey);
		}


		public int HealTeachTimeRatesCount()
		{
			return this.HealTeachTimeRateService.Count();
		}


		public int HealTeachTimeRatesCountFiltered(string filterExpression)
		{
			return this.HealTeachTimeRateService.Count(filterExpression);
		}


		public string CreateHealTeachTimeRate(HealTeachTimeRateDto healteachtimerate, bool doSaveChanges = true)
		{
			string key = this.HealTeachTimeRateService.Add(healteachtimerate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateHealTeachTimeRate(HealTeachTimeRateDto healteachtimerate, bool doSaveChanges = true)
		{
			this.HealTeachTimeRateService.Update(healteachtimerate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateHealTeachTimeRates(IEnumerable<HealTeachTimeRateDto> healteachtimerates, bool doSaveChanges = true)
		{
			if (healteachtimerates == null)
			{
				return;
			}
			foreach (HealTeachTimeRateDto instance in healteachtimerates)
			{
				if (instance == null)
				{
					continue;
				}


				this.HealTeachTimeRateService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteHealTeachTimeRate(HealTeachTimeRateDto healteachtimerate, bool doSaveChanges = true)
		{
			this.HealTeachTimeRateService.Delete(healteachtimerate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteHealTeachTimeRates(IEnumerable<HealTeachTimeRateDto> healteachtimerates, bool doSaveChanges = true)
		{
			if (healteachtimerates == null)
			{
				return;
			}
			foreach (HealTeachTimeRateDto instance in healteachtimerates)
			{
				if (instance == null)
				{
					continue;
				}


				this.HealTeachTimeRateService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion HealTeachTimeRate CRUD Operations


		#region EduActTypeRef CRUD Operations


		private IEduActTypeRefService eduacttyperef;
		public virtual IEduActTypeRefService EduActTypeRefService
		{
			get
			{
				if (this.eduacttyperef == null)
				{
					IEduActTypeRefAssembler assembler = new EduActTypeRefAssembler();
					IEduActTypeRefRepository repository = new EduActTypeRefRepository(this.UnitOfWork);
					this.eduacttyperef = new EduActTypeRefService(assembler, repository);
				}
				return this.eduacttyperef;
			}
		}


		public IEnumerable<EduActTypeRefDto> ReadEduActTypeRefs()
		{
			return this.EduActTypeRefService.GetAll();
		}


		public IEnumerable<EduActTypeRefDto> ReadEduActTypeRefs(Expression<Func<EduActTypeRef, bool>> filter)
		{
			return this.EduActTypeRefService.Find(filter);
		}


		public IEnumerable<EduActTypeRefDto> ReadEduActTypeRefs(ISpecification<EduActTypeRef> specification)
		{
			return this.EduActTypeRefService.Find(specification.GetExpression());
		}


		public IEnumerable<EduActTypeRefDto> ReadEduActTypeRefsPaged(int startIndex, int pageSize)
		{
			return this.EduActTypeRefService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduActTypeRefDto> ReadEduActTypeRefsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduActTypeRefService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduActTypeRefDto> ReadEduActTypeRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduActTypeRefService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduActTypeRefDto ReadEduActTypeRefs(string dtoKey)
		{
			return this.EduActTypeRefService.GetByKey(dtoKey);
		}


		public int EduActTypeRefsCount()
		{
			return this.EduActTypeRefService.Count();
		}


		public int EduActTypeRefsCountFiltered(string filterExpression)
		{
			return this.EduActTypeRefService.Count(filterExpression);
		}


		public string CreateEduActTypeRef(EduActTypeRefDto eduacttyperef, bool doSaveChanges = true)
		{
			string key = this.EduActTypeRefService.Add(eduacttyperef);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduActTypeRef(EduActTypeRefDto eduacttyperef, bool doSaveChanges = true)
		{
			this.EduActTypeRefService.Update(eduacttyperef);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduActTypeRefs(IEnumerable<EduActTypeRefDto> eduacttyperefs, bool doSaveChanges = true)
		{
			if (eduacttyperefs == null)
			{
				return;
			}
			foreach (EduActTypeRefDto instance in eduacttyperefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduActTypeRefService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduActTypeRef(EduActTypeRefDto eduacttyperef, bool doSaveChanges = true)
		{
			this.EduActTypeRefService.Delete(eduacttyperef);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduActTypeRefs(IEnumerable<EduActTypeRefDto> eduacttyperefs, bool doSaveChanges = true)
		{
			if (eduacttyperefs == null)
			{
				return;
			}
			foreach (EduActTypeRefDto instance in eduacttyperefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduActTypeRefService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduActTypeRef CRUD Operations


		#region EduActBooking CRUD Operations


		private IEduActBookingService eduactbooking;
		public virtual IEduActBookingService EduActBookingService
		{
			get
			{
				if (this.eduactbooking == null)
				{
					IEduActBookingAssembler assembler = new EduActBookingAssembler();
					IEduActBookingRepository repository = new EduActBookingRepository(this.UnitOfWork);
					this.eduactbooking = new EduActBookingService(assembler, repository);
				}
				return this.eduactbooking;
			}
		}


		public IEnumerable<EduActBookingDto> ReadEduActBookings()
		{
			return this.EduActBookingService.GetAll();
		}


		public IEnumerable<EduActBookingDto> ReadEduActBookings(Expression<Func<EduActBooking, bool>> filter)
		{
			return this.EduActBookingService.Find(filter);
		}


		public IEnumerable<EduActBookingDto> ReadEduActBookings(ISpecification<EduActBooking> specification)
		{
			return this.EduActBookingService.Find(specification.GetExpression());
		}


		public IEnumerable<EduActBookingDto> ReadEduActBookingsPaged(int startIndex, int pageSize)
		{
			return this.EduActBookingService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduActBookingDto> ReadEduActBookingsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduActBookingService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduActBookingDto> ReadEduActBookingsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduActBookingService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduActBookingDto ReadEduActBookings(string dtoKey)
		{
			return this.EduActBookingService.GetByKey(dtoKey);
		}


		public int EduActBookingsCount()
		{
			return this.EduActBookingService.Count();
		}


		public int EduActBookingsCountFiltered(string filterExpression)
		{
			return this.EduActBookingService.Count(filterExpression);
		}


		public string CreateEduActBooking(EduActBookingDto eduactbooking, bool doSaveChanges = true)
		{
			string key = this.EduActBookingService.Add(eduactbooking);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduActBooking(EduActBookingDto eduactbooking, bool doSaveChanges = true)
		{
			this.EduActBookingService.Update(eduactbooking);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduActBookings(IEnumerable<EduActBookingDto> eduactbookings, bool doSaveChanges = true)
		{
			if (eduactbookings == null)
			{
				return;
			}
			foreach (EduActBookingDto instance in eduactbookings)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduActBookingService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduActBooking(EduActBookingDto eduactbooking, bool doSaveChanges = true)
		{
			this.EduActBookingService.Delete(eduactbooking);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduActBookings(IEnumerable<EduActBookingDto> eduactbookings, bool doSaveChanges = true)
		{
			if (eduactbookings == null)
			{
				return;
			}
			foreach (EduActBookingDto instance in eduactbookings)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduActBookingService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduActBooking CRUD Operations


		#region ElearningItem CRUD Operations


		private IElearningItemService elearningitem;
		public virtual IElearningItemService ElearningItemService
		{
			get
			{
				if (this.elearningitem == null)
				{
					IElearningItemAssembler assembler = new ElearningItemAssembler();
					IElearningItemRepository repository = new ElearningItemRepository(this.UnitOfWork);
					this.elearningitem = new ElearningItemService(assembler, repository);
				}
				return this.elearningitem;
			}
		}


		public IEnumerable<ElearningItemDto> ReadElearningItems()
		{
			return this.ElearningItemService.GetAll();
		}


		public IEnumerable<ElearningItemDto> ReadElearningItems(Expression<Func<ElearningItem, bool>> filter)
		{
			return this.ElearningItemService.Find(filter);
		}


		public IEnumerable<ElearningItemDto> ReadElearningItems(ISpecification<ElearningItem> specification)
		{
			return this.ElearningItemService.Find(specification.GetExpression());
		}


		public IEnumerable<ElearningItemDto> ReadElearningItemsPaged(int startIndex, int pageSize)
		{
			return this.ElearningItemService.Find(startIndex, pageSize);
		}


		public IEnumerable<ElearningItemDto> ReadElearningItemsFiltered(string sortExpression, string filterExpression)
		{
			return this.ElearningItemService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ElearningItemDto> ReadElearningItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ElearningItemService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public ElearningItemDto ReadElearningItems(string dtoKey)
		{
			return this.ElearningItemService.GetByKey(dtoKey);
		}


		public int ElearningItemsCount()
		{
			return this.ElearningItemService.Count();
		}


		public int ElearningItemsCountFiltered(string filterExpression)
		{
			return this.ElearningItemService.Count(filterExpression);
		}


		public string CreateElearningItem(ElearningItemDto elearningitem, bool doSaveChanges = true)
		{
			string key = this.ElearningItemService.Add(elearningitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateElearningItem(ElearningItemDto elearningitem, bool doSaveChanges = true)
		{
			this.ElearningItemService.Update(elearningitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateElearningItems(IEnumerable<ElearningItemDto> elearningitems, bool doSaveChanges = true)
		{
			if (elearningitems == null)
			{
				return;
			}
			foreach (ElearningItemDto instance in elearningitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.ElearningItemService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteElearningItem(ElearningItemDto elearningitem, bool doSaveChanges = true)
		{
			this.ElearningItemService.Delete(elearningitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteElearningItems(IEnumerable<ElearningItemDto> elearningitems, bool doSaveChanges = true)
		{
			if (elearningitems == null)
			{
				return;
			}
			foreach (ElearningItemDto instance in elearningitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.ElearningItemService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion ElearningItem CRUD Operations


		#region ElearningEmpItemLog CRUD Operations


		private IElearningEmpItemLogService elearningempitemlog;
		public virtual IElearningEmpItemLogService ElearningEmpItemLogService
		{
			get
			{
				if (this.elearningempitemlog == null)
				{
					IElearningEmpItemLogAssembler assembler = new ElearningEmpItemLogAssembler();
					IElearningEmpItemLogRepository repository = new ElearningEmpItemLogRepository(this.UnitOfWork);
					this.elearningempitemlog = new ElearningEmpItemLogService(assembler, repository);
				}
				return this.elearningempitemlog;
			}
		}


		public IEnumerable<ElearningEmpItemLogDto> ReadElearningEmpItemLogs()
		{
			return this.ElearningEmpItemLogService.GetAll();
		}


		public IEnumerable<ElearningEmpItemLogDto> ReadElearningEmpItemLogs(Expression<Func<ElearningEmpItemLog, bool>> filter)
		{
			return this.ElearningEmpItemLogService.Find(filter);
		}


		public IEnumerable<ElearningEmpItemLogDto> ReadElearningEmpItemLogs(ISpecification<ElearningEmpItemLog> specification)
		{
			return this.ElearningEmpItemLogService.Find(specification.GetExpression());
		}


		public IEnumerable<ElearningEmpItemLogDto> ReadElearningEmpItemLogsPaged(int startIndex, int pageSize)
		{
			return this.ElearningEmpItemLogService.Find(startIndex, pageSize);
		}


		public IEnumerable<ElearningEmpItemLogDto> ReadElearningEmpItemLogsFiltered(string sortExpression, string filterExpression)
		{
			return this.ElearningEmpItemLogService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ElearningEmpItemLogDto> ReadElearningEmpItemLogsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ElearningEmpItemLogService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public ElearningEmpItemLogDto ReadElearningEmpItemLogs(string dtoKey)
		{
			return this.ElearningEmpItemLogService.GetByKey(dtoKey);
		}


		public int ElearningEmpItemLogsCount()
		{
			return this.ElearningEmpItemLogService.Count();
		}


		public int ElearningEmpItemLogsCountFiltered(string filterExpression)
		{
			return this.ElearningEmpItemLogService.Count(filterExpression);
		}


		public string CreateElearningEmpItemLog(ElearningEmpItemLogDto elearningempitemlog, bool doSaveChanges = true)
		{
			string key = this.ElearningEmpItemLogService.Add(elearningempitemlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateElearningEmpItemLog(ElearningEmpItemLogDto elearningempitemlog, bool doSaveChanges = true)
		{
			this.ElearningEmpItemLogService.Update(elearningempitemlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateElearningEmpItemLogs(IEnumerable<ElearningEmpItemLogDto> elearningempitemlogs, bool doSaveChanges = true)
		{
			if (elearningempitemlogs == null)
			{
				return;
			}
			foreach (ElearningEmpItemLogDto instance in elearningempitemlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.ElearningEmpItemLogService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteElearningEmpItemLog(ElearningEmpItemLogDto elearningempitemlog, bool doSaveChanges = true)
		{
			this.ElearningEmpItemLogService.Delete(elearningempitemlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteElearningEmpItemLogs(IEnumerable<ElearningEmpItemLogDto> elearningempitemlogs, bool doSaveChanges = true)
		{
			if (elearningempitemlogs == null)
			{
				return;
			}
			foreach (ElearningEmpItemLogDto instance in elearningempitemlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.ElearningEmpItemLogService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion ElearningEmpItemLog CRUD Operations


		#region ElearningEmpItem CRUD Operations


		private IElearningEmpItemService elearningempitem;
		public virtual IElearningEmpItemService ElearningEmpItemService
		{
			get
			{
				if (this.elearningempitem == null)
				{
					IElearningEmpItemAssembler assembler = new ElearningEmpItemAssembler();
					IElearningEmpItemRepository repository = new ElearningEmpItemRepository(this.UnitOfWork);
					this.elearningempitem = new ElearningEmpItemService(assembler, repository);
				}
				return this.elearningempitem;
			}
		}


		public IEnumerable<ElearningEmpItemDto> ReadElearningEmpItems()
		{
			return this.ElearningEmpItemService.GetAll();
		}


		public IEnumerable<ElearningEmpItemDto> ReadElearningEmpItems(Expression<Func<ElearningEmpItem, bool>> filter)
		{
			return this.ElearningEmpItemService.Find(filter);
		}


		public IEnumerable<ElearningEmpItemDto> ReadElearningEmpItems(ISpecification<ElearningEmpItem> specification)
		{
			return this.ElearningEmpItemService.Find(specification.GetExpression());
		}


		public IEnumerable<ElearningEmpItemDto> ReadElearningEmpItemsPaged(int startIndex, int pageSize)
		{
			return this.ElearningEmpItemService.Find(startIndex, pageSize);
		}


		public IEnumerable<ElearningEmpItemDto> ReadElearningEmpItemsFiltered(string sortExpression, string filterExpression)
		{
			return this.ElearningEmpItemService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ElearningEmpItemDto> ReadElearningEmpItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ElearningEmpItemService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public ElearningEmpItemDto ReadElearningEmpItems(string dtoKey)
		{
			return this.ElearningEmpItemService.GetByKey(dtoKey);
		}


		public int ElearningEmpItemsCount()
		{
			return this.ElearningEmpItemService.Count();
		}


		public int ElearningEmpItemsCountFiltered(string filterExpression)
		{
			return this.ElearningEmpItemService.Count(filterExpression);
		}


		public string CreateElearningEmpItem(ElearningEmpItemDto elearningempitem, bool doSaveChanges = true)
		{
			string key = this.ElearningEmpItemService.Add(elearningempitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateElearningEmpItem(ElearningEmpItemDto elearningempitem, bool doSaveChanges = true)
		{
			this.ElearningEmpItemService.Update(elearningempitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateElearningEmpItems(IEnumerable<ElearningEmpItemDto> elearningempitems, bool doSaveChanges = true)
		{
			if (elearningempitems == null)
			{
				return;
			}
			foreach (ElearningEmpItemDto instance in elearningempitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.ElearningEmpItemService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteElearningEmpItem(ElearningEmpItemDto elearningempitem, bool doSaveChanges = true)
		{
			this.ElearningEmpItemService.Delete(elearningempitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteElearningEmpItems(IEnumerable<ElearningEmpItemDto> elearningempitems, bool doSaveChanges = true)
		{
			if (elearningempitems == null)
			{
				return;
			}
			foreach (ElearningEmpItemDto instance in elearningempitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.ElearningEmpItemService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion ElearningEmpItem CRUD Operations


		#region ElearningClass CRUD Operations


		private IElearningClassService elearningclass;
		public virtual IElearningClassService ElearningClassService
		{
			get
			{
				if (this.elearningclass == null)
				{
					IElearningClassAssembler assembler = new ElearningClassAssembler();
					IElearningClassRepository repository = new ElearningClassRepository(this.UnitOfWork);
					this.elearningclass = new ElearningClassService(assembler, repository);
				}
				return this.elearningclass;
			}
		}


		public IEnumerable<ElearningClassDto> ReadElearningClasses()
		{
			return this.ElearningClassService.GetAll();
		}


		public IEnumerable<ElearningClassDto> ReadElearningClasses(Expression<Func<ElearningClass, bool>> filter)
		{
			return this.ElearningClassService.Find(filter);
		}


		public IEnumerable<ElearningClassDto> ReadElearningClasses(ISpecification<ElearningClass> specification)
		{
			return this.ElearningClassService.Find(specification.GetExpression());
		}


		public IEnumerable<ElearningClassDto> ReadElearningClassesPaged(int startIndex, int pageSize)
		{
			return this.ElearningClassService.Find(startIndex, pageSize);
		}


		public IEnumerable<ElearningClassDto> ReadElearningClassesFiltered(string sortExpression, string filterExpression)
		{
			return this.ElearningClassService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ElearningClassDto> ReadElearningClassesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ElearningClassService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public ElearningClassDto ReadElearningClasses(string dtoKey)
		{
			return this.ElearningClassService.GetByKey(dtoKey);
		}


		public int ElearningClassesCount()
		{
			return this.ElearningClassService.Count();
		}


		public int ElearningClassesCountFiltered(string filterExpression)
		{
			return this.ElearningClassService.Count(filterExpression);
		}


		public string CreateElearningClass(ElearningClassDto elearningclass, bool doSaveChanges = true)
		{
			string key = this.ElearningClassService.Add(elearningclass);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateElearningClass(ElearningClassDto elearningclass, bool doSaveChanges = true)
		{
			this.ElearningClassService.Update(elearningclass);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateElearningClasses(IEnumerable<ElearningClassDto> elearningclasses, bool doSaveChanges = true)
		{
			if (elearningclasses == null)
			{
				return;
			}
			foreach (ElearningClassDto instance in elearningclasses)
			{
				if (instance == null)
				{
					continue;
				}


				this.ElearningClassService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteElearningClass(ElearningClassDto elearningclass, bool doSaveChanges = true)
		{
			this.ElearningClassService.Delete(elearningclass);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteElearningClasses(IEnumerable<ElearningClassDto> elearningclasses, bool doSaveChanges = true)
		{
			if (elearningclasses == null)
			{
				return;
			}
			foreach (ElearningClassDto instance in elearningclasses)
			{
				if (instance == null)
				{
					continue;
				}


				this.ElearningClassService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion ElearningClass CRUD Operations


		#region ElearningBooking CRUD Operations


		private IElearningBookingService elearningbooking;
		public virtual IElearningBookingService ElearningBookingService
		{
			get
			{
				if (this.elearningbooking == null)
				{
					IElearningBookingAssembler assembler = new ElearningBookingAssembler();
					IElearningBookingRepository repository = new ElearningBookingRepository(this.UnitOfWork);
					this.elearningbooking = new ElearningBookingService(assembler, repository);
				}
				return this.elearningbooking;
			}
		}


		public IEnumerable<ElearningBookingDto> ReadElearningBookings()
		{
			return this.ElearningBookingService.GetAll();
		}


		public IEnumerable<ElearningBookingDto> ReadElearningBookings(Expression<Func<ElearningBooking, bool>> filter)
		{
			return this.ElearningBookingService.Find(filter);
		}


		public IEnumerable<ElearningBookingDto> ReadElearningBookings(ISpecification<ElearningBooking> specification)
		{
			return this.ElearningBookingService.Find(specification.GetExpression());
		}


		public IEnumerable<ElearningBookingDto> ReadElearningBookingsPaged(int startIndex, int pageSize)
		{
			return this.ElearningBookingService.Find(startIndex, pageSize);
		}


		public IEnumerable<ElearningBookingDto> ReadElearningBookingsFiltered(string sortExpression, string filterExpression)
		{
			return this.ElearningBookingService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ElearningBookingDto> ReadElearningBookingsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ElearningBookingService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public ElearningBookingDto ReadElearningBookings(string dtoKey)
		{
			return this.ElearningBookingService.GetByKey(dtoKey);
		}


		public int ElearningBookingsCount()
		{
			return this.ElearningBookingService.Count();
		}


		public int ElearningBookingsCountFiltered(string filterExpression)
		{
			return this.ElearningBookingService.Count(filterExpression);
		}


		public string CreateElearningBooking(ElearningBookingDto elearningbooking, bool doSaveChanges = true)
		{
			string key = this.ElearningBookingService.Add(elearningbooking);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateElearningBooking(ElearningBookingDto elearningbooking, bool doSaveChanges = true)
		{
			this.ElearningBookingService.Update(elearningbooking);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateElearningBookings(IEnumerable<ElearningBookingDto> elearningbookings, bool doSaveChanges = true)
		{
			if (elearningbookings == null)
			{
				return;
			}
			foreach (ElearningBookingDto instance in elearningbookings)
			{
				if (instance == null)
				{
					continue;
				}


				this.ElearningBookingService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteElearningBooking(ElearningBookingDto elearningbooking, bool doSaveChanges = true)
		{
			this.ElearningBookingService.Delete(elearningbooking);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteElearningBookings(IEnumerable<ElearningBookingDto> elearningbookings, bool doSaveChanges = true)
		{
			if (elearningbookings == null)
			{
				return;
			}
			foreach (ElearningBookingDto instance in elearningbookings)
			{
				if (instance == null)
				{
					continue;
				}


				this.ElearningBookingService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion ElearningBooking CRUD Operations


		#region PassPortStudentApplicationItem CRUD Operations


		private IPassPortStudentApplicationItemService passportstudentapplicationitem;
		public virtual IPassPortStudentApplicationItemService PassPortStudentApplicationItemService
		{
			get
			{
				if (this.passportstudentapplicationitem == null)
				{
					IPassPortStudentApplicationItemAssembler assembler = new PassPortStudentApplicationItemAssembler();
					IPassPortStudentApplicationItemRepository repository = new PassPortStudentApplicationItemRepository(this.UnitOfWork);
					this.passportstudentapplicationitem = new PassPortStudentApplicationItemService(assembler, repository);
				}
				return this.passportstudentapplicationitem;
			}
		}


		public IEnumerable<PassPortStudentApplicationItemDto> ReadPassPortStudentApplicationItems()
		{
			return this.PassPortStudentApplicationItemService.GetAll();
		}


		public IEnumerable<PassPortStudentApplicationItemDto> ReadPassPortStudentApplicationItems(Expression<Func<PassPortStudentApplicationItem, bool>> filter)
		{
			return this.PassPortStudentApplicationItemService.Find(filter);
		}


		public IEnumerable<PassPortStudentApplicationItemDto> ReadPassPortStudentApplicationItems(ISpecification<PassPortStudentApplicationItem> specification)
		{
			return this.PassPortStudentApplicationItemService.Find(specification.GetExpression());
		}


		public IEnumerable<PassPortStudentApplicationItemDto> ReadPassPortStudentApplicationItemsPaged(int startIndex, int pageSize)
		{
			return this.PassPortStudentApplicationItemService.Find(startIndex, pageSize);
		}


		public IEnumerable<PassPortStudentApplicationItemDto> ReadPassPortStudentApplicationItemsFiltered(string sortExpression, string filterExpression)
		{
			return this.PassPortStudentApplicationItemService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PassPortStudentApplicationItemDto> ReadPassPortStudentApplicationItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PassPortStudentApplicationItemService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public PassPortStudentApplicationItemDto ReadPassPortStudentApplicationItems(string dtoKey)
		{
			return this.PassPortStudentApplicationItemService.GetByKey(dtoKey);
		}


		public int PassPortStudentApplicationItemsCount()
		{
			return this.PassPortStudentApplicationItemService.Count();
		}


		public int PassPortStudentApplicationItemsCountFiltered(string filterExpression)
		{
			return this.PassPortStudentApplicationItemService.Count(filterExpression);
		}


		public string CreatePassPortStudentApplicationItem(PassPortStudentApplicationItemDto passportstudentapplicationitem, bool doSaveChanges = true)
		{
			string key = this.PassPortStudentApplicationItemService.Add(passportstudentapplicationitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePassPortStudentApplicationItem(PassPortStudentApplicationItemDto passportstudentapplicationitem, bool doSaveChanges = true)
		{
			this.PassPortStudentApplicationItemService.Update(passportstudentapplicationitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePassPortStudentApplicationItems(IEnumerable<PassPortStudentApplicationItemDto> passportstudentapplicationitems, bool doSaveChanges = true)
		{
			if (passportstudentapplicationitems == null)
			{
				return;
			}
			foreach (PassPortStudentApplicationItemDto instance in passportstudentapplicationitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.PassPortStudentApplicationItemService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePassPortStudentApplicationItem(PassPortStudentApplicationItemDto passportstudentapplicationitem, bool doSaveChanges = true)
		{
			this.PassPortStudentApplicationItemService.Delete(passportstudentapplicationitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePassPortStudentApplicationItems(IEnumerable<PassPortStudentApplicationItemDto> passportstudentapplicationitems, bool doSaveChanges = true)
		{
			if (passportstudentapplicationitems == null)
			{
				return;
			}
			foreach (PassPortStudentApplicationItemDto instance in passportstudentapplicationitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.PassPortStudentApplicationItemService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion PassPortStudentApplicationItem CRUD Operations


		#region PassPortJobTitleItem CRUD Operations


		private IPassPortJobTitleItemService passportjobtitleitem;
		public virtual IPassPortJobTitleItemService PassPortJobTitleItemService
		{
			get
			{
				if (this.passportjobtitleitem == null)
				{
					IPassPortJobTitleItemAssembler assembler = new PassPortJobTitleItemAssembler();
					IPassPortJobTitleItemRepository repository = new PassPortJobTitleItemRepository(this.UnitOfWork);
					this.passportjobtitleitem = new PassPortJobTitleItemService(assembler, repository);
				}
				return this.passportjobtitleitem;
			}
		}


		public IEnumerable<PassPortJobTitleItemDto> ReadPassPortJobTitleItems()
		{
			return this.PassPortJobTitleItemService.GetAll();
		}


		public IEnumerable<PassPortJobTitleItemDto> ReadPassPortJobTitleItems(Expression<Func<PassPortJobTitleItem, bool>> filter)
		{
			return this.PassPortJobTitleItemService.Find(filter);
		}


		public IEnumerable<PassPortJobTitleItemDto> ReadPassPortJobTitleItems(ISpecification<PassPortJobTitleItem> specification)
		{
			return this.PassPortJobTitleItemService.Find(specification.GetExpression());
		}


		public IEnumerable<PassPortJobTitleItemDto> ReadPassPortJobTitleItemsPaged(int startIndex, int pageSize)
		{
			return this.PassPortJobTitleItemService.Find(startIndex, pageSize);
		}


		public IEnumerable<PassPortJobTitleItemDto> ReadPassPortJobTitleItemsFiltered(string sortExpression, string filterExpression)
		{
			return this.PassPortJobTitleItemService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PassPortJobTitleItemDto> ReadPassPortJobTitleItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PassPortJobTitleItemService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public PassPortJobTitleItemDto ReadPassPortJobTitleItems(string dtoKey)
		{
			return this.PassPortJobTitleItemService.GetByKey(dtoKey);
		}


		public int PassPortJobTitleItemsCount()
		{
			return this.PassPortJobTitleItemService.Count();
		}


		public int PassPortJobTitleItemsCountFiltered(string filterExpression)
		{
			return this.PassPortJobTitleItemService.Count(filterExpression);
		}


		public string CreatePassPortJobTitleItem(PassPortJobTitleItemDto passportjobtitleitem, bool doSaveChanges = true)
		{
			string key = this.PassPortJobTitleItemService.Add(passportjobtitleitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePassPortJobTitleItem(PassPortJobTitleItemDto passportjobtitleitem, bool doSaveChanges = true)
		{
			this.PassPortJobTitleItemService.Update(passportjobtitleitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePassPortJobTitleItems(IEnumerable<PassPortJobTitleItemDto> passportjobtitleitems, bool doSaveChanges = true)
		{
			if (passportjobtitleitems == null)
			{
				return;
			}
			foreach (PassPortJobTitleItemDto instance in passportjobtitleitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.PassPortJobTitleItemService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePassPortJobTitleItem(PassPortJobTitleItemDto passportjobtitleitem, bool doSaveChanges = true)
		{
			this.PassPortJobTitleItemService.Delete(passportjobtitleitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePassPortJobTitleItems(IEnumerable<PassPortJobTitleItemDto> passportjobtitleitems, bool doSaveChanges = true)
		{
			if (passportjobtitleitems == null)
			{
				return;
			}
			foreach (PassPortJobTitleItemDto instance in passportjobtitleitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.PassPortJobTitleItemService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion PassPortJobTitleItem CRUD Operations


		#region PassPortCheckItem CRUD Operations


		private IPassPortCheckItemService passportcheckitem;
		public virtual IPassPortCheckItemService PassPortCheckItemService
		{
			get
			{
				if (this.passportcheckitem == null)
				{
					IPassPortCheckItemAssembler assembler = new PassPortCheckItemAssembler();
					IPassPortCheckItemRepository repository = new PassPortCheckItemRepository(this.UnitOfWork);
					this.passportcheckitem = new PassPortCheckItemService(assembler, repository);
				}
				return this.passportcheckitem;
			}
		}


		public IEnumerable<PassPortCheckItemDto> ReadPassPortCheckItems()
		{
			return this.PassPortCheckItemService.GetAll();
		}


		public IEnumerable<PassPortCheckItemDto> ReadPassPortCheckItems(Expression<Func<PassPortCheckItem, bool>> filter)
		{
			return this.PassPortCheckItemService.Find(filter);
		}


		public IEnumerable<PassPortCheckItemDto> ReadPassPortCheckItems(ISpecification<PassPortCheckItem> specification)
		{
			return this.PassPortCheckItemService.Find(specification.GetExpression());
		}


		public IEnumerable<PassPortCheckItemDto> ReadPassPortCheckItemsPaged(int startIndex, int pageSize)
		{
			return this.PassPortCheckItemService.Find(startIndex, pageSize);
		}


		public IEnumerable<PassPortCheckItemDto> ReadPassPortCheckItemsFiltered(string sortExpression, string filterExpression)
		{
			return this.PassPortCheckItemService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PassPortCheckItemDto> ReadPassPortCheckItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PassPortCheckItemService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public PassPortCheckItemDto ReadPassPortCheckItems(string dtoKey)
		{
			return this.PassPortCheckItemService.GetByKey(dtoKey);
		}


		public int PassPortCheckItemsCount()
		{
			return this.PassPortCheckItemService.Count();
		}


		public int PassPortCheckItemsCountFiltered(string filterExpression)
		{
			return this.PassPortCheckItemService.Count(filterExpression);
		}


		public string CreatePassPortCheckItem(PassPortCheckItemDto passportcheckitem, bool doSaveChanges = true)
		{
			string key = this.PassPortCheckItemService.Add(passportcheckitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePassPortCheckItem(PassPortCheckItemDto passportcheckitem, bool doSaveChanges = true)
		{
			this.PassPortCheckItemService.Update(passportcheckitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePassPortCheckItems(IEnumerable<PassPortCheckItemDto> passportcheckitems, bool doSaveChanges = true)
		{
			if (passportcheckitems == null)
			{
				return;
			}
			foreach (PassPortCheckItemDto instance in passportcheckitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.PassPortCheckItemService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePassPortCheckItem(PassPortCheckItemDto passportcheckitem, bool doSaveChanges = true)
		{
			this.PassPortCheckItemService.Delete(passportcheckitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePassPortCheckItems(IEnumerable<PassPortCheckItemDto> passportcheckitems, bool doSaveChanges = true)
		{
			if (passportcheckitems == null)
			{
				return;
			}
			foreach (PassPortCheckItemDto instance in passportcheckitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.PassPortCheckItemService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion PassPortCheckItem CRUD Operations


		#region PassPortSpecialList CRUD Operations


		private IPassPortSpecialListService passportspeciallist;
		public virtual IPassPortSpecialListService PassPortSpecialListService
		{
			get
			{
				if (this.passportspeciallist == null)
				{
					IPassPortSpecialListAssembler assembler = new PassPortSpecialListAssembler();
					IPassPortSpecialListRepository repository = new PassPortSpecialListRepository(this.UnitOfWork);
					this.passportspeciallist = new PassPortSpecialListService(assembler, repository);
				}
				return this.passportspeciallist;
			}
		}


		public IEnumerable<PassPortSpecialListDto> ReadPassPortSpecialLists()
		{
			return this.PassPortSpecialListService.GetAll();
		}


		public IEnumerable<PassPortSpecialListDto> ReadPassPortSpecialLists(Expression<Func<PassPortSpecialList, bool>> filter)
		{
			return this.PassPortSpecialListService.Find(filter);
		}


		public IEnumerable<PassPortSpecialListDto> ReadPassPortSpecialLists(ISpecification<PassPortSpecialList> specification)
		{
			return this.PassPortSpecialListService.Find(specification.GetExpression());
		}


		public IEnumerable<PassPortSpecialListDto> ReadPassPortSpecialListsPaged(int startIndex, int pageSize)
		{
			return this.PassPortSpecialListService.Find(startIndex, pageSize);
		}


		public IEnumerable<PassPortSpecialListDto> ReadPassPortSpecialListsFiltered(string sortExpression, string filterExpression)
		{
			return this.PassPortSpecialListService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PassPortSpecialListDto> ReadPassPortSpecialListsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PassPortSpecialListService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public PassPortSpecialListDto ReadPassPortSpecialLists(string dtoKey)
		{
			return this.PassPortSpecialListService.GetByKey(dtoKey);
		}


		public int PassPortSpecialListsCount()
		{
			return this.PassPortSpecialListService.Count();
		}


		public int PassPortSpecialListsCountFiltered(string filterExpression)
		{
			return this.PassPortSpecialListService.Count(filterExpression);
		}


		public string CreatePassPortSpecialList(PassPortSpecialListDto passportspeciallist, bool doSaveChanges = true)
		{
			string key = this.PassPortSpecialListService.Add(passportspeciallist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePassPortSpecialList(PassPortSpecialListDto passportspeciallist, bool doSaveChanges = true)
		{
			this.PassPortSpecialListService.Update(passportspeciallist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePassPortSpecialLists(IEnumerable<PassPortSpecialListDto> passportspeciallists, bool doSaveChanges = true)
		{
			if (passportspeciallists == null)
			{
				return;
			}
			foreach (PassPortSpecialListDto instance in passportspeciallists)
			{
				if (instance == null)
				{
					continue;
				}


				this.PassPortSpecialListService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePassPortSpecialList(PassPortSpecialListDto passportspeciallist, bool doSaveChanges = true)
		{
			this.PassPortSpecialListService.Delete(passportspeciallist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePassPortSpecialLists(IEnumerable<PassPortSpecialListDto> passportspeciallists, bool doSaveChanges = true)
		{
			if (passportspeciallists == null)
			{
				return;
			}
			foreach (PassPortSpecialListDto instance in passportspeciallists)
			{
				if (instance == null)
				{
					continue;
				}


				this.PassPortSpecialListService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion PassPortSpecialList CRUD Operations


		#region VoteTarget CRUD Operations


		private IVoteTargetService votetarget;
		public virtual IVoteTargetService VoteTargetService
		{
			get
			{
				if (this.votetarget == null)
				{
					IVoteTargetAssembler assembler = new VoteTargetAssembler();
					IVoteTargetRepository repository = new VoteTargetRepository(this.UnitOfWork);
					this.votetarget = new VoteTargetService(assembler, repository);
				}
				return this.votetarget;
			}
		}


		public IEnumerable<VoteTargetDto> ReadVoteTargets()
		{
			return this.VoteTargetService.GetAll();
		}


		public IEnumerable<VoteTargetDto> ReadVoteTargets(Expression<Func<VoteTarget, bool>> filter)
		{
			return this.VoteTargetService.Find(filter);
		}


		public IEnumerable<VoteTargetDto> ReadVoteTargets(ISpecification<VoteTarget> specification)
		{
			return this.VoteTargetService.Find(specification.GetExpression());
		}


		public IEnumerable<VoteTargetDto> ReadVoteTargetsPaged(int startIndex, int pageSize)
		{
			return this.VoteTargetService.Find(startIndex, pageSize);
		}


		public IEnumerable<VoteTargetDto> ReadVoteTargetsFiltered(string sortExpression, string filterExpression)
		{
			return this.VoteTargetService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VoteTargetDto> ReadVoteTargetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VoteTargetService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public VoteTargetDto ReadVoteTargets(string dtoKey)
		{
			return this.VoteTargetService.GetByKey(dtoKey);
		}


		public int VoteTargetsCount()
		{
			return this.VoteTargetService.Count();
		}


		public int VoteTargetsCountFiltered(string filterExpression)
		{
			return this.VoteTargetService.Count(filterExpression);
		}


		public string CreateVoteTarget(VoteTargetDto votetarget, bool doSaveChanges = true)
		{
			string key = this.VoteTargetService.Add(votetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVoteTarget(VoteTargetDto votetarget, bool doSaveChanges = true)
		{
			this.VoteTargetService.Update(votetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVoteTargets(IEnumerable<VoteTargetDto> votetargets, bool doSaveChanges = true)
		{
			if (votetargets == null)
			{
				return;
			}
			foreach (VoteTargetDto instance in votetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.VoteTargetService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVoteTarget(VoteTargetDto votetarget, bool doSaveChanges = true)
		{
			this.VoteTargetService.Delete(votetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVoteTargets(IEnumerable<VoteTargetDto> votetargets, bool doSaveChanges = true)
		{
			if (votetargets == null)
			{
				return;
			}
			foreach (VoteTargetDto instance in votetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.VoteTargetService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion VoteTarget CRUD Operations


		#region VoteMain CRUD Operations


		private IVoteMainService votemain;
		public virtual IVoteMainService VoteMainService
		{
			get
			{
				if (this.votemain == null)
				{
					IVoteMainAssembler assembler = new VoteMainAssembler();
					IVoteMainRepository repository = new VoteMainRepository(this.UnitOfWork);
					this.votemain = new VoteMainService(assembler, repository);
				}
				return this.votemain;
			}
		}


		public IEnumerable<VoteMainDto> ReadVoteMains()
		{
			return this.VoteMainService.GetAll();
		}


		public IEnumerable<VoteMainDto> ReadVoteMains(Expression<Func<VoteMain, bool>> filter)
		{
			return this.VoteMainService.Find(filter);
		}


		public IEnumerable<VoteMainDto> ReadVoteMains(ISpecification<VoteMain> specification)
		{
			return this.VoteMainService.Find(specification.GetExpression());
		}


		public IEnumerable<VoteMainDto> ReadVoteMainsPaged(int startIndex, int pageSize)
		{
			return this.VoteMainService.Find(startIndex, pageSize);
		}


		public IEnumerable<VoteMainDto> ReadVoteMainsFiltered(string sortExpression, string filterExpression)
		{
			return this.VoteMainService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VoteMainDto> ReadVoteMainsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VoteMainService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public VoteMainDto ReadVoteMains(string dtoKey)
		{
			return this.VoteMainService.GetByKey(dtoKey);
		}


		public int VoteMainsCount()
		{
			return this.VoteMainService.Count();
		}


		public int VoteMainsCountFiltered(string filterExpression)
		{
			return this.VoteMainService.Count(filterExpression);
		}


		public string CreateVoteMain(VoteMainDto votemain, bool doSaveChanges = true)
		{
			string key = this.VoteMainService.Add(votemain);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVoteMain(VoteMainDto votemain, bool doSaveChanges = true)
		{
			this.VoteMainService.Update(votemain);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVoteMains(IEnumerable<VoteMainDto> votemains, bool doSaveChanges = true)
		{
			if (votemains == null)
			{
				return;
			}
			foreach (VoteMainDto instance in votemains)
			{
				if (instance == null)
				{
					continue;
				}


				this.VoteMainService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVoteMain(VoteMainDto votemain, bool doSaveChanges = true)
		{
			this.VoteMainService.Delete(votemain);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVoteMains(IEnumerable<VoteMainDto> votemains, bool doSaveChanges = true)
		{
			if (votemains == null)
			{
				return;
			}
			foreach (VoteMainDto instance in votemains)
			{
				if (instance == null)
				{
					continue;
				}


				this.VoteMainService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion VoteMain CRUD Operations


		#region VoteJob CRUD Operations


		private IVoteJobService votejob;
		public virtual IVoteJobService VoteJobService
		{
			get
			{
				if (this.votejob == null)
				{
					IVoteJobAssembler assembler = new VoteJobAssembler();
					IVoteJobRepository repository = new VoteJobRepository(this.UnitOfWork);
					this.votejob = new VoteJobService(assembler, repository);
				}
				return this.votejob;
			}
		}


		public IEnumerable<VoteJobDto> ReadVoteJobs()
		{
			return this.VoteJobService.GetAll();
		}


		public IEnumerable<VoteJobDto> ReadVoteJobs(Expression<Func<VoteJob, bool>> filter)
		{
			return this.VoteJobService.Find(filter);
		}


		public IEnumerable<VoteJobDto> ReadVoteJobs(ISpecification<VoteJob> specification)
		{
			return this.VoteJobService.Find(specification.GetExpression());
		}


		public IEnumerable<VoteJobDto> ReadVoteJobsPaged(int startIndex, int pageSize)
		{
			return this.VoteJobService.Find(startIndex, pageSize);
		}


		public IEnumerable<VoteJobDto> ReadVoteJobsFiltered(string sortExpression, string filterExpression)
		{
			return this.VoteJobService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VoteJobDto> ReadVoteJobsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VoteJobService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public VoteJobDto ReadVoteJobs(string dtoKey)
		{
			return this.VoteJobService.GetByKey(dtoKey);
		}


		public int VoteJobsCount()
		{
			return this.VoteJobService.Count();
		}


		public int VoteJobsCountFiltered(string filterExpression)
		{
			return this.VoteJobService.Count(filterExpression);
		}


		public string CreateVoteJob(VoteJobDto votejob, bool doSaveChanges = true)
		{
			string key = this.VoteJobService.Add(votejob);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVoteJob(VoteJobDto votejob, bool doSaveChanges = true)
		{
			this.VoteJobService.Update(votejob);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVoteJobs(IEnumerable<VoteJobDto> votejobs, bool doSaveChanges = true)
		{
			if (votejobs == null)
			{
				return;
			}
			foreach (VoteJobDto instance in votejobs)
			{
				if (instance == null)
				{
					continue;
				}


				this.VoteJobService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVoteJob(VoteJobDto votejob, bool doSaveChanges = true)
		{
			this.VoteJobService.Delete(votejob);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVoteJobs(IEnumerable<VoteJobDto> votejobs, bool doSaveChanges = true)
		{
			if (votejobs == null)
			{
				return;
			}
			foreach (VoteJobDto instance in votejobs)
			{
				if (instance == null)
				{
					continue;
				}


				this.VoteJobService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion VoteJob CRUD Operations


		#region VoteInstance CRUD Operations


		private IVoteInstanceService voteinstance;
		public virtual IVoteInstanceService VoteInstanceService
		{
			get
			{
				if (this.voteinstance == null)
				{
					IVoteInstanceAssembler assembler = new VoteInstanceAssembler();
					IVoteInstanceRepository repository = new VoteInstanceRepository(this.UnitOfWork);
					this.voteinstance = new VoteInstanceService(assembler, repository);
				}
				return this.voteinstance;
			}
		}


		public IEnumerable<VoteInstanceDto> ReadVoteInstances()
		{
			return this.VoteInstanceService.GetAll();
		}


		public IEnumerable<VoteInstanceDto> ReadVoteInstances(Expression<Func<VoteInstance, bool>> filter)
		{
			return this.VoteInstanceService.Find(filter);
		}


		public IEnumerable<VoteInstanceDto> ReadVoteInstances(ISpecification<VoteInstance> specification)
		{
			return this.VoteInstanceService.Find(specification.GetExpression());
		}


		public IEnumerable<VoteInstanceDto> ReadVoteInstancesPaged(int startIndex, int pageSize)
		{
			return this.VoteInstanceService.Find(startIndex, pageSize);
		}


		public IEnumerable<VoteInstanceDto> ReadVoteInstancesFiltered(string sortExpression, string filterExpression)
		{
			return this.VoteInstanceService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VoteInstanceDto> ReadVoteInstancesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VoteInstanceService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public VoteInstanceDto ReadVoteInstances(string dtoKey)
		{
			return this.VoteInstanceService.GetByKey(dtoKey);
		}


		public int VoteInstancesCount()
		{
			return this.VoteInstanceService.Count();
		}


		public int VoteInstancesCountFiltered(string filterExpression)
		{
			return this.VoteInstanceService.Count(filterExpression);
		}


		public string CreateVoteInstance(VoteInstanceDto voteinstance, bool doSaveChanges = true)
		{
			string key = this.VoteInstanceService.Add(voteinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVoteInstance(VoteInstanceDto voteinstance, bool doSaveChanges = true)
		{
			this.VoteInstanceService.Update(voteinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVoteInstances(IEnumerable<VoteInstanceDto> voteinstances, bool doSaveChanges = true)
		{
			if (voteinstances == null)
			{
				return;
			}
			foreach (VoteInstanceDto instance in voteinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.VoteInstanceService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVoteInstance(VoteInstanceDto voteinstance, bool doSaveChanges = true)
		{
			this.VoteInstanceService.Delete(voteinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVoteInstances(IEnumerable<VoteInstanceDto> voteinstances, bool doSaveChanges = true)
		{
			if (voteinstances == null)
			{
				return;
			}
			foreach (VoteInstanceDto instance in voteinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.VoteInstanceService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion VoteInstance CRUD Operations


		#region VoteInsDet CRUD Operations


		private IVoteInsDetService voteinsdet;
		public virtual IVoteInsDetService VoteInsDetService
		{
			get
			{
				if (this.voteinsdet == null)
				{
					IVoteInsDetAssembler assembler = new VoteInsDetAssembler();
					IVoteInsDetRepository repository = new VoteInsDetRepository(this.UnitOfWork);
					this.voteinsdet = new VoteInsDetService(assembler, repository);
				}
				return this.voteinsdet;
			}
		}


		public IEnumerable<VoteInsDetDto> ReadVoteInsDets()
		{
			return this.VoteInsDetService.GetAll();
		}


		public IEnumerable<VoteInsDetDto> ReadVoteInsDets(Expression<Func<VoteInsDet, bool>> filter)
		{
			return this.VoteInsDetService.Find(filter);
		}


		public IEnumerable<VoteInsDetDto> ReadVoteInsDets(ISpecification<VoteInsDet> specification)
		{
			return this.VoteInsDetService.Find(specification.GetExpression());
		}


		public IEnumerable<VoteInsDetDto> ReadVoteInsDetsPaged(int startIndex, int pageSize)
		{
			return this.VoteInsDetService.Find(startIndex, pageSize);
		}


		public IEnumerable<VoteInsDetDto> ReadVoteInsDetsFiltered(string sortExpression, string filterExpression)
		{
			return this.VoteInsDetService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VoteInsDetDto> ReadVoteInsDetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VoteInsDetService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public VoteInsDetDto ReadVoteInsDets(string dtoKey)
		{
			return this.VoteInsDetService.GetByKey(dtoKey);
		}


		public int VoteInsDetsCount()
		{
			return this.VoteInsDetService.Count();
		}


		public int VoteInsDetsCountFiltered(string filterExpression)
		{
			return this.VoteInsDetService.Count(filterExpression);
		}


		public string CreateVoteInsDet(VoteInsDetDto voteinsdet, bool doSaveChanges = true)
		{
			string key = this.VoteInsDetService.Add(voteinsdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVoteInsDet(VoteInsDetDto voteinsdet, bool doSaveChanges = true)
		{
			this.VoteInsDetService.Update(voteinsdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVoteInsDets(IEnumerable<VoteInsDetDto> voteinsdets, bool doSaveChanges = true)
		{
			if (voteinsdets == null)
			{
				return;
			}
			foreach (VoteInsDetDto instance in voteinsdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.VoteInsDetService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVoteInsDet(VoteInsDetDto voteinsdet, bool doSaveChanges = true)
		{
			this.VoteInsDetService.Delete(voteinsdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVoteInsDets(IEnumerable<VoteInsDetDto> voteinsdets, bool doSaveChanges = true)
		{
			if (voteinsdets == null)
			{
				return;
			}
			foreach (VoteInsDetDto instance in voteinsdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.VoteInsDetService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion VoteInsDet CRUD Operations


		#region VoteGroup CRUD Operations


		private IVoteGroupService votegroup;
		public virtual IVoteGroupService VoteGroupService
		{
			get
			{
				if (this.votegroup == null)
				{
					IVoteGroupAssembler assembler = new VoteGroupAssembler();
					IVoteGroupRepository repository = new VoteGroupRepository(this.UnitOfWork);
					this.votegroup = new VoteGroupService(assembler, repository);
				}
				return this.votegroup;
			}
		}


		public IEnumerable<VoteGroupDto> ReadVoteGroups()
		{
			return this.VoteGroupService.GetAll();
		}


		public IEnumerable<VoteGroupDto> ReadVoteGroups(Expression<Func<VoteGroup, bool>> filter)
		{
			return this.VoteGroupService.Find(filter);
		}


		public IEnumerable<VoteGroupDto> ReadVoteGroups(ISpecification<VoteGroup> specification)
		{
			return this.VoteGroupService.Find(specification.GetExpression());
		}


		public IEnumerable<VoteGroupDto> ReadVoteGroupsPaged(int startIndex, int pageSize)
		{
			return this.VoteGroupService.Find(startIndex, pageSize);
		}


		public IEnumerable<VoteGroupDto> ReadVoteGroupsFiltered(string sortExpression, string filterExpression)
		{
			return this.VoteGroupService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VoteGroupDto> ReadVoteGroupsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VoteGroupService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public VoteGroupDto ReadVoteGroups(string dtoKey)
		{
			return this.VoteGroupService.GetByKey(dtoKey);
		}


		public int VoteGroupsCount()
		{
			return this.VoteGroupService.Count();
		}


		public int VoteGroupsCountFiltered(string filterExpression)
		{
			return this.VoteGroupService.Count(filterExpression);
		}


		public string CreateVoteGroup(VoteGroupDto votegroup, bool doSaveChanges = true)
		{
			string key = this.VoteGroupService.Add(votegroup);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVoteGroup(VoteGroupDto votegroup, bool doSaveChanges = true)
		{
			this.VoteGroupService.Update(votegroup);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVoteGroups(IEnumerable<VoteGroupDto> votegroups, bool doSaveChanges = true)
		{
			if (votegroups == null)
			{
				return;
			}
			foreach (VoteGroupDto instance in votegroups)
			{
				if (instance == null)
				{
					continue;
				}


				this.VoteGroupService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVoteGroup(VoteGroupDto votegroup, bool doSaveChanges = true)
		{
			this.VoteGroupService.Delete(votegroup);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVoteGroups(IEnumerable<VoteGroupDto> votegroups, bool doSaveChanges = true)
		{
			if (votegroups == null)
			{
				return;
			}
			foreach (VoteGroupDto instance in votegroups)
			{
				if (instance == null)
				{
					continue;
				}


				this.VoteGroupService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion VoteGroup CRUD Operations


		#region VoteGCond CRUD Operations


		private IVoteGCondService votegcond;
		public virtual IVoteGCondService VoteGCondService
		{
			get
			{
				if (this.votegcond == null)
				{
					IVoteGCondAssembler assembler = new VoteGCondAssembler();
					IVoteGCondRepository repository = new VoteGCondRepository(this.UnitOfWork);
					this.votegcond = new VoteGCondService(assembler, repository);
				}
				return this.votegcond;
			}
		}


		public IEnumerable<VoteGCondDto> ReadVoteGConds()
		{
			return this.VoteGCondService.GetAll();
		}


		public IEnumerable<VoteGCondDto> ReadVoteGConds(Expression<Func<VoteGCond, bool>> filter)
		{
			return this.VoteGCondService.Find(filter);
		}


		public IEnumerable<VoteGCondDto> ReadVoteGConds(ISpecification<VoteGCond> specification)
		{
			return this.VoteGCondService.Find(specification.GetExpression());
		}


		public IEnumerable<VoteGCondDto> ReadVoteGCondsPaged(int startIndex, int pageSize)
		{
			return this.VoteGCondService.Find(startIndex, pageSize);
		}


		public IEnumerable<VoteGCondDto> ReadVoteGCondsFiltered(string sortExpression, string filterExpression)
		{
			return this.VoteGCondService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VoteGCondDto> ReadVoteGCondsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VoteGCondService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public VoteGCondDto ReadVoteGConds(string dtoKey)
		{
			return this.VoteGCondService.GetByKey(dtoKey);
		}


		public int VoteGCondsCount()
		{
			return this.VoteGCondService.Count();
		}


		public int VoteGCondsCountFiltered(string filterExpression)
		{
			return this.VoteGCondService.Count(filterExpression);
		}


		public string CreateVoteGCond(VoteGCondDto votegcond, bool doSaveChanges = true)
		{
			string key = this.VoteGCondService.Add(votegcond);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVoteGCond(VoteGCondDto votegcond, bool doSaveChanges = true)
		{
			this.VoteGCondService.Update(votegcond);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVoteGConds(IEnumerable<VoteGCondDto> votegconds, bool doSaveChanges = true)
		{
			if (votegconds == null)
			{
				return;
			}
			foreach (VoteGCondDto instance in votegconds)
			{
				if (instance == null)
				{
					continue;
				}


				this.VoteGCondService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVoteGCond(VoteGCondDto votegcond, bool doSaveChanges = true)
		{
			this.VoteGCondService.Delete(votegcond);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVoteGConds(IEnumerable<VoteGCondDto> votegconds, bool doSaveChanges = true)
		{
			if (votegconds == null)
			{
				return;
			}
			foreach (VoteGCondDto instance in votegconds)
			{
				if (instance == null)
				{
					continue;
				}


				this.VoteGCondService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion VoteGCond CRUD Operations


		#region VoteUserDefineList CRUD Operations


		private IVoteUserDefineListService voteuserdefinelist;
		public virtual IVoteUserDefineListService VoteUserDefineListService
		{
			get
			{
				if (this.voteuserdefinelist == null)
				{
					IVoteUserDefineListAssembler assembler = new VoteUserDefineListAssembler();
					IVoteUserDefineListRepository repository = new VoteUserDefineListRepository(this.UnitOfWork);
					this.voteuserdefinelist = new VoteUserDefineListService(assembler, repository);
				}
				return this.voteuserdefinelist;
			}
		}


		public IEnumerable<VoteUserDefineListDto> ReadVoteUserDefineLists()
		{
			return this.VoteUserDefineListService.GetAll();
		}


		public IEnumerable<VoteUserDefineListDto> ReadVoteUserDefineLists(Expression<Func<VoteUserDefineList, bool>> filter)
		{
			return this.VoteUserDefineListService.Find(filter);
		}


		public IEnumerable<VoteUserDefineListDto> ReadVoteUserDefineLists(ISpecification<VoteUserDefineList> specification)
		{
			return this.VoteUserDefineListService.Find(specification.GetExpression());
		}


		public IEnumerable<VoteUserDefineListDto> ReadVoteUserDefineListsPaged(int startIndex, int pageSize)
		{
			return this.VoteUserDefineListService.Find(startIndex, pageSize);
		}


		public IEnumerable<VoteUserDefineListDto> ReadVoteUserDefineListsFiltered(string sortExpression, string filterExpression)
		{
			return this.VoteUserDefineListService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<VoteUserDefineListDto> ReadVoteUserDefineListsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.VoteUserDefineListService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public VoteUserDefineListDto ReadVoteUserDefineLists(string dtoKey)
		{
			return this.VoteUserDefineListService.GetByKey(dtoKey);
		}


		public int VoteUserDefineListsCount()
		{
			return this.VoteUserDefineListService.Count();
		}


		public int VoteUserDefineListsCountFiltered(string filterExpression)
		{
			return this.VoteUserDefineListService.Count(filterExpression);
		}


		public string CreateVoteUserDefineList(VoteUserDefineListDto voteuserdefinelist, bool doSaveChanges = true)
		{
			string key = this.VoteUserDefineListService.Add(voteuserdefinelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateVoteUserDefineList(VoteUserDefineListDto voteuserdefinelist, bool doSaveChanges = true)
		{
			this.VoteUserDefineListService.Update(voteuserdefinelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateVoteUserDefineLists(IEnumerable<VoteUserDefineListDto> voteuserdefinelists, bool doSaveChanges = true)
		{
			if (voteuserdefinelists == null)
			{
				return;
			}
			foreach (VoteUserDefineListDto instance in voteuserdefinelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.VoteUserDefineListService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteVoteUserDefineList(VoteUserDefineListDto voteuserdefinelist, bool doSaveChanges = true)
		{
			this.VoteUserDefineListService.Delete(voteuserdefinelist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteVoteUserDefineLists(IEnumerable<VoteUserDefineListDto> voteuserdefinelists, bool doSaveChanges = true)
		{
			if (voteuserdefinelists == null)
			{
				return;
			}
			foreach (VoteUserDefineListDto instance in voteuserdefinelists)
			{
				if (instance == null)
				{
					continue;
				}


				this.VoteUserDefineListService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion VoteUserDefineList CRUD Operations


		#region PassPortStudentApplicationItemFailLog CRUD Operations


		private IPassPortStudentApplicationItemFailLogService passportstudentapplicationitemfaillog;
		public virtual IPassPortStudentApplicationItemFailLogService PassPortStudentApplicationItemFailLogService
		{
			get
			{
				if (this.passportstudentapplicationitemfaillog == null)
				{
					IPassPortStudentApplicationItemFailLogAssembler assembler = new PassPortStudentApplicationItemFailLogAssembler();
					IPassPortStudentApplicationItemFailLogRepository repository = new PassPortStudentApplicationItemFailLogRepository(this.UnitOfWork);
					this.passportstudentapplicationitemfaillog = new PassPortStudentApplicationItemFailLogService(assembler, repository);
				}
				return this.passportstudentapplicationitemfaillog;
			}
		}


		public IEnumerable<PassPortStudentApplicationItemFailLogDto> ReadPassPortStudentApplicationItemFailLogs()
		{
			return this.PassPortStudentApplicationItemFailLogService.GetAll();
		}


		public IEnumerable<PassPortStudentApplicationItemFailLogDto> ReadPassPortStudentApplicationItemFailLogs(Expression<Func<PassPortStudentApplicationItemFailLog, bool>> filter)
		{
			return this.PassPortStudentApplicationItemFailLogService.Find(filter);
		}


		public IEnumerable<PassPortStudentApplicationItemFailLogDto> ReadPassPortStudentApplicationItemFailLogs(ISpecification<PassPortStudentApplicationItemFailLog> specification)
		{
			return this.PassPortStudentApplicationItemFailLogService.Find(specification.GetExpression());
		}


		public IEnumerable<PassPortStudentApplicationItemFailLogDto> ReadPassPortStudentApplicationItemFailLogsPaged(int startIndex, int pageSize)
		{
			return this.PassPortStudentApplicationItemFailLogService.Find(startIndex, pageSize);
		}


		public IEnumerable<PassPortStudentApplicationItemFailLogDto> ReadPassPortStudentApplicationItemFailLogsFiltered(string sortExpression, string filterExpression)
		{
			return this.PassPortStudentApplicationItemFailLogService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PassPortStudentApplicationItemFailLogDto> ReadPassPortStudentApplicationItemFailLogsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PassPortStudentApplicationItemFailLogService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public PassPortStudentApplicationItemFailLogDto ReadPassPortStudentApplicationItemFailLogs(string dtoKey)
		{
			return this.PassPortStudentApplicationItemFailLogService.GetByKey(dtoKey);
		}


		public int PassPortStudentApplicationItemFailLogsCount()
		{
			return this.PassPortStudentApplicationItemFailLogService.Count();
		}


		public int PassPortStudentApplicationItemFailLogsCountFiltered(string filterExpression)
		{
			return this.PassPortStudentApplicationItemFailLogService.Count(filterExpression);
		}


		public string CreatePassPortStudentApplicationItemFailLog(PassPortStudentApplicationItemFailLogDto passportstudentapplicationitemfaillog, bool doSaveChanges = true)
		{
			string key = this.PassPortStudentApplicationItemFailLogService.Add(passportstudentapplicationitemfaillog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePassPortStudentApplicationItemFailLog(PassPortStudentApplicationItemFailLogDto passportstudentapplicationitemfaillog, bool doSaveChanges = true)
		{
			this.PassPortStudentApplicationItemFailLogService.Update(passportstudentapplicationitemfaillog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePassPortStudentApplicationItemFailLogs(IEnumerable<PassPortStudentApplicationItemFailLogDto> passportstudentapplicationitemfaillogs, bool doSaveChanges = true)
		{
			if (passportstudentapplicationitemfaillogs == null)
			{
				return;
			}
			foreach (PassPortStudentApplicationItemFailLogDto instance in passportstudentapplicationitemfaillogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.PassPortStudentApplicationItemFailLogService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePassPortStudentApplicationItemFailLog(PassPortStudentApplicationItemFailLogDto passportstudentapplicationitemfaillog, bool doSaveChanges = true)
		{
			this.PassPortStudentApplicationItemFailLogService.Delete(passportstudentapplicationitemfaillog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePassPortStudentApplicationItemFailLogs(IEnumerable<PassPortStudentApplicationItemFailLogDto> passportstudentapplicationitemfaillogs, bool doSaveChanges = true)
		{
			if (passportstudentapplicationitemfaillogs == null)
			{
				return;
			}
			foreach (PassPortStudentApplicationItemFailLogDto instance in passportstudentapplicationitemfaillogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.PassPortStudentApplicationItemFailLogService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion PassPortStudentApplicationItemFailLog CRUD Operations


		#region PassPortJobFinalMan CRUD Operations


		private IPassPortJobFinalManService passportjobfinalman;
		public virtual IPassPortJobFinalManService PassPortJobFinalManService
		{
			get
			{
				if (this.passportjobfinalman == null)
				{
					IPassPortJobFinalManAssembler assembler = new PassPortJobFinalManAssembler();
					IPassPortJobFinalManRepository repository = new PassPortJobFinalManRepository(this.UnitOfWork);
					this.passportjobfinalman = new PassPortJobFinalManService(assembler, repository);
				}
				return this.passportjobfinalman;
			}
		}


		public IEnumerable<PassPortJobFinalManDto> ReadPassPortJobFinalMen()
		{
			return this.PassPortJobFinalManService.GetAll();
		}


		public IEnumerable<PassPortJobFinalManDto> ReadPassPortJobFinalMen(Expression<Func<PassPortJobFinalMan, bool>> filter)
		{
			return this.PassPortJobFinalManService.Find(filter);
		}


		public IEnumerable<PassPortJobFinalManDto> ReadPassPortJobFinalMen(ISpecification<PassPortJobFinalMan> specification)
		{
			return this.PassPortJobFinalManService.Find(specification.GetExpression());
		}


		public IEnumerable<PassPortJobFinalManDto> ReadPassPortJobFinalMenPaged(int startIndex, int pageSize)
		{
			return this.PassPortJobFinalManService.Find(startIndex, pageSize);
		}


		public IEnumerable<PassPortJobFinalManDto> ReadPassPortJobFinalMenFiltered(string sortExpression, string filterExpression)
		{
			return this.PassPortJobFinalManService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PassPortJobFinalManDto> ReadPassPortJobFinalMenPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PassPortJobFinalManService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public PassPortJobFinalManDto ReadPassPortJobFinalMen(string dtoKey)
		{
			return this.PassPortJobFinalManService.GetByKey(dtoKey);
		}


		public int PassPortJobFinalMenCount()
		{
			return this.PassPortJobFinalManService.Count();
		}


		public int PassPortJobFinalMenCountFiltered(string filterExpression)
		{
			return this.PassPortJobFinalManService.Count(filterExpression);
		}


		public string CreatePassPortJobFinalMan(PassPortJobFinalManDto passportjobfinalman, bool doSaveChanges = true)
		{
			string key = this.PassPortJobFinalManService.Add(passportjobfinalman);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePassPortJobFinalMan(PassPortJobFinalManDto passportjobfinalman, bool doSaveChanges = true)
		{
			this.PassPortJobFinalManService.Update(passportjobfinalman);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePassPortJobFinalMen(IEnumerable<PassPortJobFinalManDto> passportjobfinalmen, bool doSaveChanges = true)
		{
			if (passportjobfinalmen == null)
			{
				return;
			}
			foreach (PassPortJobFinalManDto instance in passportjobfinalmen)
			{
				if (instance == null)
				{
					continue;
				}


				this.PassPortJobFinalManService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePassPortJobFinalMan(PassPortJobFinalManDto passportjobfinalman, bool doSaveChanges = true)
		{
			this.PassPortJobFinalManService.Delete(passportjobfinalman);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePassPortJobFinalMen(IEnumerable<PassPortJobFinalManDto> passportjobfinalmen, bool doSaveChanges = true)
		{
			if (passportjobfinalmen == null)
			{
				return;
			}
			foreach (PassPortJobFinalManDto instance in passportjobfinalmen)
			{
				if (instance == null)
				{
					continue;
				}


				this.PassPortJobFinalManService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion PassPortJobFinalMan CRUD Operations


		#region PassPortDocGrade CRUD Operations


		private IPassPortDocGradeService passportdocgrade;
		public virtual IPassPortDocGradeService PassPortDocGradeService
		{
			get
			{
				if (this.passportdocgrade == null)
				{
					IPassPortDocGradeAssembler assembler = new PassPortDocGradeAssembler();
					IPassPortDocGradeRepository repository = new PassPortDocGradeRepository(this.UnitOfWork);
					this.passportdocgrade = new PassPortDocGradeService(assembler, repository);
				}
				return this.passportdocgrade;
			}
		}


		public IEnumerable<PassPortDocGradeDto> ReadPassPortDocGrades()
		{
			return this.PassPortDocGradeService.GetAll();
		}


		public IEnumerable<PassPortDocGradeDto> ReadPassPortDocGrades(Expression<Func<PassPortDocGrade, bool>> filter)
		{
			return this.PassPortDocGradeService.Find(filter);
		}


		public IEnumerable<PassPortDocGradeDto> ReadPassPortDocGrades(ISpecification<PassPortDocGrade> specification)
		{
			return this.PassPortDocGradeService.Find(specification.GetExpression());
		}


		public IEnumerable<PassPortDocGradeDto> ReadPassPortDocGradesPaged(int startIndex, int pageSize)
		{
			return this.PassPortDocGradeService.Find(startIndex, pageSize);
		}


		public IEnumerable<PassPortDocGradeDto> ReadPassPortDocGradesFiltered(string sortExpression, string filterExpression)
		{
			return this.PassPortDocGradeService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<PassPortDocGradeDto> ReadPassPortDocGradesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.PassPortDocGradeService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public PassPortDocGradeDto ReadPassPortDocGrades(string dtoKey)
		{
			return this.PassPortDocGradeService.GetByKey(dtoKey);
		}


		public int PassPortDocGradesCount()
		{
			return this.PassPortDocGradeService.Count();
		}


		public int PassPortDocGradesCountFiltered(string filterExpression)
		{
			return this.PassPortDocGradeService.Count(filterExpression);
		}


		public string CreatePassPortDocGrade(PassPortDocGradeDto passportdocgrade, bool doSaveChanges = true)
		{
			string key = this.PassPortDocGradeService.Add(passportdocgrade);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdatePassPortDocGrade(PassPortDocGradeDto passportdocgrade, bool doSaveChanges = true)
		{
			this.PassPortDocGradeService.Update(passportdocgrade);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdatePassPortDocGrades(IEnumerable<PassPortDocGradeDto> passportdocgrades, bool doSaveChanges = true)
		{
			if (passportdocgrades == null)
			{
				return;
			}
			foreach (PassPortDocGradeDto instance in passportdocgrades)
			{
				if (instance == null)
				{
					continue;
				}


				this.PassPortDocGradeService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeletePassPortDocGrade(PassPortDocGradeDto passportdocgrade, bool doSaveChanges = true)
		{
			this.PassPortDocGradeService.Delete(passportdocgrade);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeletePassPortDocGrades(IEnumerable<PassPortDocGradeDto> passportdocgrades, bool doSaveChanges = true)
		{
			if (passportdocgrades == null)
			{
				return;
			}
			foreach (PassPortDocGradeDto instance in passportdocgrades)
			{
				if (instance == null)
				{
					continue;
				}


				this.PassPortDocGradeService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion PassPortDocGrade CRUD Operations


		#region EduPassportTemplateTarget CRUD Operations


		private IEduPassportTemplateTargetService edupassporttemplatetarget;
		public virtual IEduPassportTemplateTargetService EduPassportTemplateTargetService
		{
			get
			{
				if (this.edupassporttemplatetarget == null)
				{
					IEduPassportTemplateTargetAssembler assembler = new EduPassportTemplateTargetAssembler();
					IEduPassportTemplateTargetRepository repository = new EduPassportTemplateTargetRepository(this.UnitOfWork);
					this.edupassporttemplatetarget = new EduPassportTemplateTargetService(assembler, repository);
				}
				return this.edupassporttemplatetarget;
			}
		}


		public IEnumerable<EduPassportTemplateTargetDto> ReadEduPassportTemplateTargets()
		{
			return this.EduPassportTemplateTargetService.GetAll();
		}


		public IEnumerable<EduPassportTemplateTargetDto> ReadEduPassportTemplateTargets(Expression<Func<EduPassportTemplateTarget, bool>> filter)
		{
			return this.EduPassportTemplateTargetService.Find(filter);
		}


		public IEnumerable<EduPassportTemplateTargetDto> ReadEduPassportTemplateTargets(ISpecification<EduPassportTemplateTarget> specification)
		{
			return this.EduPassportTemplateTargetService.Find(specification.GetExpression());
		}


		public IEnumerable<EduPassportTemplateTargetDto> ReadEduPassportTemplateTargetsPaged(int startIndex, int pageSize)
		{
			return this.EduPassportTemplateTargetService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduPassportTemplateTargetDto> ReadEduPassportTemplateTargetsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduPassportTemplateTargetService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduPassportTemplateTargetDto> ReadEduPassportTemplateTargetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduPassportTemplateTargetService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduPassportTemplateTargetDto ReadEduPassportTemplateTargets(string dtoKey)
		{
			return this.EduPassportTemplateTargetService.GetByKey(dtoKey);
		}


		public int EduPassportTemplateTargetsCount()
		{
			return this.EduPassportTemplateTargetService.Count();
		}


		public int EduPassportTemplateTargetsCountFiltered(string filterExpression)
		{
			return this.EduPassportTemplateTargetService.Count(filterExpression);
		}


		public string CreateEduPassportTemplateTarget(EduPassportTemplateTargetDto edupassporttemplatetarget, bool doSaveChanges = true)
		{
			string key = this.EduPassportTemplateTargetService.Add(edupassporttemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduPassportTemplateTarget(EduPassportTemplateTargetDto edupassporttemplatetarget, bool doSaveChanges = true)
		{
			this.EduPassportTemplateTargetService.Update(edupassporttemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduPassportTemplateTargets(IEnumerable<EduPassportTemplateTargetDto> edupassporttemplatetargets, bool doSaveChanges = true)
		{
			if (edupassporttemplatetargets == null)
			{
				return;
			}
			foreach (EduPassportTemplateTargetDto instance in edupassporttemplatetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportTemplateTargetService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduPassportTemplateTarget(EduPassportTemplateTargetDto edupassporttemplatetarget, bool doSaveChanges = true)
		{
			this.EduPassportTemplateTargetService.Delete(edupassporttemplatetarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduPassportTemplateTargets(IEnumerable<EduPassportTemplateTargetDto> edupassporttemplatetargets, bool doSaveChanges = true)
		{
			if (edupassporttemplatetargets == null)
			{
				return;
			}
			foreach (EduPassportTemplateTargetDto instance in edupassporttemplatetargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportTemplateTargetService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduPassportTemplateTarget CRUD Operations


		#region EduPassportTemplateItem CRUD Operations


		private IEduPassportTemplateItemService edupassporttemplateitem;
		public virtual IEduPassportTemplateItemService EduPassportTemplateItemService
		{
			get
			{
				if (this.edupassporttemplateitem == null)
				{
					IEduPassportTemplateItemAssembler assembler = new EduPassportTemplateItemAssembler();
					IEduPassportTemplateItemRepository repository = new EduPassportTemplateItemRepository(this.UnitOfWork);
					this.edupassporttemplateitem = new EduPassportTemplateItemService(assembler, repository);
				}
				return this.edupassporttemplateitem;
			}
		}


		public IEnumerable<EduPassportTemplateItemDto> ReadEduPassportTemplateItems()
		{
			return this.EduPassportTemplateItemService.GetAll();
		}


		public IEnumerable<EduPassportTemplateItemDto> ReadEduPassportTemplateItems(Expression<Func<EduPassportTemplateItem, bool>> filter)
		{
			return this.EduPassportTemplateItemService.Find(filter);
		}


		public IEnumerable<EduPassportTemplateItemDto> ReadEduPassportTemplateItems(ISpecification<EduPassportTemplateItem> specification)
		{
			return this.EduPassportTemplateItemService.Find(specification.GetExpression());
		}


		public IEnumerable<EduPassportTemplateItemDto> ReadEduPassportTemplateItemsPaged(int startIndex, int pageSize)
		{
			return this.EduPassportTemplateItemService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduPassportTemplateItemDto> ReadEduPassportTemplateItemsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduPassportTemplateItemService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduPassportTemplateItemDto> ReadEduPassportTemplateItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduPassportTemplateItemService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduPassportTemplateItemDto ReadEduPassportTemplateItems(string dtoKey)
		{
			return this.EduPassportTemplateItemService.GetByKey(dtoKey);
		}


		public int EduPassportTemplateItemsCount()
		{
			return this.EduPassportTemplateItemService.Count();
		}


		public int EduPassportTemplateItemsCountFiltered(string filterExpression)
		{
			return this.EduPassportTemplateItemService.Count(filterExpression);
		}


		public string CreateEduPassportTemplateItem(EduPassportTemplateItemDto edupassporttemplateitem, bool doSaveChanges = true)
		{
			string key = this.EduPassportTemplateItemService.Add(edupassporttemplateitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduPassportTemplateItem(EduPassportTemplateItemDto edupassporttemplateitem, bool doSaveChanges = true)
		{
			this.EduPassportTemplateItemService.Update(edupassporttemplateitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduPassportTemplateItems(IEnumerable<EduPassportTemplateItemDto> edupassporttemplateitems, bool doSaveChanges = true)
		{
			if (edupassporttemplateitems == null)
			{
				return;
			}
			foreach (EduPassportTemplateItemDto instance in edupassporttemplateitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportTemplateItemService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduPassportTemplateItem(EduPassportTemplateItemDto edupassporttemplateitem, bool doSaveChanges = true)
		{
			this.EduPassportTemplateItemService.Delete(edupassporttemplateitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduPassportTemplateItems(IEnumerable<EduPassportTemplateItemDto> edupassporttemplateitems, bool doSaveChanges = true)
		{
			if (edupassporttemplateitems == null)
			{
				return;
			}
			foreach (EduPassportTemplateItemDto instance in edupassporttemplateitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportTemplateItemService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduPassportTemplateItem CRUD Operations


		#region EduPassportTemplate CRUD Operations


		private IEduPassportTemplateService edupassporttemplate;
		public virtual IEduPassportTemplateService EduPassportTemplateService
		{
			get
			{
				if (this.edupassporttemplate == null)
				{
					IEduPassportTemplateAssembler assembler = new EduPassportTemplateAssembler();
					IEduPassportTemplateRepository repository = new EduPassportTemplateRepository(this.UnitOfWork);
					this.edupassporttemplate = new EduPassportTemplateService(assembler, repository);
				}
				return this.edupassporttemplate;
			}
		}


		public IEnumerable<EduPassportTemplateDto> ReadEduPassportTemplates()
		{
			return this.EduPassportTemplateService.GetAll();
		}


		public IEnumerable<EduPassportTemplateDto> ReadEduPassportTemplates(Expression<Func<EduPassportTemplate, bool>> filter)
		{
			return this.EduPassportTemplateService.Find(filter);
		}


		public IEnumerable<EduPassportTemplateDto> ReadEduPassportTemplates(ISpecification<EduPassportTemplate> specification)
		{
			return this.EduPassportTemplateService.Find(specification.GetExpression());
		}


		public IEnumerable<EduPassportTemplateDto> ReadEduPassportTemplatesPaged(int startIndex, int pageSize)
		{
			return this.EduPassportTemplateService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduPassportTemplateDto> ReadEduPassportTemplatesFiltered(string sortExpression, string filterExpression)
		{
			return this.EduPassportTemplateService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduPassportTemplateDto> ReadEduPassportTemplatesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduPassportTemplateService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduPassportTemplateDto ReadEduPassportTemplates(string dtoKey)
		{
			return this.EduPassportTemplateService.GetByKey(dtoKey);
		}


		public int EduPassportTemplatesCount()
		{
			return this.EduPassportTemplateService.Count();
		}


		public int EduPassportTemplatesCountFiltered(string filterExpression)
		{
			return this.EduPassportTemplateService.Count(filterExpression);
		}


		public string CreateEduPassportTemplate(EduPassportTemplateDto edupassporttemplate, bool doSaveChanges = true)
		{
			string key = this.EduPassportTemplateService.Add(edupassporttemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduPassportTemplate(EduPassportTemplateDto edupassporttemplate, bool doSaveChanges = true)
		{
			this.EduPassportTemplateService.Update(edupassporttemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduPassportTemplates(IEnumerable<EduPassportTemplateDto> edupassporttemplates, bool doSaveChanges = true)
		{
			if (edupassporttemplates == null)
			{
				return;
			}
			foreach (EduPassportTemplateDto instance in edupassporttemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportTemplateService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduPassportTemplate(EduPassportTemplateDto edupassporttemplate, bool doSaveChanges = true)
		{
			this.EduPassportTemplateService.Delete(edupassporttemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduPassportTemplates(IEnumerable<EduPassportTemplateDto> edupassporttemplates, bool doSaveChanges = true)
		{
			if (edupassporttemplates == null)
			{
				return;
			}
			foreach (EduPassportTemplateDto instance in edupassporttemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportTemplateService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduPassportTemplate CRUD Operations


		#region EduPassportItemDet CRUD Operations


		private IEduPassportItemDetService edupassportitemdet;
		public virtual IEduPassportItemDetService EduPassportItemDetService
		{
			get
			{
				if (this.edupassportitemdet == null)
				{
					IEduPassportItemDetAssembler assembler = new EduPassportItemDetAssembler();
					IEduPassportItemDetRepository repository = new EduPassportItemDetRepository(this.UnitOfWork);
					this.edupassportitemdet = new EduPassportItemDetService(assembler, repository);
				}
				return this.edupassportitemdet;
			}
		}


		public IEnumerable<EduPassportItemDetDto> ReadEduPassportItemDets()
		{
			return this.EduPassportItemDetService.GetAll();
		}


		public IEnumerable<EduPassportItemDetDto> ReadEduPassportItemDets(Expression<Func<EduPassportItemDet, bool>> filter)
		{
			return this.EduPassportItemDetService.Find(filter);
		}


		public IEnumerable<EduPassportItemDetDto> ReadEduPassportItemDets(ISpecification<EduPassportItemDet> specification)
		{
			return this.EduPassportItemDetService.Find(specification.GetExpression());
		}


		public IEnumerable<EduPassportItemDetDto> ReadEduPassportItemDetsPaged(int startIndex, int pageSize)
		{
			return this.EduPassportItemDetService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduPassportItemDetDto> ReadEduPassportItemDetsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduPassportItemDetService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduPassportItemDetDto> ReadEduPassportItemDetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduPassportItemDetService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduPassportItemDetDto ReadEduPassportItemDets(string dtoKey)
		{
			return this.EduPassportItemDetService.GetByKey(dtoKey);
		}


		public int EduPassportItemDetsCount()
		{
			return this.EduPassportItemDetService.Count();
		}


		public int EduPassportItemDetsCountFiltered(string filterExpression)
		{
			return this.EduPassportItemDetService.Count(filterExpression);
		}


		public string CreateEduPassportItemDet(EduPassportItemDetDto edupassportitemdet, bool doSaveChanges = true)
		{
			string key = this.EduPassportItemDetService.Add(edupassportitemdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduPassportItemDet(EduPassportItemDetDto edupassportitemdet, bool doSaveChanges = true)
		{
			this.EduPassportItemDetService.Update(edupassportitemdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduPassportItemDets(IEnumerable<EduPassportItemDetDto> edupassportitemdets, bool doSaveChanges = true)
		{
			if (edupassportitemdets == null)
			{
				return;
			}
			foreach (EduPassportItemDetDto instance in edupassportitemdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportItemDetService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduPassportItemDet(EduPassportItemDetDto edupassportitemdet, bool doSaveChanges = true)
		{
			this.EduPassportItemDetService.Delete(edupassportitemdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduPassportItemDets(IEnumerable<EduPassportItemDetDto> edupassportitemdets, bool doSaveChanges = true)
		{
			if (edupassportitemdets == null)
			{
				return;
			}
			foreach (EduPassportItemDetDto instance in edupassportitemdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportItemDetService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduPassportItemDet CRUD Operations


		#region EduPassportItemTarget CRUD Operations


		private IEduPassportItemTargetService edupassportitemtarget;
		public virtual IEduPassportItemTargetService EduPassportItemTargetService
		{
			get
			{
				if (this.edupassportitemtarget == null)
				{
					IEduPassportItemTargetAssembler assembler = new EduPassportItemTargetAssembler();
					IEduPassportItemTargetRepository repository = new EduPassportItemTargetRepository(this.UnitOfWork);
					this.edupassportitemtarget = new EduPassportItemTargetService(assembler, repository);
				}
				return this.edupassportitemtarget;
			}
		}


		public IEnumerable<EduPassportItemTargetDto> ReadEduPassportItemTargets()
		{
			return this.EduPassportItemTargetService.GetAll();
		}


		public IEnumerable<EduPassportItemTargetDto> ReadEduPassportItemTargets(Expression<Func<EduPassportItemTarget, bool>> filter)
		{
			return this.EduPassportItemTargetService.Find(filter);
		}


		public IEnumerable<EduPassportItemTargetDto> ReadEduPassportItemTargets(ISpecification<EduPassportItemTarget> specification)
		{
			return this.EduPassportItemTargetService.Find(specification.GetExpression());
		}


		public IEnumerable<EduPassportItemTargetDto> ReadEduPassportItemTargetsPaged(int startIndex, int pageSize)
		{
			return this.EduPassportItemTargetService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduPassportItemTargetDto> ReadEduPassportItemTargetsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduPassportItemTargetService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduPassportItemTargetDto> ReadEduPassportItemTargetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduPassportItemTargetService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduPassportItemTargetDto ReadEduPassportItemTargets(string dtoKey)
		{
			return this.EduPassportItemTargetService.GetByKey(dtoKey);
		}


		public int EduPassportItemTargetsCount()
		{
			return this.EduPassportItemTargetService.Count();
		}


		public int EduPassportItemTargetsCountFiltered(string filterExpression)
		{
			return this.EduPassportItemTargetService.Count(filterExpression);
		}


		public string CreateEduPassportItemTarget(EduPassportItemTargetDto edupassportitemtarget, bool doSaveChanges = true)
		{
			string key = this.EduPassportItemTargetService.Add(edupassportitemtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduPassportItemTarget(EduPassportItemTargetDto edupassportitemtarget, bool doSaveChanges = true)
		{
			this.EduPassportItemTargetService.Update(edupassportitemtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduPassportItemTargets(IEnumerable<EduPassportItemTargetDto> edupassportitemtargets, bool doSaveChanges = true)
		{
			if (edupassportitemtargets == null)
			{
				return;
			}
			foreach (EduPassportItemTargetDto instance in edupassportitemtargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportItemTargetService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduPassportItemTarget(EduPassportItemTargetDto edupassportitemtarget, bool doSaveChanges = true)
		{
			this.EduPassportItemTargetService.Delete(edupassportitemtarget);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduPassportItemTargets(IEnumerable<EduPassportItemTargetDto> edupassportitemtargets, bool doSaveChanges = true)
		{
			if (edupassportitemtargets == null)
			{
				return;
			}
			foreach (EduPassportItemTargetDto instance in edupassportitemtargets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportItemTargetService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduPassportItemTarget CRUD Operations


		#region EduPassportItem CRUD Operations


		private IEduPassportItemService edupassportitem;
		public virtual IEduPassportItemService EduPassportItemService
		{
			get
			{
				if (this.edupassportitem == null)
				{
					IEduPassportItemAssembler assembler = new EduPassportItemAssembler();
					IEduPassportItemRepository repository = new EduPassportItemRepository(this.UnitOfWork);
					this.edupassportitem = new EduPassportItemService(assembler, repository);
				}
				return this.edupassportitem;
			}
		}


		public IEnumerable<EduPassportItemDto> ReadEduPassportItems()
		{
			return this.EduPassportItemService.GetAll();
		}


		public IEnumerable<EduPassportItemDto> ReadEduPassportItems(Expression<Func<EduPassportItem, bool>> filter)
		{
			return this.EduPassportItemService.Find(filter);
		}


		public IEnumerable<EduPassportItemDto> ReadEduPassportItems(ISpecification<EduPassportItem> specification)
		{
			return this.EduPassportItemService.Find(specification.GetExpression());
		}


		public IEnumerable<EduPassportItemDto> ReadEduPassportItemsPaged(int startIndex, int pageSize)
		{
			return this.EduPassportItemService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduPassportItemDto> ReadEduPassportItemsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduPassportItemService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduPassportItemDto> ReadEduPassportItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduPassportItemService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduPassportItemDto ReadEduPassportItems(string dtoKey)
		{
			return this.EduPassportItemService.GetByKey(dtoKey);
		}


		public int EduPassportItemsCount()
		{
			return this.EduPassportItemService.Count();
		}


		public int EduPassportItemsCountFiltered(string filterExpression)
		{
			return this.EduPassportItemService.Count(filterExpression);
		}


		public string CreateEduPassportItem(EduPassportItemDto edupassportitem, bool doSaveChanges = true)
		{
			string key = this.EduPassportItemService.Add(edupassportitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduPassportItem(EduPassportItemDto edupassportitem, bool doSaveChanges = true)
		{
			this.EduPassportItemService.Update(edupassportitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduPassportItems(IEnumerable<EduPassportItemDto> edupassportitems, bool doSaveChanges = true)
		{
			if (edupassportitems == null)
			{
				return;
			}
			foreach (EduPassportItemDto instance in edupassportitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportItemService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduPassportItem(EduPassportItemDto edupassportitem, bool doSaveChanges = true)
		{
			this.EduPassportItemService.Delete(edupassportitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduPassportItems(IEnumerable<EduPassportItemDto> edupassportitems, bool doSaveChanges = true)
		{
			if (edupassportitems == null)
			{
				return;
			}
			foreach (EduPassportItemDto instance in edupassportitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportItemService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduPassportItem CRUD Operations


		#region EduPassportInstance CRUD Operations


		private IEduPassportInstanceService edupassportinstance;
		public virtual IEduPassportInstanceService EduPassportInstanceService
		{
			get
			{
				if (this.edupassportinstance == null)
				{
					IEduPassportInstanceAssembler assembler = new EduPassportInstanceAssembler();
					IEduPassportInstanceRepository repository = new EduPassportInstanceRepository(this.UnitOfWork);
					this.edupassportinstance = new EduPassportInstanceService(assembler, repository);
				}
				return this.edupassportinstance;
			}
		}


		public IEnumerable<EduPassportInstanceDto> ReadEduPassportInstances()
		{
			return this.EduPassportInstanceService.GetAll();
		}


		public IEnumerable<EduPassportInstanceDto> ReadEduPassportInstances(Expression<Func<EduPassportInstance, bool>> filter)
		{
			return this.EduPassportInstanceService.Find(filter);
		}


		public IEnumerable<EduPassportInstanceDto> ReadEduPassportInstances(ISpecification<EduPassportInstance> specification)
		{
			return this.EduPassportInstanceService.Find(specification.GetExpression());
		}


		public IEnumerable<EduPassportInstanceDto> ReadEduPassportInstancesPaged(int startIndex, int pageSize)
		{
			return this.EduPassportInstanceService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduPassportInstanceDto> ReadEduPassportInstancesFiltered(string sortExpression, string filterExpression)
		{
			return this.EduPassportInstanceService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduPassportInstanceDto> ReadEduPassportInstancesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduPassportInstanceService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduPassportInstanceDto ReadEduPassportInstances(string dtoKey)
		{
			return this.EduPassportInstanceService.GetByKey(dtoKey);
		}


		public int EduPassportInstancesCount()
		{
			return this.EduPassportInstanceService.Count();
		}


		public int EduPassportInstancesCountFiltered(string filterExpression)
		{
			return this.EduPassportInstanceService.Count(filterExpression);
		}


		public string CreateEduPassportInstance(EduPassportInstanceDto edupassportinstance, bool doSaveChanges = true)
		{
			string key = this.EduPassportInstanceService.Add(edupassportinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduPassportInstance(EduPassportInstanceDto edupassportinstance, bool doSaveChanges = true)
		{
			this.EduPassportInstanceService.Update(edupassportinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduPassportInstances(IEnumerable<EduPassportInstanceDto> edupassportinstances, bool doSaveChanges = true)
		{
			if (edupassportinstances == null)
			{
				return;
			}
			foreach (EduPassportInstanceDto instance in edupassportinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportInstanceService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduPassportInstance(EduPassportInstanceDto edupassportinstance, bool doSaveChanges = true)
		{
			this.EduPassportInstanceService.Delete(edupassportinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduPassportInstances(IEnumerable<EduPassportInstanceDto> edupassportinstances, bool doSaveChanges = true)
		{
			if (edupassportinstances == null)
			{
				return;
			}
			foreach (EduPassportInstanceDto instance in edupassportinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportInstanceService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduPassportInstance CRUD Operations


		#region EduPassportInsItemDet CRUD Operations


		private IEduPassportInsItemDetService edupassportinsitemdet;
		public virtual IEduPassportInsItemDetService EduPassportInsItemDetService
		{
			get
			{
				if (this.edupassportinsitemdet == null)
				{
					IEduPassportInsItemDetAssembler assembler = new EduPassportInsItemDetAssembler();
					IEduPassportInsItemDetRepository repository = new EduPassportInsItemDetRepository(this.UnitOfWork);
					this.edupassportinsitemdet = new EduPassportInsItemDetService(assembler, repository);
				}
				return this.edupassportinsitemdet;
			}
		}


		public IEnumerable<EduPassportInsItemDetDto> ReadEduPassportInsItemDets()
		{
			return this.EduPassportInsItemDetService.GetAll();
		}


		public IEnumerable<EduPassportInsItemDetDto> ReadEduPassportInsItemDets(Expression<Func<EduPassportInsItemDet, bool>> filter)
		{
			return this.EduPassportInsItemDetService.Find(filter);
		}


		public IEnumerable<EduPassportInsItemDetDto> ReadEduPassportInsItemDets(ISpecification<EduPassportInsItemDet> specification)
		{
			return this.EduPassportInsItemDetService.Find(specification.GetExpression());
		}


		public IEnumerable<EduPassportInsItemDetDto> ReadEduPassportInsItemDetsPaged(int startIndex, int pageSize)
		{
			return this.EduPassportInsItemDetService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduPassportInsItemDetDto> ReadEduPassportInsItemDetsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduPassportInsItemDetService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduPassportInsItemDetDto> ReadEduPassportInsItemDetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduPassportInsItemDetService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduPassportInsItemDetDto ReadEduPassportInsItemDets(string dtoKey)
		{
			return this.EduPassportInsItemDetService.GetByKey(dtoKey);
		}


		public int EduPassportInsItemDetsCount()
		{
			return this.EduPassportInsItemDetService.Count();
		}


		public int EduPassportInsItemDetsCountFiltered(string filterExpression)
		{
			return this.EduPassportInsItemDetService.Count(filterExpression);
		}


		public string CreateEduPassportInsItemDet(EduPassportInsItemDetDto edupassportinsitemdet, bool doSaveChanges = true)
		{
			string key = this.EduPassportInsItemDetService.Add(edupassportinsitemdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduPassportInsItemDet(EduPassportInsItemDetDto edupassportinsitemdet, bool doSaveChanges = true)
		{
			this.EduPassportInsItemDetService.Update(edupassportinsitemdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduPassportInsItemDets(IEnumerable<EduPassportInsItemDetDto> edupassportinsitemdets, bool doSaveChanges = true)
		{
			if (edupassportinsitemdets == null)
			{
				return;
			}
			foreach (EduPassportInsItemDetDto instance in edupassportinsitemdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportInsItemDetService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduPassportInsItemDet(EduPassportInsItemDetDto edupassportinsitemdet, bool doSaveChanges = true)
		{
			this.EduPassportInsItemDetService.Delete(edupassportinsitemdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduPassportInsItemDets(IEnumerable<EduPassportInsItemDetDto> edupassportinsitemdets, bool doSaveChanges = true)
		{
			if (edupassportinsitemdets == null)
			{
				return;
			}
			foreach (EduPassportInsItemDetDto instance in edupassportinsitemdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportInsItemDetService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduPassportInsItemDet CRUD Operations


		#region EduPassportInsItem CRUD Operations


		private IEduPassportInsItemService edupassportinsitem;
		public virtual IEduPassportInsItemService EduPassportInsItemService
		{
			get
			{
				if (this.edupassportinsitem == null)
				{
					IEduPassportInsItemAssembler assembler = new EduPassportInsItemAssembler();
					IEduPassportInsItemRepository repository = new EduPassportInsItemRepository(this.UnitOfWork);
					this.edupassportinsitem = new EduPassportInsItemService(assembler, repository);
				}
				return this.edupassportinsitem;
			}
		}


		public IEnumerable<EduPassportInsItemDto> ReadEduPassportInsItems()
		{
			return this.EduPassportInsItemService.GetAll();
		}


		public IEnumerable<EduPassportInsItemDto> ReadEduPassportInsItems(Expression<Func<EduPassportInsItem, bool>> filter)
		{
			return this.EduPassportInsItemService.Find(filter);
		}


		public IEnumerable<EduPassportInsItemDto> ReadEduPassportInsItems(ISpecification<EduPassportInsItem> specification)
		{
			return this.EduPassportInsItemService.Find(specification.GetExpression());
		}


		public IEnumerable<EduPassportInsItemDto> ReadEduPassportInsItemsPaged(int startIndex, int pageSize)
		{
			return this.EduPassportInsItemService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduPassportInsItemDto> ReadEduPassportInsItemsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduPassportInsItemService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduPassportInsItemDto> ReadEduPassportInsItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduPassportInsItemService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduPassportInsItemDto ReadEduPassportInsItems(string dtoKey)
		{
			return this.EduPassportInsItemService.GetByKey(dtoKey);
		}


		public int EduPassportInsItemsCount()
		{
			return this.EduPassportInsItemService.Count();
		}


		public int EduPassportInsItemsCountFiltered(string filterExpression)
		{
			return this.EduPassportInsItemService.Count(filterExpression);
		}


		public string CreateEduPassportInsItem(EduPassportInsItemDto edupassportinsitem, bool doSaveChanges = true)
		{
			string key = this.EduPassportInsItemService.Add(edupassportinsitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduPassportInsItem(EduPassportInsItemDto edupassportinsitem, bool doSaveChanges = true)
		{
			this.EduPassportInsItemService.Update(edupassportinsitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduPassportInsItems(IEnumerable<EduPassportInsItemDto> edupassportinsitems, bool doSaveChanges = true)
		{
			if (edupassportinsitems == null)
			{
				return;
			}
			foreach (EduPassportInsItemDto instance in edupassportinsitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportInsItemService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduPassportInsItem(EduPassportInsItemDto edupassportinsitem, bool doSaveChanges = true)
		{
			this.EduPassportInsItemService.Delete(edupassportinsitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduPassportInsItems(IEnumerable<EduPassportInsItemDto> edupassportinsitems, bool doSaveChanges = true)
		{
			if (edupassportinsitems == null)
			{
				return;
			}
			foreach (EduPassportInsItemDto instance in edupassportinsitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportInsItemService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduPassportInsItem CRUD Operations


		#region FORM_INSTANCE_TRANSLOG CRUD Operations


		private IFORM_INSTANCE_TRANSLOGService form_instance_translog;
		public virtual IFORM_INSTANCE_TRANSLOGService FORM_INSTANCE_TRANSLOGService
		{
			get
			{
				if (this.form_instance_translog == null)
				{
					IFORM_INSTANCE_TRANSLOGAssembler assembler = new FORM_INSTANCE_TRANSLOGAssembler();
					IFORM_INSTANCE_TRANSLOGRepository repository = new FORM_INSTANCE_TRANSLOGRepository(this.UnitOfWork);
					this.form_instance_translog = new FORM_INSTANCE_TRANSLOGService(assembler, repository);
				}
				return this.form_instance_translog;
			}
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs()
		{
			return this.FORM_INSTANCE_TRANSLOGService.GetAll();
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs(Expression<Func<FORM_INSTANCE_TRANSLOG, bool>> filter)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGs(ISpecification<FORM_INSTANCE_TRANSLOG> specification)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_TRANSLOGDto> ReadFORM_INSTANCE_TRANSLOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public FORM_INSTANCE_TRANSLOGDto ReadFORM_INSTANCE_TRANSLOGs(string dtoKey)
		{
			return this.FORM_INSTANCE_TRANSLOGService.GetByKey(dtoKey);
		}


		public int FORM_INSTANCE_TRANSLOGsCount()
		{
			return this.FORM_INSTANCE_TRANSLOGService.Count();
		}


		public int FORM_INSTANCE_TRANSLOGsCountFiltered(string filterExpression)
		{
			return this.FORM_INSTANCE_TRANSLOGService.Count(filterExpression);
		}


		public string CreateFORM_INSTANCE_TRANSLOG(FORM_INSTANCE_TRANSLOGDto form_instance_translog, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCE_TRANSLOGService.Add(form_instance_translog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE_TRANSLOG(FORM_INSTANCE_TRANSLOGDto form_instance_translog, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_TRANSLOGService.Update(form_instance_translog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCE_TRANSLOGs(IEnumerable<FORM_INSTANCE_TRANSLOGDto> form_instance_translogs, bool doSaveChanges = true)
		{
			if (form_instance_translogs == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_TRANSLOGDto instance in form_instance_translogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_TRANSLOGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE_TRANSLOG(FORM_INSTANCE_TRANSLOGDto form_instance_translog, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_TRANSLOGService.Delete(form_instance_translog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCE_TRANSLOGs(IEnumerable<FORM_INSTANCE_TRANSLOGDto> form_instance_translogs, bool doSaveChanges = true)
		{
			if (form_instance_translogs == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_TRANSLOGDto instance in form_instance_translogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_TRANSLOGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion FORM_INSTANCE_TRANSLOG CRUD Operations


		#region EduPassportPRef CRUD Operations


		private IEduPassportPRefService edupassportpref;
		public virtual IEduPassportPRefService EduPassportPRefService
		{
			get
			{
				if (this.edupassportpref == null)
				{
					IEduPassportPRefAssembler assembler = new EduPassportPRefAssembler();
					IEduPassportPRefRepository repository = new EduPassportPRefRepository(this.UnitOfWork);
					this.edupassportpref = new EduPassportPRefService(assembler, repository);
				}
				return this.edupassportpref;
			}
		}


		public IEnumerable<EduPassportPRefDto> ReadEduPassportPRefs()
		{
			return this.EduPassportPRefService.GetAll();
		}


		public IEnumerable<EduPassportPRefDto> ReadEduPassportPRefs(Expression<Func<EduPassportPRef, bool>> filter)
		{
			return this.EduPassportPRefService.Find(filter);
		}


		public IEnumerable<EduPassportPRefDto> ReadEduPassportPRefs(ISpecification<EduPassportPRef> specification)
		{
			return this.EduPassportPRefService.Find(specification.GetExpression());
		}


		public IEnumerable<EduPassportPRefDto> ReadEduPassportPRefsPaged(int startIndex, int pageSize)
		{
			return this.EduPassportPRefService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduPassportPRefDto> ReadEduPassportPRefsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduPassportPRefService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduPassportPRefDto> ReadEduPassportPRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduPassportPRefService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduPassportPRefDto ReadEduPassportPRefs(string dtoKey)
		{
			return this.EduPassportPRefService.GetByKey(dtoKey);
		}


		public int EduPassportPRefsCount()
		{
			return this.EduPassportPRefService.Count();
		}


		public int EduPassportPRefsCountFiltered(string filterExpression)
		{
			return this.EduPassportPRefService.Count(filterExpression);
		}


		public string CreateEduPassportPRef(EduPassportPRefDto edupassportpref, bool doSaveChanges = true)
		{
			string key = this.EduPassportPRefService.Add(edupassportpref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduPassportPRef(EduPassportPRefDto edupassportpref, bool doSaveChanges = true)
		{
			this.EduPassportPRefService.Update(edupassportpref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduPassportPRefs(IEnumerable<EduPassportPRefDto> edupassportprefs, bool doSaveChanges = true)
		{
			if (edupassportprefs == null)
			{
				return;
			}
			foreach (EduPassportPRefDto instance in edupassportprefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportPRefService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduPassportPRef(EduPassportPRefDto edupassportpref, bool doSaveChanges = true)
		{
			this.EduPassportPRefService.Delete(edupassportpref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduPassportPRefs(IEnumerable<EduPassportPRefDto> edupassportprefs, bool doSaveChanges = true)
		{
			if (edupassportprefs == null)
			{
				return;
			}
			foreach (EduPassportPRefDto instance in edupassportprefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportPRefService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduPassportPRef CRUD Operations


		#region EduPassportInsItemRejectHi CRUD Operations


		private IEduPassportInsItemRejectHiService edupassportinsitemrejecthi;
		public virtual IEduPassportInsItemRejectHiService EduPassportInsItemRejectHiService
		{
			get
			{
				if (this.edupassportinsitemrejecthi == null)
				{
					IEduPassportInsItemRejectHiAssembler assembler = new EduPassportInsItemRejectHiAssembler();
					IEduPassportInsItemRejectHiRepository repository = new EduPassportInsItemRejectHiRepository(this.UnitOfWork);
					this.edupassportinsitemrejecthi = new EduPassportInsItemRejectHiService(assembler, repository);
				}
				return this.edupassportinsitemrejecthi;
			}
		}


		public IEnumerable<EduPassportInsItemRejectHiDto> ReadEduPassportInsItemRejectHis()
		{
			return this.EduPassportInsItemRejectHiService.GetAll();
		}


		public IEnumerable<EduPassportInsItemRejectHiDto> ReadEduPassportInsItemRejectHis(Expression<Func<EduPassportInsItemRejectHi, bool>> filter)
		{
			return this.EduPassportInsItemRejectHiService.Find(filter);
		}


		public IEnumerable<EduPassportInsItemRejectHiDto> ReadEduPassportInsItemRejectHis(ISpecification<EduPassportInsItemRejectHi> specification)
		{
			return this.EduPassportInsItemRejectHiService.Find(specification.GetExpression());
		}


		public IEnumerable<EduPassportInsItemRejectHiDto> ReadEduPassportInsItemRejectHisPaged(int startIndex, int pageSize)
		{
			return this.EduPassportInsItemRejectHiService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduPassportInsItemRejectHiDto> ReadEduPassportInsItemRejectHisFiltered(string sortExpression, string filterExpression)
		{
			return this.EduPassportInsItemRejectHiService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduPassportInsItemRejectHiDto> ReadEduPassportInsItemRejectHisPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduPassportInsItemRejectHiService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduPassportInsItemRejectHiDto ReadEduPassportInsItemRejectHis(string dtoKey)
		{
			return this.EduPassportInsItemRejectHiService.GetByKey(dtoKey);
		}


		public int EduPassportInsItemRejectHisCount()
		{
			return this.EduPassportInsItemRejectHiService.Count();
		}


		public int EduPassportInsItemRejectHisCountFiltered(string filterExpression)
		{
			return this.EduPassportInsItemRejectHiService.Count(filterExpression);
		}


		public string CreateEduPassportInsItemRejectHi(EduPassportInsItemRejectHiDto edupassportinsitemrejecthi, bool doSaveChanges = true)
		{
			string key = this.EduPassportInsItemRejectHiService.Add(edupassportinsitemrejecthi);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduPassportInsItemRejectHi(EduPassportInsItemRejectHiDto edupassportinsitemrejecthi, bool doSaveChanges = true)
		{
			this.EduPassportInsItemRejectHiService.Update(edupassportinsitemrejecthi);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduPassportInsItemRejectHis(IEnumerable<EduPassportInsItemRejectHiDto> edupassportinsitemrejecthis, bool doSaveChanges = true)
		{
			if (edupassportinsitemrejecthis == null)
			{
				return;
			}
			foreach (EduPassportInsItemRejectHiDto instance in edupassportinsitemrejecthis)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportInsItemRejectHiService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduPassportInsItemRejectHi(EduPassportInsItemRejectHiDto edupassportinsitemrejecthi, bool doSaveChanges = true)
		{
			this.EduPassportInsItemRejectHiService.Delete(edupassportinsitemrejecthi);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduPassportInsItemRejectHis(IEnumerable<EduPassportInsItemRejectHiDto> edupassportinsitemrejecthis, bool doSaveChanges = true)
		{
			if (edupassportinsitemrejecthis == null)
			{
				return;
			}
			foreach (EduPassportInsItemRejectHiDto instance in edupassportinsitemrejecthis)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduPassportInsItemRejectHiService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduPassportInsItemRejectHi CRUD Operations


		#region FORM_TEMPLATE_GROUP CRUD Operations


		private IFORM_TEMPLATE_GROUPService form_template_group;
		public virtual IFORM_TEMPLATE_GROUPService FORM_TEMPLATE_GROUPService
		{
			get
			{
				if (this.form_template_group == null)
				{
					IFORM_TEMPLATE_GROUPAssembler assembler = new FORM_TEMPLATE_GROUPAssembler();
					IFORM_TEMPLATE_GROUPRepository repository = new FORM_TEMPLATE_GROUPRepository(this.UnitOfWork);
					this.form_template_group = new FORM_TEMPLATE_GROUPService(assembler, repository);
				}
				return this.form_template_group;
			}
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs()
		{
			return this.FORM_TEMPLATE_GROUPService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs(Expression<Func<FORM_TEMPLATE_GROUP, bool>> filter)
		{
			return this.FORM_TEMPLATE_GROUPService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPs(ISpecification<FORM_TEMPLATE_GROUP> specification)
		{
			return this.FORM_TEMPLATE_GROUPService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_GROUPService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_GROUPService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_GROUPDto> ReadFORM_TEMPLATE_GROUPsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_GROUPService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public FORM_TEMPLATE_GROUPDto ReadFORM_TEMPLATE_GROUPs(string dtoKey)
		{
			return this.FORM_TEMPLATE_GROUPService.GetByKey(dtoKey);
		}


		public int FORM_TEMPLATE_GROUPsCount()
		{
			return this.FORM_TEMPLATE_GROUPService.Count();
		}


		public int FORM_TEMPLATE_GROUPsCountFiltered(string filterExpression)
		{
			return this.FORM_TEMPLATE_GROUPService.Count(filterExpression);
		}


		public string CreateFORM_TEMPLATE_GROUP(FORM_TEMPLATE_GROUPDto form_template_group, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_GROUPService.Add(form_template_group);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_GROUP(FORM_TEMPLATE_GROUPDto form_template_group, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_GROUPService.Update(form_template_group);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_GROUPs(IEnumerable<FORM_TEMPLATE_GROUPDto> form_template_groups, bool doSaveChanges = true)
		{
			if (form_template_groups == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_GROUPDto instance in form_template_groups)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_GROUPService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_GROUP(FORM_TEMPLATE_GROUPDto form_template_group, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_GROUPService.Delete(form_template_group);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_GROUPs(IEnumerable<FORM_TEMPLATE_GROUPDto> form_template_groups, bool doSaveChanges = true)
		{
			if (form_template_groups == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_GROUPDto instance in form_template_groups)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_GROUPService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion FORM_TEMPLATE_GROUP CRUD Operations


		#region ScoreSettingScoreType CRUD Operations


		private IScoreSettingScoreTypeService scoresettingscoretype;
		public virtual IScoreSettingScoreTypeService ScoreSettingScoreTypeService
		{
			get
			{
				if (this.scoresettingscoretype == null)
				{
					IScoreSettingScoreTypeAssembler assembler = new ScoreSettingScoreTypeAssembler();
					IScoreSettingScoreTypeRepository repository = new ScoreSettingScoreTypeRepository(this.UnitOfWork);
					this.scoresettingscoretype = new ScoreSettingScoreTypeService(assembler, repository);
				}
				return this.scoresettingscoretype;
			}
		}


		public IEnumerable<ScoreSettingScoreTypeDto> ReadScoreSettingScoreTypes()
		{
			return this.ScoreSettingScoreTypeService.GetAll();
		}


		public IEnumerable<ScoreSettingScoreTypeDto> ReadScoreSettingScoreTypes(Expression<Func<ScoreSettingScoreType, bool>> filter)
		{
			return this.ScoreSettingScoreTypeService.Find(filter);
		}


		public IEnumerable<ScoreSettingScoreTypeDto> ReadScoreSettingScoreTypes(ISpecification<ScoreSettingScoreType> specification)
		{
			return this.ScoreSettingScoreTypeService.Find(specification.GetExpression());
		}


		public IEnumerable<ScoreSettingScoreTypeDto> ReadScoreSettingScoreTypesPaged(int startIndex, int pageSize)
		{
			return this.ScoreSettingScoreTypeService.Find(startIndex, pageSize);
		}


		public IEnumerable<ScoreSettingScoreTypeDto> ReadScoreSettingScoreTypesFiltered(string sortExpression, string filterExpression)
		{
			return this.ScoreSettingScoreTypeService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<ScoreSettingScoreTypeDto> ReadScoreSettingScoreTypesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ScoreSettingScoreTypeService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public ScoreSettingScoreTypeDto ReadScoreSettingScoreTypes(string dtoKey)
		{
			return this.ScoreSettingScoreTypeService.GetByKey(dtoKey);
		}


		public int ScoreSettingScoreTypesCount()
		{
			return this.ScoreSettingScoreTypeService.Count();
		}


		public int ScoreSettingScoreTypesCountFiltered(string filterExpression)
		{
			return this.ScoreSettingScoreTypeService.Count(filterExpression);
		}


		public string CreateScoreSettingScoreType(ScoreSettingScoreTypeDto scoresettingscoretype, bool doSaveChanges = true)
		{
			string key = this.ScoreSettingScoreTypeService.Add(scoresettingscoretype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateScoreSettingScoreType(ScoreSettingScoreTypeDto scoresettingscoretype, bool doSaveChanges = true)
		{
			this.ScoreSettingScoreTypeService.Update(scoresettingscoretype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateScoreSettingScoreTypes(IEnumerable<ScoreSettingScoreTypeDto> scoresettingscoretypes, bool doSaveChanges = true)
		{
			if (scoresettingscoretypes == null)
			{
				return;
			}
			foreach (ScoreSettingScoreTypeDto instance in scoresettingscoretypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.ScoreSettingScoreTypeService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteScoreSettingScoreType(ScoreSettingScoreTypeDto scoresettingscoretype, bool doSaveChanges = true)
		{
			this.ScoreSettingScoreTypeService.Delete(scoresettingscoretype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteScoreSettingScoreTypes(IEnumerable<ScoreSettingScoreTypeDto> scoresettingscoretypes, bool doSaveChanges = true)
		{
			if (scoresettingscoretypes == null)
			{
				return;
			}
			foreach (ScoreSettingScoreTypeDto instance in scoresettingscoretypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.ScoreSettingScoreTypeService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion ScoreSettingScoreType CRUD Operations


		#region TeachPointRef CRUD Operations


		private ITeachPointRefService teachpointref;
		public virtual ITeachPointRefService TeachPointRefService
		{
			get
			{
				if (this.teachpointref == null)
				{
					ITeachPointRefAssembler assembler = new TeachPointRefAssembler();
					ITeachPointRefRepository repository = new TeachPointRefRepository(this.UnitOfWork);
					this.teachpointref = new TeachPointRefService(assembler, repository);
				}
				return this.teachpointref;
			}
		}


		public IEnumerable<TeachPointRefDto> ReadTeachPointRefs()
		{
			return this.TeachPointRefService.GetAll();
		}


		public IEnumerable<TeachPointRefDto> ReadTeachPointRefs(Expression<Func<TeachPointRef, bool>> filter)
		{
			return this.TeachPointRefService.Find(filter);
		}


		public IEnumerable<TeachPointRefDto> ReadTeachPointRefs(ISpecification<TeachPointRef> specification)
		{
			return this.TeachPointRefService.Find(specification.GetExpression());
		}


		public IEnumerable<TeachPointRefDto> ReadTeachPointRefsPaged(int startIndex, int pageSize)
		{
			return this.TeachPointRefService.Find(startIndex, pageSize);
		}


		public IEnumerable<TeachPointRefDto> ReadTeachPointRefsFiltered(string sortExpression, string filterExpression)
		{
			return this.TeachPointRefService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TeachPointRefDto> ReadTeachPointRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TeachPointRefService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public TeachPointRefDto ReadTeachPointRefs(string dtoKey)
		{
			return this.TeachPointRefService.GetByKey(dtoKey);
		}


		public int TeachPointRefsCount()
		{
			return this.TeachPointRefService.Count();
		}


		public int TeachPointRefsCountFiltered(string filterExpression)
		{
			return this.TeachPointRefService.Count(filterExpression);
		}


		public string CreateTeachPointRef(TeachPointRefDto teachpointref, bool doSaveChanges = true)
		{
			string key = this.TeachPointRefService.Add(teachpointref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTeachPointRef(TeachPointRefDto teachpointref, bool doSaveChanges = true)
		{
			this.TeachPointRefService.Update(teachpointref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTeachPointRefs(IEnumerable<TeachPointRefDto> teachpointrefs, bool doSaveChanges = true)
		{
			if (teachpointrefs == null)
			{
				return;
			}
			foreach (TeachPointRefDto instance in teachpointrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachPointRefService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTeachPointRef(TeachPointRefDto teachpointref, bool doSaveChanges = true)
		{
			this.TeachPointRefService.Delete(teachpointref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTeachPointRefs(IEnumerable<TeachPointRefDto> teachpointrefs, bool doSaveChanges = true)
		{
			if (teachpointrefs == null)
			{
				return;
			}
			foreach (TeachPointRefDto instance in teachpointrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachPointRefService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion TeachPointRef CRUD Operations


		#region TeachPointItemRequire CRUD Operations


		private ITeachPointItemRequireService teachpointitemrequire;
		public virtual ITeachPointItemRequireService TeachPointItemRequireService
		{
			get
			{
				if (this.teachpointitemrequire == null)
				{
					ITeachPointItemRequireAssembler assembler = new TeachPointItemRequireAssembler();
					ITeachPointItemRequireRepository repository = new TeachPointItemRequireRepository(this.UnitOfWork);
					this.teachpointitemrequire = new TeachPointItemRequireService(assembler, repository);
				}
				return this.teachpointitemrequire;
			}
		}


		public IEnumerable<TeachPointItemRequireDto> ReadTeachPointItemRequires()
		{
			return this.TeachPointItemRequireService.GetAll();
		}


		public IEnumerable<TeachPointItemRequireDto> ReadTeachPointItemRequires(Expression<Func<TeachPointItemRequire, bool>> filter)
		{
			return this.TeachPointItemRequireService.Find(filter);
		}


		public IEnumerable<TeachPointItemRequireDto> ReadTeachPointItemRequires(ISpecification<TeachPointItemRequire> specification)
		{
			return this.TeachPointItemRequireService.Find(specification.GetExpression());
		}


		public IEnumerable<TeachPointItemRequireDto> ReadTeachPointItemRequiresPaged(int startIndex, int pageSize)
		{
			return this.TeachPointItemRequireService.Find(startIndex, pageSize);
		}


		public IEnumerable<TeachPointItemRequireDto> ReadTeachPointItemRequiresFiltered(string sortExpression, string filterExpression)
		{
			return this.TeachPointItemRequireService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TeachPointItemRequireDto> ReadTeachPointItemRequiresPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TeachPointItemRequireService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public TeachPointItemRequireDto ReadTeachPointItemRequires(string dtoKey)
		{
			return this.TeachPointItemRequireService.GetByKey(dtoKey);
		}


		public int TeachPointItemRequiresCount()
		{
			return this.TeachPointItemRequireService.Count();
		}


		public int TeachPointItemRequiresCountFiltered(string filterExpression)
		{
			return this.TeachPointItemRequireService.Count(filterExpression);
		}


		public string CreateTeachPointItemRequire(TeachPointItemRequireDto teachpointitemrequire, bool doSaveChanges = true)
		{
			string key = this.TeachPointItemRequireService.Add(teachpointitemrequire);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTeachPointItemRequire(TeachPointItemRequireDto teachpointitemrequire, bool doSaveChanges = true)
		{
			this.TeachPointItemRequireService.Update(teachpointitemrequire);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTeachPointItemRequires(IEnumerable<TeachPointItemRequireDto> teachpointitemrequires, bool doSaveChanges = true)
		{
			if (teachpointitemrequires == null)
			{
				return;
			}
			foreach (TeachPointItemRequireDto instance in teachpointitemrequires)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachPointItemRequireService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTeachPointItemRequire(TeachPointItemRequireDto teachpointitemrequire, bool doSaveChanges = true)
		{
			this.TeachPointItemRequireService.Delete(teachpointitemrequire);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTeachPointItemRequires(IEnumerable<TeachPointItemRequireDto> teachpointitemrequires, bool doSaveChanges = true)
		{
			if (teachpointitemrequires == null)
			{
				return;
			}
			foreach (TeachPointItemRequireDto instance in teachpointitemrequires)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachPointItemRequireService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion TeachPointItemRequire CRUD Operations


		#region TeachPointItem CRUD Operations


		private ITeachPointItemService teachpointitem;
		public virtual ITeachPointItemService TeachPointItemService
		{
			get
			{
				if (this.teachpointitem == null)
				{
					ITeachPointItemAssembler assembler = new TeachPointItemAssembler();
					ITeachPointItemRepository repository = new TeachPointItemRepository(this.UnitOfWork);
					this.teachpointitem = new TeachPointItemService(assembler, repository);
				}
				return this.teachpointitem;
			}
		}


		public IEnumerable<TeachPointItemDto> ReadTeachPointItems()
		{
			return this.TeachPointItemService.GetAll();
		}


		public IEnumerable<TeachPointItemDto> ReadTeachPointItems(Expression<Func<TeachPointItem, bool>> filter)
		{
			return this.TeachPointItemService.Find(filter);
		}


		public IEnumerable<TeachPointItemDto> ReadTeachPointItems(ISpecification<TeachPointItem> specification)
		{
			return this.TeachPointItemService.Find(specification.GetExpression());
		}


		public IEnumerable<TeachPointItemDto> ReadTeachPointItemsPaged(int startIndex, int pageSize)
		{
			return this.TeachPointItemService.Find(startIndex, pageSize);
		}


		public IEnumerable<TeachPointItemDto> ReadTeachPointItemsFiltered(string sortExpression, string filterExpression)
		{
			return this.TeachPointItemService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TeachPointItemDto> ReadTeachPointItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TeachPointItemService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public TeachPointItemDto ReadTeachPointItems(string dtoKey)
		{
			return this.TeachPointItemService.GetByKey(dtoKey);
		}


		public int TeachPointItemsCount()
		{
			return this.TeachPointItemService.Count();
		}


		public int TeachPointItemsCountFiltered(string filterExpression)
		{
			return this.TeachPointItemService.Count(filterExpression);
		}


		public string CreateTeachPointItem(TeachPointItemDto teachpointitem, bool doSaveChanges = true)
		{
			string key = this.TeachPointItemService.Add(teachpointitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTeachPointItem(TeachPointItemDto teachpointitem, bool doSaveChanges = true)
		{
			this.TeachPointItemService.Update(teachpointitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTeachPointItems(IEnumerable<TeachPointItemDto> teachpointitems, bool doSaveChanges = true)
		{
			if (teachpointitems == null)
			{
				return;
			}
			foreach (TeachPointItemDto instance in teachpointitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachPointItemService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTeachPointItem(TeachPointItemDto teachpointitem, bool doSaveChanges = true)
		{
			this.TeachPointItemService.Delete(teachpointitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTeachPointItems(IEnumerable<TeachPointItemDto> teachpointitems, bool doSaveChanges = true)
		{
			if (teachpointitems == null)
			{
				return;
			}
			foreach (TeachPointItemDto instance in teachpointitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachPointItemService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion TeachPointItem CRUD Operations


		#region TeachPointEmpItemDatum CRUD Operations


		private ITeachPointEmpItemDatumService teachpointempitemdatum;
		public virtual ITeachPointEmpItemDatumService TeachPointEmpItemDatumService
		{
			get
			{
				if (this.teachpointempitemdatum == null)
				{
					ITeachPointEmpItemDatumAssembler assembler = new TeachPointEmpItemDatumAssembler();
					ITeachPointEmpItemDatumRepository repository = new TeachPointEmpItemDatumRepository(this.UnitOfWork);
					this.teachpointempitemdatum = new TeachPointEmpItemDatumService(assembler, repository);
				}
				return this.teachpointempitemdatum;
			}
		}


		public IEnumerable<TeachPointEmpItemDatumDto> ReadTeachPointEmpItemData()
		{
			return this.TeachPointEmpItemDatumService.GetAll();
		}


		public IEnumerable<TeachPointEmpItemDatumDto> ReadTeachPointEmpItemData(Expression<Func<TeachPointEmpItemDatum, bool>> filter)
		{
			return this.TeachPointEmpItemDatumService.Find(filter);
		}


		public IEnumerable<TeachPointEmpItemDatumDto> ReadTeachPointEmpItemData(ISpecification<TeachPointEmpItemDatum> specification)
		{
			return this.TeachPointEmpItemDatumService.Find(specification.GetExpression());
		}


		public IEnumerable<TeachPointEmpItemDatumDto> ReadTeachPointEmpItemDataPaged(int startIndex, int pageSize)
		{
			return this.TeachPointEmpItemDatumService.Find(startIndex, pageSize);
		}


		public IEnumerable<TeachPointEmpItemDatumDto> ReadTeachPointEmpItemDataFiltered(string sortExpression, string filterExpression)
		{
			return this.TeachPointEmpItemDatumService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TeachPointEmpItemDatumDto> ReadTeachPointEmpItemDataPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TeachPointEmpItemDatumService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public TeachPointEmpItemDatumDto ReadTeachPointEmpItemData(string dtoKey)
		{
			return this.TeachPointEmpItemDatumService.GetByKey(dtoKey);
		}


		public int TeachPointEmpItemDataCount()
		{
			return this.TeachPointEmpItemDatumService.Count();
		}


		public int TeachPointEmpItemDataCountFiltered(string filterExpression)
		{
			return this.TeachPointEmpItemDatumService.Count(filterExpression);
		}


		public string CreateTeachPointEmpItemDatum(TeachPointEmpItemDatumDto teachpointempitemdatum, bool doSaveChanges = true)
		{
			string key = this.TeachPointEmpItemDatumService.Add(teachpointempitemdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTeachPointEmpItemDatum(TeachPointEmpItemDatumDto teachpointempitemdatum, bool doSaveChanges = true)
		{
			this.TeachPointEmpItemDatumService.Update(teachpointempitemdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTeachPointEmpItemData(IEnumerable<TeachPointEmpItemDatumDto> teachpointempitemdata, bool doSaveChanges = true)
		{
			if (teachpointempitemdata == null)
			{
				return;
			}
			foreach (TeachPointEmpItemDatumDto instance in teachpointempitemdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachPointEmpItemDatumService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTeachPointEmpItemDatum(TeachPointEmpItemDatumDto teachpointempitemdatum, bool doSaveChanges = true)
		{
			this.TeachPointEmpItemDatumService.Delete(teachpointempitemdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTeachPointEmpItemData(IEnumerable<TeachPointEmpItemDatumDto> teachpointempitemdata, bool doSaveChanges = true)
		{
			if (teachpointempitemdata == null)
			{
				return;
			}
			foreach (TeachPointEmpItemDatumDto instance in teachpointempitemdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachPointEmpItemDatumService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion TeachPointEmpItemDatum CRUD Operations


		#region TeachPointCalcTypeRef CRUD Operations


		private ITeachPointCalcTypeRefService teachpointcalctyperef;
		public virtual ITeachPointCalcTypeRefService TeachPointCalcTypeRefService
		{
			get
			{
				if (this.teachpointcalctyperef == null)
				{
					ITeachPointCalcTypeRefAssembler assembler = new TeachPointCalcTypeRefAssembler();
					ITeachPointCalcTypeRefRepository repository = new TeachPointCalcTypeRefRepository(this.UnitOfWork);
					this.teachpointcalctyperef = new TeachPointCalcTypeRefService(assembler, repository);
				}
				return this.teachpointcalctyperef;
			}
		}


		public IEnumerable<TeachPointCalcTypeRefDto> ReadTeachPointCalcTypeRefs()
		{
			return this.TeachPointCalcTypeRefService.GetAll();
		}


		public IEnumerable<TeachPointCalcTypeRefDto> ReadTeachPointCalcTypeRefs(Expression<Func<TeachPointCalcTypeRef, bool>> filter)
		{
			return this.TeachPointCalcTypeRefService.Find(filter);
		}


		public IEnumerable<TeachPointCalcTypeRefDto> ReadTeachPointCalcTypeRefs(ISpecification<TeachPointCalcTypeRef> specification)
		{
			return this.TeachPointCalcTypeRefService.Find(specification.GetExpression());
		}


		public IEnumerable<TeachPointCalcTypeRefDto> ReadTeachPointCalcTypeRefsPaged(int startIndex, int pageSize)
		{
			return this.TeachPointCalcTypeRefService.Find(startIndex, pageSize);
		}


		public IEnumerable<TeachPointCalcTypeRefDto> ReadTeachPointCalcTypeRefsFiltered(string sortExpression, string filterExpression)
		{
			return this.TeachPointCalcTypeRefService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TeachPointCalcTypeRefDto> ReadTeachPointCalcTypeRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TeachPointCalcTypeRefService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public TeachPointCalcTypeRefDto ReadTeachPointCalcTypeRefs(string dtoKey)
		{
			return this.TeachPointCalcTypeRefService.GetByKey(dtoKey);
		}


		public int TeachPointCalcTypeRefsCount()
		{
			return this.TeachPointCalcTypeRefService.Count();
		}


		public int TeachPointCalcTypeRefsCountFiltered(string filterExpression)
		{
			return this.TeachPointCalcTypeRefService.Count(filterExpression);
		}


		public string CreateTeachPointCalcTypeRef(TeachPointCalcTypeRefDto teachpointcalctyperef, bool doSaveChanges = true)
		{
			string key = this.TeachPointCalcTypeRefService.Add(teachpointcalctyperef);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTeachPointCalcTypeRef(TeachPointCalcTypeRefDto teachpointcalctyperef, bool doSaveChanges = true)
		{
			this.TeachPointCalcTypeRefService.Update(teachpointcalctyperef);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTeachPointCalcTypeRefs(IEnumerable<TeachPointCalcTypeRefDto> teachpointcalctyperefs, bool doSaveChanges = true)
		{
			if (teachpointcalctyperefs == null)
			{
				return;
			}
			foreach (TeachPointCalcTypeRefDto instance in teachpointcalctyperefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachPointCalcTypeRefService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTeachPointCalcTypeRef(TeachPointCalcTypeRefDto teachpointcalctyperef, bool doSaveChanges = true)
		{
			this.TeachPointCalcTypeRefService.Delete(teachpointcalctyperef);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTeachPointCalcTypeRefs(IEnumerable<TeachPointCalcTypeRefDto> teachpointcalctyperefs, bool doSaveChanges = true)
		{
			if (teachpointcalctyperefs == null)
			{
				return;
			}
			foreach (TeachPointCalcTypeRefDto instance in teachpointcalctyperefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachPointCalcTypeRefService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion TeachPointCalcTypeRef CRUD Operations


		#region TeachPointCalcType CRUD Operations


		private ITeachPointCalcTypeService teachpointcalctype;
		public virtual ITeachPointCalcTypeService TeachPointCalcTypeService
		{
			get
			{
				if (this.teachpointcalctype == null)
				{
					ITeachPointCalcTypeAssembler assembler = new TeachPointCalcTypeAssembler();
					ITeachPointCalcTypeRepository repository = new TeachPointCalcTypeRepository(this.UnitOfWork);
					this.teachpointcalctype = new TeachPointCalcTypeService(assembler, repository);
				}
				return this.teachpointcalctype;
			}
		}


		public IEnumerable<TeachPointCalcTypeDto> ReadTeachPointCalcTypes()
		{
			return this.TeachPointCalcTypeService.GetAll();
		}


		public IEnumerable<TeachPointCalcTypeDto> ReadTeachPointCalcTypes(Expression<Func<TeachPointCalcType, bool>> filter)
		{
			return this.TeachPointCalcTypeService.Find(filter);
		}


		public IEnumerable<TeachPointCalcTypeDto> ReadTeachPointCalcTypes(ISpecification<TeachPointCalcType> specification)
		{
			return this.TeachPointCalcTypeService.Find(specification.GetExpression());
		}


		public IEnumerable<TeachPointCalcTypeDto> ReadTeachPointCalcTypesPaged(int startIndex, int pageSize)
		{
			return this.TeachPointCalcTypeService.Find(startIndex, pageSize);
		}


		public IEnumerable<TeachPointCalcTypeDto> ReadTeachPointCalcTypesFiltered(string sortExpression, string filterExpression)
		{
			return this.TeachPointCalcTypeService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TeachPointCalcTypeDto> ReadTeachPointCalcTypesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TeachPointCalcTypeService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public TeachPointCalcTypeDto ReadTeachPointCalcTypes(string dtoKey)
		{
			return this.TeachPointCalcTypeService.GetByKey(dtoKey);
		}


		public int TeachPointCalcTypesCount()
		{
			return this.TeachPointCalcTypeService.Count();
		}


		public int TeachPointCalcTypesCountFiltered(string filterExpression)
		{
			return this.TeachPointCalcTypeService.Count(filterExpression);
		}


		public string CreateTeachPointCalcType(TeachPointCalcTypeDto teachpointcalctype, bool doSaveChanges = true)
		{
			string key = this.TeachPointCalcTypeService.Add(teachpointcalctype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTeachPointCalcType(TeachPointCalcTypeDto teachpointcalctype, bool doSaveChanges = true)
		{
			this.TeachPointCalcTypeService.Update(teachpointcalctype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTeachPointCalcTypes(IEnumerable<TeachPointCalcTypeDto> teachpointcalctypes, bool doSaveChanges = true)
		{
			if (teachpointcalctypes == null)
			{
				return;
			}
			foreach (TeachPointCalcTypeDto instance in teachpointcalctypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachPointCalcTypeService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTeachPointCalcType(TeachPointCalcTypeDto teachpointcalctype, bool doSaveChanges = true)
		{
			this.TeachPointCalcTypeService.Delete(teachpointcalctype);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTeachPointCalcTypes(IEnumerable<TeachPointCalcTypeDto> teachpointcalctypes, bool doSaveChanges = true)
		{
			if (teachpointcalctypes == null)
			{
				return;
			}
			foreach (TeachPointCalcTypeDto instance in teachpointcalctypes)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachPointCalcTypeService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion TeachPointCalcType CRUD Operations


		#region MyListDet CRUD Operations


		private IMyListDetService mylistdet;
		public virtual IMyListDetService MyListDetService
		{
			get
			{
				if (this.mylistdet == null)
				{
					IMyListDetAssembler assembler = new MyListDetAssembler();
					IMyListDetRepository repository = new MyListDetRepository(this.UnitOfWork);
					this.mylistdet = new MyListDetService(assembler, repository);
				}
				return this.mylistdet;
			}
		}


		public IEnumerable<MyListDetDto> ReadMyListDets()
		{
			return this.MyListDetService.GetAll();
		}


		public IEnumerable<MyListDetDto> ReadMyListDets(Expression<Func<MyListDet, bool>> filter)
		{
			return this.MyListDetService.Find(filter);
		}


		public IEnumerable<MyListDetDto> ReadMyListDets(ISpecification<MyListDet> specification)
		{
			return this.MyListDetService.Find(specification.GetExpression());
		}


		public IEnumerable<MyListDetDto> ReadMyListDetsPaged(int startIndex, int pageSize)
		{
			return this.MyListDetService.Find(startIndex, pageSize);
		}


		public IEnumerable<MyListDetDto> ReadMyListDetsFiltered(string sortExpression, string filterExpression)
		{
			return this.MyListDetService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<MyListDetDto> ReadMyListDetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.MyListDetService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public MyListDetDto ReadMyListDets(string dtoKey)
		{
			return this.MyListDetService.GetByKey(dtoKey);
		}


		public int MyListDetsCount()
		{
			return this.MyListDetService.Count();
		}


		public int MyListDetsCountFiltered(string filterExpression)
		{
			return this.MyListDetService.Count(filterExpression);
		}


		public string CreateMyListDet(MyListDetDto mylistdet, bool doSaveChanges = true)
		{
			string key = this.MyListDetService.Add(mylistdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateMyListDet(MyListDetDto mylistdet, bool doSaveChanges = true)
		{
			this.MyListDetService.Update(mylistdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateMyListDets(IEnumerable<MyListDetDto> mylistdets, bool doSaveChanges = true)
		{
			if (mylistdets == null)
			{
				return;
			}
			foreach (MyListDetDto instance in mylistdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.MyListDetService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteMyListDet(MyListDetDto mylistdet, bool doSaveChanges = true)
		{
			this.MyListDetService.Delete(mylistdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteMyListDets(IEnumerable<MyListDetDto> mylistdets, bool doSaveChanges = true)
		{
			if (mylistdets == null)
			{
				return;
			}
			foreach (MyListDetDto instance in mylistdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.MyListDetService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion MyListDet CRUD Operations


		#region MyList CRUD Operations


		private IMyListService mylist;
		public virtual IMyListService MyListService
		{
			get
			{
				if (this.mylist == null)
				{
					IMyListAssembler assembler = new MyListAssembler();
					IMyListRepository repository = new MyListRepository(this.UnitOfWork);
					this.mylist = new MyListService(assembler, repository);
				}
				return this.mylist;
			}
		}


		public IEnumerable<MyListDto> ReadMyLists()
		{
			return this.MyListService.GetAll();
		}


		public IEnumerable<MyListDto> ReadMyLists(Expression<Func<MyList, bool>> filter)
		{
			return this.MyListService.Find(filter);
		}


		public IEnumerable<MyListDto> ReadMyLists(ISpecification<MyList> specification)
		{
			return this.MyListService.Find(specification.GetExpression());
		}


		public IEnumerable<MyListDto> ReadMyListsPaged(int startIndex, int pageSize)
		{
			return this.MyListService.Find(startIndex, pageSize);
		}


		public IEnumerable<MyListDto> ReadMyListsFiltered(string sortExpression, string filterExpression)
		{
			return this.MyListService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<MyListDto> ReadMyListsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.MyListService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public MyListDto ReadMyLists(string dtoKey)
		{
			return this.MyListService.GetByKey(dtoKey);
		}


		public int MyListsCount()
		{
			return this.MyListService.Count();
		}


		public int MyListsCountFiltered(string filterExpression)
		{
			return this.MyListService.Count(filterExpression);
		}


		public string CreateMyList(MyListDto mylist, bool doSaveChanges = true)
		{
			string key = this.MyListService.Add(mylist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateMyList(MyListDto mylist, bool doSaveChanges = true)
		{
			this.MyListService.Update(mylist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateMyLists(IEnumerable<MyListDto> mylists, bool doSaveChanges = true)
		{
			if (mylists == null)
			{
				return;
			}
			foreach (MyListDto instance in mylists)
			{
				if (instance == null)
				{
					continue;
				}


				this.MyListService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteMyList(MyListDto mylist, bool doSaveChanges = true)
		{
			this.MyListService.Delete(mylist);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteMyLists(IEnumerable<MyListDto> mylists, bool doSaveChanges = true)
		{
			if (mylists == null)
			{
				return;
			}
			foreach (MyListDto instance in mylists)
			{
				if (instance == null)
				{
					continue;
				}


				this.MyListService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion MyList CRUD Operations


		#region RecordTemplate CRUD Operations


		private IRecordTemplateService recordtemplate;
		public virtual IRecordTemplateService RecordTemplateService
		{
			get
			{
				if (this.recordtemplate == null)
				{
					IRecordTemplateAssembler assembler = new RecordTemplateAssembler();
					IRecordTemplateRepository repository = new RecordTemplateRepository(this.UnitOfWork);
					this.recordtemplate = new RecordTemplateService(assembler, repository);
				}
				return this.recordtemplate;
			}
		}


		public IEnumerable<RecordTemplateDto> ReadRecordTemplates()
		{
			return this.RecordTemplateService.GetAll();
		}


		public IEnumerable<RecordTemplateDto> ReadRecordTemplates(Expression<Func<RecordTemplate, bool>> filter)
		{
			return this.RecordTemplateService.Find(filter);
		}


		public IEnumerable<RecordTemplateDto> ReadRecordTemplates(ISpecification<RecordTemplate> specification)
		{
			return this.RecordTemplateService.Find(specification.GetExpression());
		}


		public IEnumerable<RecordTemplateDto> ReadRecordTemplatesPaged(int startIndex, int pageSize)
		{
			return this.RecordTemplateService.Find(startIndex, pageSize);
		}


		public IEnumerable<RecordTemplateDto> ReadRecordTemplatesFiltered(string sortExpression, string filterExpression)
		{
			return this.RecordTemplateService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<RecordTemplateDto> ReadRecordTemplatesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.RecordTemplateService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public RecordTemplateDto ReadRecordTemplates(string dtoKey)
		{
			return this.RecordTemplateService.GetByKey(dtoKey);
		}


		public int RecordTemplatesCount()
		{
			return this.RecordTemplateService.Count();
		}


		public int RecordTemplatesCountFiltered(string filterExpression)
		{
			return this.RecordTemplateService.Count(filterExpression);
		}


		public string CreateRecordTemplate(RecordTemplateDto recordtemplate, bool doSaveChanges = true)
		{
			string key = this.RecordTemplateService.Add(recordtemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateRecordTemplate(RecordTemplateDto recordtemplate, bool doSaveChanges = true)
		{
			this.RecordTemplateService.Update(recordtemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateRecordTemplates(IEnumerable<RecordTemplateDto> recordtemplates, bool doSaveChanges = true)
		{
			if (recordtemplates == null)
			{
				return;
			}
			foreach (RecordTemplateDto instance in recordtemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.RecordTemplateService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteRecordTemplate(RecordTemplateDto recordtemplate, bool doSaveChanges = true)
		{
			this.RecordTemplateService.Delete(recordtemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteRecordTemplates(IEnumerable<RecordTemplateDto> recordtemplates, bool doSaveChanges = true)
		{
			if (recordtemplates == null)
			{
				return;
			}
			foreach (RecordTemplateDto instance in recordtemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.RecordTemplateService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion RecordTemplate CRUD Operations


		#region RecordInstance CRUD Operations


		private IRecordInstanceService recordinstance;
		public virtual IRecordInstanceService RecordInstanceService
		{
			get
			{
				if (this.recordinstance == null)
				{
					IRecordInstanceAssembler assembler = new RecordInstanceAssembler();
					IRecordInstanceRepository repository = new RecordInstanceRepository(this.UnitOfWork);
					this.recordinstance = new RecordInstanceService(assembler, repository);
				}
				return this.recordinstance;
			}
		}


		public IEnumerable<RecordInstanceDto> ReadRecordInstances()
		{
			return this.RecordInstanceService.GetAll();
		}


		public IEnumerable<RecordInstanceDto> ReadRecordInstances(Expression<Func<RecordInstance, bool>> filter)
		{
			return this.RecordInstanceService.Find(filter);
		}


		public IEnumerable<RecordInstanceDto> ReadRecordInstances(ISpecification<RecordInstance> specification)
		{
			return this.RecordInstanceService.Find(specification.GetExpression());
		}


		public IEnumerable<RecordInstanceDto> ReadRecordInstancesPaged(int startIndex, int pageSize)
		{
			return this.RecordInstanceService.Find(startIndex, pageSize);
		}


		public IEnumerable<RecordInstanceDto> ReadRecordInstancesFiltered(string sortExpression, string filterExpression)
		{
			return this.RecordInstanceService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<RecordInstanceDto> ReadRecordInstancesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.RecordInstanceService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public RecordInstanceDto ReadRecordInstances(string dtoKey)
		{
			return this.RecordInstanceService.GetByKey(dtoKey);
		}


		public int RecordInstancesCount()
		{
			return this.RecordInstanceService.Count();
		}


		public int RecordInstancesCountFiltered(string filterExpression)
		{
			return this.RecordInstanceService.Count(filterExpression);
		}


		public string CreateRecordInstance(RecordInstanceDto recordinstance, bool doSaveChanges = true)
		{
			string key = this.RecordInstanceService.Add(recordinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateRecordInstance(RecordInstanceDto recordinstance, bool doSaveChanges = true)
		{
			this.RecordInstanceService.Update(recordinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateRecordInstances(IEnumerable<RecordInstanceDto> recordinstances, bool doSaveChanges = true)
		{
			if (recordinstances == null)
			{
				return;
			}
			foreach (RecordInstanceDto instance in recordinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.RecordInstanceService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteRecordInstance(RecordInstanceDto recordinstance, bool doSaveChanges = true)
		{
			this.RecordInstanceService.Delete(recordinstance);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteRecordInstances(IEnumerable<RecordInstanceDto> recordinstances, bool doSaveChanges = true)
		{
			if (recordinstances == null)
			{
				return;
			}
			foreach (RecordInstanceDto instance in recordinstances)
			{
				if (instance == null)
				{
					continue;
				}


				this.RecordInstanceService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion RecordInstance CRUD Operations


		#region RecordInsDet CRUD Operations


		private IRecordInsDetService recordinsdet;
		public virtual IRecordInsDetService RecordInsDetService
		{
			get
			{
				if (this.recordinsdet == null)
				{
					IRecordInsDetAssembler assembler = new RecordInsDetAssembler();
					IRecordInsDetRepository repository = new RecordInsDetRepository(this.UnitOfWork);
					this.recordinsdet = new RecordInsDetService(assembler, repository);
				}
				return this.recordinsdet;
			}
		}


		public IEnumerable<RecordInsDetDto> ReadRecordInsDets()
		{
			return this.RecordInsDetService.GetAll();
		}


		public IEnumerable<RecordInsDetDto> ReadRecordInsDets(Expression<Func<RecordInsDet, bool>> filter)
		{
			return this.RecordInsDetService.Find(filter);
		}


		public IEnumerable<RecordInsDetDto> ReadRecordInsDets(ISpecification<RecordInsDet> specification)
		{
			return this.RecordInsDetService.Find(specification.GetExpression());
		}


		public IEnumerable<RecordInsDetDto> ReadRecordInsDetsPaged(int startIndex, int pageSize)
		{
			return this.RecordInsDetService.Find(startIndex, pageSize);
		}


		public IEnumerable<RecordInsDetDto> ReadRecordInsDetsFiltered(string sortExpression, string filterExpression)
		{
			return this.RecordInsDetService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<RecordInsDetDto> ReadRecordInsDetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.RecordInsDetService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public RecordInsDetDto ReadRecordInsDets(string dtoKey)
		{
			return this.RecordInsDetService.GetByKey(dtoKey);
		}


		public int RecordInsDetsCount()
		{
			return this.RecordInsDetService.Count();
		}


		public int RecordInsDetsCountFiltered(string filterExpression)
		{
			return this.RecordInsDetService.Count(filterExpression);
		}


		public string CreateRecordInsDet(RecordInsDetDto recordinsdet, bool doSaveChanges = true)
		{
			string key = this.RecordInsDetService.Add(recordinsdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateRecordInsDet(RecordInsDetDto recordinsdet, bool doSaveChanges = true)
		{
			this.RecordInsDetService.Update(recordinsdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateRecordInsDets(IEnumerable<RecordInsDetDto> recordinsdets, bool doSaveChanges = true)
		{
			if (recordinsdets == null)
			{
				return;
			}
			foreach (RecordInsDetDto instance in recordinsdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.RecordInsDetService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteRecordInsDet(RecordInsDetDto recordinsdet, bool doSaveChanges = true)
		{
			this.RecordInsDetService.Delete(recordinsdet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteRecordInsDets(IEnumerable<RecordInsDetDto> recordinsdets, bool doSaveChanges = true)
		{
			if (recordinsdets == null)
			{
				return;
			}
			foreach (RecordInsDetDto instance in recordinsdets)
			{
				if (instance == null)
				{
					continue;
				}


				this.RecordInsDetService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion RecordInsDet CRUD Operations


		#region RecordInsSignIn CRUD Operations


		private IRecordInsSignInService recordinssignin;
		public virtual IRecordInsSignInService RecordInsSignInService
		{
			get
			{
				if (this.recordinssignin == null)
				{
					IRecordInsSignInAssembler assembler = new RecordInsSignInAssembler();
					IRecordInsSignInRepository repository = new RecordInsSignInRepository(this.UnitOfWork);
					this.recordinssignin = new RecordInsSignInService(assembler, repository);
				}
				return this.recordinssignin;
			}
		}


		public IEnumerable<RecordInsSignInDto> ReadRecordInsSignIns()
		{
			return this.RecordInsSignInService.GetAll();
		}


		public IEnumerable<RecordInsSignInDto> ReadRecordInsSignIns(Expression<Func<RecordInsSignIn, bool>> filter)
		{
			return this.RecordInsSignInService.Find(filter);
		}


		public IEnumerable<RecordInsSignInDto> ReadRecordInsSignIns(ISpecification<RecordInsSignIn> specification)
		{
			return this.RecordInsSignInService.Find(specification.GetExpression());
		}


		public IEnumerable<RecordInsSignInDto> ReadRecordInsSignInsPaged(int startIndex, int pageSize)
		{
			return this.RecordInsSignInService.Find(startIndex, pageSize);
		}


		public IEnumerable<RecordInsSignInDto> ReadRecordInsSignInsFiltered(string sortExpression, string filterExpression)
		{
			return this.RecordInsSignInService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<RecordInsSignInDto> ReadRecordInsSignInsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.RecordInsSignInService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public RecordInsSignInDto ReadRecordInsSignIns(string dtoKey)
		{
			return this.RecordInsSignInService.GetByKey(dtoKey);
		}


		public int RecordInsSignInsCount()
		{
			return this.RecordInsSignInService.Count();
		}


		public int RecordInsSignInsCountFiltered(string filterExpression)
		{
			return this.RecordInsSignInService.Count(filterExpression);
		}


		public string CreateRecordInsSignIn(RecordInsSignInDto recordinssignin, bool doSaveChanges = true)
		{
			string key = this.RecordInsSignInService.Add(recordinssignin);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateRecordInsSignIn(RecordInsSignInDto recordinssignin, bool doSaveChanges = true)
		{
			this.RecordInsSignInService.Update(recordinssignin);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateRecordInsSignIns(IEnumerable<RecordInsSignInDto> recordinssignins, bool doSaveChanges = true)
		{
			if (recordinssignins == null)
			{
				return;
			}
			foreach (RecordInsSignInDto instance in recordinssignins)
			{
				if (instance == null)
				{
					continue;
				}


				this.RecordInsSignInService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteRecordInsSignIn(RecordInsSignInDto recordinssignin, bool doSaveChanges = true)
		{
			this.RecordInsSignInService.Delete(recordinssignin);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteRecordInsSignIns(IEnumerable<RecordInsSignInDto> recordinssignins, bool doSaveChanges = true)
		{
			if (recordinssignins == null)
			{
				return;
			}
			foreach (RecordInsSignInDto instance in recordinssignins)
			{
				if (instance == null)
				{
					continue;
				}


				this.RecordInsSignInService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion RecordInsSignIn CRUD Operations


		#region RecordEduActRef CRUD Operations


		private IRecordEduActRefService recordeduactref;
		public virtual IRecordEduActRefService RecordEduActRefService
		{
			get
			{
				if (this.recordeduactref == null)
				{
					IRecordEduActRefAssembler assembler = new RecordEduActRefAssembler();
					IRecordEduActRefRepository repository = new RecordEduActRefRepository(this.UnitOfWork);
					this.recordeduactref = new RecordEduActRefService(assembler, repository);
				}
				return this.recordeduactref;
			}
		}


		public IEnumerable<RecordEduActRefDto> ReadRecordEduActRefs()
		{
			return this.RecordEduActRefService.GetAll();
		}


		public IEnumerable<RecordEduActRefDto> ReadRecordEduActRefs(Expression<Func<RecordEduActRef, bool>> filter)
		{
			return this.RecordEduActRefService.Find(filter);
		}


		public IEnumerable<RecordEduActRefDto> ReadRecordEduActRefs(ISpecification<RecordEduActRef> specification)
		{
			return this.RecordEduActRefService.Find(specification.GetExpression());
		}


		public IEnumerable<RecordEduActRefDto> ReadRecordEduActRefsPaged(int startIndex, int pageSize)
		{
			return this.RecordEduActRefService.Find(startIndex, pageSize);
		}


		public IEnumerable<RecordEduActRefDto> ReadRecordEduActRefsFiltered(string sortExpression, string filterExpression)
		{
			return this.RecordEduActRefService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<RecordEduActRefDto> ReadRecordEduActRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.RecordEduActRefService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public RecordEduActRefDto ReadRecordEduActRefs(string dtoKey)
		{
			return this.RecordEduActRefService.GetByKey(dtoKey);
		}


		public int RecordEduActRefsCount()
		{
			return this.RecordEduActRefService.Count();
		}


		public int RecordEduActRefsCountFiltered(string filterExpression)
		{
			return this.RecordEduActRefService.Count(filterExpression);
		}


		public string CreateRecordEduActRef(RecordEduActRefDto recordeduactref, bool doSaveChanges = true)
		{
			string key = this.RecordEduActRefService.Add(recordeduactref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateRecordEduActRef(RecordEduActRefDto recordeduactref, bool doSaveChanges = true)
		{
			this.RecordEduActRefService.Update(recordeduactref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateRecordEduActRefs(IEnumerable<RecordEduActRefDto> recordeduactrefs, bool doSaveChanges = true)
		{
			if (recordeduactrefs == null)
			{
				return;
			}
			foreach (RecordEduActRefDto instance in recordeduactrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.RecordEduActRefService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteRecordEduActRef(RecordEduActRefDto recordeduactref, bool doSaveChanges = true)
		{
			this.RecordEduActRefService.Delete(recordeduactref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteRecordEduActRefs(IEnumerable<RecordEduActRefDto> recordeduactrefs, bool doSaveChanges = true)
		{
			if (recordeduactrefs == null)
			{
				return;
			}
			foreach (RecordEduActRefDto instance in recordeduactrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.RecordEduActRefService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion RecordEduActRef CRUD Operations


		#region EduQuestion CRUD Operations


		private IEduQuestionService eduquestion;
		public virtual IEduQuestionService EduQuestionService
		{
			get
			{
				if (this.eduquestion == null)
				{
					IEduQuestionAssembler assembler = new EduQuestionAssembler();
					IEduQuestionRepository repository = new EduQuestionRepository(this.UnitOfWork);
					this.eduquestion = new EduQuestionService(assembler, repository);
				}
				return this.eduquestion;
			}
		}


		public IEnumerable<EduQuestionDto> ReadEduQuestions()
		{
			return this.EduQuestionService.GetAll();
		}


		public IEnumerable<EduQuestionDto> ReadEduQuestions(Expression<Func<EduQuestion, bool>> filter)
		{
			return this.EduQuestionService.Find(filter);
		}


		public IEnumerable<EduQuestionDto> ReadEduQuestions(ISpecification<EduQuestion> specification)
		{
			return this.EduQuestionService.Find(specification.GetExpression());
		}


		public IEnumerable<EduQuestionDto> ReadEduQuestionsPaged(int startIndex, int pageSize)
		{
			return this.EduQuestionService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduQuestionDto> ReadEduQuestionsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduQuestionService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduQuestionDto> ReadEduQuestionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduQuestionService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduQuestionDto ReadEduQuestions(string dtoKey)
		{
			return this.EduQuestionService.GetByKey(dtoKey);
		}


		public int EduQuestionsCount()
		{
			return this.EduQuestionService.Count();
		}


		public int EduQuestionsCountFiltered(string filterExpression)
		{
			return this.EduQuestionService.Count(filterExpression);
		}


		public string CreateEduQuestion(EduQuestionDto eduquestion, bool doSaveChanges = true)
		{
			string key = this.EduQuestionService.Add(eduquestion);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduQuestion(EduQuestionDto eduquestion, bool doSaveChanges = true)
		{
			this.EduQuestionService.Update(eduquestion);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduQuestions(IEnumerable<EduQuestionDto> eduquestions, bool doSaveChanges = true)
		{
			if (eduquestions == null)
			{
				return;
			}
			foreach (EduQuestionDto instance in eduquestions)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduQuestionService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduQuestion(EduQuestionDto eduquestion, bool doSaveChanges = true)
		{
			this.EduQuestionService.Delete(eduquestion);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduQuestions(IEnumerable<EduQuestionDto> eduquestions, bool doSaveChanges = true)
		{
			if (eduquestions == null)
			{
				return;
			}
			foreach (EduQuestionDto instance in eduquestions)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduQuestionService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduQuestion CRUD Operations


		#region LoginLog CRUD Operations


		private ILoginLogService loginlog;
		public virtual ILoginLogService LoginLogService
		{
			get
			{
				if (this.loginlog == null)
				{
					ILoginLogAssembler assembler = new LoginLogAssembler();
					ILoginLogRepository repository = new LoginLogRepository(this.UnitOfWork);
					this.loginlog = new LoginLogService(assembler, repository);
				}
				return this.loginlog;
			}
		}


		public IEnumerable<LoginLogDto> ReadLoginLogs()
		{
			return this.LoginLogService.GetAll();
		}


		public IEnumerable<LoginLogDto> ReadLoginLogs(Expression<Func<LoginLog, bool>> filter)
		{
			return this.LoginLogService.Find(filter);
		}


		public IEnumerable<LoginLogDto> ReadLoginLogs(ISpecification<LoginLog> specification)
		{
			return this.LoginLogService.Find(specification.GetExpression());
		}


		public IEnumerable<LoginLogDto> ReadLoginLogsPaged(int startIndex, int pageSize)
		{
			return this.LoginLogService.Find(startIndex, pageSize);
		}


		public IEnumerable<LoginLogDto> ReadLoginLogsFiltered(string sortExpression, string filterExpression)
		{
			return this.LoginLogService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<LoginLogDto> ReadLoginLogsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.LoginLogService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public LoginLogDto ReadLoginLogs(string dtoKey)
		{
			return this.LoginLogService.GetByKey(dtoKey);
		}


		public int LoginLogsCount()
		{
			return this.LoginLogService.Count();
		}


		public int LoginLogsCountFiltered(string filterExpression)
		{
			return this.LoginLogService.Count(filterExpression);
		}


		public string CreateLoginLog(LoginLogDto loginlog, bool doSaveChanges = true)
		{
			string key = this.LoginLogService.Add(loginlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateLoginLog(LoginLogDto loginlog, bool doSaveChanges = true)
		{
			this.LoginLogService.Update(loginlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateLoginLogs(IEnumerable<LoginLogDto> loginlogs, bool doSaveChanges = true)
		{
			if (loginlogs == null)
			{
				return;
			}
			foreach (LoginLogDto instance in loginlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.LoginLogService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteLoginLog(LoginLogDto loginlog, bool doSaveChanges = true)
		{
			this.LoginLogService.Delete(loginlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteLoginLogs(IEnumerable<LoginLogDto> loginlogs, bool doSaveChanges = true)
		{
			if (loginlogs == null)
			{
				return;
			}
			foreach (LoginLogDto instance in loginlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.LoginLogService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion LoginLog CRUD Operations


		#region TeachPointJobItem CRUD Operations


		private ITeachPointJobItemService teachpointjobitem;
		public virtual ITeachPointJobItemService TeachPointJobItemService
		{
			get
			{
				if (this.teachpointjobitem == null)
				{
					ITeachPointJobItemAssembler assembler = new TeachPointJobItemAssembler();
					ITeachPointJobItemRepository repository = new TeachPointJobItemRepository(this.UnitOfWork);
					this.teachpointjobitem = new TeachPointJobItemService(assembler, repository);
				}
				return this.teachpointjobitem;
			}
		}


		public IEnumerable<TeachPointJobItemDto> ReadTeachPointJobItems()
		{
			return this.TeachPointJobItemService.GetAll();
		}


		public IEnumerable<TeachPointJobItemDto> ReadTeachPointJobItems(Expression<Func<TeachPointJobItem, bool>> filter)
		{
			return this.TeachPointJobItemService.Find(filter);
		}


		public IEnumerable<TeachPointJobItemDto> ReadTeachPointJobItems(ISpecification<TeachPointJobItem> specification)
		{
			return this.TeachPointJobItemService.Find(specification.GetExpression());
		}


		public IEnumerable<TeachPointJobItemDto> ReadTeachPointJobItemsPaged(int startIndex, int pageSize)
		{
			return this.TeachPointJobItemService.Find(startIndex, pageSize);
		}


		public IEnumerable<TeachPointJobItemDto> ReadTeachPointJobItemsFiltered(string sortExpression, string filterExpression)
		{
			return this.TeachPointJobItemService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TeachPointJobItemDto> ReadTeachPointJobItemsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TeachPointJobItemService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public TeachPointJobItemDto ReadTeachPointJobItems(string dtoKey)
		{
			return this.TeachPointJobItemService.GetByKey(dtoKey);
		}


		public int TeachPointJobItemsCount()
		{
			return this.TeachPointJobItemService.Count();
		}


		public int TeachPointJobItemsCountFiltered(string filterExpression)
		{
			return this.TeachPointJobItemService.Count(filterExpression);
		}


		public string CreateTeachPointJobItem(TeachPointJobItemDto teachpointjobitem, bool doSaveChanges = true)
		{
			string key = this.TeachPointJobItemService.Add(teachpointjobitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTeachPointJobItem(TeachPointJobItemDto teachpointjobitem, bool doSaveChanges = true)
		{
			this.TeachPointJobItemService.Update(teachpointjobitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTeachPointJobItems(IEnumerable<TeachPointJobItemDto> teachpointjobitems, bool doSaveChanges = true)
		{
			if (teachpointjobitems == null)
			{
				return;
			}
			foreach (TeachPointJobItemDto instance in teachpointjobitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachPointJobItemService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTeachPointJobItem(TeachPointJobItemDto teachpointjobitem, bool doSaveChanges = true)
		{
			this.TeachPointJobItemService.Delete(teachpointjobitem);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTeachPointJobItems(IEnumerable<TeachPointJobItemDto> teachpointjobitems, bool doSaveChanges = true)
		{
			if (teachpointjobitems == null)
			{
				return;
			}
			foreach (TeachPointJobItemDto instance in teachpointjobitems)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachPointJobItemService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion TeachPointJobItem CRUD Operations


		#region TrainingTime CRUD Operations


		private ITrainingTimeService trainingtime;
		public virtual ITrainingTimeService TrainingTimeService
		{
			get
			{
				if (this.trainingtime == null)
				{
					ITrainingTimeAssembler assembler = new TrainingTimeAssembler();
					ITrainingTimeRepository repository = new TrainingTimeRepository(this.UnitOfWork);
					this.trainingtime = new TrainingTimeService(assembler, repository);
				}
				return this.trainingtime;
			}
		}


		public IEnumerable<TrainingTimeDto> ReadTrainingTimes()
		{
			return this.TrainingTimeService.GetAll();
		}


		public IEnumerable<TrainingTimeDto> ReadTrainingTimes(Expression<Func<TrainingTime, bool>> filter)
		{
			return this.TrainingTimeService.Find(filter);
		}


		public IEnumerable<TrainingTimeDto> ReadTrainingTimes(ISpecification<TrainingTime> specification)
		{
			return this.TrainingTimeService.Find(specification.GetExpression());
		}


		public IEnumerable<TrainingTimeDto> ReadTrainingTimesPaged(int startIndex, int pageSize)
		{
			return this.TrainingTimeService.Find(startIndex, pageSize);
		}


		public IEnumerable<TrainingTimeDto> ReadTrainingTimesFiltered(string sortExpression, string filterExpression)
		{
			return this.TrainingTimeService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TrainingTimeDto> ReadTrainingTimesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TrainingTimeService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public TrainingTimeDto ReadTrainingTimes(string dtoKey)
		{
			return this.TrainingTimeService.GetByKey(dtoKey);
		}


		public int TrainingTimesCount()
		{
			return this.TrainingTimeService.Count();
		}


		public int TrainingTimesCountFiltered(string filterExpression)
		{
			return this.TrainingTimeService.Count(filterExpression);
		}


		public string CreateTrainingTime(TrainingTimeDto trainingtime, bool doSaveChanges = true)
		{
			string key = this.TrainingTimeService.Add(trainingtime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTrainingTime(TrainingTimeDto trainingtime, bool doSaveChanges = true)
		{
			this.TrainingTimeService.Update(trainingtime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTrainingTimes(IEnumerable<TrainingTimeDto> trainingtimes, bool doSaveChanges = true)
		{
			if (trainingtimes == null)
			{
				return;
			}
			foreach (TrainingTimeDto instance in trainingtimes)
			{
				if (instance == null)
				{
					continue;
				}


				this.TrainingTimeService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTrainingTime(TrainingTimeDto trainingtime, bool doSaveChanges = true)
		{
			this.TrainingTimeService.Delete(trainingtime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTrainingTimes(IEnumerable<TrainingTimeDto> trainingtimes, bool doSaveChanges = true)
		{
			if (trainingtimes == null)
			{
				return;
			}
			foreach (TrainingTimeDto instance in trainingtimes)
			{
				if (instance == null)
				{
					continue;
				}


				this.TrainingTimeService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion TrainingTime CRUD Operations


		#region EduActTypeRoleRef CRUD Operations


		private IEduActTypeRoleRefService eduacttyperoleref;
		public virtual IEduActTypeRoleRefService EduActTypeRoleRefService
		{
			get
			{
				if (this.eduacttyperoleref == null)
				{
					IEduActTypeRoleRefAssembler assembler = new EduActTypeRoleRefAssembler();
					IEduActTypeRoleRefRepository repository = new EduActTypeRoleRefRepository(this.UnitOfWork);
					this.eduacttyperoleref = new EduActTypeRoleRefService(assembler, repository);
				}
				return this.eduacttyperoleref;
			}
		}


		public IEnumerable<EduActTypeRoleRefDto> ReadEduActTypeRoleRefs()
		{
			return this.EduActTypeRoleRefService.GetAll();
		}


		public IEnumerable<EduActTypeRoleRefDto> ReadEduActTypeRoleRefs(Expression<Func<EduActTypeRoleRef, bool>> filter)
		{
			return this.EduActTypeRoleRefService.Find(filter);
		}


		public IEnumerable<EduActTypeRoleRefDto> ReadEduActTypeRoleRefs(ISpecification<EduActTypeRoleRef> specification)
		{
			return this.EduActTypeRoleRefService.Find(specification.GetExpression());
		}


		public IEnumerable<EduActTypeRoleRefDto> ReadEduActTypeRoleRefsPaged(int startIndex, int pageSize)
		{
			return this.EduActTypeRoleRefService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduActTypeRoleRefDto> ReadEduActTypeRoleRefsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduActTypeRoleRefService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduActTypeRoleRefDto> ReadEduActTypeRoleRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduActTypeRoleRefService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduActTypeRoleRefDto ReadEduActTypeRoleRefs(string dtoKey)
		{
			return this.EduActTypeRoleRefService.GetByKey(dtoKey);
		}


		public int EduActTypeRoleRefsCount()
		{
			return this.EduActTypeRoleRefService.Count();
		}


		public int EduActTypeRoleRefsCountFiltered(string filterExpression)
		{
			return this.EduActTypeRoleRefService.Count(filterExpression);
		}


		public string CreateEduActTypeRoleRef(EduActTypeRoleRefDto eduacttyperoleref, bool doSaveChanges = true)
		{
			string key = this.EduActTypeRoleRefService.Add(eduacttyperoleref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduActTypeRoleRef(EduActTypeRoleRefDto eduacttyperoleref, bool doSaveChanges = true)
		{
			this.EduActTypeRoleRefService.Update(eduacttyperoleref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduActTypeRoleRefs(IEnumerable<EduActTypeRoleRefDto> eduacttyperolerefs, bool doSaveChanges = true)
		{
			if (eduacttyperolerefs == null)
			{
				return;
			}
			foreach (EduActTypeRoleRefDto instance in eduacttyperolerefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduActTypeRoleRefService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduActTypeRoleRef(EduActTypeRoleRefDto eduacttyperoleref, bool doSaveChanges = true)
		{
			this.EduActTypeRoleRefService.Delete(eduacttyperoleref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduActTypeRoleRefs(IEnumerable<EduActTypeRoleRefDto> eduacttyperolerefs, bool doSaveChanges = true)
		{
			if (eduacttyperolerefs == null)
			{
				return;
			}
			foreach (EduActTypeRoleRefDto instance in eduacttyperolerefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduActTypeRoleRefService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduActTypeRoleRef CRUD Operations


		#region OSCECert CRUD Operations


		private IOSCECertService oscecert;
		public virtual IOSCECertService OSCECertService
		{
			get
			{
				if (this.oscecert == null)
				{
					IOSCECertAssembler assembler = new OSCECertAssembler();
					IOSCECertRepository repository = new OSCECertRepository(this.UnitOfWork);
					this.oscecert = new OSCECertService(assembler, repository);
				}
				return this.oscecert;
			}
		}


		public IEnumerable<OSCECertDto> ReadOSCECerts()
		{
			return this.OSCECertService.GetAll();
		}


		public IEnumerable<OSCECertDto> ReadOSCECerts(Expression<Func<OSCECert, bool>> filter)
		{
			return this.OSCECertService.Find(filter);
		}


		public IEnumerable<OSCECertDto> ReadOSCECerts(ISpecification<OSCECert> specification)
		{
			return this.OSCECertService.Find(specification.GetExpression());
		}


		public IEnumerable<OSCECertDto> ReadOSCECertsPaged(int startIndex, int pageSize)
		{
			return this.OSCECertService.Find(startIndex, pageSize);
		}


		public IEnumerable<OSCECertDto> ReadOSCECertsFiltered(string sortExpression, string filterExpression)
		{
			return this.OSCECertService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<OSCECertDto> ReadOSCECertsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.OSCECertService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public OSCECertDto ReadOSCECerts(string dtoKey)
		{
			return this.OSCECertService.GetByKey(dtoKey);
		}


		public int OSCECertsCount()
		{
			return this.OSCECertService.Count();
		}


		public int OSCECertsCountFiltered(string filterExpression)
		{
			return this.OSCECertService.Count(filterExpression);
		}


		public string CreateOSCECert(OSCECertDto oscecert, bool doSaveChanges = true)
		{
			string key = this.OSCECertService.Add(oscecert);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateOSCECert(OSCECertDto oscecert, bool doSaveChanges = true)
		{
			this.OSCECertService.Update(oscecert);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateOSCECerts(IEnumerable<OSCECertDto> oscecerts, bool doSaveChanges = true)
		{
			if (oscecerts == null)
			{
				return;
			}
			foreach (OSCECertDto instance in oscecerts)
			{
				if (instance == null)
				{
					continue;
				}


				this.OSCECertService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteOSCECert(OSCECertDto oscecert, bool doSaveChanges = true)
		{
			this.OSCECertService.Delete(oscecert);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteOSCECerts(IEnumerable<OSCECertDto> oscecerts, bool doSaveChanges = true)
		{
			if (oscecerts == null)
			{
				return;
			}
			foreach (OSCECertDto instance in oscecerts)
			{
				if (instance == null)
				{
					continue;
				}


				this.OSCECertService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion OSCECert CRUD Operations


		#region OSCEBlockTime CRUD Operations


		private IOSCEBlockTimeService osceblocktime;
		public virtual IOSCEBlockTimeService OSCEBlockTimeService
		{
			get
			{
				if (this.osceblocktime == null)
				{
					IOSCEBlockTimeAssembler assembler = new OSCEBlockTimeAssembler();
					IOSCEBlockTimeRepository repository = new OSCEBlockTimeRepository(this.UnitOfWork);
					this.osceblocktime = new OSCEBlockTimeService(assembler, repository);
				}
				return this.osceblocktime;
			}
		}


		public IEnumerable<OSCEBlockTimeDto> ReadOSCEBlockTimes()
		{
			return this.OSCEBlockTimeService.GetAll();
		}


		public IEnumerable<OSCEBlockTimeDto> ReadOSCEBlockTimes(Expression<Func<OSCEBlockTime, bool>> filter)
		{
			return this.OSCEBlockTimeService.Find(filter);
		}


		public IEnumerable<OSCEBlockTimeDto> ReadOSCEBlockTimes(ISpecification<OSCEBlockTime> specification)
		{
			return this.OSCEBlockTimeService.Find(specification.GetExpression());
		}


		public IEnumerable<OSCEBlockTimeDto> ReadOSCEBlockTimesPaged(int startIndex, int pageSize)
		{
			return this.OSCEBlockTimeService.Find(startIndex, pageSize);
		}


		public IEnumerable<OSCEBlockTimeDto> ReadOSCEBlockTimesFiltered(string sortExpression, string filterExpression)
		{
			return this.OSCEBlockTimeService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<OSCEBlockTimeDto> ReadOSCEBlockTimesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.OSCEBlockTimeService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public OSCEBlockTimeDto ReadOSCEBlockTimes(string dtoKey)
		{
			return this.OSCEBlockTimeService.GetByKey(dtoKey);
		}


		public int OSCEBlockTimesCount()
		{
			return this.OSCEBlockTimeService.Count();
		}


		public int OSCEBlockTimesCountFiltered(string filterExpression)
		{
			return this.OSCEBlockTimeService.Count(filterExpression);
		}


		public string CreateOSCEBlockTime(OSCEBlockTimeDto osceblocktime, bool doSaveChanges = true)
		{
			string key = this.OSCEBlockTimeService.Add(osceblocktime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateOSCEBlockTime(OSCEBlockTimeDto osceblocktime, bool doSaveChanges = true)
		{
			this.OSCEBlockTimeService.Update(osceblocktime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateOSCEBlockTimes(IEnumerable<OSCEBlockTimeDto> osceblocktimes, bool doSaveChanges = true)
		{
			if (osceblocktimes == null)
			{
				return;
			}
			foreach (OSCEBlockTimeDto instance in osceblocktimes)
			{
				if (instance == null)
				{
					continue;
				}


				this.OSCEBlockTimeService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteOSCEBlockTime(OSCEBlockTimeDto osceblocktime, bool doSaveChanges = true)
		{
			this.OSCEBlockTimeService.Delete(osceblocktime);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteOSCEBlockTimes(IEnumerable<OSCEBlockTimeDto> osceblocktimes, bool doSaveChanges = true)
		{
			if (osceblocktimes == null)
			{
				return;
			}
			foreach (OSCEBlockTimeDto instance in osceblocktimes)
			{
				if (instance == null)
				{
					continue;
				}


				this.OSCEBlockTimeService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion OSCEBlockTime CRUD Operations


		#region RecordInstanceRejectLog CRUD Operations


		private IRecordInstanceRejectLogService recordinstancerejectlog;
		public virtual IRecordInstanceRejectLogService RecordInstanceRejectLogService
		{
			get
			{
				if (this.recordinstancerejectlog == null)
				{
					IRecordInstanceRejectLogAssembler assembler = new RecordInstanceRejectLogAssembler();
					IRecordInstanceRejectLogRepository repository = new RecordInstanceRejectLogRepository(this.UnitOfWork);
					this.recordinstancerejectlog = new RecordInstanceRejectLogService(assembler, repository);
				}
				return this.recordinstancerejectlog;
			}
		}


		public IEnumerable<RecordInstanceRejectLogDto> ReadRecordInstanceRejectLogs()
		{
			return this.RecordInstanceRejectLogService.GetAll();
		}


		public IEnumerable<RecordInstanceRejectLogDto> ReadRecordInstanceRejectLogs(Expression<Func<RecordInstanceRejectLog, bool>> filter)
		{
			return this.RecordInstanceRejectLogService.Find(filter);
		}


		public IEnumerable<RecordInstanceRejectLogDto> ReadRecordInstanceRejectLogs(ISpecification<RecordInstanceRejectLog> specification)
		{
			return this.RecordInstanceRejectLogService.Find(specification.GetExpression());
		}


		public IEnumerable<RecordInstanceRejectLogDto> ReadRecordInstanceRejectLogsPaged(int startIndex, int pageSize)
		{
			return this.RecordInstanceRejectLogService.Find(startIndex, pageSize);
		}


		public IEnumerable<RecordInstanceRejectLogDto> ReadRecordInstanceRejectLogsFiltered(string sortExpression, string filterExpression)
		{
			return this.RecordInstanceRejectLogService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<RecordInstanceRejectLogDto> ReadRecordInstanceRejectLogsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.RecordInstanceRejectLogService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public RecordInstanceRejectLogDto ReadRecordInstanceRejectLogs(string dtoKey)
		{
			return this.RecordInstanceRejectLogService.GetByKey(dtoKey);
		}


		public int RecordInstanceRejectLogsCount()
		{
			return this.RecordInstanceRejectLogService.Count();
		}


		public int RecordInstanceRejectLogsCountFiltered(string filterExpression)
		{
			return this.RecordInstanceRejectLogService.Count(filterExpression);
		}


		public string CreateRecordInstanceRejectLog(RecordInstanceRejectLogDto recordinstancerejectlog, bool doSaveChanges = true)
		{
			string key = this.RecordInstanceRejectLogService.Add(recordinstancerejectlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateRecordInstanceRejectLog(RecordInstanceRejectLogDto recordinstancerejectlog, bool doSaveChanges = true)
		{
			this.RecordInstanceRejectLogService.Update(recordinstancerejectlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateRecordInstanceRejectLogs(IEnumerable<RecordInstanceRejectLogDto> recordinstancerejectlogs, bool doSaveChanges = true)
		{
			if (recordinstancerejectlogs == null)
			{
				return;
			}
			foreach (RecordInstanceRejectLogDto instance in recordinstancerejectlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.RecordInstanceRejectLogService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteRecordInstanceRejectLog(RecordInstanceRejectLogDto recordinstancerejectlog, bool doSaveChanges = true)
		{
			this.RecordInstanceRejectLogService.Delete(recordinstancerejectlog);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteRecordInstanceRejectLogs(IEnumerable<RecordInstanceRejectLogDto> recordinstancerejectlogs, bool doSaveChanges = true)
		{
			if (recordinstancerejectlogs == null)
			{
				return;
			}
			foreach (RecordInstanceRejectLogDto instance in recordinstancerejectlogs)
			{
				if (instance == null)
				{
					continue;
				}


				this.RecordInstanceRejectLogService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion RecordInstanceRejectLog CRUD Operations


		#region MonthlyTeachPointCalcDatum CRUD Operations


		private IMonthlyTeachPointCalcDatumService monthlyteachpointcalcdatum;
		public virtual IMonthlyTeachPointCalcDatumService MonthlyTeachPointCalcDatumService
		{
			get
			{
				if (this.monthlyteachpointcalcdatum == null)
				{
					IMonthlyTeachPointCalcDatumAssembler assembler = new MonthlyTeachPointCalcDatumAssembler();
					IMonthlyTeachPointCalcDatumRepository repository = new MonthlyTeachPointCalcDatumRepository(this.UnitOfWork);
					this.monthlyteachpointcalcdatum = new MonthlyTeachPointCalcDatumService(assembler, repository);
				}
				return this.monthlyteachpointcalcdatum;
			}
		}


		public IEnumerable<MonthlyTeachPointCalcDatumDto> ReadMonthlyTeachPointCalcData()
		{
			return this.MonthlyTeachPointCalcDatumService.GetAll();
		}


		public IEnumerable<MonthlyTeachPointCalcDatumDto> ReadMonthlyTeachPointCalcData(Expression<Func<MonthlyTeachPointCalcDatum, bool>> filter)
		{
			return this.MonthlyTeachPointCalcDatumService.Find(filter);
		}


		public IEnumerable<MonthlyTeachPointCalcDatumDto> ReadMonthlyTeachPointCalcData(ISpecification<MonthlyTeachPointCalcDatum> specification)
		{
			return this.MonthlyTeachPointCalcDatumService.Find(specification.GetExpression());
		}


		public IEnumerable<MonthlyTeachPointCalcDatumDto> ReadMonthlyTeachPointCalcDataPaged(int startIndex, int pageSize)
		{
			return this.MonthlyTeachPointCalcDatumService.Find(startIndex, pageSize);
		}


		public IEnumerable<MonthlyTeachPointCalcDatumDto> ReadMonthlyTeachPointCalcDataFiltered(string sortExpression, string filterExpression)
		{
			return this.MonthlyTeachPointCalcDatumService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<MonthlyTeachPointCalcDatumDto> ReadMonthlyTeachPointCalcDataPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.MonthlyTeachPointCalcDatumService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public MonthlyTeachPointCalcDatumDto ReadMonthlyTeachPointCalcData(string dtoKey)
		{
			return this.MonthlyTeachPointCalcDatumService.GetByKey(dtoKey);
		}


		public int MonthlyTeachPointCalcDataCount()
		{
			return this.MonthlyTeachPointCalcDatumService.Count();
		}


		public int MonthlyTeachPointCalcDataCountFiltered(string filterExpression)
		{
			return this.MonthlyTeachPointCalcDatumService.Count(filterExpression);
		}


		public string CreateMonthlyTeachPointCalcDatum(MonthlyTeachPointCalcDatumDto monthlyteachpointcalcdatum, bool doSaveChanges = true)
		{
			string key = this.MonthlyTeachPointCalcDatumService.Add(monthlyteachpointcalcdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateMonthlyTeachPointCalcDatum(MonthlyTeachPointCalcDatumDto monthlyteachpointcalcdatum, bool doSaveChanges = true)
		{
			this.MonthlyTeachPointCalcDatumService.Update(monthlyteachpointcalcdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateMonthlyTeachPointCalcData(IEnumerable<MonthlyTeachPointCalcDatumDto> monthlyteachpointcalcdata, bool doSaveChanges = true)
		{
			if (monthlyteachpointcalcdata == null)
			{
				return;
			}
			foreach (MonthlyTeachPointCalcDatumDto instance in monthlyteachpointcalcdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.MonthlyTeachPointCalcDatumService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteMonthlyTeachPointCalcDatum(MonthlyTeachPointCalcDatumDto monthlyteachpointcalcdatum, bool doSaveChanges = true)
		{
			this.MonthlyTeachPointCalcDatumService.Delete(monthlyteachpointcalcdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteMonthlyTeachPointCalcData(IEnumerable<MonthlyTeachPointCalcDatumDto> monthlyteachpointcalcdata, bool doSaveChanges = true)
		{
			if (monthlyteachpointcalcdata == null)
			{
				return;
			}
			foreach (MonthlyTeachPointCalcDatumDto instance in monthlyteachpointcalcdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.MonthlyTeachPointCalcDatumService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion MonthlyTeachPointCalcDatum CRUD Operations


		#region FormCategoryRef CRUD Operations


		private IFormCategoryRefService formcategoryref;
		public virtual IFormCategoryRefService FormCategoryRefService
		{
			get
			{
				if (this.formcategoryref == null)
				{
					IFormCategoryRefAssembler assembler = new FormCategoryRefAssembler();
					IFormCategoryRefRepository repository = new FormCategoryRefRepository(this.UnitOfWork);
					this.formcategoryref = new FormCategoryRefService(assembler, repository);
				}
				return this.formcategoryref;
			}
		}


		public IEnumerable<FormCategoryRefDto> ReadFormCategoryRefs()
		{
			return this.FormCategoryRefService.GetAll();
		}


		public IEnumerable<FormCategoryRefDto> ReadFormCategoryRefs(Expression<Func<FormCategoryRef, bool>> filter)
		{
			return this.FormCategoryRefService.Find(filter);
		}


		public IEnumerable<FormCategoryRefDto> ReadFormCategoryRefs(ISpecification<FormCategoryRef> specification)
		{
			return this.FormCategoryRefService.Find(specification.GetExpression());
		}


		public IEnumerable<FormCategoryRefDto> ReadFormCategoryRefsPaged(int startIndex, int pageSize)
		{
			return this.FormCategoryRefService.Find(startIndex, pageSize);
		}


		public IEnumerable<FormCategoryRefDto> ReadFormCategoryRefsFiltered(string sortExpression, string filterExpression)
		{
			return this.FormCategoryRefService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FormCategoryRefDto> ReadFormCategoryRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FormCategoryRefService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public FormCategoryRefDto ReadFormCategoryRefs(string dtoKey)
		{
			return this.FormCategoryRefService.GetByKey(dtoKey);
		}


		public int FormCategoryRefsCount()
		{
			return this.FormCategoryRefService.Count();
		}


		public int FormCategoryRefsCountFiltered(string filterExpression)
		{
			return this.FormCategoryRefService.Count(filterExpression);
		}


		public string CreateFormCategoryRef(FormCategoryRefDto formcategoryref, bool doSaveChanges = true)
		{
			string key = this.FormCategoryRefService.Add(formcategoryref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFormCategoryRef(FormCategoryRefDto formcategoryref, bool doSaveChanges = true)
		{
			this.FormCategoryRefService.Update(formcategoryref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFormCategoryRefs(IEnumerable<FormCategoryRefDto> formcategoryrefs, bool doSaveChanges = true)
		{
			if (formcategoryrefs == null)
			{
				return;
			}
			foreach (FormCategoryRefDto instance in formcategoryrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.FormCategoryRefService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFormCategoryRef(FormCategoryRefDto formcategoryref, bool doSaveChanges = true)
		{
			this.FormCategoryRefService.Delete(formcategoryref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFormCategoryRefs(IEnumerable<FormCategoryRefDto> formcategoryrefs, bool doSaveChanges = true)
		{
			if (formcategoryrefs == null)
			{
				return;
			}
			foreach (FormCategoryRefDto instance in formcategoryrefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.FormCategoryRefService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion FormCategoryRef CRUD Operations


		#region FormCategory CRUD Operations


		private IFormCategoryService formcategory;
		public virtual IFormCategoryService FormCategoryService
		{
			get
			{
				if (this.formcategory == null)
				{
					IFormCategoryAssembler assembler = new FormCategoryAssembler();
					IFormCategoryRepository repository = new FormCategoryRepository(this.UnitOfWork);
					this.formcategory = new FormCategoryService(assembler, repository);
				}
				return this.formcategory;
			}
		}


		public IEnumerable<FormCategoryDto> ReadFormCategories()
		{
			return this.FormCategoryService.GetAll();
		}


		public IEnumerable<FormCategoryDto> ReadFormCategories(Expression<Func<FormCategory, bool>> filter)
		{
			return this.FormCategoryService.Find(filter);
		}


		public IEnumerable<FormCategoryDto> ReadFormCategories(ISpecification<FormCategory> specification)
		{
			return this.FormCategoryService.Find(specification.GetExpression());
		}


		public IEnumerable<FormCategoryDto> ReadFormCategoriesPaged(int startIndex, int pageSize)
		{
			return this.FormCategoryService.Find(startIndex, pageSize);
		}


		public IEnumerable<FormCategoryDto> ReadFormCategoriesFiltered(string sortExpression, string filterExpression)
		{
			return this.FormCategoryService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FormCategoryDto> ReadFormCategoriesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FormCategoryService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public FormCategoryDto ReadFormCategories(string dtoKey)
		{
			return this.FormCategoryService.GetByKey(dtoKey);
		}


		public int FormCategoriesCount()
		{
			return this.FormCategoryService.Count();
		}


		public int FormCategoriesCountFiltered(string filterExpression)
		{
			return this.FormCategoryService.Count(filterExpression);
		}


		public string CreateFormCategory(FormCategoryDto formcategory, bool doSaveChanges = true)
		{
			string key = this.FormCategoryService.Add(formcategory);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFormCategory(FormCategoryDto formcategory, bool doSaveChanges = true)
		{
			this.FormCategoryService.Update(formcategory);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFormCategories(IEnumerable<FormCategoryDto> formcategories, bool doSaveChanges = true)
		{
			if (formcategories == null)
			{
				return;
			}
			foreach (FormCategoryDto instance in formcategories)
			{
				if (instance == null)
				{
					continue;
				}


				this.FormCategoryService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFormCategory(FormCategoryDto formcategory, bool doSaveChanges = true)
		{
			this.FormCategoryService.Delete(formcategory);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFormCategories(IEnumerable<FormCategoryDto> formcategories, bool doSaveChanges = true)
		{
			if (formcategories == null)
			{
				return;
			}
			foreach (FormCategoryDto instance in formcategories)
			{
				if (instance == null)
				{
					continue;
				}


				this.FormCategoryService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion FormCategory CRUD Operations


		#region FORM_INSTANCE_RETURN_LOG CRUD Operations


		private IFORM_INSTANCE_RETURN_LOGService form_instance_return_log;
		public virtual IFORM_INSTANCE_RETURN_LOGService FORM_INSTANCE_RETURN_LOGService
		{
			get
			{
				if (this.form_instance_return_log == null)
				{
					IFORM_INSTANCE_RETURN_LOGAssembler assembler = new FORM_INSTANCE_RETURN_LOGAssembler();
					IFORM_INSTANCE_RETURN_LOGRepository repository = new FORM_INSTANCE_RETURN_LOGRepository(this.UnitOfWork);
					this.form_instance_return_log = new FORM_INSTANCE_RETURN_LOGService(assembler, repository);
				}
				return this.form_instance_return_log;
			}
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs()
		{
			return this.FORM_INSTANCE_RETURN_LOGService.GetAll();
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs(Expression<Func<FORM_INSTANCE_RETURN_LOG, bool>> filter)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Find(filter);
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGs(ISpecification<FORM_INSTANCE_RETURN_LOG> specification)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsPaged(int startIndex, int pageSize)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_INSTANCE_RETURN_LOGDto> ReadFORM_INSTANCE_RETURN_LOGsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public FORM_INSTANCE_RETURN_LOGDto ReadFORM_INSTANCE_RETURN_LOGs(string dtoKey)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.GetByKey(dtoKey);
		}


		public int FORM_INSTANCE_RETURN_LOGsCount()
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Count();
		}


		public int FORM_INSTANCE_RETURN_LOGsCountFiltered(string filterExpression)
		{
			return this.FORM_INSTANCE_RETURN_LOGService.Count(filterExpression);
		}


		public string CreateFORM_INSTANCE_RETURN_LOG(FORM_INSTANCE_RETURN_LOGDto form_instance_return_log, bool doSaveChanges = true)
		{
			string key = this.FORM_INSTANCE_RETURN_LOGService.Add(form_instance_return_log);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_INSTANCE_RETURN_LOG(FORM_INSTANCE_RETURN_LOGDto form_instance_return_log, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_RETURN_LOGService.Update(form_instance_return_log);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_INSTANCE_RETURN_LOGs(IEnumerable<FORM_INSTANCE_RETURN_LOGDto> form_instance_return_logs, bool doSaveChanges = true)
		{
			if (form_instance_return_logs == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_RETURN_LOGDto instance in form_instance_return_logs)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_RETURN_LOGService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_INSTANCE_RETURN_LOG(FORM_INSTANCE_RETURN_LOGDto form_instance_return_log, bool doSaveChanges = true)
		{
			this.FORM_INSTANCE_RETURN_LOGService.Delete(form_instance_return_log);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_INSTANCE_RETURN_LOGs(IEnumerable<FORM_INSTANCE_RETURN_LOGDto> form_instance_return_logs, bool doSaveChanges = true)
		{
			if (form_instance_return_logs == null)
			{
				return;
			}
			foreach (FORM_INSTANCE_RETURN_LOGDto instance in form_instance_return_logs)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_INSTANCE_RETURN_LOGService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion FORM_INSTANCE_RETURN_LOG CRUD Operations


		#region EduTermFormReqTemplateDet CRUD Operations


		private IEduTermFormReqTemplateDetService edutermformreqtemplatedet;
		public virtual IEduTermFormReqTemplateDetService EduTermFormReqTemplateDetService
		{
			get
			{
				if (this.edutermformreqtemplatedet == null)
				{
					IEduTermFormReqTemplateDetAssembler assembler = new EduTermFormReqTemplateDetAssembler();
					IEduTermFormReqTemplateDetRepository repository = new EduTermFormReqTemplateDetRepository(this.UnitOfWork);
					this.edutermformreqtemplatedet = new EduTermFormReqTemplateDetService(assembler, repository);
				}
				return this.edutermformreqtemplatedet;
			}
		}


		public IEnumerable<EduTermFormReqTemplateDetDto> ReadEduTermFormReqTemplateDets()
		{
			return this.EduTermFormReqTemplateDetService.GetAll();
		}


		public IEnumerable<EduTermFormReqTemplateDetDto> ReadEduTermFormReqTemplateDets(Expression<Func<EduTermFormReqTemplateDet, bool>> filter)
		{
			return this.EduTermFormReqTemplateDetService.Find(filter);
		}


		public IEnumerable<EduTermFormReqTemplateDetDto> ReadEduTermFormReqTemplateDets(ISpecification<EduTermFormReqTemplateDet> specification)
		{
			return this.EduTermFormReqTemplateDetService.Find(specification.GetExpression());
		}


		public IEnumerable<EduTermFormReqTemplateDetDto> ReadEduTermFormReqTemplateDetsPaged(int startIndex, int pageSize)
		{
			return this.EduTermFormReqTemplateDetService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduTermFormReqTemplateDetDto> ReadEduTermFormReqTemplateDetsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduTermFormReqTemplateDetService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduTermFormReqTemplateDetDto> ReadEduTermFormReqTemplateDetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduTermFormReqTemplateDetService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduTermFormReqTemplateDetDto ReadEduTermFormReqTemplateDets(string dtoKey)
		{
			return this.EduTermFormReqTemplateDetService.GetByKey(dtoKey);
		}


		public int EduTermFormReqTemplateDetsCount()
		{
			return this.EduTermFormReqTemplateDetService.Count();
		}


		public int EduTermFormReqTemplateDetsCountFiltered(string filterExpression)
		{
			return this.EduTermFormReqTemplateDetService.Count(filterExpression);
		}


		public string CreateEduTermFormReqTemplateDet(EduTermFormReqTemplateDetDto edutermformreqtemplatedet, bool doSaveChanges = true)
		{
			string key = this.EduTermFormReqTemplateDetService.Add(edutermformreqtemplatedet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduTermFormReqTemplateDet(EduTermFormReqTemplateDetDto edutermformreqtemplatedet, bool doSaveChanges = true)
		{
			this.EduTermFormReqTemplateDetService.Update(edutermformreqtemplatedet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduTermFormReqTemplateDets(IEnumerable<EduTermFormReqTemplateDetDto> edutermformreqtemplatedets, bool doSaveChanges = true)
		{
			if (edutermformreqtemplatedets == null)
			{
				return;
			}
			foreach (EduTermFormReqTemplateDetDto instance in edutermformreqtemplatedets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTermFormReqTemplateDetService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduTermFormReqTemplateDet(EduTermFormReqTemplateDetDto edutermformreqtemplatedet, bool doSaveChanges = true)
		{
			this.EduTermFormReqTemplateDetService.Delete(edutermformreqtemplatedet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduTermFormReqTemplateDets(IEnumerable<EduTermFormReqTemplateDetDto> edutermformreqtemplatedets, bool doSaveChanges = true)
		{
			if (edutermformreqtemplatedets == null)
			{
				return;
			}
			foreach (EduTermFormReqTemplateDetDto instance in edutermformreqtemplatedets)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTermFormReqTemplateDetService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduTermFormReqTemplateDet CRUD Operations


		#region EduTermFormReqTemplate CRUD Operations


		private IEduTermFormReqTemplateService edutermformreqtemplate;
		public virtual IEduTermFormReqTemplateService EduTermFormReqTemplateService
		{
			get
			{
				if (this.edutermformreqtemplate == null)
				{
					IEduTermFormReqTemplateAssembler assembler = new EduTermFormReqTemplateAssembler();
					IEduTermFormReqTemplateRepository repository = new EduTermFormReqTemplateRepository(this.UnitOfWork);
					this.edutermformreqtemplate = new EduTermFormReqTemplateService(assembler, repository);
				}
				return this.edutermformreqtemplate;
			}
		}


		public IEnumerable<EduTermFormReqTemplateDto> ReadEduTermFormReqTemplates()
		{
			return this.EduTermFormReqTemplateService.GetAll();
		}


		public IEnumerable<EduTermFormReqTemplateDto> ReadEduTermFormReqTemplates(Expression<Func<EduTermFormReqTemplate, bool>> filter)
		{
			return this.EduTermFormReqTemplateService.Find(filter);
		}


		public IEnumerable<EduTermFormReqTemplateDto> ReadEduTermFormReqTemplates(ISpecification<EduTermFormReqTemplate> specification)
		{
			return this.EduTermFormReqTemplateService.Find(specification.GetExpression());
		}


		public IEnumerable<EduTermFormReqTemplateDto> ReadEduTermFormReqTemplatesPaged(int startIndex, int pageSize)
		{
			return this.EduTermFormReqTemplateService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduTermFormReqTemplateDto> ReadEduTermFormReqTemplatesFiltered(string sortExpression, string filterExpression)
		{
			return this.EduTermFormReqTemplateService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduTermFormReqTemplateDto> ReadEduTermFormReqTemplatesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduTermFormReqTemplateService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduTermFormReqTemplateDto ReadEduTermFormReqTemplates(string dtoKey)
		{
			return this.EduTermFormReqTemplateService.GetByKey(dtoKey);
		}


		public int EduTermFormReqTemplatesCount()
		{
			return this.EduTermFormReqTemplateService.Count();
		}


		public int EduTermFormReqTemplatesCountFiltered(string filterExpression)
		{
			return this.EduTermFormReqTemplateService.Count(filterExpression);
		}


		public string CreateEduTermFormReqTemplate(EduTermFormReqTemplateDto edutermformreqtemplate, bool doSaveChanges = true)
		{
			string key = this.EduTermFormReqTemplateService.Add(edutermformreqtemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduTermFormReqTemplate(EduTermFormReqTemplateDto edutermformreqtemplate, bool doSaveChanges = true)
		{
			this.EduTermFormReqTemplateService.Update(edutermformreqtemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduTermFormReqTemplates(IEnumerable<EduTermFormReqTemplateDto> edutermformreqtemplates, bool doSaveChanges = true)
		{
			if (edutermformreqtemplates == null)
			{
				return;
			}
			foreach (EduTermFormReqTemplateDto instance in edutermformreqtemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTermFormReqTemplateService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduTermFormReqTemplate(EduTermFormReqTemplateDto edutermformreqtemplate, bool doSaveChanges = true)
		{
			this.EduTermFormReqTemplateService.Delete(edutermformreqtemplate);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduTermFormReqTemplates(IEnumerable<EduTermFormReqTemplateDto> edutermformreqtemplates, bool doSaveChanges = true)
		{
			if (edutermformreqtemplates == null)
			{
				return;
			}
			foreach (EduTermFormReqTemplateDto instance in edutermformreqtemplates)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTermFormReqTemplateService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduTermFormReqTemplate CRUD Operations


		#region EduTermFormReq CRUD Operations


		private IEduTermFormReqService edutermformreq;
		public virtual IEduTermFormReqService EduTermFormReqService
		{
			get
			{
				if (this.edutermformreq == null)
				{
					IEduTermFormReqAssembler assembler = new EduTermFormReqAssembler();
					IEduTermFormReqRepository repository = new EduTermFormReqRepository(this.UnitOfWork);
					this.edutermformreq = new EduTermFormReqService(assembler, repository);
				}
				return this.edutermformreq;
			}
		}


		public IEnumerable<EduTermFormReqDto> ReadEduTermFormReqs()
		{
			return this.EduTermFormReqService.GetAll();
		}


		public IEnumerable<EduTermFormReqDto> ReadEduTermFormReqs(Expression<Func<EduTermFormReq, bool>> filter)
		{
			return this.EduTermFormReqService.Find(filter);
		}


		public IEnumerable<EduTermFormReqDto> ReadEduTermFormReqs(ISpecification<EduTermFormReq> specification)
		{
			return this.EduTermFormReqService.Find(specification.GetExpression());
		}


		public IEnumerable<EduTermFormReqDto> ReadEduTermFormReqsPaged(int startIndex, int pageSize)
		{
			return this.EduTermFormReqService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduTermFormReqDto> ReadEduTermFormReqsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduTermFormReqService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduTermFormReqDto> ReadEduTermFormReqsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduTermFormReqService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduTermFormReqDto ReadEduTermFormReqs(string dtoKey)
		{
			return this.EduTermFormReqService.GetByKey(dtoKey);
		}


		public int EduTermFormReqsCount()
		{
			return this.EduTermFormReqService.Count();
		}


		public int EduTermFormReqsCountFiltered(string filterExpression)
		{
			return this.EduTermFormReqService.Count(filterExpression);
		}


		public string CreateEduTermFormReq(EduTermFormReqDto edutermformreq, bool doSaveChanges = true)
		{
			string key = this.EduTermFormReqService.Add(edutermformreq);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduTermFormReq(EduTermFormReqDto edutermformreq, bool doSaveChanges = true)
		{
			this.EduTermFormReqService.Update(edutermformreq);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduTermFormReqs(IEnumerable<EduTermFormReqDto> edutermformreqs, bool doSaveChanges = true)
		{
			if (edutermformreqs == null)
			{
				return;
			}
			foreach (EduTermFormReqDto instance in edutermformreqs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTermFormReqService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduTermFormReq(EduTermFormReqDto edutermformreq, bool doSaveChanges = true)
		{
			this.EduTermFormReqService.Delete(edutermformreq);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduTermFormReqs(IEnumerable<EduTermFormReqDto> edutermformreqs, bool doSaveChanges = true)
		{
			if (edutermformreqs == null)
			{
				return;
			}
			foreach (EduTermFormReqDto instance in edutermformreqs)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduTermFormReqService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduTermFormReq CRUD Operations


		#region RecordInsReader CRUD Operations


		private IRecordInsReaderService recordinsreader;
		public virtual IRecordInsReaderService RecordInsReaderService
		{
			get
			{
				if (this.recordinsreader == null)
				{
					IRecordInsReaderAssembler assembler = new RecordInsReaderAssembler();
					IRecordInsReaderRepository repository = new RecordInsReaderRepository(this.UnitOfWork);
					this.recordinsreader = new RecordInsReaderService(assembler, repository);
				}
				return this.recordinsreader;
			}
		}


		public IEnumerable<RecordInsReaderDto> ReadRecordInsReaders()
		{
			return this.RecordInsReaderService.GetAll();
		}


		public IEnumerable<RecordInsReaderDto> ReadRecordInsReaders(Expression<Func<RecordInsReader, bool>> filter)
		{
			return this.RecordInsReaderService.Find(filter);
		}


		public IEnumerable<RecordInsReaderDto> ReadRecordInsReaders(ISpecification<RecordInsReader> specification)
		{
			return this.RecordInsReaderService.Find(specification.GetExpression());
		}


		public IEnumerable<RecordInsReaderDto> ReadRecordInsReadersPaged(int startIndex, int pageSize)
		{
			return this.RecordInsReaderService.Find(startIndex, pageSize);
		}


		public IEnumerable<RecordInsReaderDto> ReadRecordInsReadersFiltered(string sortExpression, string filterExpression)
		{
			return this.RecordInsReaderService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<RecordInsReaderDto> ReadRecordInsReadersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.RecordInsReaderService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public RecordInsReaderDto ReadRecordInsReaders(string dtoKey)
		{
			return this.RecordInsReaderService.GetByKey(dtoKey);
		}


		public int RecordInsReadersCount()
		{
			return this.RecordInsReaderService.Count();
		}


		public int RecordInsReadersCountFiltered(string filterExpression)
		{
			return this.RecordInsReaderService.Count(filterExpression);
		}


		public string CreateRecordInsReader(RecordInsReaderDto recordinsreader, bool doSaveChanges = true)
		{
			string key = this.RecordInsReaderService.Add(recordinsreader);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateRecordInsReader(RecordInsReaderDto recordinsreader, bool doSaveChanges = true)
		{
			this.RecordInsReaderService.Update(recordinsreader);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateRecordInsReaders(IEnumerable<RecordInsReaderDto> recordinsreaders, bool doSaveChanges = true)
		{
			if (recordinsreaders == null)
			{
				return;
			}
			foreach (RecordInsReaderDto instance in recordinsreaders)
			{
				if (instance == null)
				{
					continue;
				}


				this.RecordInsReaderService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteRecordInsReader(RecordInsReaderDto recordinsreader, bool doSaveChanges = true)
		{
			this.RecordInsReaderService.Delete(recordinsreader);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteRecordInsReaders(IEnumerable<RecordInsReaderDto> recordinsreaders, bool doSaveChanges = true)
		{
			if (recordinsreaders == null)
			{
				return;
			}
			foreach (RecordInsReaderDto instance in recordinsreaders)
			{
				if (instance == null)
				{
					continue;
				}


				this.RecordInsReaderService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion RecordInsReader CRUD Operations


		#region RecordInsViewer CRUD Operations


		private IRecordInsViewerService recordinsviewer;
		public virtual IRecordInsViewerService RecordInsViewerService
		{
			get
			{
				if (this.recordinsviewer == null)
				{
					IRecordInsViewerAssembler assembler = new RecordInsViewerAssembler();
					IRecordInsViewerRepository repository = new RecordInsViewerRepository(this.UnitOfWork);
					this.recordinsviewer = new RecordInsViewerService(assembler, repository);
				}
				return this.recordinsviewer;
			}
		}


		public IEnumerable<RecordInsViewerDto> ReadRecordInsViewers()
		{
			return this.RecordInsViewerService.GetAll();
		}


		public IEnumerable<RecordInsViewerDto> ReadRecordInsViewers(Expression<Func<RecordInsViewer, bool>> filter)
		{
			return this.RecordInsViewerService.Find(filter);
		}


		public IEnumerable<RecordInsViewerDto> ReadRecordInsViewers(ISpecification<RecordInsViewer> specification)
		{
			return this.RecordInsViewerService.Find(specification.GetExpression());
		}


		public IEnumerable<RecordInsViewerDto> ReadRecordInsViewersPaged(int startIndex, int pageSize)
		{
			return this.RecordInsViewerService.Find(startIndex, pageSize);
		}


		public IEnumerable<RecordInsViewerDto> ReadRecordInsViewersFiltered(string sortExpression, string filterExpression)
		{
			return this.RecordInsViewerService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<RecordInsViewerDto> ReadRecordInsViewersPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.RecordInsViewerService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public RecordInsViewerDto ReadRecordInsViewers(string dtoKey)
		{
			return this.RecordInsViewerService.GetByKey(dtoKey);
		}


		public int RecordInsViewersCount()
		{
			return this.RecordInsViewerService.Count();
		}


		public int RecordInsViewersCountFiltered(string filterExpression)
		{
			return this.RecordInsViewerService.Count(filterExpression);
		}


		public string CreateRecordInsViewer(RecordInsViewerDto recordinsviewer, bool doSaveChanges = true)
		{
			string key = this.RecordInsViewerService.Add(recordinsviewer);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateRecordInsViewer(RecordInsViewerDto recordinsviewer, bool doSaveChanges = true)
		{
			this.RecordInsViewerService.Update(recordinsviewer);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateRecordInsViewers(IEnumerable<RecordInsViewerDto> recordinsviewers, bool doSaveChanges = true)
		{
			if (recordinsviewers == null)
			{
				return;
			}
			foreach (RecordInsViewerDto instance in recordinsviewers)
			{
				if (instance == null)
				{
					continue;
				}


				this.RecordInsViewerService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteRecordInsViewer(RecordInsViewerDto recordinsviewer, bool doSaveChanges = true)
		{
			this.RecordInsViewerService.Delete(recordinsviewer);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteRecordInsViewers(IEnumerable<RecordInsViewerDto> recordinsviewers, bool doSaveChanges = true)
		{
			if (recordinsviewers == null)
			{
				return;
			}
			foreach (RecordInsViewerDto instance in recordinsviewers)
			{
				if (instance == null)
				{
					continue;
				}


				this.RecordInsViewerService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion RecordInsViewer CRUD Operations


		#region IKASA_Menu CRUD Operations


		private IIKASA_MenuService ikasa_menu;
		public virtual IIKASA_MenuService IKASA_MenuService
		{
			get
			{
				if (this.ikasa_menu == null)
				{
					IIKASA_MenuAssembler assembler = new IKASA_MenuAssembler();
					IIKASA_MenuRepository repository = new IKASA_MenuRepository(this.UnitOfWork);
					this.ikasa_menu = new IKASA_MenuService(assembler, repository);
				}
				return this.ikasa_menu;
			}
		}


		public IEnumerable<IKASA_MenuDto> ReadIKASA_Menus()
		{
			return this.IKASA_MenuService.GetAll();
		}


		public IEnumerable<IKASA_MenuDto> ReadIKASA_Menus(Expression<Func<IKASA_Menu, bool>> filter)
		{
			return this.IKASA_MenuService.Find(filter);
		}


		public IEnumerable<IKASA_MenuDto> ReadIKASA_Menus(ISpecification<IKASA_Menu> specification)
		{
			return this.IKASA_MenuService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_MenuDto> ReadIKASA_MenusPaged(int startIndex, int pageSize)
		{
			return this.IKASA_MenuService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_MenuDto> ReadIKASA_MenusFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_MenuService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_MenuDto> ReadIKASA_MenusPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_MenuService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IKASA_MenuDto ReadIKASA_Menus(string dtoKey)
		{
			return this.IKASA_MenuService.GetByKey(dtoKey);
		}


		public int IKASA_MenusCount()
		{
			return this.IKASA_MenuService.Count();
		}


		public int IKASA_MenusCountFiltered(string filterExpression)
		{
			return this.IKASA_MenuService.Count(filterExpression);
		}


		public string CreateIKASA_Menu(IKASA_MenuDto ikasa_menu, bool doSaveChanges = true)
		{
			string key = this.IKASA_MenuService.Add(ikasa_menu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_Menu(IKASA_MenuDto ikasa_menu, bool doSaveChanges = true)
		{
			this.IKASA_MenuService.Update(ikasa_menu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_Menus(IEnumerable<IKASA_MenuDto> ikasa_menus, bool doSaveChanges = true)
		{
			if (ikasa_menus == null)
			{
				return;
			}
			foreach (IKASA_MenuDto instance in ikasa_menus)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_MenuService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_Menu(IKASA_MenuDto ikasa_menu, bool doSaveChanges = true)
		{
			this.IKASA_MenuService.Delete(ikasa_menu);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_Menus(IEnumerable<IKASA_MenuDto> ikasa_menus, bool doSaveChanges = true)
		{
			if (ikasa_menus == null)
			{
				return;
			}
			foreach (IKASA_MenuDto instance in ikasa_menus)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_MenuService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion IKASA_Menu CRUD Operations


		#region IKASA_MenuParam CRUD Operations


		private IIKASA_MenuParamService ikasa_menuparam;
		public virtual IIKASA_MenuParamService IKASA_MenuParamService
		{
			get
			{
				if (this.ikasa_menuparam == null)
				{
					IIKASA_MenuParamAssembler assembler = new IKASA_MenuParamAssembler();
					IIKASA_MenuParamRepository repository = new IKASA_MenuParamRepository(this.UnitOfWork);
					this.ikasa_menuparam = new IKASA_MenuParamService(assembler, repository);
				}
				return this.ikasa_menuparam;
			}
		}


		public IEnumerable<IKASA_MenuParamDto> ReadIKASA_MenuParams()
		{
			return this.IKASA_MenuParamService.GetAll();
		}


		public IEnumerable<IKASA_MenuParamDto> ReadIKASA_MenuParams(Expression<Func<IKASA_MenuParam, bool>> filter)
		{
			return this.IKASA_MenuParamService.Find(filter);
		}


		public IEnumerable<IKASA_MenuParamDto> ReadIKASA_MenuParams(ISpecification<IKASA_MenuParam> specification)
		{
			return this.IKASA_MenuParamService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_MenuParamDto> ReadIKASA_MenuParamsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_MenuParamService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_MenuParamDto> ReadIKASA_MenuParamsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_MenuParamService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_MenuParamDto> ReadIKASA_MenuParamsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_MenuParamService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IKASA_MenuParamDto ReadIKASA_MenuParams(string dtoKey)
		{
			return this.IKASA_MenuParamService.GetByKey(dtoKey);
		}


		public int IKASA_MenuParamsCount()
		{
			return this.IKASA_MenuParamService.Count();
		}


		public int IKASA_MenuParamsCountFiltered(string filterExpression)
		{
			return this.IKASA_MenuParamService.Count(filterExpression);
		}


		public string CreateIKASA_MenuParam(IKASA_MenuParamDto ikasa_menuparam, bool doSaveChanges = true)
		{
			string key = this.IKASA_MenuParamService.Add(ikasa_menuparam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_MenuParam(IKASA_MenuParamDto ikasa_menuparam, bool doSaveChanges = true)
		{
			this.IKASA_MenuParamService.Update(ikasa_menuparam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_MenuParams(IEnumerable<IKASA_MenuParamDto> ikasa_menuparams, bool doSaveChanges = true)
		{
			if (ikasa_menuparams == null)
			{
				return;
			}
			foreach (IKASA_MenuParamDto instance in ikasa_menuparams)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_MenuParamService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_MenuParam(IKASA_MenuParamDto ikasa_menuparam, bool doSaveChanges = true)
		{
			this.IKASA_MenuParamService.Delete(ikasa_menuparam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_MenuParams(IEnumerable<IKASA_MenuParamDto> ikasa_menuparams, bool doSaveChanges = true)
		{
			if (ikasa_menuparams == null)
			{
				return;
			}
			foreach (IKASA_MenuParamDto instance in ikasa_menuparams)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_MenuParamService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion IKASA_MenuParam CRUD Operations


		#region IKASA_OSCEExamStage CRUD Operations


		private IIKASA_OSCEExamStageService ikasa_osceexamstage;
		public virtual IIKASA_OSCEExamStageService IKASA_OSCEExamStageService
		{
			get
			{
				if (this.ikasa_osceexamstage == null)
				{
					IIKASA_OSCEExamStageAssembler assembler = new IKASA_OSCEExamStageAssembler();
					IIKASA_OSCEExamStageRepository repository = new IKASA_OSCEExamStageRepository(this.UnitOfWork);
					this.ikasa_osceexamstage = new IKASA_OSCEExamStageService(assembler, repository);
				}
				return this.ikasa_osceexamstage;
			}
		}


		public IEnumerable<IKASA_OSCEExamStageDto> ReadIKASA_OSCEExamStages()
		{
			return this.IKASA_OSCEExamStageService.GetAll();
		}


		public IEnumerable<IKASA_OSCEExamStageDto> ReadIKASA_OSCEExamStages(Expression<Func<IKASA_OSCEExamStage, bool>> filter)
		{
			return this.IKASA_OSCEExamStageService.Find(filter);
		}


		public IEnumerable<IKASA_OSCEExamStageDto> ReadIKASA_OSCEExamStages(ISpecification<IKASA_OSCEExamStage> specification)
		{
			return this.IKASA_OSCEExamStageService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_OSCEExamStageDto> ReadIKASA_OSCEExamStagesPaged(int startIndex, int pageSize)
		{
			return this.IKASA_OSCEExamStageService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_OSCEExamStageDto> ReadIKASA_OSCEExamStagesFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_OSCEExamStageService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_OSCEExamStageDto> ReadIKASA_OSCEExamStagesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_OSCEExamStageService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IKASA_OSCEExamStageDto ReadIKASA_OSCEExamStages(string dtoKey)
		{
			return this.IKASA_OSCEExamStageService.GetByKey(dtoKey);
		}


		public int IKASA_OSCEExamStagesCount()
		{
			return this.IKASA_OSCEExamStageService.Count();
		}


		public int IKASA_OSCEExamStagesCountFiltered(string filterExpression)
		{
			return this.IKASA_OSCEExamStageService.Count(filterExpression);
		}


		public string CreateIKASA_OSCEExamStage(IKASA_OSCEExamStageDto ikasa_osceexamstage, bool doSaveChanges = true)
		{
			string key = this.IKASA_OSCEExamStageService.Add(ikasa_osceexamstage);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_OSCEExamStage(IKASA_OSCEExamStageDto ikasa_osceexamstage, bool doSaveChanges = true)
		{
			this.IKASA_OSCEExamStageService.Update(ikasa_osceexamstage);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_OSCEExamStages(IEnumerable<IKASA_OSCEExamStageDto> ikasa_osceexamstages, bool doSaveChanges = true)
		{
			if (ikasa_osceexamstages == null)
			{
				return;
			}
			foreach (IKASA_OSCEExamStageDto instance in ikasa_osceexamstages)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_OSCEExamStageService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_OSCEExamStage(IKASA_OSCEExamStageDto ikasa_osceexamstage, bool doSaveChanges = true)
		{
			this.IKASA_OSCEExamStageService.Delete(ikasa_osceexamstage);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_OSCEExamStages(IEnumerable<IKASA_OSCEExamStageDto> ikasa_osceexamstages, bool doSaveChanges = true)
		{
			if (ikasa_osceexamstages == null)
			{
				return;
			}
			foreach (IKASA_OSCEExamStageDto instance in ikasa_osceexamstages)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_OSCEExamStageService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion IKASA_OSCEExamStage CRUD Operations


		#region IKASA_OSCEExamScore CRUD Operations


		private IIKASA_OSCEExamScoreService ikasa_osceexamscore;
		public virtual IIKASA_OSCEExamScoreService IKASA_OSCEExamScoreService
		{
			get
			{
				if (this.ikasa_osceexamscore == null)
				{
					IIKASA_OSCEExamScoreAssembler assembler = new IKASA_OSCEExamScoreAssembler();
					IIKASA_OSCEExamScoreRepository repository = new IKASA_OSCEExamScoreRepository(this.UnitOfWork);
					this.ikasa_osceexamscore = new IKASA_OSCEExamScoreService(assembler, repository);
				}
				return this.ikasa_osceexamscore;
			}
		}


		public IEnumerable<IKASA_OSCEExamScoreDto> ReadIKASA_OSCEExamScores()
		{
			return this.IKASA_OSCEExamScoreService.GetAll();
		}


		public IEnumerable<IKASA_OSCEExamScoreDto> ReadIKASA_OSCEExamScores(Expression<Func<IKASA_OSCEExamScore, bool>> filter)
		{
			return this.IKASA_OSCEExamScoreService.Find(filter);
		}


		public IEnumerable<IKASA_OSCEExamScoreDto> ReadIKASA_OSCEExamScores(ISpecification<IKASA_OSCEExamScore> specification)
		{
			return this.IKASA_OSCEExamScoreService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_OSCEExamScoreDto> ReadIKASA_OSCEExamScoresPaged(int startIndex, int pageSize)
		{
			return this.IKASA_OSCEExamScoreService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_OSCEExamScoreDto> ReadIKASA_OSCEExamScoresFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_OSCEExamScoreService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_OSCEExamScoreDto> ReadIKASA_OSCEExamScoresPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_OSCEExamScoreService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IKASA_OSCEExamScoreDto ReadIKASA_OSCEExamScores(string dtoKey)
		{
			return this.IKASA_OSCEExamScoreService.GetByKey(dtoKey);
		}


		public int IKASA_OSCEExamScoresCount()
		{
			return this.IKASA_OSCEExamScoreService.Count();
		}


		public int IKASA_OSCEExamScoresCountFiltered(string filterExpression)
		{
			return this.IKASA_OSCEExamScoreService.Count(filterExpression);
		}


		public string CreateIKASA_OSCEExamScore(IKASA_OSCEExamScoreDto ikasa_osceexamscore, bool doSaveChanges = true)
		{
			string key = this.IKASA_OSCEExamScoreService.Add(ikasa_osceexamscore);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_OSCEExamScore(IKASA_OSCEExamScoreDto ikasa_osceexamscore, bool doSaveChanges = true)
		{
			this.IKASA_OSCEExamScoreService.Update(ikasa_osceexamscore);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_OSCEExamScores(IEnumerable<IKASA_OSCEExamScoreDto> ikasa_osceexamscores, bool doSaveChanges = true)
		{
			if (ikasa_osceexamscores == null)
			{
				return;
			}
			foreach (IKASA_OSCEExamScoreDto instance in ikasa_osceexamscores)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_OSCEExamScoreService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_OSCEExamScore(IKASA_OSCEExamScoreDto ikasa_osceexamscore, bool doSaveChanges = true)
		{
			this.IKASA_OSCEExamScoreService.Delete(ikasa_osceexamscore);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_OSCEExamScores(IEnumerable<IKASA_OSCEExamScoreDto> ikasa_osceexamscores, bool doSaveChanges = true)
		{
			if (ikasa_osceexamscores == null)
			{
				return;
			}
			foreach (IKASA_OSCEExamScoreDto instance in ikasa_osceexamscores)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_OSCEExamScoreService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion IKASA_OSCEExamScore CRUD Operations


		#region IKASA_OSCEExam CRUD Operations


		private IIKASA_OSCEExamService ikasa_osceexam;
		public virtual IIKASA_OSCEExamService IKASA_OSCEExamService
		{
			get
			{
				if (this.ikasa_osceexam == null)
				{
					IIKASA_OSCEExamAssembler assembler = new IKASA_OSCEExamAssembler();
					IIKASA_OSCEExamRepository repository = new IKASA_OSCEExamRepository(this.UnitOfWork);
					this.ikasa_osceexam = new IKASA_OSCEExamService(assembler, repository);
				}
				return this.ikasa_osceexam;
			}
		}


		public IEnumerable<IKASA_OSCEExamDto> ReadIKASA_OSCEExams()
		{
			return this.IKASA_OSCEExamService.GetAll();
		}


		public IEnumerable<IKASA_OSCEExamDto> ReadIKASA_OSCEExams(Expression<Func<IKASA_OSCEExam, bool>> filter)
		{
			return this.IKASA_OSCEExamService.Find(filter);
		}


		public IEnumerable<IKASA_OSCEExamDto> ReadIKASA_OSCEExams(ISpecification<IKASA_OSCEExam> specification)
		{
			return this.IKASA_OSCEExamService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_OSCEExamDto> ReadIKASA_OSCEExamsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_OSCEExamService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_OSCEExamDto> ReadIKASA_OSCEExamsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_OSCEExamService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_OSCEExamDto> ReadIKASA_OSCEExamsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_OSCEExamService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IKASA_OSCEExamDto ReadIKASA_OSCEExams(string dtoKey)
		{
			return this.IKASA_OSCEExamService.GetByKey(dtoKey);
		}


		public int IKASA_OSCEExamsCount()
		{
			return this.IKASA_OSCEExamService.Count();
		}


		public int IKASA_OSCEExamsCountFiltered(string filterExpression)
		{
			return this.IKASA_OSCEExamService.Count(filterExpression);
		}


		public string CreateIKASA_OSCEExam(IKASA_OSCEExamDto ikasa_osceexam, bool doSaveChanges = true)
		{
			string key = this.IKASA_OSCEExamService.Add(ikasa_osceexam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_OSCEExam(IKASA_OSCEExamDto ikasa_osceexam, bool doSaveChanges = true)
		{
			this.IKASA_OSCEExamService.Update(ikasa_osceexam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_OSCEExams(IEnumerable<IKASA_OSCEExamDto> ikasa_osceexams, bool doSaveChanges = true)
		{
			if (ikasa_osceexams == null)
			{
				return;
			}
			foreach (IKASA_OSCEExamDto instance in ikasa_osceexams)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_OSCEExamService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_OSCEExam(IKASA_OSCEExamDto ikasa_osceexam, bool doSaveChanges = true)
		{
			this.IKASA_OSCEExamService.Delete(ikasa_osceexam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_OSCEExams(IEnumerable<IKASA_OSCEExamDto> ikasa_osceexams, bool doSaveChanges = true)
		{
			if (ikasa_osceexams == null)
			{
				return;
			}
			foreach (IKASA_OSCEExamDto instance in ikasa_osceexams)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_OSCEExamService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion IKASA_OSCEExam CRUD Operations


		#region V_hosp CRUD Operations


		private IV_hospService v_hosp;
		public virtual IV_hospService V_hospService
		{
			get
			{
				if (this.v_hosp == null)
				{
					IV_hospAssembler assembler = new V_hospAssembler();
					IV_hospRepository repository = new V_hospRepository(this.UnitOfWork);
					this.v_hosp = new V_hospService(assembler, repository);
				}
				return this.v_hosp;
			}
		}


		public IEnumerable<V_hospDto> ReadV_hosps()
		{
			return this.V_hospService.GetAll();
		}


		public IEnumerable<V_hospDto> ReadV_hosps(Expression<Func<V_hosp, bool>> filter)
		{
			return this.V_hospService.Find(filter);
		}


		public IEnumerable<V_hospDto> ReadV_hosps(ISpecification<V_hosp> specification)
		{
			return this.V_hospService.Find(specification.GetExpression());
		}


		public IEnumerable<V_hospDto> ReadV_hospsPaged(int startIndex, int pageSize)
		{
			return this.V_hospService.Find(startIndex, pageSize);
		}


		public IEnumerable<V_hospDto> ReadV_hospsFiltered(string sortExpression, string filterExpression)
		{
			return this.V_hospService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<V_hospDto> ReadV_hospsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.V_hospService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public V_hospDto ReadV_hosps(string dtoKey)
		{
			return this.V_hospService.GetByKey(dtoKey);
		}


		public int V_hospsCount()
		{
			return this.V_hospService.Count();
		}


		public int V_hospsCountFiltered(string filterExpression)
		{
			return this.V_hospService.Count(filterExpression);
		}


		public string CreateV_hosp(V_hospDto v_hosp, bool doSaveChanges = true)
		{
			string key = this.V_hospService.Add(v_hosp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateV_hosp(V_hospDto v_hosp, bool doSaveChanges = true)
		{
			this.V_hospService.Update(v_hosp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateV_hosps(IEnumerable<V_hospDto> v_hosps, bool doSaveChanges = true)
		{
			if (v_hosps == null)
			{
				return;
			}
			foreach (V_hospDto instance in v_hosps)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_hospService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteV_hosp(V_hospDto v_hosp, bool doSaveChanges = true)
		{
			this.V_hospService.Delete(v_hosp);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteV_hosps(IEnumerable<V_hospDto> v_hosps, bool doSaveChanges = true)
		{
			if (v_hosps == null)
			{
				return;
			}
			foreach (V_hospDto instance in v_hosps)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_hospService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion V_hosp CRUD Operations


		#region EduScore CRUD Operations


		private IEduScoreService eduscore;
		public virtual IEduScoreService EduScoreService
		{
			get
			{
				if (this.eduscore == null)
				{
					IEduScoreAssembler assembler = new EduScoreAssembler();
					IEduScoreRepository repository = new EduScoreRepository(this.UnitOfWork);
					this.eduscore = new EduScoreService(assembler, repository);
				}
				return this.eduscore;
			}
		}


		public IEnumerable<EduScoreDto> ReadEduScores()
		{
			return this.EduScoreService.GetAll();
		}


		public IEnumerable<EduScoreDto> ReadEduScores(Expression<Func<EduScore, bool>> filter)
		{
			return this.EduScoreService.Find(filter);
		}


		public IEnumerable<EduScoreDto> ReadEduScores(ISpecification<EduScore> specification)
		{
			return this.EduScoreService.Find(specification.GetExpression());
		}


		public IEnumerable<EduScoreDto> ReadEduScoresPaged(int startIndex, int pageSize)
		{
			return this.EduScoreService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduScoreDto> ReadEduScoresFiltered(string sortExpression, string filterExpression)
		{
			return this.EduScoreService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduScoreDto> ReadEduScoresPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduScoreService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduScoreDto ReadEduScores(string dtoKey)
		{
			return this.EduScoreService.GetByKey(dtoKey);
		}


		public int EduScoresCount()
		{
			return this.EduScoreService.Count();
		}


		public int EduScoresCountFiltered(string filterExpression)
		{
			return this.EduScoreService.Count(filterExpression);
		}


		public string CreateEduScore(EduScoreDto eduscore, bool doSaveChanges = true)
		{
			string key = this.EduScoreService.Add(eduscore);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduScore(EduScoreDto eduscore, bool doSaveChanges = true)
		{
			this.EduScoreService.Update(eduscore);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduScores(IEnumerable<EduScoreDto> eduscores, bool doSaveChanges = true)
		{
			if (eduscores == null)
			{
				return;
			}
			foreach (EduScoreDto instance in eduscores)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduScoreService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduScore(EduScoreDto eduscore, bool doSaveChanges = true)
		{
			this.EduScoreService.Delete(eduscore);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduScores(IEnumerable<EduScoreDto> eduscores, bool doSaveChanges = true)
		{
			if (eduscores == null)
			{
				return;
			}
			foreach (EduScoreDto instance in eduscores)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduScoreService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduScore CRUD Operations


		#region IKASA_IPDDataCount CRUD Operations


		private IIKASA_IPDDataCountService ikasa_ipddatacount;
		public virtual IIKASA_IPDDataCountService IKASA_IPDDataCountService
		{
			get
			{
				if (this.ikasa_ipddatacount == null)
				{
					IIKASA_IPDDataCountAssembler assembler = new IKASA_IPDDataCountAssembler();
					IIKASA_IPDDataCountRepository repository = new IKASA_IPDDataCountRepository(this.UnitOfWork);
					this.ikasa_ipddatacount = new IKASA_IPDDataCountService(assembler, repository);
				}
				return this.ikasa_ipddatacount;
			}
		}


		public IEnumerable<IKASA_IPDDataCountDto> ReadIKASA_IPDDataCounts()
		{
			return this.IKASA_IPDDataCountService.GetAll();
		}


		public IEnumerable<IKASA_IPDDataCountDto> ReadIKASA_IPDDataCounts(Expression<Func<IKASA_IPDDataCount, bool>> filter)
		{
			return this.IKASA_IPDDataCountService.Find(filter);
		}


		public IEnumerable<IKASA_IPDDataCountDto> ReadIKASA_IPDDataCounts(ISpecification<IKASA_IPDDataCount> specification)
		{
			return this.IKASA_IPDDataCountService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_IPDDataCountDto> ReadIKASA_IPDDataCountsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_IPDDataCountService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_IPDDataCountDto> ReadIKASA_IPDDataCountsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_IPDDataCountService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_IPDDataCountDto> ReadIKASA_IPDDataCountsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_IPDDataCountService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IKASA_IPDDataCountDto ReadIKASA_IPDDataCounts(string dtoKey)
		{
			return this.IKASA_IPDDataCountService.GetByKey(dtoKey);
		}


		public int IKASA_IPDDataCountsCount()
		{
			return this.IKASA_IPDDataCountService.Count();
		}


		public int IKASA_IPDDataCountsCountFiltered(string filterExpression)
		{
			return this.IKASA_IPDDataCountService.Count(filterExpression);
		}


		public string CreateIKASA_IPDDataCount(IKASA_IPDDataCountDto ikasa_ipddatacount, bool doSaveChanges = true)
		{
			string key = this.IKASA_IPDDataCountService.Add(ikasa_ipddatacount);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_IPDDataCount(IKASA_IPDDataCountDto ikasa_ipddatacount, bool doSaveChanges = true)
		{
			this.IKASA_IPDDataCountService.Update(ikasa_ipddatacount);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_IPDDataCounts(IEnumerable<IKASA_IPDDataCountDto> ikasa_ipddatacounts, bool doSaveChanges = true)
		{
			if (ikasa_ipddatacounts == null)
			{
				return;
			}
			foreach (IKASA_IPDDataCountDto instance in ikasa_ipddatacounts)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_IPDDataCountService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_IPDDataCount(IKASA_IPDDataCountDto ikasa_ipddatacount, bool doSaveChanges = true)
		{
			this.IKASA_IPDDataCountService.Delete(ikasa_ipddatacount);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_IPDDataCounts(IEnumerable<IKASA_IPDDataCountDto> ikasa_ipddatacounts, bool doSaveChanges = true)
		{
			if (ikasa_ipddatacounts == null)
			{
				return;
			}
			foreach (IKASA_IPDDataCountDto instance in ikasa_ipddatacounts)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_IPDDataCountService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion IKASA_IPDDataCount CRUD Operations


		#region FORM_TEMPLATE_PERMISSION CRUD Operations


		private IFORM_TEMPLATE_PERMISSIONService form_template_permission;
		public virtual IFORM_TEMPLATE_PERMISSIONService FORM_TEMPLATE_PERMISSIONService
		{
			get
			{
				if (this.form_template_permission == null)
				{
					IFORM_TEMPLATE_PERMISSIONAssembler assembler = new FORM_TEMPLATE_PERMISSIONAssembler();
					IFORM_TEMPLATE_PERMISSIONRepository repository = new FORM_TEMPLATE_PERMISSIONRepository(this.UnitOfWork);
					this.form_template_permission = new FORM_TEMPLATE_PERMISSIONService(assembler, repository);
				}
				return this.form_template_permission;
			}
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs()
		{
			return this.FORM_TEMPLATE_PERMISSIONService.GetAll();
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs(Expression<Func<FORM_TEMPLATE_PERMISSION, bool>> filter)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Find(filter);
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONs(ISpecification<FORM_TEMPLATE_PERMISSION> specification)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Find(specification.GetExpression());
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsPaged(int startIndex, int pageSize)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Find(startIndex, pageSize);
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsFiltered(string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<FORM_TEMPLATE_PERMISSIONDto> ReadFORM_TEMPLATE_PERMISSIONsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public FORM_TEMPLATE_PERMISSIONDto ReadFORM_TEMPLATE_PERMISSIONs(string dtoKey)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.GetByKey(dtoKey);
		}


		public int FORM_TEMPLATE_PERMISSIONsCount()
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Count();
		}


		public int FORM_TEMPLATE_PERMISSIONsCountFiltered(string filterExpression)
		{
			return this.FORM_TEMPLATE_PERMISSIONService.Count(filterExpression);
		}


		public string CreateFORM_TEMPLATE_PERMISSION(FORM_TEMPLATE_PERMISSIONDto form_template_permission, bool doSaveChanges = true)
		{
			string key = this.FORM_TEMPLATE_PERMISSIONService.Add(form_template_permission);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateFORM_TEMPLATE_PERMISSION(FORM_TEMPLATE_PERMISSIONDto form_template_permission, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_PERMISSIONService.Update(form_template_permission);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateFORM_TEMPLATE_PERMISSIONs(IEnumerable<FORM_TEMPLATE_PERMISSIONDto> form_template_permissions, bool doSaveChanges = true)
		{
			if (form_template_permissions == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_PERMISSIONDto instance in form_template_permissions)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_PERMISSIONService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteFORM_TEMPLATE_PERMISSION(FORM_TEMPLATE_PERMISSIONDto form_template_permission, bool doSaveChanges = true)
		{
			this.FORM_TEMPLATE_PERMISSIONService.Delete(form_template_permission);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteFORM_TEMPLATE_PERMISSIONs(IEnumerable<FORM_TEMPLATE_PERMISSIONDto> form_template_permissions, bool doSaveChanges = true)
		{
			if (form_template_permissions == null)
			{
				return;
			}
			foreach (FORM_TEMPLATE_PERMISSIONDto instance in form_template_permissions)
			{
				if (instance == null)
				{
					continue;
				}


				this.FORM_TEMPLATE_PERMISSIONService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion FORM_TEMPLATE_PERMISSION CRUD Operations


		#region Account CRUD Operations


		private IAccountService account;
		public virtual IAccountService AccountService
		{
			get
			{
				if (this.account == null)
				{
					IAccountAssembler assembler = new AccountAssembler();
					IAccountRepository repository = new AccountRepository(this.UnitOfWork);
					this.account = new AccountService(assembler, repository);
				}
				return this.account;
			}
		}


		public IEnumerable<AccountDto> ReadAccounts()
		{
			return this.AccountService.GetAll();
		}


		public IEnumerable<AccountDto> ReadAccounts(Expression<Func<Account, bool>> filter)
		{
			return this.AccountService.Find(filter);
		}


		public IEnumerable<AccountDto> ReadAccounts(ISpecification<Account> specification)
		{
			return this.AccountService.Find(specification.GetExpression());
		}


		public IEnumerable<AccountDto> ReadAccountsPaged(int startIndex, int pageSize)
		{
			return this.AccountService.Find(startIndex, pageSize);
		}


		public IEnumerable<AccountDto> ReadAccountsFiltered(string sortExpression, string filterExpression)
		{
			return this.AccountService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<AccountDto> ReadAccountsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.AccountService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public AccountDto ReadAccounts(string dtoKey)
		{
			return this.AccountService.GetByKey(dtoKey);
		}


		public int AccountsCount()
		{
			return this.AccountService.Count();
		}


		public int AccountsCountFiltered(string filterExpression)
		{
			return this.AccountService.Count(filterExpression);
		}


		public string CreateAccount(AccountDto account, bool doSaveChanges = true)
		{
			string key = this.AccountService.Add(account);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateAccount(AccountDto account, bool doSaveChanges = true)
		{
			this.AccountService.Update(account);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateAccounts(IEnumerable<AccountDto> accounts, bool doSaveChanges = true)
		{
			if (accounts == null)
			{
				return;
			}
			foreach (AccountDto instance in accounts)
			{
				if (instance == null)
				{
					continue;
				}


				this.AccountService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteAccount(AccountDto account, bool doSaveChanges = true)
		{
			this.AccountService.Delete(account);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteAccounts(IEnumerable<AccountDto> accounts, bool doSaveChanges = true)
		{
			if (accounts == null)
			{
				return;
			}
			foreach (AccountDto instance in accounts)
			{
				if (instance == null)
				{
					continue;
				}


				this.AccountService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion Account CRUD Operations


		#region IKASA_MenuRef CRUD Operations


		private IIKASA_MenuRefService ikasa_menuref;
		public virtual IIKASA_MenuRefService IKASA_MenuRefService
		{
			get
			{
				if (this.ikasa_menuref == null)
				{
					IIKASA_MenuRefAssembler assembler = new IKASA_MenuRefAssembler();
					IIKASA_MenuRefRepository repository = new IKASA_MenuRefRepository(this.UnitOfWork);
					this.ikasa_menuref = new IKASA_MenuRefService(assembler, repository);
				}
				return this.ikasa_menuref;
			}
		}


		public IEnumerable<IKASA_MenuRefDto> ReadIKASA_MenuRefs()
		{
			return this.IKASA_MenuRefService.GetAll();
		}


		public IEnumerable<IKASA_MenuRefDto> ReadIKASA_MenuRefs(Expression<Func<IKASA_MenuRef, bool>> filter)
		{
			return this.IKASA_MenuRefService.Find(filter);
		}


		public IEnumerable<IKASA_MenuRefDto> ReadIKASA_MenuRefs(ISpecification<IKASA_MenuRef> specification)
		{
			return this.IKASA_MenuRefService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_MenuRefDto> ReadIKASA_MenuRefsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_MenuRefService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_MenuRefDto> ReadIKASA_MenuRefsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_MenuRefService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_MenuRefDto> ReadIKASA_MenuRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_MenuRefService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IKASA_MenuRefDto ReadIKASA_MenuRefs(string dtoKey)
		{
			return this.IKASA_MenuRefService.GetByKey(dtoKey);
		}


		public int IKASA_MenuRefsCount()
		{
			return this.IKASA_MenuRefService.Count();
		}


		public int IKASA_MenuRefsCountFiltered(string filterExpression)
		{
			return this.IKASA_MenuRefService.Count(filterExpression);
		}


		public string CreateIKASA_MenuRef(IKASA_MenuRefDto ikasa_menuref, bool doSaveChanges = true)
		{
			string key = this.IKASA_MenuRefService.Add(ikasa_menuref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_MenuRef(IKASA_MenuRefDto ikasa_menuref, bool doSaveChanges = true)
		{
			this.IKASA_MenuRefService.Update(ikasa_menuref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_MenuRefs(IEnumerable<IKASA_MenuRefDto> ikasa_menurefs, bool doSaveChanges = true)
		{
			if (ikasa_menurefs == null)
			{
				return;
			}
			foreach (IKASA_MenuRefDto instance in ikasa_menurefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_MenuRefService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_MenuRef(IKASA_MenuRefDto ikasa_menuref, bool doSaveChanges = true)
		{
			this.IKASA_MenuRefService.Delete(ikasa_menuref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_MenuRefs(IEnumerable<IKASA_MenuRefDto> ikasa_menurefs, bool doSaveChanges = true)
		{
			if (ikasa_menurefs == null)
			{
				return;
			}
			foreach (IKASA_MenuRefDto instance in ikasa_menurefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_MenuRefService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion IKASA_MenuRef CRUD Operations


		#region IKASA_ERCase CRUD Operations


		private IIKASA_ERCaseService ikasa_ercase;
		public virtual IIKASA_ERCaseService IKASA_ERCaseService
		{
			get
			{
				if (this.ikasa_ercase == null)
				{
					IIKASA_ERCaseAssembler assembler = new IKASA_ERCaseAssembler();
					IIKASA_ERCaseRepository repository = new IKASA_ERCaseRepository(this.UnitOfWork);
					this.ikasa_ercase = new IKASA_ERCaseService(assembler, repository);
				}
				return this.ikasa_ercase;
			}
		}


		public IEnumerable<IKASA_ERCaseDto> ReadIKASA_ERCases()
		{
			return this.IKASA_ERCaseService.GetAll();
		}


		public IEnumerable<IKASA_ERCaseDto> ReadIKASA_ERCases(Expression<Func<IKASA_ERCase, bool>> filter)
		{
			return this.IKASA_ERCaseService.Find(filter);
		}


		public IEnumerable<IKASA_ERCaseDto> ReadIKASA_ERCases(ISpecification<IKASA_ERCase> specification)
		{
			return this.IKASA_ERCaseService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_ERCaseDto> ReadIKASA_ERCasesPaged(int startIndex, int pageSize)
		{
			return this.IKASA_ERCaseService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_ERCaseDto> ReadIKASA_ERCasesFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_ERCaseService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_ERCaseDto> ReadIKASA_ERCasesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_ERCaseService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IKASA_ERCaseDto ReadIKASA_ERCases(string dtoKey)
		{
			return this.IKASA_ERCaseService.GetByKey(dtoKey);
		}


		public int IKASA_ERCasesCount()
		{
			return this.IKASA_ERCaseService.Count();
		}


		public int IKASA_ERCasesCountFiltered(string filterExpression)
		{
			return this.IKASA_ERCaseService.Count(filterExpression);
		}


		public string CreateIKASA_ERCase(IKASA_ERCaseDto ikasa_ercase, bool doSaveChanges = true)
		{
			string key = this.IKASA_ERCaseService.Add(ikasa_ercase);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_ERCase(IKASA_ERCaseDto ikasa_ercase, bool doSaveChanges = true)
		{
			this.IKASA_ERCaseService.Update(ikasa_ercase);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_ERCases(IEnumerable<IKASA_ERCaseDto> ikasa_ercases, bool doSaveChanges = true)
		{
			if (ikasa_ercases == null)
			{
				return;
			}
			foreach (IKASA_ERCaseDto instance in ikasa_ercases)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERCaseService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_ERCase(IKASA_ERCaseDto ikasa_ercase, bool doSaveChanges = true)
		{
			this.IKASA_ERCaseService.Delete(ikasa_ercase);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_ERCases(IEnumerable<IKASA_ERCaseDto> ikasa_ercases, bool doSaveChanges = true)
		{
			if (ikasa_ercases == null)
			{
				return;
			}
			foreach (IKASA_ERCaseDto instance in ikasa_ercases)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERCaseService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion IKASA_ERCase CRUD Operations


		#region EduSentence CRUD Operations


		private IEduSentenceService edusentence;
		public virtual IEduSentenceService EduSentenceService
		{
			get
			{
				if (this.edusentence == null)
				{
					IEduSentenceAssembler assembler = new EduSentenceAssembler();
					IEduSentenceRepository repository = new EduSentenceRepository(this.UnitOfWork);
					this.edusentence = new EduSentenceService(assembler, repository);
				}
				return this.edusentence;
			}
		}


		public IEnumerable<EduSentenceDto> ReadEduSentences()
		{
			return this.EduSentenceService.GetAll();
		}


		public IEnumerable<EduSentenceDto> ReadEduSentences(Expression<Func<EduSentence, bool>> filter)
		{
			return this.EduSentenceService.Find(filter);
		}


		public IEnumerable<EduSentenceDto> ReadEduSentences(ISpecification<EduSentence> specification)
		{
			return this.EduSentenceService.Find(specification.GetExpression());
		}


		public IEnumerable<EduSentenceDto> ReadEduSentencesPaged(int startIndex, int pageSize)
		{
			return this.EduSentenceService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduSentenceDto> ReadEduSentencesFiltered(string sortExpression, string filterExpression)
		{
			return this.EduSentenceService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduSentenceDto> ReadEduSentencesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduSentenceService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduSentenceDto ReadEduSentences(string dtoKey)
		{
			return this.EduSentenceService.GetByKey(dtoKey);
		}


		public int EduSentencesCount()
		{
			return this.EduSentenceService.Count();
		}


		public int EduSentencesCountFiltered(string filterExpression)
		{
			return this.EduSentenceService.Count(filterExpression);
		}


		public string CreateEduSentence(EduSentenceDto edusentence, bool doSaveChanges = true)
		{
			string key = this.EduSentenceService.Add(edusentence);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduSentence(EduSentenceDto edusentence, bool doSaveChanges = true)
		{
			this.EduSentenceService.Update(edusentence);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduSentences(IEnumerable<EduSentenceDto> edusentences, bool doSaveChanges = true)
		{
			if (edusentences == null)
			{
				return;
			}
			foreach (EduSentenceDto instance in edusentences)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduSentenceService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduSentence(EduSentenceDto edusentence, bool doSaveChanges = true)
		{
			this.EduSentenceService.Delete(edusentence);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduSentences(IEnumerable<EduSentenceDto> edusentences, bool doSaveChanges = true)
		{
			if (edusentences == null)
			{
				return;
			}
			foreach (EduSentenceDto instance in edusentences)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduSentenceService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduSentence CRUD Operations


		#region IKASA_UploadFile CRUD Operations


		private IIKASA_UploadFileService ikasa_uploadfile;
		public virtual IIKASA_UploadFileService IKASA_UploadFileService
		{
			get
			{
				if (this.ikasa_uploadfile == null)
				{
					IIKASA_UploadFileAssembler assembler = new IKASA_UploadFileAssembler();
					IIKASA_UploadFileRepository repository = new IKASA_UploadFileRepository(this.UnitOfWork);
					this.ikasa_uploadfile = new IKASA_UploadFileService(assembler, repository);
				}
				return this.ikasa_uploadfile;
			}
		}


		public IEnumerable<IKASA_UploadFileDto> ReadIKASA_UploadFiles()
		{
			return this.IKASA_UploadFileService.GetAll();
		}


		public IEnumerable<IKASA_UploadFileDto> ReadIKASA_UploadFiles(Expression<Func<IKASA_UploadFile, bool>> filter)
		{
			return this.IKASA_UploadFileService.Find(filter);
		}


		public IEnumerable<IKASA_UploadFileDto> ReadIKASA_UploadFiles(ISpecification<IKASA_UploadFile> specification)
		{
			return this.IKASA_UploadFileService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_UploadFileDto> ReadIKASA_UploadFilesPaged(int startIndex, int pageSize)
		{
			return this.IKASA_UploadFileService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_UploadFileDto> ReadIKASA_UploadFilesFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_UploadFileService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_UploadFileDto> ReadIKASA_UploadFilesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_UploadFileService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IKASA_UploadFileDto ReadIKASA_UploadFiles(string dtoKey)
		{
			return this.IKASA_UploadFileService.GetByKey(dtoKey);
		}


		public int IKASA_UploadFilesCount()
		{
			return this.IKASA_UploadFileService.Count();
		}


		public int IKASA_UploadFilesCountFiltered(string filterExpression)
		{
			return this.IKASA_UploadFileService.Count(filterExpression);
		}


		public string CreateIKASA_UploadFile(IKASA_UploadFileDto ikasa_uploadfile, bool doSaveChanges = true)
		{
			string key = this.IKASA_UploadFileService.Add(ikasa_uploadfile);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_UploadFile(IKASA_UploadFileDto ikasa_uploadfile, bool doSaveChanges = true)
		{
			this.IKASA_UploadFileService.Update(ikasa_uploadfile);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_UploadFiles(IEnumerable<IKASA_UploadFileDto> ikasa_uploadfiles, bool doSaveChanges = true)
		{
			if (ikasa_uploadfiles == null)
			{
				return;
			}
			foreach (IKASA_UploadFileDto instance in ikasa_uploadfiles)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_UploadFileService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_UploadFile(IKASA_UploadFileDto ikasa_uploadfile, bool doSaveChanges = true)
		{
			this.IKASA_UploadFileService.Delete(ikasa_uploadfile);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_UploadFiles(IEnumerable<IKASA_UploadFileDto> ikasa_uploadfiles, bool doSaveChanges = true)
		{
			if (ikasa_uploadfiles == null)
			{
				return;
			}
			foreach (IKASA_UploadFileDto instance in ikasa_uploadfiles)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_UploadFileService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion IKASA_UploadFile CRUD Operations


		#region IKASA_ActUploadFile CRUD Operations


		private IIKASA_ActUploadFileService ikasa_actuploadfile;
		public virtual IIKASA_ActUploadFileService IKASA_ActUploadFileService
		{
			get
			{
				if (this.ikasa_actuploadfile == null)
				{
					IIKASA_ActUploadFileAssembler assembler = new IKASA_ActUploadFileAssembler();
					IIKASA_ActUploadFileRepository repository = new IKASA_ActUploadFileRepository(this.UnitOfWork);
					this.ikasa_actuploadfile = new IKASA_ActUploadFileService(assembler, repository);
				}
				return this.ikasa_actuploadfile;
			}
		}


		public IEnumerable<IKASA_ActUploadFileDto> ReadIKASA_ActUploadFiles()
		{
			return this.IKASA_ActUploadFileService.GetAll();
		}


		public IEnumerable<IKASA_ActUploadFileDto> ReadIKASA_ActUploadFiles(Expression<Func<IKASA_ActUploadFile, bool>> filter)
		{
			return this.IKASA_ActUploadFileService.Find(filter);
		}


		public IEnumerable<IKASA_ActUploadFileDto> ReadIKASA_ActUploadFiles(ISpecification<IKASA_ActUploadFile> specification)
		{
			return this.IKASA_ActUploadFileService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_ActUploadFileDto> ReadIKASA_ActUploadFilesPaged(int startIndex, int pageSize)
		{
			return this.IKASA_ActUploadFileService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_ActUploadFileDto> ReadIKASA_ActUploadFilesFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_ActUploadFileService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_ActUploadFileDto> ReadIKASA_ActUploadFilesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_ActUploadFileService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IKASA_ActUploadFileDto ReadIKASA_ActUploadFiles(string dtoKey)
		{
			return this.IKASA_ActUploadFileService.GetByKey(dtoKey);
		}


		public int IKASA_ActUploadFilesCount()
		{
			return this.IKASA_ActUploadFileService.Count();
		}


		public int IKASA_ActUploadFilesCountFiltered(string filterExpression)
		{
			return this.IKASA_ActUploadFileService.Count(filterExpression);
		}


		public string CreateIKASA_ActUploadFile(IKASA_ActUploadFileDto ikasa_actuploadfile, bool doSaveChanges = true)
		{
			string key = this.IKASA_ActUploadFileService.Add(ikasa_actuploadfile);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_ActUploadFile(IKASA_ActUploadFileDto ikasa_actuploadfile, bool doSaveChanges = true)
		{
			this.IKASA_ActUploadFileService.Update(ikasa_actuploadfile);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_ActUploadFiles(IEnumerable<IKASA_ActUploadFileDto> ikasa_actuploadfiles, bool doSaveChanges = true)
		{
			if (ikasa_actuploadfiles == null)
			{
				return;
			}
			foreach (IKASA_ActUploadFileDto instance in ikasa_actuploadfiles)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ActUploadFileService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_ActUploadFile(IKASA_ActUploadFileDto ikasa_actuploadfile, bool doSaveChanges = true)
		{
			this.IKASA_ActUploadFileService.Delete(ikasa_actuploadfile);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_ActUploadFiles(IEnumerable<IKASA_ActUploadFileDto> ikasa_actuploadfiles, bool doSaveChanges = true)
		{
			if (ikasa_actuploadfiles == null)
			{
				return;
			}
			foreach (IKASA_ActUploadFileDto instance in ikasa_actuploadfiles)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ActUploadFileService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion IKASA_ActUploadFile CRUD Operations


		#region EduSetting CRUD Operations


		private IEduSettingService edusetting;
		public virtual IEduSettingService EduSettingService
		{
			get
			{
				if (this.edusetting == null)
				{
					IEduSettingAssembler assembler = new EduSettingAssembler();
					IEduSettingRepository repository = new EduSettingRepository(this.UnitOfWork);
					this.edusetting = new EduSettingService(assembler, repository);
				}
				return this.edusetting;
			}
		}


		public IEnumerable<EduSettingDto> ReadEduSettings()
		{
			return this.EduSettingService.GetAll();
		}


		public IEnumerable<EduSettingDto> ReadEduSettings(Expression<Func<EduSetting, bool>> filter)
		{
			return this.EduSettingService.Find(filter);
		}


		public IEnumerable<EduSettingDto> ReadEduSettings(ISpecification<EduSetting> specification)
		{
			return this.EduSettingService.Find(specification.GetExpression());
		}


		public IEnumerable<EduSettingDto> ReadEduSettingsPaged(int startIndex, int pageSize)
		{
			return this.EduSettingService.Find(startIndex, pageSize);
		}


		public IEnumerable<EduSettingDto> ReadEduSettingsFiltered(string sortExpression, string filterExpression)
		{
			return this.EduSettingService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<EduSettingDto> ReadEduSettingsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.EduSettingService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public EduSettingDto ReadEduSettings(string dtoKey)
		{
			return this.EduSettingService.GetByKey(dtoKey);
		}


		public int EduSettingsCount()
		{
			return this.EduSettingService.Count();
		}


		public int EduSettingsCountFiltered(string filterExpression)
		{
			return this.EduSettingService.Count(filterExpression);
		}


		public string CreateEduSetting(EduSettingDto edusetting, bool doSaveChanges = true)
		{
			string key = this.EduSettingService.Add(edusetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateEduSetting(EduSettingDto edusetting, bool doSaveChanges = true)
		{
			this.EduSettingService.Update(edusetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateEduSettings(IEnumerable<EduSettingDto> edusettings, bool doSaveChanges = true)
		{
			if (edusettings == null)
			{
				return;
			}
			foreach (EduSettingDto instance in edusettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduSettingService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteEduSetting(EduSettingDto edusetting, bool doSaveChanges = true)
		{
			this.EduSettingService.Delete(edusetting);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteEduSettings(IEnumerable<EduSettingDto> edusettings, bool doSaveChanges = true)
		{
			if (edusettings == null)
			{
				return;
			}
			foreach (EduSettingDto instance in edusettings)
			{
				if (instance == null)
				{
					continue;
				}


				this.EduSettingService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion EduSetting CRUD Operations


		#region IKASA_ERCase_EvalDet CRUD Operations


		private IIKASA_ERCase_EvalDetService ikasa_ercase_evaldet;
		public virtual IIKASA_ERCase_EvalDetService IKASA_ERCase_EvalDetService
		{
			get
			{
				if (this.ikasa_ercase_evaldet == null)
				{
					IIKASA_ERCase_EvalDetAssembler assembler = new IKASA_ERCase_EvalDetAssembler();
					IIKASA_ERCase_EvalDetRepository repository = new IKASA_ERCase_EvalDetRepository(this.UnitOfWork);
					this.ikasa_ercase_evaldet = new IKASA_ERCase_EvalDetService(assembler, repository);
				}
				return this.ikasa_ercase_evaldet;
			}
		}


		public IEnumerable<IKASA_ERCase_EvalDetDto> ReadIKASA_ERCase_EvalDets()
		{
			return this.IKASA_ERCase_EvalDetService.GetAll();
		}


		public IEnumerable<IKASA_ERCase_EvalDetDto> ReadIKASA_ERCase_EvalDets(Expression<Func<IKASA_ERCase_EvalDet, bool>> filter)
		{
			return this.IKASA_ERCase_EvalDetService.Find(filter);
		}


		public IEnumerable<IKASA_ERCase_EvalDetDto> ReadIKASA_ERCase_EvalDets(ISpecification<IKASA_ERCase_EvalDet> specification)
		{
			return this.IKASA_ERCase_EvalDetService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_ERCase_EvalDetDto> ReadIKASA_ERCase_EvalDetsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_ERCase_EvalDetService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_ERCase_EvalDetDto> ReadIKASA_ERCase_EvalDetsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_ERCase_EvalDetService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_ERCase_EvalDetDto> ReadIKASA_ERCase_EvalDetsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_ERCase_EvalDetService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IKASA_ERCase_EvalDetDto ReadIKASA_ERCase_EvalDets(string dtoKey)
		{
			return this.IKASA_ERCase_EvalDetService.GetByKey(dtoKey);
		}


		public int IKASA_ERCase_EvalDetsCount()
		{
			return this.IKASA_ERCase_EvalDetService.Count();
		}


		public int IKASA_ERCase_EvalDetsCountFiltered(string filterExpression)
		{
			return this.IKASA_ERCase_EvalDetService.Count(filterExpression);
		}


		public string CreateIKASA_ERCase_EvalDet(IKASA_ERCase_EvalDetDto ikasa_ercase_evaldet, bool doSaveChanges = true)
		{
			string key = this.IKASA_ERCase_EvalDetService.Add(ikasa_ercase_evaldet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_ERCase_EvalDet(IKASA_ERCase_EvalDetDto ikasa_ercase_evaldet, bool doSaveChanges = true)
		{
			this.IKASA_ERCase_EvalDetService.Update(ikasa_ercase_evaldet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_ERCase_EvalDets(IEnumerable<IKASA_ERCase_EvalDetDto> ikasa_ercase_evaldets, bool doSaveChanges = true)
		{
			if (ikasa_ercase_evaldets == null)
			{
				return;
			}
			foreach (IKASA_ERCase_EvalDetDto instance in ikasa_ercase_evaldets)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERCase_EvalDetService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_ERCase_EvalDet(IKASA_ERCase_EvalDetDto ikasa_ercase_evaldet, bool doSaveChanges = true)
		{
			this.IKASA_ERCase_EvalDetService.Delete(ikasa_ercase_evaldet);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_ERCase_EvalDets(IEnumerable<IKASA_ERCase_EvalDetDto> ikasa_ercase_evaldets, bool doSaveChanges = true)
		{
			if (ikasa_ercase_evaldets == null)
			{
				return;
			}
			foreach (IKASA_ERCase_EvalDetDto instance in ikasa_ercase_evaldets)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERCase_EvalDetService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion IKASA_ERCase_EvalDet CRUD Operations


		#region IKASA_ERCase_Eval CRUD Operations


		private IIKASA_ERCase_EvalService ikasa_ercase_eval;
		public virtual IIKASA_ERCase_EvalService IKASA_ERCase_EvalService
		{
			get
			{
				if (this.ikasa_ercase_eval == null)
				{
					IIKASA_ERCase_EvalAssembler assembler = new IKASA_ERCase_EvalAssembler();
					IIKASA_ERCase_EvalRepository repository = new IKASA_ERCase_EvalRepository(this.UnitOfWork);
					this.ikasa_ercase_eval = new IKASA_ERCase_EvalService(assembler, repository);
				}
				return this.ikasa_ercase_eval;
			}
		}


		public IEnumerable<IKASA_ERCase_EvalDto> ReadIKASA_ERCase_Evals()
		{
			return this.IKASA_ERCase_EvalService.GetAll();
		}


		public IEnumerable<IKASA_ERCase_EvalDto> ReadIKASA_ERCase_Evals(Expression<Func<IKASA_ERCase_Eval, bool>> filter)
		{
			return this.IKASA_ERCase_EvalService.Find(filter);
		}


		public IEnumerable<IKASA_ERCase_EvalDto> ReadIKASA_ERCase_Evals(ISpecification<IKASA_ERCase_Eval> specification)
		{
			return this.IKASA_ERCase_EvalService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_ERCase_EvalDto> ReadIKASA_ERCase_EvalsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_ERCase_EvalService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_ERCase_EvalDto> ReadIKASA_ERCase_EvalsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_ERCase_EvalService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_ERCase_EvalDto> ReadIKASA_ERCase_EvalsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_ERCase_EvalService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IKASA_ERCase_EvalDto ReadIKASA_ERCase_Evals(string dtoKey)
		{
			return this.IKASA_ERCase_EvalService.GetByKey(dtoKey);
		}


		public int IKASA_ERCase_EvalsCount()
		{
			return this.IKASA_ERCase_EvalService.Count();
		}


		public int IKASA_ERCase_EvalsCountFiltered(string filterExpression)
		{
			return this.IKASA_ERCase_EvalService.Count(filterExpression);
		}


		public string CreateIKASA_ERCase_Eval(IKASA_ERCase_EvalDto ikasa_ercase_eval, bool doSaveChanges = true)
		{
			string key = this.IKASA_ERCase_EvalService.Add(ikasa_ercase_eval);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_ERCase_Eval(IKASA_ERCase_EvalDto ikasa_ercase_eval, bool doSaveChanges = true)
		{
			this.IKASA_ERCase_EvalService.Update(ikasa_ercase_eval);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_ERCase_Evals(IEnumerable<IKASA_ERCase_EvalDto> ikasa_ercase_evals, bool doSaveChanges = true)
		{
			if (ikasa_ercase_evals == null)
			{
				return;
			}
			foreach (IKASA_ERCase_EvalDto instance in ikasa_ercase_evals)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERCase_EvalService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_ERCase_Eval(IKASA_ERCase_EvalDto ikasa_ercase_eval, bool doSaveChanges = true)
		{
			this.IKASA_ERCase_EvalService.Delete(ikasa_ercase_eval);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_ERCase_Evals(IEnumerable<IKASA_ERCase_EvalDto> ikasa_ercase_evals, bool doSaveChanges = true)
		{
			if (ikasa_ercase_evals == null)
			{
				return;
			}
			foreach (IKASA_ERCase_EvalDto instance in ikasa_ercase_evals)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERCase_EvalService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion IKASA_ERCase_Eval CRUD Operations


		#region GoodVSDatum CRUD Operations


		private IGoodVSDatumService goodvsdatum;
		public virtual IGoodVSDatumService GoodVSDatumService
		{
			get
			{
				if (this.goodvsdatum == null)
				{
					IGoodVSDatumAssembler assembler = new GoodVSDatumAssembler();
					IGoodVSDatumRepository repository = new GoodVSDatumRepository(this.UnitOfWork);
					this.goodvsdatum = new GoodVSDatumService(assembler, repository);
				}
				return this.goodvsdatum;
			}
		}


		public IEnumerable<GoodVSDatumDto> ReadGoodVSData()
		{
			return this.GoodVSDatumService.GetAll();
		}


		public IEnumerable<GoodVSDatumDto> ReadGoodVSData(Expression<Func<GoodVSDatum, bool>> filter)
		{
			return this.GoodVSDatumService.Find(filter);
		}


		public IEnumerable<GoodVSDatumDto> ReadGoodVSData(ISpecification<GoodVSDatum> specification)
		{
			return this.GoodVSDatumService.Find(specification.GetExpression());
		}


		public IEnumerable<GoodVSDatumDto> ReadGoodVSDataPaged(int startIndex, int pageSize)
		{
			return this.GoodVSDatumService.Find(startIndex, pageSize);
		}


		public IEnumerable<GoodVSDatumDto> ReadGoodVSDataFiltered(string sortExpression, string filterExpression)
		{
			return this.GoodVSDatumService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<GoodVSDatumDto> ReadGoodVSDataPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.GoodVSDatumService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public GoodVSDatumDto ReadGoodVSData(string dtoKey)
		{
			return this.GoodVSDatumService.GetByKey(dtoKey);
		}


		public int GoodVSDataCount()
		{
			return this.GoodVSDatumService.Count();
		}


		public int GoodVSDataCountFiltered(string filterExpression)
		{
			return this.GoodVSDatumService.Count(filterExpression);
		}


		public string CreateGoodVSDatum(GoodVSDatumDto goodvsdatum, bool doSaveChanges = true)
		{
			string key = this.GoodVSDatumService.Add(goodvsdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateGoodVSDatum(GoodVSDatumDto goodvsdatum, bool doSaveChanges = true)
		{
			this.GoodVSDatumService.Update(goodvsdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateGoodVSData(IEnumerable<GoodVSDatumDto> goodvsdata, bool doSaveChanges = true)
		{
			if (goodvsdata == null)
			{
				return;
			}
			foreach (GoodVSDatumDto instance in goodvsdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.GoodVSDatumService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteGoodVSDatum(GoodVSDatumDto goodvsdatum, bool doSaveChanges = true)
		{
			this.GoodVSDatumService.Delete(goodvsdatum);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteGoodVSData(IEnumerable<GoodVSDatumDto> goodvsdata, bool doSaveChanges = true)
		{
			if (goodvsdata == null)
			{
				return;
			}
			foreach (GoodVSDatumDto instance in goodvsdata)
			{
				if (instance == null)
				{
					continue;
				}


				this.GoodVSDatumService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion GoodVSDatum CRUD Operations


		#region GoodVSDataDe CRUD Operations


		private IGoodVSDataDeService goodvsdatade;
		public virtual IGoodVSDataDeService GoodVSDataDeService
		{
			get
			{
				if (this.goodvsdatade == null)
				{
					IGoodVSDataDeAssembler assembler = new GoodVSDataDeAssembler();
					IGoodVSDataDeRepository repository = new GoodVSDataDeRepository(this.UnitOfWork);
					this.goodvsdatade = new GoodVSDataDeService(assembler, repository);
				}
				return this.goodvsdatade;
			}
		}


		public IEnumerable<GoodVSDataDeDto> ReadGoodVSDataDes()
		{
			return this.GoodVSDataDeService.GetAll();
		}


		public IEnumerable<GoodVSDataDeDto> ReadGoodVSDataDes(Expression<Func<GoodVSDataDe, bool>> filter)
		{
			return this.GoodVSDataDeService.Find(filter);
		}


		public IEnumerable<GoodVSDataDeDto> ReadGoodVSDataDes(ISpecification<GoodVSDataDe> specification)
		{
			return this.GoodVSDataDeService.Find(specification.GetExpression());
		}


		public IEnumerable<GoodVSDataDeDto> ReadGoodVSDataDesPaged(int startIndex, int pageSize)
		{
			return this.GoodVSDataDeService.Find(startIndex, pageSize);
		}


		public IEnumerable<GoodVSDataDeDto> ReadGoodVSDataDesFiltered(string sortExpression, string filterExpression)
		{
			return this.GoodVSDataDeService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<GoodVSDataDeDto> ReadGoodVSDataDesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.GoodVSDataDeService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public GoodVSDataDeDto ReadGoodVSDataDes(string dtoKey)
		{
			return this.GoodVSDataDeService.GetByKey(dtoKey);
		}


		public int GoodVSDataDesCount()
		{
			return this.GoodVSDataDeService.Count();
		}


		public int GoodVSDataDesCountFiltered(string filterExpression)
		{
			return this.GoodVSDataDeService.Count(filterExpression);
		}


		public string CreateGoodVSDataDe(GoodVSDataDeDto goodvsdatade, bool doSaveChanges = true)
		{
			string key = this.GoodVSDataDeService.Add(goodvsdatade);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateGoodVSDataDe(GoodVSDataDeDto goodvsdatade, bool doSaveChanges = true)
		{
			this.GoodVSDataDeService.Update(goodvsdatade);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateGoodVSDataDes(IEnumerable<GoodVSDataDeDto> goodvsdatades, bool doSaveChanges = true)
		{
			if (goodvsdatades == null)
			{
				return;
			}
			foreach (GoodVSDataDeDto instance in goodvsdatades)
			{
				if (instance == null)
				{
					continue;
				}


				this.GoodVSDataDeService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteGoodVSDataDe(GoodVSDataDeDto goodvsdatade, bool doSaveChanges = true)
		{
			this.GoodVSDataDeService.Delete(goodvsdatade);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteGoodVSDataDes(IEnumerable<GoodVSDataDeDto> goodvsdatades, bool doSaveChanges = true)
		{
			if (goodvsdatades == null)
			{
				return;
			}
			foreach (GoodVSDataDeDto instance in goodvsdatades)
			{
				if (instance == null)
				{
					continue;
				}


				this.GoodVSDataDeService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion GoodVSDataDe CRUD Operations


		#region V_KPINormExtraField CRUD Operations


		private IV_KPINormExtraFieldService v_kpinormextrafield;
		public virtual IV_KPINormExtraFieldService V_KPINormExtraFieldService
		{
			get
			{
				if (this.v_kpinormextrafield == null)
				{
					IV_KPINormExtraFieldAssembler assembler = new V_KPINormExtraFieldAssembler();
					IV_KPINormExtraFieldRepository repository = new V_KPINormExtraFieldRepository(this.UnitOfWork);
					this.v_kpinormextrafield = new V_KPINormExtraFieldService(assembler, repository);
				}
				return this.v_kpinormextrafield;
			}
		}


		public IEnumerable<V_KPINormExtraFieldDto> ReadV_KPINormExtraFields()
		{
			return this.V_KPINormExtraFieldService.GetAll();
		}


		public IEnumerable<V_KPINormExtraFieldDto> ReadV_KPINormExtraFields(Expression<Func<V_KPINormExtraField, bool>> filter)
		{
			return this.V_KPINormExtraFieldService.Find(filter);
		}


		public IEnumerable<V_KPINormExtraFieldDto> ReadV_KPINormExtraFields(ISpecification<V_KPINormExtraField> specification)
		{
			return this.V_KPINormExtraFieldService.Find(specification.GetExpression());
		}


		public IEnumerable<V_KPINormExtraFieldDto> ReadV_KPINormExtraFieldsPaged(int startIndex, int pageSize)
		{
			return this.V_KPINormExtraFieldService.Find(startIndex, pageSize);
		}


		public IEnumerable<V_KPINormExtraFieldDto> ReadV_KPINormExtraFieldsFiltered(string sortExpression, string filterExpression)
		{
			return this.V_KPINormExtraFieldService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<V_KPINormExtraFieldDto> ReadV_KPINormExtraFieldsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.V_KPINormExtraFieldService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public V_KPINormExtraFieldDto ReadV_KPINormExtraFields(string dtoKey)
		{
			return this.V_KPINormExtraFieldService.GetByKey(dtoKey);
		}


		public int V_KPINormExtraFieldsCount()
		{
			return this.V_KPINormExtraFieldService.Count();
		}


		public int V_KPINormExtraFieldsCountFiltered(string filterExpression)
		{
			return this.V_KPINormExtraFieldService.Count(filterExpression);
		}


		public string CreateV_KPINormExtraField(V_KPINormExtraFieldDto v_kpinormextrafield, bool doSaveChanges = true)
		{
			string key = this.V_KPINormExtraFieldService.Add(v_kpinormextrafield);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateV_KPINormExtraField(V_KPINormExtraFieldDto v_kpinormextrafield, bool doSaveChanges = true)
		{
			this.V_KPINormExtraFieldService.Update(v_kpinormextrafield);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateV_KPINormExtraFields(IEnumerable<V_KPINormExtraFieldDto> v_kpinormextrafields, bool doSaveChanges = true)
		{
			if (v_kpinormextrafields == null)
			{
				return;
			}
			foreach (V_KPINormExtraFieldDto instance in v_kpinormextrafields)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_KPINormExtraFieldService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteV_KPINormExtraField(V_KPINormExtraFieldDto v_kpinormextrafield, bool doSaveChanges = true)
		{
			this.V_KPINormExtraFieldService.Delete(v_kpinormextrafield);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteV_KPINormExtraFields(IEnumerable<V_KPINormExtraFieldDto> v_kpinormextrafields, bool doSaveChanges = true)
		{
			if (v_kpinormextrafields == null)
			{
				return;
			}
			foreach (V_KPINormExtraFieldDto instance in v_kpinormextrafields)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_KPINormExtraFieldService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion V_KPINormExtraField CRUD Operations


		#region V_KPINorm CRUD Operations


		private IV_KPINormService v_kpinorm;
		public virtual IV_KPINormService V_KPINormService
		{
			get
			{
				if (this.v_kpinorm == null)
				{
					IV_KPINormAssembler assembler = new V_KPINormAssembler();
					IV_KPINormRepository repository = new V_KPINormRepository(this.UnitOfWork);
					this.v_kpinorm = new V_KPINormService(assembler, repository);
				}
				return this.v_kpinorm;
			}
		}


		public IEnumerable<V_KPINormDto> ReadV_KPINorms()
		{
			return this.V_KPINormService.GetAll();
		}


		public IEnumerable<V_KPINormDto> ReadV_KPINorms(Expression<Func<V_KPINorm, bool>> filter)
		{
			return this.V_KPINormService.Find(filter);
		}


		public IEnumerable<V_KPINormDto> ReadV_KPINorms(ISpecification<V_KPINorm> specification)
		{
			return this.V_KPINormService.Find(specification.GetExpression());
		}


		public IEnumerable<V_KPINormDto> ReadV_KPINormsPaged(int startIndex, int pageSize)
		{
			return this.V_KPINormService.Find(startIndex, pageSize);
		}


		public IEnumerable<V_KPINormDto> ReadV_KPINormsFiltered(string sortExpression, string filterExpression)
		{
			return this.V_KPINormService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<V_KPINormDto> ReadV_KPINormsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.V_KPINormService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public V_KPINormDto ReadV_KPINorms(string dtoKey)
		{
			return this.V_KPINormService.GetByKey(dtoKey);
		}


		public int V_KPINormsCount()
		{
			return this.V_KPINormService.Count();
		}


		public int V_KPINormsCountFiltered(string filterExpression)
		{
			return this.V_KPINormService.Count(filterExpression);
		}


		public string CreateV_KPINorm(V_KPINormDto v_kpinorm, bool doSaveChanges = true)
		{
			string key = this.V_KPINormService.Add(v_kpinorm);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateV_KPINorm(V_KPINormDto v_kpinorm, bool doSaveChanges = true)
		{
			this.V_KPINormService.Update(v_kpinorm);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateV_KPINorms(IEnumerable<V_KPINormDto> v_kpinorms, bool doSaveChanges = true)
		{
			if (v_kpinorms == null)
			{
				return;
			}
			foreach (V_KPINormDto instance in v_kpinorms)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_KPINormService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteV_KPINorm(V_KPINormDto v_kpinorm, bool doSaveChanges = true)
		{
			this.V_KPINormService.Delete(v_kpinorm);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteV_KPINorms(IEnumerable<V_KPINormDto> v_kpinorms, bool doSaveChanges = true)
		{
			if (v_kpinorms == null)
			{
				return;
			}
			foreach (V_KPINormDto instance in v_kpinorms)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_KPINormService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion V_KPINorm CRUD Operations


		#region TeachTimeKpiRef CRUD Operations


		private ITeachTimeKpiRefService teachtimekpiref;
		public virtual ITeachTimeKpiRefService TeachTimeKpiRefService
		{
			get
			{
				if (this.teachtimekpiref == null)
				{
					ITeachTimeKpiRefAssembler assembler = new TeachTimeKpiRefAssembler();
					ITeachTimeKpiRefRepository repository = new TeachTimeKpiRefRepository(this.UnitOfWork);
					this.teachtimekpiref = new TeachTimeKpiRefService(assembler, repository);
				}
				return this.teachtimekpiref;
			}
		}


		public IEnumerable<TeachTimeKpiRefDto> ReadTeachTimeKpiRefs()
		{
			return this.TeachTimeKpiRefService.GetAll();
		}


		public IEnumerable<TeachTimeKpiRefDto> ReadTeachTimeKpiRefs(Expression<Func<TeachTimeKpiRef, bool>> filter)
		{
			return this.TeachTimeKpiRefService.Find(filter);
		}


		public IEnumerable<TeachTimeKpiRefDto> ReadTeachTimeKpiRefs(ISpecification<TeachTimeKpiRef> specification)
		{
			return this.TeachTimeKpiRefService.Find(specification.GetExpression());
		}


		public IEnumerable<TeachTimeKpiRefDto> ReadTeachTimeKpiRefsPaged(int startIndex, int pageSize)
		{
			return this.TeachTimeKpiRefService.Find(startIndex, pageSize);
		}


		public IEnumerable<TeachTimeKpiRefDto> ReadTeachTimeKpiRefsFiltered(string sortExpression, string filterExpression)
		{
			return this.TeachTimeKpiRefService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<TeachTimeKpiRefDto> ReadTeachTimeKpiRefsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.TeachTimeKpiRefService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public TeachTimeKpiRefDto ReadTeachTimeKpiRefs(string dtoKey)
		{
			return this.TeachTimeKpiRefService.GetByKey(dtoKey);
		}


		public int TeachTimeKpiRefsCount()
		{
			return this.TeachTimeKpiRefService.Count();
		}


		public int TeachTimeKpiRefsCountFiltered(string filterExpression)
		{
			return this.TeachTimeKpiRefService.Count(filterExpression);
		}


		public string CreateTeachTimeKpiRef(TeachTimeKpiRefDto teachtimekpiref, bool doSaveChanges = true)
		{
			string key = this.TeachTimeKpiRefService.Add(teachtimekpiref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateTeachTimeKpiRef(TeachTimeKpiRefDto teachtimekpiref, bool doSaveChanges = true)
		{
			this.TeachTimeKpiRefService.Update(teachtimekpiref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateTeachTimeKpiRefs(IEnumerable<TeachTimeKpiRefDto> teachtimekpirefs, bool doSaveChanges = true)
		{
			if (teachtimekpirefs == null)
			{
				return;
			}
			foreach (TeachTimeKpiRefDto instance in teachtimekpirefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachTimeKpiRefService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteTeachTimeKpiRef(TeachTimeKpiRefDto teachtimekpiref, bool doSaveChanges = true)
		{
			this.TeachTimeKpiRefService.Delete(teachtimekpiref);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteTeachTimeKpiRefs(IEnumerable<TeachTimeKpiRefDto> teachtimekpirefs, bool doSaveChanges = true)
		{
			if (teachtimekpirefs == null)
			{
				return;
			}
			foreach (TeachTimeKpiRefDto instance in teachtimekpirefs)
			{
				if (instance == null)
				{
					continue;
				}


				this.TeachTimeKpiRefService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion TeachTimeKpiRef CRUD Operations


		#region V_KPIRound CRUD Operations


		private IV_KPIRoundService v_kpiround;
		public virtual IV_KPIRoundService V_KPIRoundService
		{
			get
			{
				if (this.v_kpiround == null)
				{
					IV_KPIRoundAssembler assembler = new V_KPIRoundAssembler();
					IV_KPIRoundRepository repository = new V_KPIRoundRepository(this.UnitOfWork);
					this.v_kpiround = new V_KPIRoundService(assembler, repository);
				}
				return this.v_kpiround;
			}
		}


		public IEnumerable<V_KPIRoundDto> ReadV_KPIRounds()
		{
			return this.V_KPIRoundService.GetAll();
		}


		public IEnumerable<V_KPIRoundDto> ReadV_KPIRounds(Expression<Func<V_KPIRound, bool>> filter)
		{
			return this.V_KPIRoundService.Find(filter);
		}


		public IEnumerable<V_KPIRoundDto> ReadV_KPIRounds(ISpecification<V_KPIRound> specification)
		{
			return this.V_KPIRoundService.Find(specification.GetExpression());
		}


		public IEnumerable<V_KPIRoundDto> ReadV_KPIRoundsPaged(int startIndex, int pageSize)
		{
			return this.V_KPIRoundService.Find(startIndex, pageSize);
		}


		public IEnumerable<V_KPIRoundDto> ReadV_KPIRoundsFiltered(string sortExpression, string filterExpression)
		{
			return this.V_KPIRoundService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<V_KPIRoundDto> ReadV_KPIRoundsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.V_KPIRoundService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public V_KPIRoundDto ReadV_KPIRounds(string dtoKey)
		{
			return this.V_KPIRoundService.GetByKey(dtoKey);
		}


		public int V_KPIRoundsCount()
		{
			return this.V_KPIRoundService.Count();
		}


		public int V_KPIRoundsCountFiltered(string filterExpression)
		{
			return this.V_KPIRoundService.Count(filterExpression);
		}


		public string CreateV_KPIRound(V_KPIRoundDto v_kpiround, bool doSaveChanges = true)
		{
			string key = this.V_KPIRoundService.Add(v_kpiround);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateV_KPIRound(V_KPIRoundDto v_kpiround, bool doSaveChanges = true)
		{
			this.V_KPIRoundService.Update(v_kpiround);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateV_KPIRounds(IEnumerable<V_KPIRoundDto> v_kpirounds, bool doSaveChanges = true)
		{
			if (v_kpirounds == null)
			{
				return;
			}
			foreach (V_KPIRoundDto instance in v_kpirounds)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_KPIRoundService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteV_KPIRound(V_KPIRoundDto v_kpiround, bool doSaveChanges = true)
		{
			this.V_KPIRoundService.Delete(v_kpiround);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteV_KPIRounds(IEnumerable<V_KPIRoundDto> v_kpirounds, bool doSaveChanges = true)
		{
			if (v_kpirounds == null)
			{
				return;
			}
			foreach (V_KPIRoundDto instance in v_kpirounds)
			{
				if (instance == null)
				{
					continue;
				}


				this.V_KPIRoundService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion V_KPIRound CRUD Operations


		#region MedicalTeachPoint CRUD Operations


		private IMedicalTeachPointService medicalteachpoint;
		public virtual IMedicalTeachPointService MedicalTeachPointService
		{
			get
			{
				if (this.medicalteachpoint == null)
				{
					IMedicalTeachPointAssembler assembler = new MedicalTeachPointAssembler();
					IMedicalTeachPointRepository repository = new MedicalTeachPointRepository(this.UnitOfWork);
					this.medicalteachpoint = new MedicalTeachPointService(assembler, repository);
				}
				return this.medicalteachpoint;
			}
		}


		public IEnumerable<MedicalTeachPointDto> ReadMedicalTeachPoints()
		{
			return this.MedicalTeachPointService.GetAll();
		}


		public IEnumerable<MedicalTeachPointDto> ReadMedicalTeachPoints(Expression<Func<MedicalTeachPoint, bool>> filter)
		{
			return this.MedicalTeachPointService.Find(filter);
		}


		public IEnumerable<MedicalTeachPointDto> ReadMedicalTeachPoints(ISpecification<MedicalTeachPoint> specification)
		{
			return this.MedicalTeachPointService.Find(specification.GetExpression());
		}


		public IEnumerable<MedicalTeachPointDto> ReadMedicalTeachPointsPaged(int startIndex, int pageSize)
		{
			return this.MedicalTeachPointService.Find(startIndex, pageSize);
		}


		public IEnumerable<MedicalTeachPointDto> ReadMedicalTeachPointsFiltered(string sortExpression, string filterExpression)
		{
			return this.MedicalTeachPointService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<MedicalTeachPointDto> ReadMedicalTeachPointsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.MedicalTeachPointService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public MedicalTeachPointDto ReadMedicalTeachPoints(string dtoKey)
		{
			return this.MedicalTeachPointService.GetByKey(dtoKey);
		}


		public int MedicalTeachPointsCount()
		{
			return this.MedicalTeachPointService.Count();
		}


		public int MedicalTeachPointsCountFiltered(string filterExpression)
		{
			return this.MedicalTeachPointService.Count(filterExpression);
		}


		public string CreateMedicalTeachPoint(MedicalTeachPointDto medicalteachpoint, bool doSaveChanges = true)
		{
			string key = this.MedicalTeachPointService.Add(medicalteachpoint);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateMedicalTeachPoint(MedicalTeachPointDto medicalteachpoint, bool doSaveChanges = true)
		{
			this.MedicalTeachPointService.Update(medicalteachpoint);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateMedicalTeachPoints(IEnumerable<MedicalTeachPointDto> medicalteachpoints, bool doSaveChanges = true)
		{
			if (medicalteachpoints == null)
			{
				return;
			}
			foreach (MedicalTeachPointDto instance in medicalteachpoints)
			{
				if (instance == null)
				{
					continue;
				}


				this.MedicalTeachPointService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteMedicalTeachPoint(MedicalTeachPointDto medicalteachpoint, bool doSaveChanges = true)
		{
			this.MedicalTeachPointService.Delete(medicalteachpoint);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteMedicalTeachPoints(IEnumerable<MedicalTeachPointDto> medicalteachpoints, bool doSaveChanges = true)
		{
			if (medicalteachpoints == null)
			{
				return;
			}
			foreach (MedicalTeachPointDto instance in medicalteachpoints)
			{
				if (instance == null)
				{
					continue;
				}


				this.MedicalTeachPointService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion MedicalTeachPoint CRUD Operations


		#region IKASA_ERExam CRUD Operations


		private IIKASA_ERExamService ikasa_erexam;
		public virtual IIKASA_ERExamService IKASA_ERExamService
		{
			get
			{
				if (this.ikasa_erexam == null)
				{
					IIKASA_ERExamAssembler assembler = new IKASA_ERExamAssembler();
					IIKASA_ERExamRepository repository = new IKASA_ERExamRepository(this.UnitOfWork);
					this.ikasa_erexam = new IKASA_ERExamService(assembler, repository);
				}
				return this.ikasa_erexam;
			}
		}


		public IEnumerable<IKASA_ERExamDto> ReadIKASA_ERExams()
		{
			return this.IKASA_ERExamService.GetAll();
		}


		public IEnumerable<IKASA_ERExamDto> ReadIKASA_ERExams(Expression<Func<IKASA_ERExam, bool>> filter)
		{
			return this.IKASA_ERExamService.Find(filter);
		}


		public IEnumerable<IKASA_ERExamDto> ReadIKASA_ERExams(ISpecification<IKASA_ERExam> specification)
		{
			return this.IKASA_ERExamService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_ERExamDto> ReadIKASA_ERExamsPaged(int startIndex, int pageSize)
		{
			return this.IKASA_ERExamService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_ERExamDto> ReadIKASA_ERExamsFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_ERExamService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_ERExamDto> ReadIKASA_ERExamsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_ERExamService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IKASA_ERExamDto ReadIKASA_ERExams(string dtoKey)
		{
			return this.IKASA_ERExamService.GetByKey(dtoKey);
		}


		public int IKASA_ERExamsCount()
		{
			return this.IKASA_ERExamService.Count();
		}


		public int IKASA_ERExamsCountFiltered(string filterExpression)
		{
			return this.IKASA_ERExamService.Count(filterExpression);
		}


		public string CreateIKASA_ERExam(IKASA_ERExamDto ikasa_erexam, bool doSaveChanges = true)
		{
			string key = this.IKASA_ERExamService.Add(ikasa_erexam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_ERExam(IKASA_ERExamDto ikasa_erexam, bool doSaveChanges = true)
		{
			this.IKASA_ERExamService.Update(ikasa_erexam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_ERExams(IEnumerable<IKASA_ERExamDto> ikasa_erexams, bool doSaveChanges = true)
		{
			if (ikasa_erexams == null)
			{
				return;
			}
			foreach (IKASA_ERExamDto instance in ikasa_erexams)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERExamService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_ERExam(IKASA_ERExamDto ikasa_erexam, bool doSaveChanges = true)
		{
			this.IKASA_ERExamService.Delete(ikasa_erexam);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_ERExams(IEnumerable<IKASA_ERExamDto> ikasa_erexams, bool doSaveChanges = true)
		{
			if (ikasa_erexams == null)
			{
				return;
			}
			foreach (IKASA_ERExamDto instance in ikasa_erexams)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERExamService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion IKASA_ERExam CRUD Operations


		#region IKASA_ERExamScore CRUD Operations


		private IIKASA_ERExamScoreService ikasa_erexamscore;
		public virtual IIKASA_ERExamScoreService IKASA_ERExamScoreService
		{
			get
			{
				if (this.ikasa_erexamscore == null)
				{
					IIKASA_ERExamScoreAssembler assembler = new IKASA_ERExamScoreAssembler();
					IIKASA_ERExamScoreRepository repository = new IKASA_ERExamScoreRepository(this.UnitOfWork);
					this.ikasa_erexamscore = new IKASA_ERExamScoreService(assembler, repository);
				}
				return this.ikasa_erexamscore;
			}
		}


		public IEnumerable<IKASA_ERExamScoreDto> ReadIKASA_ERExamScores()
		{
			return this.IKASA_ERExamScoreService.GetAll();
		}


		public IEnumerable<IKASA_ERExamScoreDto> ReadIKASA_ERExamScores(Expression<Func<IKASA_ERExamScore, bool>> filter)
		{
			return this.IKASA_ERExamScoreService.Find(filter);
		}


		public IEnumerable<IKASA_ERExamScoreDto> ReadIKASA_ERExamScores(ISpecification<IKASA_ERExamScore> specification)
		{
			return this.IKASA_ERExamScoreService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_ERExamScoreDto> ReadIKASA_ERExamScoresPaged(int startIndex, int pageSize)
		{
			return this.IKASA_ERExamScoreService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_ERExamScoreDto> ReadIKASA_ERExamScoresFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_ERExamScoreService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_ERExamScoreDto> ReadIKASA_ERExamScoresPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_ERExamScoreService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IKASA_ERExamScoreDto ReadIKASA_ERExamScores(string dtoKey)
		{
			return this.IKASA_ERExamScoreService.GetByKey(dtoKey);
		}


		public int IKASA_ERExamScoresCount()
		{
			return this.IKASA_ERExamScoreService.Count();
		}


		public int IKASA_ERExamScoresCountFiltered(string filterExpression)
		{
			return this.IKASA_ERExamScoreService.Count(filterExpression);
		}


		public string CreateIKASA_ERExamScore(IKASA_ERExamScoreDto ikasa_erexamscore, bool doSaveChanges = true)
		{
			string key = this.IKASA_ERExamScoreService.Add(ikasa_erexamscore);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_ERExamScore(IKASA_ERExamScoreDto ikasa_erexamscore, bool doSaveChanges = true)
		{
			this.IKASA_ERExamScoreService.Update(ikasa_erexamscore);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_ERExamScores(IEnumerable<IKASA_ERExamScoreDto> ikasa_erexamscores, bool doSaveChanges = true)
		{
			if (ikasa_erexamscores == null)
			{
				return;
			}
			foreach (IKASA_ERExamScoreDto instance in ikasa_erexamscores)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERExamScoreService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_ERExamScore(IKASA_ERExamScoreDto ikasa_erexamscore, bool doSaveChanges = true)
		{
			this.IKASA_ERExamScoreService.Delete(ikasa_erexamscore);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_ERExamScores(IEnumerable<IKASA_ERExamScoreDto> ikasa_erexamscores, bool doSaveChanges = true)
		{
			if (ikasa_erexamscores == null)
			{
				return;
			}
			foreach (IKASA_ERExamScoreDto instance in ikasa_erexamscores)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERExamScoreService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion IKASA_ERExamScore CRUD Operations


		#region IKASA_ERExamStage CRUD Operations


		private IIKASA_ERExamStageService ikasa_erexamstage;
		public virtual IIKASA_ERExamStageService IKASA_ERExamStageService
		{
			get
			{
				if (this.ikasa_erexamstage == null)
				{
					IIKASA_ERExamStageAssembler assembler = new IKASA_ERExamStageAssembler();
					IIKASA_ERExamStageRepository repository = new IKASA_ERExamStageRepository(this.UnitOfWork);
					this.ikasa_erexamstage = new IKASA_ERExamStageService(assembler, repository);
				}
				return this.ikasa_erexamstage;
			}
		}


		public IEnumerable<IKASA_ERExamStageDto> ReadIKASA_ERExamStages()
		{
			return this.IKASA_ERExamStageService.GetAll();
		}


		public IEnumerable<IKASA_ERExamStageDto> ReadIKASA_ERExamStages(Expression<Func<IKASA_ERExamStage, bool>> filter)
		{
			return this.IKASA_ERExamStageService.Find(filter);
		}


		public IEnumerable<IKASA_ERExamStageDto> ReadIKASA_ERExamStages(ISpecification<IKASA_ERExamStage> specification)
		{
			return this.IKASA_ERExamStageService.Find(specification.GetExpression());
		}


		public IEnumerable<IKASA_ERExamStageDto> ReadIKASA_ERExamStagesPaged(int startIndex, int pageSize)
		{
			return this.IKASA_ERExamStageService.Find(startIndex, pageSize);
		}


		public IEnumerable<IKASA_ERExamStageDto> ReadIKASA_ERExamStagesFiltered(string sortExpression, string filterExpression)
		{
			return this.IKASA_ERExamStageService.Find(sortExpression, filterExpression);
		}


		public IEnumerable<IKASA_ERExamStageDto> ReadIKASA_ERExamStagesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.IKASA_ERExamStageService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}


		public IKASA_ERExamStageDto ReadIKASA_ERExamStages(string dtoKey)
		{
			return this.IKASA_ERExamStageService.GetByKey(dtoKey);
		}


		public int IKASA_ERExamStagesCount()
		{
			return this.IKASA_ERExamStageService.Count();
		}


		public int IKASA_ERExamStagesCountFiltered(string filterExpression)
		{
			return this.IKASA_ERExamStageService.Count(filterExpression);
		}


		public string CreateIKASA_ERExamStage(IKASA_ERExamStageDto ikasa_erexamstage, bool doSaveChanges = true)
		{
			string key = this.IKASA_ERExamStageService.Add(ikasa_erexamstage);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
			return key;
		}


		public void UpdateIKASA_ERExamStage(IKASA_ERExamStageDto ikasa_erexamstage, bool doSaveChanges = true)
		{
			this.IKASA_ERExamStageService.Update(ikasa_erexamstage);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void UpdateIKASA_ERExamStages(IEnumerable<IKASA_ERExamStageDto> ikasa_erexamstages, bool doSaveChanges = true)
		{
			if (ikasa_erexamstages == null)
			{
				return;
			}
			foreach (IKASA_ERExamStageDto instance in ikasa_erexamstages)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERExamStageService.Update(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		public void DeleteIKASA_ERExamStage(IKASA_ERExamStageDto ikasa_erexamstage, bool doSaveChanges = true)
		{
			this.IKASA_ERExamStageService.Delete(ikasa_erexamstage);
			if (doSaveChanges)
				this.UnitOfWork.SaveChanges();
		}


		public void DeleteIKASA_ERExamStages(IEnumerable<IKASA_ERExamStageDto> ikasa_erexamstages, bool doSaveChanges = true)
		{
			if (ikasa_erexamstages == null)
			{
				return;
			}
			foreach (IKASA_ERExamStageDto instance in ikasa_erexamstages)
			{
				if (instance == null)
				{
					continue;
				}


				this.IKASA_ERExamStageService.Delete(instance);
				if (doSaveChanges)
					this.UnitOfWork.SaveChanges();
			}
		}


		#endregion IKASA_ERExamStage CRUD Operations


	}
}
#pragma warning restore 1591
