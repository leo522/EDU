

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Telerik.OpenAccess;
using KMU.EduActivity.DomainModel.Entities;
using KMU.EduActivity.ApplicationLayer.DTO;

namespace KMU.EduActivity.ApplicationLayer.Assemblers
{
	public partial interface IOpenAccessAssembler<TDto, TEntity>  where TEntity : class
	{
		TDto Assemble(TEntity entity);
		TEntity Assemble(TEntity entity, TDto dto);
		IEnumerable<TDto> Assemble(IEnumerable<TEntity> entityList);
		IEnumerable<TEntity> Assemble(IEnumerable<TDto> dtoList);
	}
	public abstract class OpenAccessAssembler<TDto, TEntity> : IOpenAccessAssembler<TDto, TEntity> where TEntity : class
	{
		public abstract TDto Assemble(TEntity domainEntity);
		public abstract TEntity Assemble(TEntity entity, TDto dto);
		public virtual IEnumerable<TDto> Assemble(IEnumerable<TEntity> domainEntityList)
		{
			List<TDto> dtos = Activator.CreateInstance<List<TDto>>();
			foreach (TEntity domainEntity in domainEntityList)
			{
				dtos.Add(Assemble(domainEntity));
			}
			return dtos;
		}


		public virtual IEnumerable<TEntity> Assemble(IEnumerable<TDto> dtoList)
		{
			List<TEntity> domainEntities = Activator.CreateInstance<List<TEntity>>();
			foreach (TDto dto in dtoList)
			{
				domainEntities.Add(Assemble(null, dto));
			}
			return domainEntities;
		}
	}


	public partial class EduTermCodeAssembler : EduTermCodeAssemblerBase, IEduTermCodeAssembler
	{
	}


	public partial interface IEduTermCodeAssembler : IOpenAccessAssembler<EduTermCodeDto, EduTermCode>
	{
	}


	public partial class EduTermCodeAssemblerBase : OpenAccessAssembler<EduTermCodeDto, EduTermCode>
	{
		partial void OnDTOAssembled(EduTermCodeDto dto);
		partial void OnEntityAssembled(EduTermCode entity);


		public override EduTermCode Assemble(EduTermCode entity, EduTermCodeDto dto)
		{
			if (entity == null)
			{
				entity = new EduTermCode();
			}
			entity.EduTermCode1 = dto.EduTermCode1;
			return entity;
		}
		public override EduTermCodeDto Assemble(EduTermCode entity)
		{
			EduTermCodeDto dto = new EduTermCodeDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EduTermCode1 = entity.EduTermCode1;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class MemberAssembler : MemberAssemblerBase, IMemberAssembler
	{
	}


	public partial interface IMemberAssembler : IOpenAccessAssembler<MemberDto, Member>
	{
	}


	public partial class MemberAssemblerBase : OpenAccessAssembler<MemberDto, Member>
	{
		partial void OnDTOAssembled(MemberDto dto);
		partial void OnEntityAssembled(Member entity);


		public override Member Assemble(Member entity, MemberDto dto)
		{
			if (entity == null)
			{
				entity = new Member();
			}
			entity.MemberID = dto.MemberID;
			entity.MemberCode = dto.MemberCode;
			entity.Name = dto.Name;
			entity.MemberType = dto.MemberType;
			entity.Des = dto.Des;
			entity.Status = dto.Status;
			entity.DateFrom = dto.DateFrom;
			entity.DateTo = dto.DateTo;
			entity.IsHospMember = dto.IsHospMember;
			entity.TrainingProcess = dto.TrainingProcess;
			entity.LastModifyDate = dto.LastModifyDate;
			entity.LastModifier = dto.LastModifier;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			return entity;
		}
		public override MemberDto Assemble(Member entity)
		{
			MemberDto dto = new MemberDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.MemberID = entity.MemberID;
			dto.MemberCode = entity.MemberCode;
			dto.Name = entity.Name;
			dto.MemberType = entity.MemberType;
			dto.Des = entity.Des;
			dto.Status = entity.Status;
			dto.DateFrom = entity.DateFrom;
			dto.DateTo = entity.DateTo;
			dto.IsHospMember = entity.IsHospMember;
			dto.TrainingProcess = entity.TrainingProcess;
			dto.LastModifyDate = entity.LastModifyDate;
			dto.LastModifier = entity.LastModifier;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduTeamMemberAssembler : EduTeamMemberAssemblerBase, IEduTeamMemberAssembler
	{
	}


	public partial interface IEduTeamMemberAssembler : IOpenAccessAssembler<EduTeamMemberDto, EduTeamMember>
	{
	}


	public partial class EduTeamMemberAssemblerBase : OpenAccessAssembler<EduTeamMemberDto, EduTeamMember>
	{
		partial void OnDTOAssembled(EduTeamMemberDto dto);
		partial void OnEntityAssembled(EduTeamMember entity);


		public override EduTeamMember Assemble(EduTeamMember entity, EduTeamMemberDto dto)
		{
			if (entity == null)
			{
				entity = new EduTeamMember();
			}
			entity.EduTeamMemberID = dto.EduTeamMemberID;
			entity.EduTeamCode = dto.EduTeamCode;
			entity.MemberCode = dto.MemberCode;
			entity.MemberID = dto.MemberID;
			entity.Tutor2 = dto.Tutor2;
			entity.Tutor = dto.Tutor;
			return entity;
		}
		public override EduTeamMemberDto Assemble(EduTeamMember entity)
		{
			EduTeamMemberDto dto = new EduTeamMemberDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EduTeamMemberID = entity.EduTeamMemberID;
			dto.EduTeamCode = entity.EduTeamCode;
			dto.MemberCode = entity.MemberCode;
			dto.MemberID = entity.MemberID;
			dto.Tutor2 = entity.Tutor2;
			dto.Tutor = entity.Tutor;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduTeamRundownAssembler : EduTeamRundownAssemblerBase, IEduTeamRundownAssembler
	{
	}


	public partial interface IEduTeamRundownAssembler : IOpenAccessAssembler<EduTeamRundownDto, EduTeamRundown>
	{
	}


	public partial class EduTeamRundownAssemblerBase : OpenAccessAssembler<EduTeamRundownDto, EduTeamRundown>
	{
		partial void OnDTOAssembled(EduTeamRundownDto dto);
		partial void OnEntityAssembled(EduTeamRundown entity);


		public override EduTeamRundown Assemble(EduTeamRundown entity, EduTeamRundownDto dto)
		{
			if (entity == null)
			{
				entity = new EduTeamRundown();
			}
			entity.EduTeamStopID = dto.EduTeamStopID;
			entity.EduTermID = dto.EduTermID;
			entity.EduTeamCode = dto.EduTeamCode;
			entity.DateFrom = dto.DateFrom;
			entity.DateTo = dto.DateTo;
			return entity;
		}
		public override EduTeamRundownDto Assemble(EduTeamRundown entity)
		{
			EduTeamRundownDto dto = new EduTeamRundownDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EduTeamStopID = entity.EduTeamStopID;
			dto.EduTermID = entity.EduTermID;
			dto.EduTeamCode = entity.EduTeamCode;
			dto.DateFrom = entity.DateFrom;
			dto.DateTo = entity.DateTo;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduTeamMemberRundownAssembler : EduTeamMemberRundownAssemblerBase, IEduTeamMemberRundownAssembler
	{
	}


	public partial interface IEduTeamMemberRundownAssembler : IOpenAccessAssembler<EduTeamMemberRundownDto, EduTeamMemberRundown>
	{
	}


	public partial class EduTeamMemberRundownAssemblerBase : OpenAccessAssembler<EduTeamMemberRundownDto, EduTeamMemberRundown>
	{
		partial void OnDTOAssembled(EduTeamMemberRundownDto dto);
		partial void OnEntityAssembled(EduTeamMemberRundown entity);


		public override EduTeamMemberRundown Assemble(EduTeamMemberRundown entity, EduTeamMemberRundownDto dto)
		{
			if (entity == null)
			{
				entity = new EduTeamMemberRundown();
			}
			entity.EduTeamMemberID = dto.EduTeamMemberID;
			entity.EduTermID = dto.EduTermID;
			entity.MemberID = dto.MemberID;
			entity.MemberCode = dto.MemberCode;
			entity.CoachID = dto.CoachID;
			return entity;
		}
		public override EduTeamMemberRundownDto Assemble(EduTeamMemberRundown entity)
		{
			EduTeamMemberRundownDto dto = new EduTeamMemberRundownDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EduTeamMemberID = entity.EduTeamMemberID;
			dto.EduTermID = entity.EduTermID;
			dto.MemberID = entity.MemberID;
			dto.MemberCode = entity.MemberCode;
			dto.CoachID = entity.CoachID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduTeamAssembler : EduTeamAssemblerBase, IEduTeamAssembler
	{
	}


	public partial interface IEduTeamAssembler : IOpenAccessAssembler<EduTeamDto, EduTeam>
	{
	}


	public partial class EduTeamAssemblerBase : OpenAccessAssembler<EduTeamDto, EduTeam>
	{
		partial void OnDTOAssembled(EduTeamDto dto);
		partial void OnEntityAssembled(EduTeam entity);


		public override EduTeam Assemble(EduTeam entity, EduTeamDto dto)
		{
			if (entity == null)
			{
				entity = new EduTeam();
			}
			entity.EduTeamCode = dto.EduTeamCode;
			entity.TeamMemberType = dto.TeamMemberType;
			entity.Status = dto.Status;
			entity.ParentEduTeamCode = dto.ParentEduTeamCode;
			entity.EduTeamName = dto.EduTeamName;
			entity.DisplayOrder = dto.DisplayOrder;
			entity.JobCode = dto.JobCode;
			return entity;
		}
		public override EduTeamDto Assemble(EduTeam entity)
		{
			EduTeamDto dto = new EduTeamDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EduTeamCode = entity.EduTeamCode;
			dto.TeamMemberType = entity.TeamMemberType;
			dto.Status = entity.Status;
			dto.ParentEduTeamCode = entity.ParentEduTeamCode;
			dto.EduTeamName = entity.EduTeamName;
			dto.DisplayOrder = entity.DisplayOrder;
			dto.JobCode = entity.JobCode;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduActTopicAssembler : EduActTopicAssemblerBase, IEduActTopicAssembler
	{
	}


	public partial interface IEduActTopicAssembler : IOpenAccessAssembler<EduActTopicDto, EduActTopic>
	{
	}


	public partial class EduActTopicAssemblerBase : OpenAccessAssembler<EduActTopicDto, EduActTopic>
	{
		partial void OnDTOAssembled(EduActTopicDto dto);
		partial void OnEntityAssembled(EduActTopic entity);


		public override EduActTopic Assemble(EduActTopic entity, EduActTopicDto dto)
		{
			if (entity == null)
			{
				entity = new EduActTopic();
			}
			entity.EduActTopicID = dto.EduActTopicID;
			entity.EduActTopicCode = dto.EduActTopicCode;
			entity.EduActTopicName = dto.EduActTopicName;
			return entity;
		}
		public override EduActTopicDto Assemble(EduActTopic entity)
		{
			EduActTopicDto dto = new EduActTopicDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EduActTopicID = entity.EduActTopicID;
			dto.EduActTopicCode = entity.EduActTopicCode;
			dto.EduActTopicName = entity.EduActTopicName;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduStopActScheduleAssembler : EduStopActScheduleAssemblerBase, IEduStopActScheduleAssembler
	{
	}


	public partial interface IEduStopActScheduleAssembler : IOpenAccessAssembler<EduStopActScheduleDto, EduStopActSchedule>
	{
	}


	public partial class EduStopActScheduleAssemblerBase : OpenAccessAssembler<EduStopActScheduleDto, EduStopActSchedule>
	{
		partial void OnDTOAssembled(EduStopActScheduleDto dto);
		partial void OnEntityAssembled(EduStopActSchedule entity);


		public override EduStopActSchedule Assemble(EduStopActSchedule entity, EduStopActScheduleDto dto)
		{
			if (entity == null)
			{
				entity = new EduStopActSchedule();
			}
			entity.EduStopActScheduleID = dto.EduStopActScheduleID;
			entity.EduActTopicID = dto.EduActTopicID;
			entity.TimeFrom = dto.TimeFrom;
			entity.TimeTo = dto.TimeTo;
			entity.Des = dto.Des;
			entity.ActType = dto.ActType;
			entity.EduTermID = dto.EduTermID;
			entity.Location = dto.Location;
			entity.CorchID = dto.CorchID;
			entity.ActTypeDes = dto.ActTypeDes;
			entity.LastModifier = dto.LastModifier;
			entity.Creater = dto.Creater;
			entity.ActName = dto.ActName;
			entity.RefUrl = dto.RefUrl;
			entity.DisplayTimeTo = dto.DisplayTimeTo;
			entity.DisplayTimeFrom = dto.DisplayTimeFrom;
			entity.DeptCode = dto.DeptCode;
			entity.ActRange = dto.ActRange;
			entity.HospCode = dto.HospCode;
			entity.PropertyType = dto.PropertyType;
			entity.AllowBooking = dto.AllowBooking;
			entity.BookingLimit = dto.BookingLimit;
			entity.HasOutSideStudent = dto.HasOutSideStudent;
			entity.EnableRec = dto.EnableRec;
			entity.RecTemplateID = dto.RecTemplateID;
			entity.HasTargets = dto.HasTargets;
			entity.HasAttachments = dto.HasAttachments;
			return entity;
		}
		public override EduStopActScheduleDto Assemble(EduStopActSchedule entity)
		{
			EduStopActScheduleDto dto = new EduStopActScheduleDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EduStopActScheduleID = entity.EduStopActScheduleID;
			dto.EduActTopicID = entity.EduActTopicID;
			dto.TimeFrom = entity.TimeFrom;
			dto.TimeTo = entity.TimeTo;
			dto.Des = entity.Des;
			dto.ActType = entity.ActType;
			dto.EduTermID = entity.EduTermID;
			dto.Location = entity.Location;
			dto.CorchID = entity.CorchID;
			dto.ActTypeDes = entity.ActTypeDes;
			dto.LastModifier = entity.LastModifier;
			dto.Creater = entity.Creater;
			dto.ActName = entity.ActName;
			dto.RefUrl = entity.RefUrl;
			dto.DisplayTimeTo = entity.DisplayTimeTo;
			dto.DisplayTimeFrom = entity.DisplayTimeFrom;
			dto.DeptCode = entity.DeptCode;
			dto.ActRange = entity.ActRange;
			dto.HospCode = entity.HospCode;
			dto.PropertyType = entity.PropertyType;
			dto.AllowBooking = entity.AllowBooking;
			dto.BookingLimit = entity.BookingLimit;
			dto.HasOutSideStudent = entity.HasOutSideStudent;
			dto.EnableRec = entity.EnableRec;
			dto.RecTemplateID = entity.RecTemplateID;
			dto.HasTargets = entity.HasTargets;
			dto.HasAttachments = entity.HasAttachments;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class Form_ToDo_ListAssembler : Form_ToDo_ListAssemblerBase, IForm_ToDo_ListAssembler
	{
	}


	public partial interface IForm_ToDo_ListAssembler : IOpenAccessAssembler<Form_ToDo_ListDto, Form_ToDo_List>
	{
	}


	public partial class Form_ToDo_ListAssemblerBase : OpenAccessAssembler<Form_ToDo_ListDto, Form_ToDo_List>
	{
		partial void OnDTOAssembled(Form_ToDo_ListDto dto);
		partial void OnEntityAssembled(Form_ToDo_List entity);


		public override Form_ToDo_List Assemble(Form_ToDo_List entity, Form_ToDo_ListDto dto)
		{
			if (entity == null)
			{
				entity = new Form_ToDo_List();
			}
			entity.ToDoListID = dto.ToDoListID;
			entity.EduTermID = dto.EduTermID;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.BEGIN_TIME = dto.BEGIN_TIME;
			entity.END_TIME = dto.END_TIME;
			return entity;
		}
		public override Form_ToDo_ListDto Assemble(Form_ToDo_List entity)
		{
			Form_ToDo_ListDto dto = new Form_ToDo_ListDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ToDoListID = entity.ToDoListID;
			dto.EduTermID = entity.EduTermID;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.BEGIN_TIME = entity.BEGIN_TIME;
			dto.END_TIME = entity.END_TIME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduTermFormInstanceAssembler : EduTermFormInstanceAssemblerBase, IEduTermFormInstanceAssembler
	{
	}


	public partial interface IEduTermFormInstanceAssembler : IOpenAccessAssembler<EduTermFormInstanceDto, EduTermFormInstance>
	{
	}


	public partial class EduTermFormInstanceAssemblerBase : OpenAccessAssembler<EduTermFormInstanceDto, EduTermFormInstance>
	{
		partial void OnDTOAssembled(EduTermFormInstanceDto dto);
		partial void OnEntityAssembled(EduTermFormInstance entity);


		public override EduTermFormInstance Assemble(EduTermFormInstance entity, EduTermFormInstanceDto dto)
		{
			if (entity == null)
			{
				entity = new EduTermFormInstance();
			}
			entity.EduTermID = dto.EduTermID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			return entity;
		}
		public override EduTermFormInstanceDto Assemble(EduTermFormInstance entity)
		{
			EduTermFormInstanceDto dto = new EduTermFormInstanceDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EduTermID = entity.EduTermID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduFormTemplateTargetAssembler : EduFormTemplateTargetAssemblerBase, IEduFormTemplateTargetAssembler
	{
	}


	public partial interface IEduFormTemplateTargetAssembler : IOpenAccessAssembler<EduFormTemplateTargetDto, EduFormTemplateTarget>
	{
	}


	public partial class EduFormTemplateTargetAssemblerBase : OpenAccessAssembler<EduFormTemplateTargetDto, EduFormTemplateTarget>
	{
		partial void OnDTOAssembled(EduFormTemplateTargetDto dto);
		partial void OnEntityAssembled(EduFormTemplateTarget entity);


		public override EduFormTemplateTarget Assemble(EduFormTemplateTarget entity, EduFormTemplateTargetDto dto)
		{
			if (entity == null)
			{
				entity = new EduFormTemplateTarget();
			}
			entity.RoleType = dto.RoleType;
			entity.ExpireDate = dto.ExpireDate;
			entity.SubTEMPLATE_ID = dto.SubTEMPLATE_ID;
			entity.FTTargetID = dto.FTTargetID;
			entity.FTListID = dto.FTListID;
			entity.UserDefineTargetID = dto.UserDefineTargetID;
			entity.TeacherType = dto.TeacherType;
			return entity;
		}
		public override EduFormTemplateTargetDto Assemble(EduFormTemplateTarget entity)
		{
			EduFormTemplateTargetDto dto = new EduFormTemplateTargetDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.RoleType = entity.RoleType;
			dto.ExpireDate = entity.ExpireDate;
			dto.SubTEMPLATE_ID = entity.SubTEMPLATE_ID;
			dto.FTTargetID = entity.FTTargetID;
			dto.FTListID = entity.FTListID;
			dto.UserDefineTargetID = entity.UserDefineTargetID;
			dto.TeacherType = entity.TeacherType;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduFormTemplateListAssembler : EduFormTemplateListAssemblerBase, IEduFormTemplateListAssembler
	{
	}


	public partial interface IEduFormTemplateListAssembler : IOpenAccessAssembler<EduFormTemplateListDto, EduFormTemplateList>
	{
	}


	public partial class EduFormTemplateListAssemblerBase : OpenAccessAssembler<EduFormTemplateListDto, EduFormTemplateList>
	{
		partial void OnDTOAssembled(EduFormTemplateListDto dto);
		partial void OnEntityAssembled(EduFormTemplateList entity);


		public override EduFormTemplateList Assemble(EduFormTemplateList entity, EduFormTemplateListDto dto)
		{
			if (entity == null)
			{
				entity = new EduFormTemplateList();
			}
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.CreateSQL = dto.CreateSQL;
			entity.Des = dto.Des;
			entity.Name = dto.Name;
			entity.ExecuteDate = dto.ExecuteDate;
			entity.TempoType = dto.TempoType;
			entity.TempoSettings = dto.TempoSettings;
			entity.FTListID = dto.FTListID;
			entity.EduTermID = dto.EduTermID;
			entity.EachStudent = dto.EachStudent;
			entity.AutoFTListID = dto.AutoFTListID;
			entity.Status = dto.Status;
			entity.Creater = dto.Creater;
			entity.SendOrderSetting = dto.SendOrderSetting;
			entity.EduYear = dto.EduYear;
			entity.SendMonth = dto.SendMonth;
			entity.UDStudent = dto.UDStudent;
			return entity;
		}
		public override EduFormTemplateListDto Assemble(EduFormTemplateList entity)
		{
			EduFormTemplateListDto dto = new EduFormTemplateListDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.CreateSQL = entity.CreateSQL;
			dto.Des = entity.Des;
			dto.Name = entity.Name;
			dto.ExecuteDate = entity.ExecuteDate;
			dto.TempoType = entity.TempoType;
			dto.TempoSettings = entity.TempoSettings;
			dto.FTListID = entity.FTListID;
			dto.EduTermID = entity.EduTermID;
			dto.EachStudent = entity.EachStudent;
			dto.AutoFTListID = entity.AutoFTListID;
			dto.Status = entity.Status;
			dto.Creater = entity.Creater;
			dto.SendOrderSetting = entity.SendOrderSetting;
			dto.EduYear = entity.EduYear;
			dto.SendMonth = entity.SendMonth;
			dto.UDStudent = entity.UDStudent;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduStopAssembler : EduStopAssemblerBase, IEduStopAssembler
	{
	}


	public partial interface IEduStopAssembler : IOpenAccessAssembler<EduStopDto, EduStop>
	{
	}


	public partial class EduStopAssemblerBase : OpenAccessAssembler<EduStopDto, EduStop>
	{
		partial void OnDTOAssembled(EduStopDto dto);
		partial void OnEntityAssembled(EduStop entity);


		public override EduStop Assemble(EduStop entity, EduStopDto dto)
		{
			if (entity == null)
			{
				entity = new EduStop();
			}
			entity.EduStopID = dto.EduStopID;
			entity.EduStopCode = dto.EduStopCode;
			entity.Name = dto.Name;
			entity.DepID = dto.DepID;
			entity.NStation = dto.NStation;
			entity.CorchID = dto.CorchID;
			entity.Status = dto.Status;
			entity.Des = dto.Des;
			entity.YearCode = dto.YearCode;
			entity.ParentEduStopID = dto.ParentEduStopID;
			return entity;
		}
		public override EduStopDto Assemble(EduStop entity)
		{
			EduStopDto dto = new EduStopDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EduStopID = entity.EduStopID;
			dto.EduStopCode = entity.EduStopCode;
			dto.Name = entity.Name;
			dto.DepID = entity.DepID;
			dto.NStation = entity.NStation;
			dto.CorchID = entity.CorchID;
			dto.Status = entity.Status;
			dto.Des = entity.Des;
			dto.YearCode = entity.YearCode;
			dto.ParentEduStopID = entity.ParentEduStopID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduTermAssembler : EduTermAssemblerBase, IEduTermAssembler
	{
	}


	public partial interface IEduTermAssembler : IOpenAccessAssembler<EduTermDto, EduTerm>
	{
	}


	public partial class EduTermAssemblerBase : OpenAccessAssembler<EduTermDto, EduTerm>
	{
		partial void OnDTOAssembled(EduTermDto dto);
		partial void OnEntityAssembled(EduTerm entity);


		public override EduTerm Assemble(EduTerm entity, EduTermDto dto)
		{
			if (entity == null)
			{
				entity = new EduTerm();
			}
			entity.EduTermID = dto.EduTermID;
			entity.EduStopCode = dto.EduStopCode;
			entity.Name = dto.Name;
			entity.DepCode = dto.DepCode;
			entity.NStation = dto.NStation;
			entity.CorchID = dto.CorchID;
			entity.DateFrom = dto.DateFrom;
			entity.DateTo = dto.DateTo;
			entity.IsClass = dto.IsClass;
			entity.RoundCode = dto.RoundCode;
			entity.Status = dto.Status;
			entity.Des = dto.Des;
			entity.Capacity = dto.Capacity;
			entity.MemberType = dto.MemberType;
			entity.EduStopID = dto.EduStopID;
			entity.Teacher = dto.Teacher;
			entity.EBM = dto.EBM;
			entity.Creater = dto.Creater;
			entity.ParentEduTermID = dto.ParentEduTermID;
			entity.JobCode = dto.JobCode;
			entity.Hospital = dto.Hospital;
			entity.EduYear = dto.EduYear;
			entity.Department = dto.Department;
			entity.HasTeacher = dto.HasTeacher;
			entity.HasMember = dto.HasMember;
			entity.SchoolSeqNo2 = dto.SchoolSeqNo2;
			entity.SchoolSeqNo1 = dto.SchoolSeqNo1;
			return entity;
		}
		public override EduTermDto Assemble(EduTerm entity)
		{
			EduTermDto dto = new EduTermDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EduTermID = entity.EduTermID;
			dto.EduStopCode = entity.EduStopCode;
			dto.Name = entity.Name;
			dto.DepCode = entity.DepCode;
			dto.NStation = entity.NStation;
			dto.CorchID = entity.CorchID;
			dto.DateFrom = entity.DateFrom;
			dto.DateTo = entity.DateTo;
			dto.IsClass = entity.IsClass;
			dto.RoundCode = entity.RoundCode;
			dto.Status = entity.Status;
			dto.Des = entity.Des;
			dto.Capacity = entity.Capacity;
			dto.MemberType = entity.MemberType;
			dto.EduStopID = entity.EduStopID;
			dto.Teacher = entity.Teacher;
			dto.EBM = entity.EBM;
			dto.Creater = entity.Creater;
			dto.ParentEduTermID = entity.ParentEduTermID;
			dto.JobCode = entity.JobCode;
			dto.Hospital = entity.Hospital;
			dto.EduYear = entity.EduYear;
			dto.Department = entity.Department;
			dto.HasTeacher = entity.HasTeacher;
			dto.HasMember = entity.HasMember;
			dto.SchoolSeqNo2 = entity.SchoolSeqNo2;
			dto.SchoolSeqNo1 = entity.SchoolSeqNo1;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class V_ExpireFormInstanceAssembler : V_ExpireFormInstanceAssemblerBase, IV_ExpireFormInstanceAssembler
	{
	}


	public partial interface IV_ExpireFormInstanceAssembler : IOpenAccessAssembler<V_ExpireFormInstanceDto, V_ExpireFormInstance>
	{
	}


	public partial class V_ExpireFormInstanceAssemblerBase : OpenAccessAssembler<V_ExpireFormInstanceDto, V_ExpireFormInstance>
	{
		partial void OnDTOAssembled(V_ExpireFormInstanceDto dto);
		partial void OnEntityAssembled(V_ExpireFormInstance entity);


		public override V_ExpireFormInstance Assemble(V_ExpireFormInstance entity, V_ExpireFormInstanceDto dto)
		{
			if (entity == null)
			{
				entity = new V_ExpireFormInstance();
			}
			entity.Membername = dto.Membername;
			entity.MemberID = dto.MemberID;
			entity.IsHospMember = dto.IsHospMember;
			entity.INSTANCE_NAME = dto.INSTANCE_NAME;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.INSTANCE_CREATE_DATETIME = dto.INSTANCE_CREATE_DATETIME;
			entity.ExpireDate = dto.ExpireDate;
			entity.Edutermname = dto.Edutermname;
			entity.EduTermID = dto.EduTermID;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			return entity;
		}
		public override V_ExpireFormInstanceDto Assemble(V_ExpireFormInstance entity)
		{
			V_ExpireFormInstanceDto dto = new V_ExpireFormInstanceDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Membername = entity.Membername;
			dto.MemberID = entity.MemberID;
			dto.IsHospMember = entity.IsHospMember;
			dto.INSTANCE_NAME = entity.INSTANCE_NAME;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.INSTANCE_CREATE_DATETIME = entity.INSTANCE_CREATE_DATETIME;
			dto.ExpireDate = entity.ExpireDate;
			dto.Edutermname = entity.Edutermname;
			dto.EduTermID = entity.EduTermID;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduTeacherTypeAssembler : EduTeacherTypeAssemblerBase, IEduTeacherTypeAssembler
	{
	}


	public partial interface IEduTeacherTypeAssembler : IOpenAccessAssembler<EduTeacherTypeDto, EduTeacherType>
	{
	}


	public partial class EduTeacherTypeAssemblerBase : OpenAccessAssembler<EduTeacherTypeDto, EduTeacherType>
	{
		partial void OnDTOAssembled(EduTeacherTypeDto dto);
		partial void OnEntityAssembled(EduTeacherType entity);


		public override EduTeacherType Assemble(EduTeacherType entity, EduTeacherTypeDto dto)
		{
			if (entity == null)
			{
				entity = new EduTeacherType();
			}
			entity.Code = dto.Code;
			entity.Name = dto.Name;
			entity.Display_order = dto.Display_order;
			entity.RefType = dto.RefType;
			return entity;
		}
		public override EduTeacherTypeDto Assemble(EduTeacherType entity)
		{
			EduTeacherTypeDto dto = new EduTeacherTypeDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Code = entity.Code;
			dto.Name = entity.Name;
			dto.Display_order = entity.Display_order;
			dto.RefType = entity.RefType;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduRefTeacherAssembler : EduRefTeacherAssemblerBase, IEduRefTeacherAssembler
	{
	}


	public partial interface IEduRefTeacherAssembler : IOpenAccessAssembler<EduRefTeacherDto, EduRefTeacher>
	{
	}


	public partial class EduRefTeacherAssemblerBase : OpenAccessAssembler<EduRefTeacherDto, EduRefTeacher>
	{
		partial void OnDTOAssembled(EduRefTeacherDto dto);
		partial void OnEntityAssembled(EduRefTeacher entity);


		public override EduRefTeacher Assemble(EduRefTeacher entity, EduRefTeacherDto dto)
		{
			if (entity == null)
			{
				entity = new EduRefTeacher();
			}
			entity.EduRefTeacherID = dto.EduRefTeacherID;
			entity.TeacherID = dto.TeacherID;
			entity.TeacherType = dto.TeacherType;
			entity.RefID = dto.RefID;
			entity.RefTable = dto.RefTable;
			entity.EduTermID = dto.EduTermID;
			entity.CreateEmp = dto.CreateEmp;
			entity.CreateDate = dto.CreateDate;
			entity.TeacherOrder = dto.TeacherOrder;
			return entity;
		}
		public override EduRefTeacherDto Assemble(EduRefTeacher entity)
		{
			EduRefTeacherDto dto = new EduRefTeacherDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EduRefTeacherID = entity.EduRefTeacherID;
			dto.TeacherID = entity.TeacherID;
			dto.TeacherType = entity.TeacherType;
			dto.RefID = entity.RefID;
			dto.RefTable = entity.RefTable;
			dto.EduTermID = entity.EduTermID;
			dto.CreateEmp = entity.CreateEmp;
			dto.CreateDate = entity.CreateDate;
			dto.TeacherOrder = entity.TeacherOrder;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class V_CodeRefAssembler : V_CodeRefAssemblerBase, IV_CodeRefAssembler
	{
	}


	public partial interface IV_CodeRefAssembler : IOpenAccessAssembler<V_CodeRefDto, V_CodeRef>
	{
	}


	public partial class V_CodeRefAssemblerBase : OpenAccessAssembler<V_CodeRefDto, V_CodeRef>
	{
		partial void OnDTOAssembled(V_CodeRefDto dto);
		partial void OnEntityAssembled(V_CodeRef entity);


		public override V_CodeRef Assemble(V_CodeRef entity, V_CodeRefDto dto)
		{
			if (entity == null)
			{
				entity = new V_CodeRef();
			}
			entity.ShowSeq = dto.ShowSeq;
			entity.ParentCodeRefid = dto.ParentCodeRefid;
			entity.Name = dto.Name;
			entity.Des2 = dto.Des2;
			entity.Des = dto.Des;
			entity.CodeType = dto.CodeType;
			entity.CodeRefid = dto.CodeRefid;
			entity.Code = dto.Code;
			entity.CaseType = dto.CaseType;
			return entity;
		}
		public override V_CodeRefDto Assemble(V_CodeRef entity)
		{
			V_CodeRefDto dto = new V_CodeRefDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ShowSeq = entity.ShowSeq;
			dto.ParentCodeRefid = entity.ParentCodeRefid;
			dto.Name = entity.Name;
			dto.Des2 = entity.Des2;
			dto.Des = entity.Des;
			dto.CodeType = entity.CodeType;
			dto.CodeRefid = entity.CodeRefid;
			dto.Code = entity.Code;
			dto.CaseType = entity.CaseType;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduActTargetAssembler : EduActTargetAssemblerBase, IEduActTargetAssembler
	{
	}


	public partial interface IEduActTargetAssembler : IOpenAccessAssembler<EduActTargetDto, EduActTarget>
	{
	}


	public partial class EduActTargetAssemblerBase : OpenAccessAssembler<EduActTargetDto, EduActTarget>
	{
		partial void OnDTOAssembled(EduActTargetDto dto);
		partial void OnEntityAssembled(EduActTarget entity);


		public override EduActTarget Assemble(EduActTarget entity, EduActTargetDto dto)
		{
			if (entity == null)
			{
				entity = new EduActTarget();
			}
			entity.EduStopActScheduleID = dto.EduStopActScheduleID;
			entity.TargetType = dto.TargetType;
			entity.TargetID = dto.TargetID;
			entity.RoleType = dto.RoleType;
			entity.TimeTo = dto.TimeTo;
			entity.TimeFrom = dto.TimeFrom;
			entity.TargetJob = dto.TargetJob;
			entity.CheckOutTime = dto.CheckOutTime;
			entity.CheckInTime = dto.CheckInTime;
			return entity;
		}
		public override EduActTargetDto Assemble(EduActTarget entity)
		{
			EduActTargetDto dto = new EduActTargetDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EduStopActScheduleID = entity.EduStopActScheduleID;
			dto.TargetType = entity.TargetType;
			dto.TargetID = entity.TargetID;
			dto.RoleType = entity.RoleType;
			dto.TimeTo = entity.TimeTo;
			dto.TimeFrom = entity.TimeFrom;
			dto.TargetJob = entity.TargetJob;
			dto.CheckOutTime = entity.CheckOutTime;
			dto.CheckInTime = entity.CheckInTime;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class V_departmentAssembler : V_departmentAssemblerBase, IV_departmentAssembler
	{
	}


	public partial interface IV_departmentAssembler : IOpenAccessAssembler<V_departmentDto, V_department>
	{
	}


	public partial class V_departmentAssemblerBase : OpenAccessAssembler<V_departmentDto, V_department>
	{
		partial void OnDTOAssembled(V_departmentDto dto);
		partial void OnEntityAssembled(V_department entity);


		public override V_department Assemble(V_department entity, V_departmentDto dto)
		{
			if (entity == null)
			{
				entity = new V_department();
			}
			entity.Managercode = dto.Managercode;
			entity.Hospname = dto.Hospname;
			entity.Hospcode = dto.Hospcode;
			entity.Deptname = dto.Deptname;
			entity.Deptcode = dto.Deptcode;
			entity.Active = dto.Active;
			entity.Shorthospcode = dto.Shorthospcode;
			entity.Depid = dto.Depid;
			return entity;
		}
		public override V_departmentDto Assemble(V_department entity)
		{
			V_departmentDto dto = new V_departmentDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Managercode = entity.Managercode;
			dto.Hospname = entity.Hospname;
			dto.Hospcode = entity.Hospcode;
			dto.Deptname = entity.Deptname;
			dto.Deptcode = entity.Deptcode;
			dto.Active = entity.Active;
			dto.Shorthospcode = entity.Shorthospcode;
			dto.Depid = entity.Depid;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class V_kmujobAssembler : V_kmujobAssemblerBase, IV_kmujobAssembler
	{
	}


	public partial interface IV_kmujobAssembler : IOpenAccessAssembler<V_kmujobDto, V_kmujob>
	{
	}


	public partial class V_kmujobAssemblerBase : OpenAccessAssembler<V_kmujobDto, V_kmujob>
	{
		partial void OnDTOAssembled(V_kmujobDto dto);
		partial void OnEntityAssembled(V_kmujob entity);


		public override V_kmujob Assemble(V_kmujob entity, V_kmujobDto dto)
		{
			if (entity == null)
			{
				entity = new V_kmujob();
			}
			entity.JOB_NAME = dto.JOB_NAME;
			entity.JOB_KIND_NAME = dto.JOB_KIND_NAME;
			entity.JOB_KIND = dto.JOB_KIND;
			entity.JOB_DETAIL_NAME = dto.JOB_DETAIL_NAME;
			entity.JOB_DETAIL = dto.JOB_DETAIL;
			entity.JOB_CODE_X = dto.JOB_CODE_X;
			entity.ENGLISH_NAME = dto.ENGLISH_NAME;
			return entity;
		}
		public override V_kmujobDto Assemble(V_kmujob entity)
		{
			V_kmujobDto dto = new V_kmujobDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.JOB_NAME = entity.JOB_NAME;
			dto.JOB_KIND_NAME = entity.JOB_KIND_NAME;
			dto.JOB_KIND = entity.JOB_KIND;
			dto.JOB_DETAIL_NAME = entity.JOB_DETAIL_NAME;
			dto.JOB_DETAIL = entity.JOB_DETAIL;
			dto.JOB_CODE_X = entity.JOB_CODE_X;
			dto.ENGLISH_NAME = entity.ENGLISH_NAME;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduStopActAttachmentAssembler : EduStopActAttachmentAssemblerBase, IEduStopActAttachmentAssembler
	{
	}


	public partial interface IEduStopActAttachmentAssembler : IOpenAccessAssembler<EduStopActAttachmentDto, EduStopActAttachment>
	{
	}


	public partial class EduStopActAttachmentAssemblerBase : OpenAccessAssembler<EduStopActAttachmentDto, EduStopActAttachment>
	{
		partial void OnDTOAssembled(EduStopActAttachmentDto dto);
		partial void OnEntityAssembled(EduStopActAttachment entity);


		public override EduStopActAttachment Assemble(EduStopActAttachment entity, EduStopActAttachmentDto dto)
		{
			if (entity == null)
			{
				entity = new EduStopActAttachment();
			}
			entity.ActAttachmentID = dto.ActAttachmentID;
			entity.EduStopActScheduleID = dto.EduStopActScheduleID;
			entity.Name = dto.Name;
			entity.Attachment = dto.Attachment;
			entity.IsPublic = dto.IsPublic;
			return entity;
		}
		public override EduStopActAttachmentDto Assemble(EduStopActAttachment entity)
		{
			EduStopActAttachmentDto dto = new EduStopActAttachmentDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ActAttachmentID = entity.ActAttachmentID;
			dto.EduStopActScheduleID = entity.EduStopActScheduleID;
			dto.Name = entity.Name;
			dto.Attachment = entity.Attachment;
			dto.IsPublic = entity.IsPublic;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class V_MemeberRundownAssembler : V_MemeberRundownAssemblerBase, IV_MemeberRundownAssembler
	{
	}


	public partial interface IV_MemeberRundownAssembler : IOpenAccessAssembler<V_MemeberRundownDto, V_MemeberRundown>
	{
	}


	public partial class V_MemeberRundownAssemblerBase : OpenAccessAssembler<V_MemeberRundownDto, V_MemeberRundown>
	{
		partial void OnDTOAssembled(V_MemeberRundownDto dto);
		partial void OnEntityAssembled(V_MemeberRundown entity);


		public override V_MemeberRundown Assemble(V_MemeberRundown entity, V_MemeberRundownDto dto)
		{
			if (entity == null)
			{
				entity = new V_MemeberRundown();
			}
			entity.ParentEduTermID = dto.ParentEduTermID;
			entity.MemberName = dto.MemberName;
			entity.MemberID = dto.MemberID;
			entity.EduTermName = dto.EduTermName;
			entity.EduTermID = dto.EduTermID;
			entity.EduTeamName = dto.EduTeamName;
			entity.EduTeamCode = dto.EduTeamCode;
			entity.DateTo = dto.DateTo;
			entity.DateFrom = dto.DateFrom;
			entity.EduYear = dto.EduYear;
			entity.ParentEduTermName = dto.ParentEduTermName;
			entity.ParentDateTo = dto.ParentDateTo;
			entity.ParentDateFrom = dto.ParentDateFrom;
			entity.Deptname = dto.Deptname;
			return entity;
		}
		public override V_MemeberRundownDto Assemble(V_MemeberRundown entity)
		{
			V_MemeberRundownDto dto = new V_MemeberRundownDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ParentEduTermID = entity.ParentEduTermID;
			dto.MemberName = entity.MemberName;
			dto.MemberID = entity.MemberID;
			dto.EduTermName = entity.EduTermName;
			dto.EduTermID = entity.EduTermID;
			dto.EduTeamName = entity.EduTeamName;
			dto.EduTeamCode = entity.EduTeamCode;
			dto.DateTo = entity.DateTo;
			dto.DateFrom = entity.DateFrom;
			dto.EduYear = entity.EduYear;
			dto.ParentEduTermName = entity.ParentEduTermName;
			dto.ParentDateTo = entity.ParentDateTo;
			dto.ParentDateFrom = entity.ParentDateFrom;
			dto.Deptname = entity.Deptname;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class AutoEduFormTemplateTargetAssembler : AutoEduFormTemplateTargetAssemblerBase, IAutoEduFormTemplateTargetAssembler
	{
	}


	public partial interface IAutoEduFormTemplateTargetAssembler : IOpenAccessAssembler<AutoEduFormTemplateTargetDto, AutoEduFormTemplateTarget>
	{
	}


	public partial class AutoEduFormTemplateTargetAssemblerBase : OpenAccessAssembler<AutoEduFormTemplateTargetDto, AutoEduFormTemplateTarget>
	{
		partial void OnDTOAssembled(AutoEduFormTemplateTargetDto dto);
		partial void OnEntityAssembled(AutoEduFormTemplateTarget entity);


		public override AutoEduFormTemplateTarget Assemble(AutoEduFormTemplateTarget entity, AutoEduFormTemplateTargetDto dto)
		{
			if (entity == null)
			{
				entity = new AutoEduFormTemplateTarget();
			}
			entity.AutoFTTargetID = dto.AutoFTTargetID;
			entity.AutoFTListID = dto.AutoFTListID;
			entity.RoleType = dto.RoleType;
			entity.ExpireDays = dto.ExpireDays;
			entity.SubTEMPLATE_ID = dto.SubTEMPLATE_ID;
			entity.UserDefineTargetID = dto.UserDefineTargetID;
			entity.TeacherType = dto.TeacherType;
			entity.ExpireDaysType = dto.ExpireDaysType;
			return entity;
		}
		public override AutoEduFormTemplateTargetDto Assemble(AutoEduFormTemplateTarget entity)
		{
			AutoEduFormTemplateTargetDto dto = new AutoEduFormTemplateTargetDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.AutoFTTargetID = entity.AutoFTTargetID;
			dto.AutoFTListID = entity.AutoFTListID;
			dto.RoleType = entity.RoleType;
			dto.ExpireDays = entity.ExpireDays;
			dto.SubTEMPLATE_ID = entity.SubTEMPLATE_ID;
			dto.UserDefineTargetID = entity.UserDefineTargetID;
			dto.TeacherType = entity.TeacherType;
			dto.ExpireDaysType = entity.ExpireDaysType;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class AutoEduFormTemplateListAssembler : AutoEduFormTemplateListAssemblerBase, IAutoEduFormTemplateListAssembler
	{
	}


	public partial interface IAutoEduFormTemplateListAssembler : IOpenAccessAssembler<AutoEduFormTemplateListDto, AutoEduFormTemplateList>
	{
	}


	public partial class AutoEduFormTemplateListAssemblerBase : OpenAccessAssembler<AutoEduFormTemplateListDto, AutoEduFormTemplateList>
	{
		partial void OnDTOAssembled(AutoEduFormTemplateListDto dto);
		partial void OnEntityAssembled(AutoEduFormTemplateList entity);


		public override AutoEduFormTemplateList Assemble(AutoEduFormTemplateList entity, AutoEduFormTemplateListDto dto)
		{
			if (entity == null)
			{
				entity = new AutoEduFormTemplateList();
			}
			entity.AutoFTListID = dto.AutoFTListID;
			entity.JobCode = dto.JobCode;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.SettingName = dto.SettingName;
			entity.Des = dto.Des;
			entity.EachStudent = dto.EachStudent;
			entity.DateShiftType = dto.DateShiftType;
			entity.DateShift = dto.DateShift;
			entity.MultiTarget = dto.MultiTarget;
			entity.TeacherType = dto.TeacherType;
			entity.SendFloor = dto.SendFloor;
			entity.Creater = dto.Creater;
			entity.SendOrderSetting = dto.SendOrderSetting;
			entity.EduYear = dto.EduYear;
			entity.Sdate = dto.Sdate;
			entity.Edate = dto.Edate;
			return entity;
		}
		public override AutoEduFormTemplateListDto Assemble(AutoEduFormTemplateList entity)
		{
			AutoEduFormTemplateListDto dto = new AutoEduFormTemplateListDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.AutoFTListID = entity.AutoFTListID;
			dto.JobCode = entity.JobCode;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.SettingName = entity.SettingName;
			dto.Des = entity.Des;
			dto.EachStudent = entity.EachStudent;
			dto.DateShiftType = entity.DateShiftType;
			dto.DateShift = entity.DateShift;
			dto.MultiTarget = entity.MultiTarget;
			dto.TeacherType = entity.TeacherType;
			dto.SendFloor = entity.SendFloor;
			dto.Creater = entity.Creater;
			dto.SendOrderSetting = entity.SendOrderSetting;
			dto.EduYear = entity.EduYear;
			dto.Sdate = entity.Sdate;
			dto.Edate = entity.Edate;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class JobFormSettingAssembler : JobFormSettingAssemblerBase, IJobFormSettingAssembler
	{
	}


	public partial interface IJobFormSettingAssembler : IOpenAccessAssembler<JobFormSettingDto, JobFormSetting>
	{
	}


	public partial class JobFormSettingAssemblerBase : OpenAccessAssembler<JobFormSettingDto, JobFormSetting>
	{
		partial void OnDTOAssembled(JobFormSettingDto dto);
		partial void OnEntityAssembled(JobFormSetting entity);


		public override JobFormSetting Assemble(JobFormSetting entity, JobFormSettingDto dto)
		{
			if (entity == null)
			{
				entity = new JobFormSetting();
			}
			entity.JobCode = dto.JobCode;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.DISPLAY_ORDER = dto.DISPLAY_ORDER;
			entity.SettingID = dto.SettingID;
			return entity;
		}
		public override JobFormSettingDto Assemble(JobFormSetting entity)
		{
			JobFormSettingDto dto = new JobFormSettingDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.JobCode = entity.JobCode;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.DISPLAY_ORDER = entity.DISPLAY_ORDER;
			dto.SettingID = entity.SettingID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class SchedulerLogAssembler : SchedulerLogAssemblerBase, ISchedulerLogAssembler
	{
	}


	public partial interface ISchedulerLogAssembler : IOpenAccessAssembler<SchedulerLogDto, SchedulerLog>
	{
	}


	public partial class SchedulerLogAssemblerBase : OpenAccessAssembler<SchedulerLogDto, SchedulerLog>
	{
		partial void OnDTOAssembled(SchedulerLogDto dto);
		partial void OnEntityAssembled(SchedulerLog entity);


		public override SchedulerLog Assemble(SchedulerLog entity, SchedulerLogDto dto)
		{
			if (entity == null)
			{
				entity = new SchedulerLog();
			}
			entity.FunctionName = dto.FunctionName;
			entity.LogContent = dto.LogContent;
			entity.LogTime = dto.LogTime;
			entity.LogID = dto.LogID;
			entity.LogParameter = dto.LogParameter;
			return entity;
		}
		public override SchedulerLogDto Assemble(SchedulerLog entity)
		{
			SchedulerLogDto dto = new SchedulerLogDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.FunctionName = entity.FunctionName;
			dto.LogContent = entity.LogContent;
			dto.LogTime = entity.LogTime;
			dto.LogID = entity.LogID;
			dto.LogParameter = entity.LogParameter;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class News_AttachmentAssembler : News_AttachmentAssemblerBase, INews_AttachmentAssembler
	{
	}


	public partial interface INews_AttachmentAssembler : IOpenAccessAssembler<News_AttachmentDto, News_Attachment>
	{
	}


	public partial class News_AttachmentAssemblerBase : OpenAccessAssembler<News_AttachmentDto, News_Attachment>
	{
		partial void OnDTOAssembled(News_AttachmentDto dto);
		partial void OnEntityAssembled(News_Attachment entity);


		public override News_Attachment Assemble(News_Attachment entity, News_AttachmentDto dto)
		{
			if (entity == null)
			{
				entity = new News_Attachment();
			}
			entity.AttachmentID = dto.AttachmentID;
			entity.NEWID = dto.NEWID;
			entity.AttachmentName = dto.AttachmentName;
			entity.Attachment = dto.Attachment;
			return entity;
		}
		public override News_AttachmentDto Assemble(News_Attachment entity)
		{
			News_AttachmentDto dto = new News_AttachmentDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.AttachmentID = entity.AttachmentID;
			dto.NEWID = entity.NEWID;
			dto.AttachmentName = entity.AttachmentName;
			dto.Attachment = entity.Attachment;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class NewsAssembler : NewsAssemblerBase, INewsAssembler
	{
	}


	public partial interface INewsAssembler : IOpenAccessAssembler<NewsDto, News>
	{
	}


	public partial class NewsAssemblerBase : OpenAccessAssembler<NewsDto, News>
	{
		partial void OnDTOAssembled(NewsDto dto);
		partial void OnEntityAssembled(News entity);


		public override News Assemble(News entity, NewsDto dto)
		{
			if (entity == null)
			{
				entity = new News();
			}
			entity.NEWID = dto.NEWID;
			entity.TITLE = dto.TITLE;
			entity.CONTENT = dto.CONTENT;
			entity.SDATE = dto.SDATE;
			entity.EDATE = dto.EDATE;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			return entity;
		}
		public override NewsDto Assemble(News entity)
		{
			NewsDto dto = new NewsDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.NEWID = entity.NEWID;
			dto.TITLE = entity.TITLE;
			dto.CONTENT = entity.CONTENT;
			dto.SDATE = entity.SDATE;
			dto.EDATE = entity.EDATE;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduActTypeAssembler : EduActTypeAssemblerBase, IEduActTypeAssembler
	{
	}


	public partial interface IEduActTypeAssembler : IOpenAccessAssembler<EduActTypeDto, EduActType>
	{
	}


	public partial class EduActTypeAssemblerBase : OpenAccessAssembler<EduActTypeDto, EduActType>
	{
		partial void OnDTOAssembled(EduActTypeDto dto);
		partial void OnEntityAssembled(EduActType entity);


		public override EduActType Assemble(EduActType entity, EduActTypeDto dto)
		{
			if (entity == null)
			{
				entity = new EduActType();
			}
			entity.CLS_ID = dto.CLS_ID;
			entity.CLS_NAME = dto.CLS_NAME;
			entity.CLS_PID = dto.CLS_PID;
			entity.CLS_FLOOR = dto.CLS_FLOOR;
			entity.CLS_PERMISSION = dto.CLS_PERMISSION;
			entity.CLS_GROUP_KEY = dto.CLS_GROUP_KEY;
			entity.CLS_EMP_CODE = dto.CLS_EMP_CODE;
			entity.CLS_DEPT_CODE = dto.CLS_DEPT_CODE;
			entity.CLS_TYPE = dto.CLS_TYPE;
			return entity;
		}
		public override EduActTypeDto Assemble(EduActType entity)
		{
			EduActTypeDto dto = new EduActTypeDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.CLS_ID = entity.CLS_ID;
			dto.CLS_NAME = entity.CLS_NAME;
			dto.CLS_PID = entity.CLS_PID;
			dto.CLS_FLOOR = entity.CLS_FLOOR;
			dto.CLS_PERMISSION = entity.CLS_PERMISSION;
			dto.CLS_GROUP_KEY = entity.CLS_GROUP_KEY;
			dto.CLS_EMP_CODE = entity.CLS_EMP_CODE;
			dto.CLS_DEPT_CODE = entity.CLS_DEPT_CODE;
			dto.CLS_TYPE = entity.CLS_TYPE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCE_ATTACHMENTAssembler : FORM_INSTANCE_ATTACHMENTAssemblerBase, IFORM_INSTANCE_ATTACHMENTAssembler
	{
	}


	public partial interface IFORM_INSTANCE_ATTACHMENTAssembler : IOpenAccessAssembler<FORM_INSTANCE_ATTACHMENTDto, FORM_INSTANCE_ATTACHMENT>
	{
	}


	public partial class FORM_INSTANCE_ATTACHMENTAssemblerBase : OpenAccessAssembler<FORM_INSTANCE_ATTACHMENTDto, FORM_INSTANCE_ATTACHMENT>
	{
		partial void OnDTOAssembled(FORM_INSTANCE_ATTACHMENTDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE_ATTACHMENT entity);


		public override FORM_INSTANCE_ATTACHMENT Assemble(FORM_INSTANCE_ATTACHMENT entity, FORM_INSTANCE_ATTACHMENTDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE_ATTACHMENT();
			}
			entity.ATTACHMENT_ID = dto.ATTACHMENT_ID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.ATTACHMENT = dto.ATTACHMENT;
			entity.Name = dto.Name;
			entity.FileName = dto.FileName;
			return entity;
		}
		public override FORM_INSTANCE_ATTACHMENTDto Assemble(FORM_INSTANCE_ATTACHMENT entity)
		{
			FORM_INSTANCE_ATTACHMENTDto dto = new FORM_INSTANCE_ATTACHMENTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ATTACHMENT_ID = entity.ATTACHMENT_ID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.ATTACHMENT = entity.ATTACHMENT;
			dto.Name = entity.Name;
			dto.FileName = entity.FileName;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduActViewTargetAssembler : EduActViewTargetAssemblerBase, IEduActViewTargetAssembler
	{
	}


	public partial interface IEduActViewTargetAssembler : IOpenAccessAssembler<EduActViewTargetDto, EduActViewTarget>
	{
	}


	public partial class EduActViewTargetAssemblerBase : OpenAccessAssembler<EduActViewTargetDto, EduActViewTarget>
	{
		partial void OnDTOAssembled(EduActViewTargetDto dto);
		partial void OnEntityAssembled(EduActViewTarget entity);


		public override EduActViewTarget Assemble(EduActViewTarget entity, EduActViewTargetDto dto)
		{
			if (entity == null)
			{
				entity = new EduActViewTarget();
			}
			entity.EduStopActScheduleID = dto.EduStopActScheduleID;
			entity.TargetType = dto.TargetType;
			entity.TargetID = dto.TargetID;
			entity.RoleType = dto.RoleType;
			entity.TimeFrom = dto.TimeFrom;
			entity.TimeTo = dto.TimeTo;
			entity.TargetJob = dto.TargetJob;
			return entity;
		}
		public override EduActViewTargetDto Assemble(EduActViewTarget entity)
		{
			EduActViewTargetDto dto = new EduActViewTargetDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EduStopActScheduleID = entity.EduStopActScheduleID;
			dto.TargetType = entity.TargetType;
			dto.TargetID = entity.TargetID;
			dto.RoleType = entity.RoleType;
			dto.TimeFrom = entity.TimeFrom;
			dto.TimeTo = entity.TimeTo;
			dto.TargetJob = entity.TargetJob;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduMenuAssembler : EduMenuAssemblerBase, IEduMenuAssembler
	{
	}


	public partial interface IEduMenuAssembler : IOpenAccessAssembler<EduMenuDto, EduMenu>
	{
	}


	public partial class EduMenuAssemblerBase : OpenAccessAssembler<EduMenuDto, EduMenu>
	{
		partial void OnDTOAssembled(EduMenuDto dto);
		partial void OnEntityAssembled(EduMenu entity);


		public override EduMenu Assemble(EduMenu entity, EduMenuDto dto)
		{
			if (entity == null)
			{
				entity = new EduMenu();
			}
			entity.MenuID = dto.MenuID;
			entity.MenuText = dto.MenuText;
			entity.ParentMenuText = dto.ParentMenuText;
			entity.NavigateUrl = dto.NavigateUrl;
			entity.DisplayOrder = dto.DisplayOrder;
			return entity;
		}
		public override EduMenuDto Assemble(EduMenu entity)
		{
			EduMenuDto dto = new EduMenuDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.MenuID = entity.MenuID;
			dto.MenuText = entity.MenuText;
			dto.ParentMenuText = entity.ParentMenuText;
			dto.NavigateUrl = entity.NavigateUrl;
			dto.DisplayOrder = entity.DisplayOrder;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class AuthRoleAssembler : AuthRoleAssemblerBase, IAuthRoleAssembler
	{
	}


	public partial interface IAuthRoleAssembler : IOpenAccessAssembler<AuthRoleDto, AuthRole>
	{
	}


	public partial class AuthRoleAssemblerBase : OpenAccessAssembler<AuthRoleDto, AuthRole>
	{
		partial void OnDTOAssembled(AuthRoleDto dto);
		partial void OnEntityAssembled(AuthRole entity);


		public override AuthRole Assemble(AuthRole entity, AuthRoleDto dto)
		{
			if (entity == null)
			{
				entity = new AuthRole();
			}
			entity.RoleID = dto.RoleID;
			entity.RoleName = dto.RoleName;
			entity.AllowSetting = dto.AllowSetting;
			return entity;
		}
		public override AuthRoleDto Assemble(AuthRole entity)
		{
			AuthRoleDto dto = new AuthRoleDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.RoleID = entity.RoleID;
			dto.RoleName = entity.RoleName;
			dto.AllowSetting = entity.AllowSetting;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class AuthMenuAssembler : AuthMenuAssemblerBase, IAuthMenuAssembler
	{
	}


	public partial interface IAuthMenuAssembler : IOpenAccessAssembler<AuthMenuDto, AuthMenu>
	{
	}


	public partial class AuthMenuAssemblerBase : OpenAccessAssembler<AuthMenuDto, AuthMenu>
	{
		partial void OnDTOAssembled(AuthMenuDto dto);
		partial void OnEntityAssembled(AuthMenu entity);


		public override AuthMenu Assemble(AuthMenu entity, AuthMenuDto dto)
		{
			if (entity == null)
			{
				entity = new AuthMenu();
			}
			entity.MenuID = dto.MenuID;
			entity.AuthID = dto.AuthID;
			entity.AuthType = dto.AuthType;
			entity.EnableTime = dto.EnableTime;
			return entity;
		}
		public override AuthMenuDto Assemble(AuthMenu entity)
		{
			AuthMenuDto dto = new AuthMenuDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.MenuID = entity.MenuID;
			dto.AuthID = entity.AuthID;
			dto.AuthType = entity.AuthType;
			dto.EnableTime = entity.EnableTime;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class AccountRoleAssembler : AccountRoleAssemblerBase, IAccountRoleAssembler
	{
	}


	public partial interface IAccountRoleAssembler : IOpenAccessAssembler<AccountRoleDto, AccountRole>
	{
	}


	public partial class AccountRoleAssemblerBase : OpenAccessAssembler<AccountRoleDto, AccountRole>
	{
		partial void OnDTOAssembled(AccountRoleDto dto);
		partial void OnEntityAssembled(AccountRole entity);


		public override AccountRole Assemble(AccountRole entity, AccountRoleDto dto)
		{
			if (entity == null)
			{
				entity = new AccountRole();
			}
			entity.EmpCode = dto.EmpCode;
			entity.RoleID = dto.RoleID;
			return entity;
		}
		public override AccountRoleDto Assemble(AccountRole entity)
		{
			AccountRoleDto dto = new AccountRoleDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EmpCode = entity.EmpCode;
			dto.RoleID = entity.RoleID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class V_KmuEmpAssembler : V_KmuEmpAssemblerBase, IV_KmuEmpAssembler
	{
	}


	public partial interface IV_KmuEmpAssembler : IOpenAccessAssembler<V_KmuEmpDto, V_KmuEmp>
	{
	}


	public partial class V_KmuEmpAssemblerBase : OpenAccessAssembler<V_KmuEmpDto, V_KmuEmp>
	{
		partial void OnDTOAssembled(V_KmuEmpDto dto);
		partial void OnEntityAssembled(V_KmuEmp entity);


		public override V_KmuEmp Assemble(V_KmuEmp entity, V_KmuEmpDto dto)
		{
			if (entity == null)
			{
				entity = new V_KmuEmp();
			}
			entity.Servedate = dto.Servedate;
			entity.Pwd = dto.Pwd;
			entity.Loccode = dto.Loccode;
			entity.Jobcode = dto.Jobcode;
			entity.Hospname = dto.Hospname;
			entity.Hospcode = dto.Hospcode;
			entity.Groupstatus = dto.Groupstatus;
			entity.Groupdept = dto.Groupdept;
			entity.Enddate = dto.Enddate;
			entity.Empname = dto.Empname;
			entity.Empcode7 = dto.Empcode7;
			entity.Empcode = dto.Empcode;
			entity.Email = dto.Email;
			entity.Deptname = dto.Deptname;
			entity.Deptcode = dto.Deptcode;
			entity.NONORG_ID = dto.NONORG_ID;
			entity.Idno = dto.Idno;
			entity.SCHL_JOB = dto.SCHL_JOB;
			entity.Locname = dto.Locname;
			entity.SEX = dto.SEX;
			return entity;
		}
		public override V_KmuEmpDto Assemble(V_KmuEmp entity)
		{
			V_KmuEmpDto dto = new V_KmuEmpDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Servedate = entity.Servedate;
			dto.Pwd = entity.Pwd;
			dto.Loccode = entity.Loccode;
			dto.Jobcode = entity.Jobcode;
			dto.Hospname = entity.Hospname;
			dto.Hospcode = entity.Hospcode;
			dto.Groupstatus = entity.Groupstatus;
			dto.Groupdept = entity.Groupdept;
			dto.Enddate = entity.Enddate;
			dto.Empname = entity.Empname;
			dto.Empcode7 = entity.Empcode7;
			dto.Empcode = entity.Empcode;
			dto.Email = entity.Email;
			dto.Deptname = entity.Deptname;
			dto.Deptcode = entity.Deptcode;
			dto.NONORG_ID = entity.NONORG_ID;
			dto.Idno = entity.Idno;
			dto.SCHL_JOB = entity.SCHL_JOB;
			dto.Locname = entity.Locname;
			dto.SEX = entity.SEX;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCEAssembler : FORM_INSTANCEAssemblerBase, IFORM_INSTANCEAssembler
	{
	}


	public partial interface IFORM_INSTANCEAssembler : IOpenAccessAssembler<FORM_INSTANCEDto, FORM_INSTANCE>
	{
	}


	public partial class FORM_INSTANCEAssemblerBase : OpenAccessAssembler<FORM_INSTANCEDto, FORM_INSTANCE>
	{
		partial void OnDTOAssembled(FORM_INSTANCEDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE entity);


		public override FORM_INSTANCE Assemble(FORM_INSTANCE entity, FORM_INSTANCEDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE();
			}
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.INSTANCE_NAME = dto.INSTANCE_NAME;
			entity.INSTANCE_CREATE_DATETIME = dto.INSTANCE_CREATE_DATETIME;
			entity.INSTANCE_ALTER_DATETIME = dto.INSTANCE_ALTER_DATETIME;
			entity.INSTANCE_REMARK = dto.INSTANCE_REMARK;
			entity.INSTANCE_CONTENT = dto.INSTANCE_CONTENT;
			entity.INHOSPID = dto.INHOSPID;
			entity.CREATER = dto.CREATER;
			entity.ExpireDate = dto.ExpireDate;
			entity.TargetType = dto.TargetType;
			entity.TargetID = dto.TargetID;
			entity.Status = dto.Status;
			entity.PARENT_INSTANCE_ID = dto.PARENT_INSTANCE_ID;
			entity.EvalTargetID = dto.EvalTargetID;
			entity.IsPass = dto.IsPass;
			entity.ReadDate = dto.ReadDate;
			return entity;
		}
		public override FORM_INSTANCEDto Assemble(FORM_INSTANCE entity)
		{
			FORM_INSTANCEDto dto = new FORM_INSTANCEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.INSTANCE_NAME = entity.INSTANCE_NAME;
			dto.INSTANCE_CREATE_DATETIME = entity.INSTANCE_CREATE_DATETIME;
			dto.INSTANCE_ALTER_DATETIME = entity.INSTANCE_ALTER_DATETIME;
			dto.INSTANCE_REMARK = entity.INSTANCE_REMARK;
			dto.INSTANCE_CONTENT = entity.INSTANCE_CONTENT;
			dto.INHOSPID = entity.INHOSPID;
			dto.CREATER = entity.CREATER;
			dto.ExpireDate = entity.ExpireDate;
			dto.TargetType = entity.TargetType;
			dto.TargetID = entity.TargetID;
			dto.Status = entity.Status;
			dto.PARENT_INSTANCE_ID = entity.PARENT_INSTANCE_ID;
			dto.EvalTargetID = entity.EvalTargetID;
			dto.IsPass = entity.IsPass;
			dto.ReadDate = entity.ReadDate;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCE_TARGETAssembler : FORM_INSTANCE_TARGETAssemblerBase, IFORM_INSTANCE_TARGETAssembler
	{
	}


	public partial interface IFORM_INSTANCE_TARGETAssembler : IOpenAccessAssembler<FORM_INSTANCE_TARGETDto, FORM_INSTANCE_TARGET>
	{
	}


	public partial class FORM_INSTANCE_TARGETAssemblerBase : OpenAccessAssembler<FORM_INSTANCE_TARGETDto, FORM_INSTANCE_TARGET>
	{
		partial void OnDTOAssembled(FORM_INSTANCE_TARGETDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE_TARGET entity);


		public override FORM_INSTANCE_TARGET Assemble(FORM_INSTANCE_TARGET entity, FORM_INSTANCE_TARGETDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE_TARGET();
			}
			entity.TargetID = dto.TargetID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.TargetOrder = dto.TargetOrder;
			entity.Status = dto.Status;
			entity.TargetType = dto.TargetType;
			entity.AlertTime = dto.AlertTime;
			entity.TargetSource = dto.TargetSource;
			return entity;
		}
		public override FORM_INSTANCE_TARGETDto Assemble(FORM_INSTANCE_TARGET entity)
		{
			FORM_INSTANCE_TARGETDto dto = new FORM_INSTANCE_TARGETDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TargetID = entity.TargetID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.TargetOrder = entity.TargetOrder;
			dto.Status = entity.Status;
			dto.TargetType = entity.TargetType;
			dto.AlertTime = entity.AlertTime;
			dto.TargetSource = entity.TargetSource;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATEAssembler : FORM_TEMPLATEAssemblerBase, IFORM_TEMPLATEAssembler
	{
	}


	public partial interface IFORM_TEMPLATEAssembler : IOpenAccessAssembler<FORM_TEMPLATEDto, FORM_TEMPLATE>
	{
	}


	public partial class FORM_TEMPLATEAssemblerBase : OpenAccessAssembler<FORM_TEMPLATEDto, FORM_TEMPLATE>
	{
		partial void OnDTOAssembled(FORM_TEMPLATEDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE entity);


		public override FORM_TEMPLATE Assemble(FORM_TEMPLATE entity, FORM_TEMPLATEDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE();
			}
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.PARENT_TEMPLATE_ID = dto.PARENT_TEMPLATE_ID;
			entity.TEMPLATE_NAME = dto.TEMPLATE_NAME;
			entity.TEMPLATE_CATEGORY = dto.TEMPLATE_CATEGORY;
			entity.TEMPLATE_CREATE_DATATIME = dto.TEMPLATE_CREATE_DATATIME;
			entity.TEMPLATE_ALTER_DATATIME = dto.TEMPLATE_ALTER_DATATIME;
			entity.TEMPLATE_CONTENT = dto.TEMPLATE_CONTENT;
			entity.TEMPLATE_REMARK = dto.TEMPLATE_REMARK;
			entity.TEMPLATE_TYPE = dto.TEMPLATE_TYPE;
			entity.ALLOW_ATTACHMENT = dto.ALLOW_ATTACHMENT;
			entity.SCORE_FIELD_ID = dto.SCORE_FIELD_ID;
			entity.DISPLAY_TO_EVALTARGET = dto.DISPLAY_TO_EVALTARGET;
			entity.ALERT_NEXT_MESSAGE = dto.ALERT_NEXT_MESSAGE;
			entity.ENABLED = dto.ENABLED;
			entity.ALLOW_NEXT_TARGET_EDIT = dto.ALLOW_NEXT_TARGET_EDIT;
			entity.IS_USER_DEFINE_TARGET = dto.IS_USER_DEFINE_TARGET;
			entity.NEEDPASS = dto.NEEDPASS;
			entity.ALLOW_RETURN = dto.ALLOW_RETURN;
			entity.ALLOW_TAKEBACK = dto.ALLOW_TAKEBACK;
			entity.ALLOW_VIEW_EVALTARGETDATA = dto.ALLOW_VIEW_EVALTARGETDATA;
			return entity;
		}
		public override FORM_TEMPLATEDto Assemble(FORM_TEMPLATE entity)
		{
			FORM_TEMPLATEDto dto = new FORM_TEMPLATEDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.PARENT_TEMPLATE_ID = entity.PARENT_TEMPLATE_ID;
			dto.TEMPLATE_NAME = entity.TEMPLATE_NAME;
			dto.TEMPLATE_CATEGORY = entity.TEMPLATE_CATEGORY;
			dto.TEMPLATE_CREATE_DATATIME = entity.TEMPLATE_CREATE_DATATIME;
			dto.TEMPLATE_ALTER_DATATIME = entity.TEMPLATE_ALTER_DATATIME;
			dto.TEMPLATE_CONTENT = entity.TEMPLATE_CONTENT;
			dto.TEMPLATE_REMARK = entity.TEMPLATE_REMARK;
			dto.TEMPLATE_TYPE = entity.TEMPLATE_TYPE;
			dto.ALLOW_ATTACHMENT = entity.ALLOW_ATTACHMENT;
			dto.SCORE_FIELD_ID = entity.SCORE_FIELD_ID;
			dto.DISPLAY_TO_EVALTARGET = entity.DISPLAY_TO_EVALTARGET;
			dto.ALERT_NEXT_MESSAGE = entity.ALERT_NEXT_MESSAGE;
			dto.ENABLED = entity.ENABLED;
			dto.ALLOW_NEXT_TARGET_EDIT = entity.ALLOW_NEXT_TARGET_EDIT;
			dto.IS_USER_DEFINE_TARGET = entity.IS_USER_DEFINE_TARGET;
			dto.NEEDPASS = entity.NEEDPASS;
			dto.ALLOW_RETURN = entity.ALLOW_RETURN;
			dto.ALLOW_TAKEBACK = entity.ALLOW_TAKEBACK;
			dto.ALLOW_VIEW_EVALTARGETDATA = entity.ALLOW_VIEW_EVALTARGETDATA;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class MessageBoardAssembler : MessageBoardAssemblerBase, IMessageBoardAssembler
	{
	}


	public partial interface IMessageBoardAssembler : IOpenAccessAssembler<MessageBoardDto, MessageBoard>
	{
	}


	public partial class MessageBoardAssemblerBase : OpenAccessAssembler<MessageBoardDto, MessageBoard>
	{
		partial void OnDTOAssembled(MessageBoardDto dto);
		partial void OnEntityAssembled(MessageBoard entity);


		public override MessageBoard Assemble(MessageBoard entity, MessageBoardDto dto)
		{
			if (entity == null)
			{
				entity = new MessageBoard();
			}
			entity.MessageID = dto.MessageID;
			entity.EMP_CODE = dto.EMP_CODE;
			entity.MessageTitle = dto.MessageTitle;
			entity.MessageContent = dto.MessageContent;
			entity.SendTime = dto.SendTime;
			entity.ParentMessageID = dto.ParentMessageID;
			entity.ReadCount = dto.ReadCount;
			entity.IsPublic = dto.IsPublic;
			entity.Status = dto.Status;
			entity.JobCode = dto.JobCode;
			entity.MessageType = dto.MessageType;
			return entity;
		}
		public override MessageBoardDto Assemble(MessageBoard entity)
		{
			MessageBoardDto dto = new MessageBoardDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.MessageID = entity.MessageID;
			dto.EMP_CODE = entity.EMP_CODE;
			dto.MessageTitle = entity.MessageTitle;
			dto.MessageContent = entity.MessageContent;
			dto.SendTime = entity.SendTime;
			dto.ParentMessageID = entity.ParentMessageID;
			dto.ReadCount = entity.ReadCount;
			dto.IsPublic = entity.IsPublic;
			dto.Status = entity.Status;
			dto.JobCode = entity.JobCode;
			dto.MessageType = entity.MessageType;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class AutoEduFormTemplateExceptAssembler : AutoEduFormTemplateExceptAssemblerBase, IAutoEduFormTemplateExceptAssembler
	{
	}


	public partial interface IAutoEduFormTemplateExceptAssembler : IOpenAccessAssembler<AutoEduFormTemplateExceptDto, AutoEduFormTemplateExcept>
	{
	}


	public partial class AutoEduFormTemplateExceptAssemblerBase : OpenAccessAssembler<AutoEduFormTemplateExceptDto, AutoEduFormTemplateExcept>
	{
		partial void OnDTOAssembled(AutoEduFormTemplateExceptDto dto);
		partial void OnEntityAssembled(AutoEduFormTemplateExcept entity);


		public override AutoEduFormTemplateExcept Assemble(AutoEduFormTemplateExcept entity, AutoEduFormTemplateExceptDto dto)
		{
			if (entity == null)
			{
				entity = new AutoEduFormTemplateExcept();
			}
			entity.AutoFTListID = dto.AutoFTListID;
			entity.ExceptType = dto.ExceptType;
			entity.ExceptKey = dto.ExceptKey;
			return entity;
		}
		public override AutoEduFormTemplateExceptDto Assemble(AutoEduFormTemplateExcept entity)
		{
			AutoEduFormTemplateExceptDto dto = new AutoEduFormTemplateExceptDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.AutoFTListID = entity.AutoFTListID;
			dto.ExceptType = entity.ExceptType;
			dto.ExceptKey = entity.ExceptKey;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_ELEMENTAssembler : FORM_TEMPLATE_ELEMENTAssemblerBase, IFORM_TEMPLATE_ELEMENTAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_ELEMENTAssembler : IOpenAccessAssembler<FORM_TEMPLATE_ELEMENTDto, FORM_TEMPLATE_ELEMENT>
	{
	}


	public partial class FORM_TEMPLATE_ELEMENTAssemblerBase : OpenAccessAssembler<FORM_TEMPLATE_ELEMENTDto, FORM_TEMPLATE_ELEMENT>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_ELEMENTDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_ELEMENT entity);


		public override FORM_TEMPLATE_ELEMENT Assemble(FORM_TEMPLATE_ELEMENT entity, FORM_TEMPLATE_ELEMENTDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_ELEMENT();
			}
			entity.TEMPLATE_ELEMENT_ID = dto.TEMPLATE_ELEMENT_ID;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.ID = dto.ID;
			entity.NAME = dto.NAME;
			entity.CONTROL_TYPE = dto.CONTROL_TYPE;
			entity.DATA_TYPE = dto.DATA_TYPE;
			entity.POINTS = dto.POINTS;
			entity.DISPLAY_NAME = dto.DISPLAY_NAME;
			entity.GROUP_ID = dto.GROUP_ID;
			entity.MAXPOINT = dto.MAXPOINT;
			entity.ISHIDE = dto.ISHIDE;
			entity.BINDVALUE = dto.BINDVALUE;
			entity.BINDSQL = dto.BINDSQL;
			entity.ALLOWOVER = dto.ALLOWOVER;
			entity.MinTextCount = dto.MinTextCount;
			entity.MaxTextCount = dto.MaxTextCount;
			return entity;
		}
		public override FORM_TEMPLATE_ELEMENTDto Assemble(FORM_TEMPLATE_ELEMENT entity)
		{
			FORM_TEMPLATE_ELEMENTDto dto = new FORM_TEMPLATE_ELEMENTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ELEMENT_ID = entity.TEMPLATE_ELEMENT_ID;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.ID = entity.ID;
			dto.NAME = entity.NAME;
			dto.CONTROL_TYPE = entity.CONTROL_TYPE;
			dto.DATA_TYPE = entity.DATA_TYPE;
			dto.POINTS = entity.POINTS;
			dto.DISPLAY_NAME = entity.DISPLAY_NAME;
			dto.GROUP_ID = entity.GROUP_ID;
			dto.MAXPOINT = entity.MAXPOINT;
			dto.ISHIDE = entity.ISHIDE;
			dto.BINDVALUE = entity.BINDVALUE;
			dto.BINDSQL = entity.BINDSQL;
			dto.ALLOWOVER = entity.ALLOWOVER;
			dto.MinTextCount = entity.MinTextCount;
			dto.MaxTextCount = entity.MaxTextCount;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCE_ELEMENTAssembler : FORM_INSTANCE_ELEMENTAssemblerBase, IFORM_INSTANCE_ELEMENTAssembler
	{
	}


	public partial interface IFORM_INSTANCE_ELEMENTAssembler : IOpenAccessAssembler<FORM_INSTANCE_ELEMENTDto, FORM_INSTANCE_ELEMENT>
	{
	}


	public partial class FORM_INSTANCE_ELEMENTAssemblerBase : OpenAccessAssembler<FORM_INSTANCE_ELEMENTDto, FORM_INSTANCE_ELEMENT>
	{
		partial void OnDTOAssembled(FORM_INSTANCE_ELEMENTDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE_ELEMENT entity);


		public override FORM_INSTANCE_ELEMENT Assemble(FORM_INSTANCE_ELEMENT entity, FORM_INSTANCE_ELEMENTDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE_ELEMENT();
			}
			entity.INSTANCE_ELEMENT_ID = dto.INSTANCE_ELEMENT_ID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.ID = dto.ID;
			entity.NAME = dto.NAME;
			entity.ELEMENT_VALUE = dto.ELEMENT_VALUE;
			entity.SELECT_VALUE = dto.SELECT_VALUE;
			return entity;
		}
		public override FORM_INSTANCE_ELEMENTDto Assemble(FORM_INSTANCE_ELEMENT entity)
		{
			FORM_INSTANCE_ELEMENTDto dto = new FORM_INSTANCE_ELEMENTDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.INSTANCE_ELEMENT_ID = entity.INSTANCE_ELEMENT_ID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.ID = entity.ID;
			dto.NAME = entity.NAME;
			dto.ELEMENT_VALUE = entity.ELEMENT_VALUE;
			dto.SELECT_VALUE = entity.SELECT_VALUE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduFormStasticPermissionAssembler : EduFormStasticPermissionAssemblerBase, IEduFormStasticPermissionAssembler
	{
	}


	public partial interface IEduFormStasticPermissionAssembler : IOpenAccessAssembler<EduFormStasticPermissionDto, EduFormStasticPermission>
	{
	}


	public partial class EduFormStasticPermissionAssemblerBase : OpenAccessAssembler<EduFormStasticPermissionDto, EduFormStasticPermission>
	{
		partial void OnDTOAssembled(EduFormStasticPermissionDto dto);
		partial void OnEntityAssembled(EduFormStasticPermission entity);


		public override EduFormStasticPermission Assemble(EduFormStasticPermission entity, EduFormStasticPermissionDto dto)
		{
			if (entity == null)
			{
				entity = new EduFormStasticPermission();
			}
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.RoleID = dto.RoleID;
			entity.Enable = dto.Enable;
			return entity;
		}
		public override EduFormStasticPermissionDto Assemble(EduFormStasticPermission entity)
		{
			EduFormStasticPermissionDto dto = new EduFormStasticPermissionDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.RoleID = entity.RoleID;
			dto.Enable = entity.Enable;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class DepSecDatumAssembler : DepSecDatumAssemblerBase, IDepSecDatumAssembler
	{
	}


	public partial interface IDepSecDatumAssembler : IOpenAccessAssembler<DepSecDatumDto, DepSecDatum>
	{
	}


	public partial class DepSecDatumAssemblerBase : OpenAccessAssembler<DepSecDatumDto, DepSecDatum>
	{
		partial void OnDTOAssembled(DepSecDatumDto dto);
		partial void OnEntityAssembled(DepSecDatum entity);


		public override DepSecDatum Assemble(DepSecDatum entity, DepSecDatumDto dto)
		{
			if (entity == null)
			{
				entity = new DepSecDatum();
			}
			entity.Emp_Code = dto.Emp_Code;
			entity.DEPT_CODE = dto.DEPT_CODE;
			return entity;
		}
		public override DepSecDatumDto Assemble(DepSecDatum entity)
		{
			DepSecDatumDto dto = new DepSecDatumDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Emp_Code = entity.Emp_Code;
			dto.DEPT_CODE = entity.DEPT_CODE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TeachTimeTypeAssembler : TeachTimeTypeAssemblerBase, ITeachTimeTypeAssembler
	{
	}


	public partial interface ITeachTimeTypeAssembler : IOpenAccessAssembler<TeachTimeTypeDto, TeachTimeType>
	{
	}


	public partial class TeachTimeTypeAssemblerBase : OpenAccessAssembler<TeachTimeTypeDto, TeachTimeType>
	{
		partial void OnDTOAssembled(TeachTimeTypeDto dto);
		partial void OnEntityAssembled(TeachTimeType entity);


		public override TeachTimeType Assemble(TeachTimeType entity, TeachTimeTypeDto dto)
		{
			if (entity == null)
			{
				entity = new TeachTimeType();
			}
			entity.SettingType = dto.SettingType;
			entity.NeedAttachment = dto.NeedAttachment;
			entity.NeedMember = dto.NeedMember;
			entity.Disable = dto.Disable;
			entity.LoadFormData = dto.LoadFormData;
			entity.AllowKPI = dto.AllowKPI;
			return entity;
		}
		public override TeachTimeTypeDto Assemble(TeachTimeType entity)
		{
			TeachTimeTypeDto dto = new TeachTimeTypeDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SettingType = entity.SettingType;
			dto.NeedAttachment = entity.NeedAttachment;
			dto.NeedMember = entity.NeedMember;
			dto.Disable = entity.Disable;
			dto.LoadFormData = entity.LoadFormData;
			dto.AllowKPI = entity.AllowKPI;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TeachTimeRateAssembler : TeachTimeRateAssemblerBase, ITeachTimeRateAssembler
	{
	}


	public partial interface ITeachTimeRateAssembler : IOpenAccessAssembler<TeachTimeRateDto, TeachTimeRate>
	{
	}


	public partial class TeachTimeRateAssemblerBase : OpenAccessAssembler<TeachTimeRateDto, TeachTimeRate>
	{
		partial void OnDTOAssembled(TeachTimeRateDto dto);
		partial void OnEntityAssembled(TeachTimeRate entity);


		public override TeachTimeRate Assemble(TeachTimeRate entity, TeachTimeRateDto dto)
		{
			if (entity == null)
			{
				entity = new TeachTimeRate();
			}
			entity.SettingID = dto.SettingID;
			entity.SettingType = dto.SettingType;
			entity.SettingCode = dto.SettingCode;
			entity.CodeType = dto.CodeType;
			entity.Rate1 = dto.Rate1;
			entity.Rate2 = dto.Rate2;
			entity.Unit = dto.Unit;
			entity.RefID = dto.RefID;
			entity.EnableDate = dto.EnableDate;
			entity.DisableDate = dto.DisableDate;
			return entity;
		}
		public override TeachTimeRateDto Assemble(TeachTimeRate entity)
		{
			TeachTimeRateDto dto = new TeachTimeRateDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SettingID = entity.SettingID;
			dto.SettingType = entity.SettingType;
			dto.SettingCode = entity.SettingCode;
			dto.CodeType = entity.CodeType;
			dto.Rate1 = entity.Rate1;
			dto.Rate2 = entity.Rate2;
			dto.Unit = entity.Unit;
			dto.RefID = entity.RefID;
			dto.EnableDate = entity.EnableDate;
			dto.DisableDate = entity.DisableDate;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class NewsViewTargetAssembler : NewsViewTargetAssemblerBase, INewsViewTargetAssembler
	{
	}


	public partial interface INewsViewTargetAssembler : IOpenAccessAssembler<NewsViewTargetDto, NewsViewTarget>
	{
	}


	public partial class NewsViewTargetAssemblerBase : OpenAccessAssembler<NewsViewTargetDto, NewsViewTarget>
	{
		partial void OnDTOAssembled(NewsViewTargetDto dto);
		partial void OnEntityAssembled(NewsViewTarget entity);


		public override NewsViewTarget Assemble(NewsViewTarget entity, NewsViewTargetDto dto)
		{
			if (entity == null)
			{
				entity = new NewsViewTarget();
			}
			entity.NEWID = dto.NEWID;
			entity.TargetType = dto.TargetType;
			entity.TargetID = dto.TargetID;
			entity.CanRead = dto.CanRead;
			return entity;
		}
		public override NewsViewTargetDto Assemble(NewsViewTarget entity)
		{
			NewsViewTargetDto dto = new NewsViewTargetDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.NEWID = entity.NEWID;
			dto.TargetType = entity.TargetType;
			dto.TargetID = entity.TargetID;
			dto.CanRead = entity.CanRead;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class HealTeachTimeAssembler : HealTeachTimeAssemblerBase, IHealTeachTimeAssembler
	{
	}


	public partial interface IHealTeachTimeAssembler : IOpenAccessAssembler<HealTeachTimeDto, HealTeachTime>
	{
	}


	public partial class HealTeachTimeAssemblerBase : OpenAccessAssembler<HealTeachTimeDto, HealTeachTime>
	{
		partial void OnDTOAssembled(HealTeachTimeDto dto);
		partial void OnEntityAssembled(HealTeachTime entity);


		public override HealTeachTime Assemble(HealTeachTime entity, HealTeachTimeDto dto)
		{
			if (entity == null)
			{
				entity = new HealTeachTime();
			}
			entity.EmpCode = dto.EmpCode;
			entity.DataDate = dto.DataDate;
			entity.DeptCode = dto.DeptCode;
			entity.ActType = dto.ActType;
			entity.TargetType = dto.TargetType;
			entity.TeachTime = dto.TeachTime;
			entity.ID = dto.ID;
			entity.HospCode = dto.HospCode;
			entity.CreateTime = dto.CreateTime;
			entity.Creater = dto.Creater;
			return entity;
		}
		public override HealTeachTimeDto Assemble(HealTeachTime entity)
		{
			HealTeachTimeDto dto = new HealTeachTimeDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EmpCode = entity.EmpCode;
			dto.DataDate = entity.DataDate;
			dto.DeptCode = entity.DeptCode;
			dto.ActType = entity.ActType;
			dto.TargetType = entity.TargetType;
			dto.TeachTime = entity.TeachTime;
			dto.ID = entity.ID;
			dto.HospCode = entity.HospCode;
			dto.CreateTime = entity.CreateTime;
			dto.Creater = entity.Creater;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ScoreSettingJobAssembler : ScoreSettingJobAssemblerBase, IScoreSettingJobAssembler
	{
	}


	public partial interface IScoreSettingJobAssembler : IOpenAccessAssembler<ScoreSettingJobDto, ScoreSettingJob>
	{
	}


	public partial class ScoreSettingJobAssemblerBase : OpenAccessAssembler<ScoreSettingJobDto, ScoreSettingJob>
	{
		partial void OnDTOAssembled(ScoreSettingJobDto dto);
		partial void OnEntityAssembled(ScoreSettingJob entity);


		public override ScoreSettingJob Assemble(ScoreSettingJob entity, ScoreSettingJobDto dto)
		{
			if (entity == null)
			{
				entity = new ScoreSettingJob();
			}
			entity.SettingID = dto.SettingID;
			entity.JobCode = dto.JobCode;
			return entity;
		}
		public override ScoreSettingJobDto Assemble(ScoreSettingJob entity)
		{
			ScoreSettingJobDto dto = new ScoreSettingJobDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SettingID = entity.SettingID;
			dto.JobCode = entity.JobCode;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ScoreSettingDetailAssembler : ScoreSettingDetailAssemblerBase, IScoreSettingDetailAssembler
	{
	}


	public partial interface IScoreSettingDetailAssembler : IOpenAccessAssembler<ScoreSettingDetailDto, ScoreSettingDetail>
	{
	}


	public partial class ScoreSettingDetailAssemblerBase : OpenAccessAssembler<ScoreSettingDetailDto, ScoreSettingDetail>
	{
		partial void OnDTOAssembled(ScoreSettingDetailDto dto);
		partial void OnEntityAssembled(ScoreSettingDetail entity);


		public override ScoreSettingDetail Assemble(ScoreSettingDetail entity, ScoreSettingDetailDto dto)
		{
			if (entity == null)
			{
				entity = new ScoreSettingDetail();
			}
			entity.SettingID = dto.SettingID;
			entity.ValueType = dto.ValueType;
			entity.ValueID = dto.ValueID;
			entity.ValueParameter = dto.ValueParameter;
			entity.ScorePercent = dto.ScorePercent;
			entity.ValueName = dto.ValueName;
			entity.DisplayOrder = dto.DisplayOrder;
			entity.ScoreType = dto.ScoreType;
			return entity;
		}
		public override ScoreSettingDetailDto Assemble(ScoreSettingDetail entity)
		{
			ScoreSettingDetailDto dto = new ScoreSettingDetailDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SettingID = entity.SettingID;
			dto.ValueType = entity.ValueType;
			dto.ValueID = entity.ValueID;
			dto.ValueParameter = entity.ValueParameter;
			dto.ScorePercent = entity.ScorePercent;
			dto.ValueName = entity.ValueName;
			dto.DisplayOrder = entity.DisplayOrder;
			dto.ScoreType = entity.ScoreType;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ScoreSettingAssembler : ScoreSettingAssemblerBase, IScoreSettingAssembler
	{
	}


	public partial interface IScoreSettingAssembler : IOpenAccessAssembler<ScoreSettingDto, ScoreSetting>
	{
	}


	public partial class ScoreSettingAssemblerBase : OpenAccessAssembler<ScoreSettingDto, ScoreSetting>
	{
		partial void OnDTOAssembled(ScoreSettingDto dto);
		partial void OnEntityAssembled(ScoreSetting entity);


		public override ScoreSetting Assemble(ScoreSetting entity, ScoreSettingDto dto)
		{
			if (entity == null)
			{
				entity = new ScoreSetting();
			}
			entity.SettingID = dto.SettingID;
			entity.DeptCode = dto.DeptCode;
			entity.SettingName = dto.SettingName;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			entity.Modifier = dto.Modifier;
			entity.ModifyDate = dto.ModifyDate;
			return entity;
		}
		public override ScoreSettingDto Assemble(ScoreSetting entity)
		{
			ScoreSettingDto dto = new ScoreSettingDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SettingID = entity.SettingID;
			dto.DeptCode = entity.DeptCode;
			dto.SettingName = entity.SettingName;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			dto.Modifier = entity.Modifier;
			dto.ModifyDate = entity.ModifyDate;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ScoreInstanceDetailAssembler : ScoreInstanceDetailAssemblerBase, IScoreInstanceDetailAssembler
	{
	}


	public partial interface IScoreInstanceDetailAssembler : IOpenAccessAssembler<ScoreInstanceDetailDto, ScoreInstanceDetail>
	{
	}


	public partial class ScoreInstanceDetailAssemblerBase : OpenAccessAssembler<ScoreInstanceDetailDto, ScoreInstanceDetail>
	{
		partial void OnDTOAssembled(ScoreInstanceDetailDto dto);
		partial void OnEntityAssembled(ScoreInstanceDetail entity);


		public override ScoreInstanceDetail Assemble(ScoreInstanceDetail entity, ScoreInstanceDetailDto dto)
		{
			if (entity == null)
			{
				entity = new ScoreInstanceDetail();
			}
			entity.InstanceDetailID = dto.InstanceDetailID;
			entity.InstanceID = dto.InstanceID;
			entity.SettingID = dto.SettingID;
			entity.ValueType = dto.ValueType;
			entity.ValueID = dto.ValueID;
			entity.TargetID = dto.TargetID;
			entity.Score = dto.Score;
			entity.Modifier = dto.Modifier;
			entity.ModifyDate = dto.ModifyDate;
			entity.ScorePercent = dto.ScorePercent;
			return entity;
		}
		public override ScoreInstanceDetailDto Assemble(ScoreInstanceDetail entity)
		{
			ScoreInstanceDetailDto dto = new ScoreInstanceDetailDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.InstanceDetailID = entity.InstanceDetailID;
			dto.InstanceID = entity.InstanceID;
			dto.SettingID = entity.SettingID;
			dto.ValueType = entity.ValueType;
			dto.ValueID = entity.ValueID;
			dto.TargetID = entity.TargetID;
			dto.Score = entity.Score;
			dto.Modifier = entity.Modifier;
			dto.ModifyDate = entity.ModifyDate;
			dto.ScorePercent = entity.ScorePercent;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ScoreInstanceAssembler : ScoreInstanceAssemblerBase, IScoreInstanceAssembler
	{
	}


	public partial interface IScoreInstanceAssembler : IOpenAccessAssembler<ScoreInstanceDto, ScoreInstance>
	{
	}


	public partial class ScoreInstanceAssemblerBase : OpenAccessAssembler<ScoreInstanceDto, ScoreInstance>
	{
		partial void OnDTOAssembled(ScoreInstanceDto dto);
		partial void OnEntityAssembled(ScoreInstance entity);


		public override ScoreInstance Assemble(ScoreInstance entity, ScoreInstanceDto dto)
		{
			if (entity == null)
			{
				entity = new ScoreInstance();
			}
			entity.InstanceID = dto.InstanceID;
			entity.SettingID = dto.SettingID;
			entity.DataSDate = dto.DataSDate;
			entity.DataEDate = dto.DataEDate;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			entity.ModifyDate = dto.ModifyDate;
			entity.Modifier = dto.Modifier;
			return entity;
		}
		public override ScoreInstanceDto Assemble(ScoreInstance entity)
		{
			ScoreInstanceDto dto = new ScoreInstanceDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.InstanceID = entity.InstanceID;
			dto.SettingID = entity.SettingID;
			dto.DataSDate = entity.DataSDate;
			dto.DataEDate = entity.DataEDate;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			dto.ModifyDate = entity.ModifyDate;
			dto.Modifier = entity.Modifier;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class HealTeachTimeRateAssembler : HealTeachTimeRateAssemblerBase, IHealTeachTimeRateAssembler
	{
	}


	public partial interface IHealTeachTimeRateAssembler : IOpenAccessAssembler<HealTeachTimeRateDto, HealTeachTimeRate>
	{
	}


	public partial class HealTeachTimeRateAssemblerBase : OpenAccessAssembler<HealTeachTimeRateDto, HealTeachTimeRate>
	{
		partial void OnDTOAssembled(HealTeachTimeRateDto dto);
		partial void OnEntityAssembled(HealTeachTimeRate entity);


		public override HealTeachTimeRate Assemble(HealTeachTimeRate entity, HealTeachTimeRateDto dto)
		{
			if (entity == null)
			{
				entity = new HealTeachTimeRate();
			}
			entity.SettingID = dto.SettingID;
			entity.ActType = dto.ActType;
			entity.Rate1 = dto.Rate1;
			entity.Rate2 = dto.Rate2;
			entity.WeekLimit = dto.WeekLimit;
			return entity;
		}
		public override HealTeachTimeRateDto Assemble(HealTeachTimeRate entity)
		{
			HealTeachTimeRateDto dto = new HealTeachTimeRateDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.SettingID = entity.SettingID;
			dto.ActType = entity.ActType;
			dto.Rate1 = entity.Rate1;
			dto.Rate2 = entity.Rate2;
			dto.WeekLimit = entity.WeekLimit;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduActTypeRefAssembler : EduActTypeRefAssemblerBase, IEduActTypeRefAssembler
	{
	}


	public partial interface IEduActTypeRefAssembler : IOpenAccessAssembler<EduActTypeRefDto, EduActTypeRef>
	{
	}


	public partial class EduActTypeRefAssemblerBase : OpenAccessAssembler<EduActTypeRefDto, EduActTypeRef>
	{
		partial void OnDTOAssembled(EduActTypeRefDto dto);
		partial void OnEntityAssembled(EduActTypeRef entity);


		public override EduActTypeRef Assemble(EduActTypeRef entity, EduActTypeRefDto dto)
		{
			if (entity == null)
			{
				entity = new EduActTypeRef();
			}
			entity.EduStopActScheduleID = dto.EduStopActScheduleID;
			entity.CLS_ID = dto.CLS_ID;
			return entity;
		}
		public override EduActTypeRefDto Assemble(EduActTypeRef entity)
		{
			EduActTypeRefDto dto = new EduActTypeRefDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EduStopActScheduleID = entity.EduStopActScheduleID;
			dto.CLS_ID = entity.CLS_ID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduActBookingAssembler : EduActBookingAssemblerBase, IEduActBookingAssembler
	{
	}


	public partial interface IEduActBookingAssembler : IOpenAccessAssembler<EduActBookingDto, EduActBooking>
	{
	}


	public partial class EduActBookingAssemblerBase : OpenAccessAssembler<EduActBookingDto, EduActBooking>
	{
		partial void OnDTOAssembled(EduActBookingDto dto);
		partial void OnEntityAssembled(EduActBooking entity);


		public override EduActBooking Assemble(EduActBooking entity, EduActBookingDto dto)
		{
			if (entity == null)
			{
				entity = new EduActBooking();
			}
			entity.EduStopActScheduleID = dto.EduStopActScheduleID;
			entity.EmpCode = dto.EmpCode;
			entity.BookingID = dto.BookingID;
			return entity;
		}
		public override EduActBookingDto Assemble(EduActBooking entity)
		{
			EduActBookingDto dto = new EduActBookingDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EduStopActScheduleID = entity.EduStopActScheduleID;
			dto.EmpCode = entity.EmpCode;
			dto.BookingID = entity.BookingID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ElearningItemAssembler : ElearningItemAssemblerBase, IElearningItemAssembler
	{
	}


	public partial interface IElearningItemAssembler : IOpenAccessAssembler<ElearningItemDto, ElearningItem>
	{
	}


	public partial class ElearningItemAssemblerBase : OpenAccessAssembler<ElearningItemDto, ElearningItem>
	{
		partial void OnDTOAssembled(ElearningItemDto dto);
		partial void OnEntityAssembled(ElearningItem entity);


		public override ElearningItem Assemble(ElearningItem entity, ElearningItemDto dto)
		{
			if (entity == null)
			{
				entity = new ElearningItem();
			}
			entity.ItemID = dto.ItemID;
			entity.ClassID = dto.ClassID;
			entity.ItemName = dto.ItemName;
			entity.ItemOrder = dto.ItemOrder;
			entity.ExItemID = dto.ExItemID;
			entity.ItemType = dto.ItemType;
			entity.RefID = dto.RefID;
			entity.RefUrl = dto.RefUrl;
			entity.MaxExamTimes = dto.MaxExamTimes;
			return entity;
		}
		public override ElearningItemDto Assemble(ElearningItem entity)
		{
			ElearningItemDto dto = new ElearningItemDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ItemID = entity.ItemID;
			dto.ClassID = entity.ClassID;
			dto.ItemName = entity.ItemName;
			dto.ItemOrder = entity.ItemOrder;
			dto.ExItemID = entity.ExItemID;
			dto.ItemType = entity.ItemType;
			dto.RefID = entity.RefID;
			dto.RefUrl = entity.RefUrl;
			dto.MaxExamTimes = entity.MaxExamTimes;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ElearningEmpItemLogAssembler : ElearningEmpItemLogAssemblerBase, IElearningEmpItemLogAssembler
	{
	}


	public partial interface IElearningEmpItemLogAssembler : IOpenAccessAssembler<ElearningEmpItemLogDto, ElearningEmpItemLog>
	{
	}


	public partial class ElearningEmpItemLogAssemblerBase : OpenAccessAssembler<ElearningEmpItemLogDto, ElearningEmpItemLog>
	{
		partial void OnDTOAssembled(ElearningEmpItemLogDto dto);
		partial void OnEntityAssembled(ElearningEmpItemLog entity);


		public override ElearningEmpItemLog Assemble(ElearningEmpItemLog entity, ElearningEmpItemLogDto dto)
		{
			if (entity == null)
			{
				entity = new ElearningEmpItemLog();
			}
			entity.ItemID = dto.ItemID;
			entity.EmpCode = dto.EmpCode;
			entity.RefID = dto.RefID;
			entity.ExecuteTime = dto.ExecuteTime;
			entity.Status = dto.Status;
			entity.ExecuteTimes = dto.ExecuteTimes;
			return entity;
		}
		public override ElearningEmpItemLogDto Assemble(ElearningEmpItemLog entity)
		{
			ElearningEmpItemLogDto dto = new ElearningEmpItemLogDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ItemID = entity.ItemID;
			dto.EmpCode = entity.EmpCode;
			dto.RefID = entity.RefID;
			dto.ExecuteTime = entity.ExecuteTime;
			dto.Status = entity.Status;
			dto.ExecuteTimes = entity.ExecuteTimes;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ElearningEmpItemAssembler : ElearningEmpItemAssemblerBase, IElearningEmpItemAssembler
	{
	}


	public partial interface IElearningEmpItemAssembler : IOpenAccessAssembler<ElearningEmpItemDto, ElearningEmpItem>
	{
	}


	public partial class ElearningEmpItemAssemblerBase : OpenAccessAssembler<ElearningEmpItemDto, ElearningEmpItem>
	{
		partial void OnDTOAssembled(ElearningEmpItemDto dto);
		partial void OnEntityAssembled(ElearningEmpItem entity);


		public override ElearningEmpItem Assemble(ElearningEmpItem entity, ElearningEmpItemDto dto)
		{
			if (entity == null)
			{
				entity = new ElearningEmpItem();
			}
			entity.ItemID = dto.ItemID;
			entity.EmpCode = dto.EmpCode;
			entity.RefID = dto.RefID;
			entity.ExecuteTime = dto.ExecuteTime;
			entity.Status = dto.Status;
			return entity;
		}
		public override ElearningEmpItemDto Assemble(ElearningEmpItem entity)
		{
			ElearningEmpItemDto dto = new ElearningEmpItemDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ItemID = entity.ItemID;
			dto.EmpCode = entity.EmpCode;
			dto.RefID = entity.RefID;
			dto.ExecuteTime = entity.ExecuteTime;
			dto.Status = entity.Status;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ElearningClassAssembler : ElearningClassAssemblerBase, IElearningClassAssembler
	{
	}


	public partial interface IElearningClassAssembler : IOpenAccessAssembler<ElearningClassDto, ElearningClass>
	{
	}


	public partial class ElearningClassAssemblerBase : OpenAccessAssembler<ElearningClassDto, ElearningClass>
	{
		partial void OnDTOAssembled(ElearningClassDto dto);
		partial void OnEntityAssembled(ElearningClass entity);


		public override ElearningClass Assemble(ElearningClass entity, ElearningClassDto dto)
		{
			if (entity == null)
			{
				entity = new ElearningClass();
			}
			entity.ClassID = dto.ClassID;
			entity.ClassName = dto.ClassName;
			entity.AllowBooking = dto.AllowBooking;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			entity.SDate = dto.SDate;
			entity.EDate = dto.EDate;
			entity.Status = dto.Status;
			return entity;
		}
		public override ElearningClassDto Assemble(ElearningClass entity)
		{
			ElearningClassDto dto = new ElearningClassDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ClassID = entity.ClassID;
			dto.ClassName = entity.ClassName;
			dto.AllowBooking = entity.AllowBooking;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			dto.SDate = entity.SDate;
			dto.EDate = entity.EDate;
			dto.Status = entity.Status;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ElearningBookingAssembler : ElearningBookingAssemblerBase, IElearningBookingAssembler
	{
	}


	public partial interface IElearningBookingAssembler : IOpenAccessAssembler<ElearningBookingDto, ElearningBooking>
	{
	}


	public partial class ElearningBookingAssemblerBase : OpenAccessAssembler<ElearningBookingDto, ElearningBooking>
	{
		partial void OnDTOAssembled(ElearningBookingDto dto);
		partial void OnEntityAssembled(ElearningBooking entity);


		public override ElearningBooking Assemble(ElearningBooking entity, ElearningBookingDto dto)
		{
			if (entity == null)
			{
				entity = new ElearningBooking();
			}
			entity.ClassID = dto.ClassID;
			entity.EmpCode = dto.EmpCode;
			entity.BookTime = dto.BookTime;
			entity.Status = dto.Status;
			return entity;
		}
		public override ElearningBookingDto Assemble(ElearningBooking entity)
		{
			ElearningBookingDto dto = new ElearningBookingDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ClassID = entity.ClassID;
			dto.EmpCode = entity.EmpCode;
			dto.BookTime = entity.BookTime;
			dto.Status = entity.Status;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PassPortStudentApplicationItemAssembler : PassPortStudentApplicationItemAssemblerBase, IPassPortStudentApplicationItemAssembler
	{
	}


	public partial interface IPassPortStudentApplicationItemAssembler : IOpenAccessAssembler<PassPortStudentApplicationItemDto, PassPortStudentApplicationItem>
	{
	}


	public partial class PassPortStudentApplicationItemAssemblerBase : OpenAccessAssembler<PassPortStudentApplicationItemDto, PassPortStudentApplicationItem>
	{
		partial void OnDTOAssembled(PassPortStudentApplicationItemDto dto);
		partial void OnEntityAssembled(PassPortStudentApplicationItem entity);


		public override PassPortStudentApplicationItem Assemble(PassPortStudentApplicationItem entity, PassPortStudentApplicationItemDto dto)
		{
			if (entity == null)
			{
				entity = new PassPortStudentApplicationItem();
			}
			entity.ApplicationID = dto.ApplicationID;
			entity.ItemCode = dto.ItemCode;
			entity.ApplicationMemberNumber = dto.ApplicationMemberNumber;
			entity.CheckOrder = dto.CheckOrder;
			entity.DesignationTeacherNumber = dto.DesignationTeacherNumber;
			entity.ImplementPlace = dto.ImplementPlace;
			entity.ImplementDate = dto.ImplementDate;
			entity.ApplicationDate = dto.ApplicationDate;
			entity.IsFinalCheck = dto.IsFinalCheck;
			entity.CheckResult = dto.CheckResult;
			entity.CheckStatus = dto.CheckStatus;
			entity.CheckDate = dto.CheckDate;
			entity.StudentRemark = dto.StudentRemark;
			entity.ImplementObject = dto.ImplementObject;
			entity.CaseHistoryNumber = dto.CaseHistoryNumber;
			entity.TeacherRemark = dto.TeacherRemark;
			entity.JobCode = dto.JobCode;
			return entity;
		}
		public override PassPortStudentApplicationItemDto Assemble(PassPortStudentApplicationItem entity)
		{
			PassPortStudentApplicationItemDto dto = new PassPortStudentApplicationItemDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ApplicationID = entity.ApplicationID;
			dto.ItemCode = entity.ItemCode;
			dto.ApplicationMemberNumber = entity.ApplicationMemberNumber;
			dto.CheckOrder = entity.CheckOrder;
			dto.DesignationTeacherNumber = entity.DesignationTeacherNumber;
			dto.ImplementPlace = entity.ImplementPlace;
			dto.ImplementDate = entity.ImplementDate;
			dto.ApplicationDate = entity.ApplicationDate;
			dto.IsFinalCheck = entity.IsFinalCheck;
			dto.CheckResult = entity.CheckResult;
			dto.CheckStatus = entity.CheckStatus;
			dto.CheckDate = entity.CheckDate;
			dto.StudentRemark = entity.StudentRemark;
			dto.ImplementObject = entity.ImplementObject;
			dto.CaseHistoryNumber = entity.CaseHistoryNumber;
			dto.TeacherRemark = entity.TeacherRemark;
			dto.JobCode = entity.JobCode;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PassPortJobTitleItemAssembler : PassPortJobTitleItemAssemblerBase, IPassPortJobTitleItemAssembler
	{
	}


	public partial interface IPassPortJobTitleItemAssembler : IOpenAccessAssembler<PassPortJobTitleItemDto, PassPortJobTitleItem>
	{
	}


	public partial class PassPortJobTitleItemAssemblerBase : OpenAccessAssembler<PassPortJobTitleItemDto, PassPortJobTitleItem>
	{
		partial void OnDTOAssembled(PassPortJobTitleItemDto dto);
		partial void OnEntityAssembled(PassPortJobTitleItem entity);


		public override PassPortJobTitleItem Assemble(PassPortJobTitleItem entity, PassPortJobTitleItemDto dto)
		{
			if (entity == null)
			{
				entity = new PassPortJobTitleItem();
			}
			entity.JobTitleCode = dto.JobTitleCode;
			entity.ItemCode = dto.ItemCode;
			entity.AuthorizeLevel = dto.AuthorizeLevel;
			entity.AuthenticateFrequency = dto.AuthenticateFrequency;
			entity.IsNeedFinalCheck = dto.IsNeedFinalCheck;
			entity.ExAuthorizeLevel = dto.ExAuthorizeLevel;
			return entity;
		}
		public override PassPortJobTitleItemDto Assemble(PassPortJobTitleItem entity)
		{
			PassPortJobTitleItemDto dto = new PassPortJobTitleItemDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.JobTitleCode = entity.JobTitleCode;
			dto.ItemCode = entity.ItemCode;
			dto.AuthorizeLevel = entity.AuthorizeLevel;
			dto.AuthenticateFrequency = entity.AuthenticateFrequency;
			dto.IsNeedFinalCheck = entity.IsNeedFinalCheck;
			dto.ExAuthorizeLevel = entity.ExAuthorizeLevel;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PassPortCheckItemAssembler : PassPortCheckItemAssemblerBase, IPassPortCheckItemAssembler
	{
	}


	public partial interface IPassPortCheckItemAssembler : IOpenAccessAssembler<PassPortCheckItemDto, PassPortCheckItem>
	{
	}


	public partial class PassPortCheckItemAssemblerBase : OpenAccessAssembler<PassPortCheckItemDto, PassPortCheckItem>
	{
		partial void OnDTOAssembled(PassPortCheckItemDto dto);
		partial void OnEntityAssembled(PassPortCheckItem entity);


		public override PassPortCheckItem Assemble(PassPortCheckItem entity, PassPortCheckItemDto dto)
		{
			if (entity == null)
			{
				entity = new PassPortCheckItem();
			}
			entity.ItemCode = dto.ItemCode;
			entity.ItemName = dto.ItemName;
			entity.CreatedMan = dto.CreatedMan;
			entity.CreatedTime = dto.CreatedTime;
			entity.TopTeamCode = dto.TopTeamCode;
			return entity;
		}
		public override PassPortCheckItemDto Assemble(PassPortCheckItem entity)
		{
			PassPortCheckItemDto dto = new PassPortCheckItemDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ItemCode = entity.ItemCode;
			dto.ItemName = entity.ItemName;
			dto.CreatedMan = entity.CreatedMan;
			dto.CreatedTime = entity.CreatedTime;
			dto.TopTeamCode = entity.TopTeamCode;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PassPortSpecialListAssembler : PassPortSpecialListAssemblerBase, IPassPortSpecialListAssembler
	{
	}


	public partial interface IPassPortSpecialListAssembler : IOpenAccessAssembler<PassPortSpecialListDto, PassPortSpecialList>
	{
	}


	public partial class PassPortSpecialListAssemblerBase : OpenAccessAssembler<PassPortSpecialListDto, PassPortSpecialList>
	{
		partial void OnDTOAssembled(PassPortSpecialListDto dto);
		partial void OnEntityAssembled(PassPortSpecialList entity);


		public override PassPortSpecialList Assemble(PassPortSpecialList entity, PassPortSpecialListDto dto)
		{
			if (entity == null)
			{
				entity = new PassPortSpecialList();
			}
			entity.EmpCode = dto.EmpCode;
			entity.ItemCode = dto.ItemCode;
			entity.DefaultLevel = dto.DefaultLevel;
			return entity;
		}
		public override PassPortSpecialListDto Assemble(PassPortSpecialList entity)
		{
			PassPortSpecialListDto dto = new PassPortSpecialListDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EmpCode = entity.EmpCode;
			dto.ItemCode = entity.ItemCode;
			dto.DefaultLevel = entity.DefaultLevel;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VoteTargetAssembler : VoteTargetAssemblerBase, IVoteTargetAssembler
	{
	}


	public partial interface IVoteTargetAssembler : IOpenAccessAssembler<VoteTargetDto, VoteTarget>
	{
	}


	public partial class VoteTargetAssemblerBase : OpenAccessAssembler<VoteTargetDto, VoteTarget>
	{
		partial void OnDTOAssembled(VoteTargetDto dto);
		partial void OnEntityAssembled(VoteTarget entity);


		public override VoteTarget Assemble(VoteTarget entity, VoteTargetDto dto)
		{
			if (entity == null)
			{
				entity = new VoteTarget();
			}
			entity.MainID = dto.MainID;
			entity.TargetType = dto.TargetType;
			entity.TargetID = dto.TargetID;
			return entity;
		}
		public override VoteTargetDto Assemble(VoteTarget entity)
		{
			VoteTargetDto dto = new VoteTargetDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.MainID = entity.MainID;
			dto.TargetType = entity.TargetType;
			dto.TargetID = entity.TargetID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VoteMainAssembler : VoteMainAssemblerBase, IVoteMainAssembler
	{
	}


	public partial interface IVoteMainAssembler : IOpenAccessAssembler<VoteMainDto, VoteMain>
	{
	}


	public partial class VoteMainAssemblerBase : OpenAccessAssembler<VoteMainDto, VoteMain>
	{
		partial void OnDTOAssembled(VoteMainDto dto);
		partial void OnEntityAssembled(VoteMain entity);


		public override VoteMain Assemble(VoteMain entity, VoteMainDto dto)
		{
			if (entity == null)
			{
				entity = new VoteMain();
			}
			entity.ID = dto.ID;
			entity.VoteName = dto.VoteName;
			entity.Sdate = dto.Sdate;
			entity.Edate = dto.Edate;
			entity.Creater = dto.Creater;
			entity.VoteType = dto.VoteType;
			entity.HospCode = dto.HospCode;
			entity.Header = dto.Header;
			return entity;
		}
		public override VoteMainDto Assemble(VoteMain entity)
		{
			VoteMainDto dto = new VoteMainDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.VoteName = entity.VoteName;
			dto.Sdate = entity.Sdate;
			dto.Edate = entity.Edate;
			dto.Creater = entity.Creater;
			dto.VoteType = entity.VoteType;
			dto.HospCode = entity.HospCode;
			dto.Header = entity.Header;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VoteJobAssembler : VoteJobAssemblerBase, IVoteJobAssembler
	{
	}


	public partial interface IVoteJobAssembler : IOpenAccessAssembler<VoteJobDto, VoteJob>
	{
	}


	public partial class VoteJobAssemblerBase : OpenAccessAssembler<VoteJobDto, VoteJob>
	{
		partial void OnDTOAssembled(VoteJobDto dto);
		partial void OnEntityAssembled(VoteJob entity);


		public override VoteJob Assemble(VoteJob entity, VoteJobDto dto)
		{
			if (entity == null)
			{
				entity = new VoteJob();
			}
			entity.ID = dto.ID;
			entity.MainID = dto.MainID;
			entity.JobCode = dto.JobCode;
			return entity;
		}
		public override VoteJobDto Assemble(VoteJob entity)
		{
			VoteJobDto dto = new VoteJobDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.MainID = entity.MainID;
			dto.JobCode = entity.JobCode;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VoteInstanceAssembler : VoteInstanceAssemblerBase, IVoteInstanceAssembler
	{
	}


	public partial interface IVoteInstanceAssembler : IOpenAccessAssembler<VoteInstanceDto, VoteInstance>
	{
	}


	public partial class VoteInstanceAssemblerBase : OpenAccessAssembler<VoteInstanceDto, VoteInstance>
	{
		partial void OnDTOAssembled(VoteInstanceDto dto);
		partial void OnEntityAssembled(VoteInstance entity);


		public override VoteInstance Assemble(VoteInstance entity, VoteInstanceDto dto)
		{
			if (entity == null)
			{
				entity = new VoteInstance();
			}
			entity.ID = dto.ID;
			entity.MainID = dto.MainID;
			entity.Creater = dto.Creater;
			entity.CreateTime = dto.CreateTime;
			entity.Status = dto.Status;
			return entity;
		}
		public override VoteInstanceDto Assemble(VoteInstance entity)
		{
			VoteInstanceDto dto = new VoteInstanceDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.MainID = entity.MainID;
			dto.Creater = entity.Creater;
			dto.CreateTime = entity.CreateTime;
			dto.Status = entity.Status;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VoteInsDetAssembler : VoteInsDetAssemblerBase, IVoteInsDetAssembler
	{
	}


	public partial interface IVoteInsDetAssembler : IOpenAccessAssembler<VoteInsDetDto, VoteInsDet>
	{
	}


	public partial class VoteInsDetAssemblerBase : OpenAccessAssembler<VoteInsDetDto, VoteInsDet>
	{
		partial void OnDTOAssembled(VoteInsDetDto dto);
		partial void OnEntityAssembled(VoteInsDet entity);


		public override VoteInsDet Assemble(VoteInsDet entity, VoteInsDetDto dto)
		{
			if (entity == null)
			{
				entity = new VoteInsDet();
			}
			entity.ID = dto.ID;
			entity.InstanceID = dto.InstanceID;
			entity.GroupID = dto.GroupID;
			entity.Value = dto.Value;
			entity.Text = dto.Text;
			return entity;
		}
		public override VoteInsDetDto Assemble(VoteInsDet entity)
		{
			VoteInsDetDto dto = new VoteInsDetDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.InstanceID = entity.InstanceID;
			dto.GroupID = entity.GroupID;
			dto.Value = entity.Value;
			dto.Text = entity.Text;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VoteGroupAssembler : VoteGroupAssemblerBase, IVoteGroupAssembler
	{
	}


	public partial interface IVoteGroupAssembler : IOpenAccessAssembler<VoteGroupDto, VoteGroup>
	{
	}


	public partial class VoteGroupAssemblerBase : OpenAccessAssembler<VoteGroupDto, VoteGroup>
	{
		partial void OnDTOAssembled(VoteGroupDto dto);
		partial void OnEntityAssembled(VoteGroup entity);


		public override VoteGroup Assemble(VoteGroup entity, VoteGroupDto dto)
		{
			if (entity == null)
			{
				entity = new VoteGroup();
			}
			entity.ID = dto.ID;
			entity.MainID = dto.MainID;
			entity.GroupName = dto.GroupName;
			entity.GroupType = dto.GroupType;
			entity.ChoiceRate = dto.ChoiceRate;
			entity.ChoiceCount = dto.ChoiceCount;
			return entity;
		}
		public override VoteGroupDto Assemble(VoteGroup entity)
		{
			VoteGroupDto dto = new VoteGroupDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.MainID = entity.MainID;
			dto.GroupName = entity.GroupName;
			dto.GroupType = entity.GroupType;
			dto.ChoiceRate = entity.ChoiceRate;
			dto.ChoiceCount = entity.ChoiceCount;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VoteGCondAssembler : VoteGCondAssemblerBase, IVoteGCondAssembler
	{
	}


	public partial interface IVoteGCondAssembler : IOpenAccessAssembler<VoteGCondDto, VoteGCond>
	{
	}


	public partial class VoteGCondAssemblerBase : OpenAccessAssembler<VoteGCondDto, VoteGCond>
	{
		partial void OnDTOAssembled(VoteGCondDto dto);
		partial void OnEntityAssembled(VoteGCond entity);


		public override VoteGCond Assemble(VoteGCond entity, VoteGCondDto dto)
		{
			if (entity == null)
			{
				entity = new VoteGCond();
			}
			entity.ID = dto.ID;
			entity.GroupID = dto.GroupID;
			entity.Code = dto.Code;
			entity.CondType = dto.CondType;
			return entity;
		}
		public override VoteGCondDto Assemble(VoteGCond entity)
		{
			VoteGCondDto dto = new VoteGCondDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.GroupID = entity.GroupID;
			dto.Code = entity.Code;
			dto.CondType = entity.CondType;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class VoteUserDefineListAssembler : VoteUserDefineListAssemblerBase, IVoteUserDefineListAssembler
	{
	}


	public partial interface IVoteUserDefineListAssembler : IOpenAccessAssembler<VoteUserDefineListDto, VoteUserDefineList>
	{
	}


	public partial class VoteUserDefineListAssemblerBase : OpenAccessAssembler<VoteUserDefineListDto, VoteUserDefineList>
	{
		partial void OnDTOAssembled(VoteUserDefineListDto dto);
		partial void OnEntityAssembled(VoteUserDefineList entity);


		public override VoteUserDefineList Assemble(VoteUserDefineList entity, VoteUserDefineListDto dto)
		{
			if (entity == null)
			{
				entity = new VoteUserDefineList();
			}
			entity.ID = dto.ID;
			entity.MainID = dto.MainID;
			entity.GroupID = dto.GroupID;
			entity.Value = dto.Value;
			entity.Text = dto.Text;
			return entity;
		}
		public override VoteUserDefineListDto Assemble(VoteUserDefineList entity)
		{
			VoteUserDefineListDto dto = new VoteUserDefineListDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.MainID = entity.MainID;
			dto.GroupID = entity.GroupID;
			dto.Value = entity.Value;
			dto.Text = entity.Text;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PassPortStudentApplicationItemFailLogAssembler : PassPortStudentApplicationItemFailLogAssemblerBase, IPassPortStudentApplicationItemFailLogAssembler
	{
	}


	public partial interface IPassPortStudentApplicationItemFailLogAssembler : IOpenAccessAssembler<PassPortStudentApplicationItemFailLogDto, PassPortStudentApplicationItemFailLog>
	{
	}


	public partial class PassPortStudentApplicationItemFailLogAssemblerBase : OpenAccessAssembler<PassPortStudentApplicationItemFailLogDto, PassPortStudentApplicationItemFailLog>
	{
		partial void OnDTOAssembled(PassPortStudentApplicationItemFailLogDto dto);
		partial void OnEntityAssembled(PassPortStudentApplicationItemFailLog entity);


		public override PassPortStudentApplicationItemFailLog Assemble(PassPortStudentApplicationItemFailLog entity, PassPortStudentApplicationItemFailLogDto dto)
		{
			if (entity == null)
			{
				entity = new PassPortStudentApplicationItemFailLog();
			}
			entity.ApplicationID = dto.ApplicationID;
			entity.ItemCode = dto.ItemCode;
			entity.ApplicationMemberNumber = dto.ApplicationMemberNumber;
			entity.CheckOrder = dto.CheckOrder;
			entity.DesignationTeacherNumber = dto.DesignationTeacherNumber;
			entity.ImplementPlace = dto.ImplementPlace;
			entity.ImplementDate = dto.ImplementDate;
			entity.ApplicationDate = dto.ApplicationDate;
			entity.IsFinalCheck = dto.IsFinalCheck;
			entity.CheckResult = dto.CheckResult;
			entity.CheckStatus = dto.CheckStatus;
			entity.CheckDate = dto.CheckDate;
			entity.StudentRemark = dto.StudentRemark;
			entity.ImplementObject = dto.ImplementObject;
			entity.CaseHistoryNumber = dto.CaseHistoryNumber;
			entity.TeacherRemark = dto.TeacherRemark;
			entity.JobCode = dto.JobCode;
			return entity;
		}
		public override PassPortStudentApplicationItemFailLogDto Assemble(PassPortStudentApplicationItemFailLog entity)
		{
			PassPortStudentApplicationItemFailLogDto dto = new PassPortStudentApplicationItemFailLogDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ApplicationID = entity.ApplicationID;
			dto.ItemCode = entity.ItemCode;
			dto.ApplicationMemberNumber = entity.ApplicationMemberNumber;
			dto.CheckOrder = entity.CheckOrder;
			dto.DesignationTeacherNumber = entity.DesignationTeacherNumber;
			dto.ImplementPlace = entity.ImplementPlace;
			dto.ImplementDate = entity.ImplementDate;
			dto.ApplicationDate = entity.ApplicationDate;
			dto.IsFinalCheck = entity.IsFinalCheck;
			dto.CheckResult = entity.CheckResult;
			dto.CheckStatus = entity.CheckStatus;
			dto.CheckDate = entity.CheckDate;
			dto.StudentRemark = entity.StudentRemark;
			dto.ImplementObject = entity.ImplementObject;
			dto.CaseHistoryNumber = entity.CaseHistoryNumber;
			dto.TeacherRemark = entity.TeacherRemark;
			dto.JobCode = entity.JobCode;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PassPortJobFinalManAssembler : PassPortJobFinalManAssemblerBase, IPassPortJobFinalManAssembler
	{
	}


	public partial interface IPassPortJobFinalManAssembler : IOpenAccessAssembler<PassPortJobFinalManDto, PassPortJobFinalMan>
	{
	}


	public partial class PassPortJobFinalManAssemblerBase : OpenAccessAssembler<PassPortJobFinalManDto, PassPortJobFinalMan>
	{
		partial void OnDTOAssembled(PassPortJobFinalManDto dto);
		partial void OnEntityAssembled(PassPortJobFinalMan entity);


		public override PassPortJobFinalMan Assemble(PassPortJobFinalMan entity, PassPortJobFinalManDto dto)
		{
			if (entity == null)
			{
				entity = new PassPortJobFinalMan();
			}
			entity.JobCode = dto.JobCode;
			entity.EmpCode = dto.EmpCode;
			return entity;
		}
		public override PassPortJobFinalManDto Assemble(PassPortJobFinalMan entity)
		{
			PassPortJobFinalManDto dto = new PassPortJobFinalManDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.JobCode = entity.JobCode;
			dto.EmpCode = entity.EmpCode;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class PassPortDocGradeAssembler : PassPortDocGradeAssemblerBase, IPassPortDocGradeAssembler
	{
	}


	public partial interface IPassPortDocGradeAssembler : IOpenAccessAssembler<PassPortDocGradeDto, PassPortDocGrade>
	{
	}


	public partial class PassPortDocGradeAssemblerBase : OpenAccessAssembler<PassPortDocGradeDto, PassPortDocGrade>
	{
		partial void OnDTOAssembled(PassPortDocGradeDto dto);
		partial void OnEntityAssembled(PassPortDocGrade entity);


		public override PassPortDocGrade Assemble(PassPortDocGrade entity, PassPortDocGradeDto dto)
		{
			if (entity == null)
			{
				entity = new PassPortDocGrade();
			}
			entity.TitleCode = dto.TitleCode;
			entity.Grade = dto.Grade;
			return entity;
		}
		public override PassPortDocGradeDto Assemble(PassPortDocGrade entity)
		{
			PassPortDocGradeDto dto = new PassPortDocGradeDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TitleCode = entity.TitleCode;
			dto.Grade = entity.Grade;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduPassportTemplateTargetAssembler : EduPassportTemplateTargetAssemblerBase, IEduPassportTemplateTargetAssembler
	{
	}


	public partial interface IEduPassportTemplateTargetAssembler : IOpenAccessAssembler<EduPassportTemplateTargetDto, EduPassportTemplateTarget>
	{
	}


	public partial class EduPassportTemplateTargetAssemblerBase : OpenAccessAssembler<EduPassportTemplateTargetDto, EduPassportTemplateTarget>
	{
		partial void OnDTOAssembled(EduPassportTemplateTargetDto dto);
		partial void OnEntityAssembled(EduPassportTemplateTarget entity);


		public override EduPassportTemplateTarget Assemble(EduPassportTemplateTarget entity, EduPassportTemplateTargetDto dto)
		{
			if (entity == null)
			{
				entity = new EduPassportTemplateTarget();
			}
			entity.ID = dto.ID;
			entity.TemplateID = dto.TemplateID;
			entity.TargetType = dto.TargetType;
			entity.TargetID = dto.TargetID;
			return entity;
		}
		public override EduPassportTemplateTargetDto Assemble(EduPassportTemplateTarget entity)
		{
			EduPassportTemplateTargetDto dto = new EduPassportTemplateTargetDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.TemplateID = entity.TemplateID;
			dto.TargetType = entity.TargetType;
			dto.TargetID = entity.TargetID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduPassportTemplateItemAssembler : EduPassportTemplateItemAssemblerBase, IEduPassportTemplateItemAssembler
	{
	}


	public partial interface IEduPassportTemplateItemAssembler : IOpenAccessAssembler<EduPassportTemplateItemDto, EduPassportTemplateItem>
	{
	}


	public partial class EduPassportTemplateItemAssemblerBase : OpenAccessAssembler<EduPassportTemplateItemDto, EduPassportTemplateItem>
	{
		partial void OnDTOAssembled(EduPassportTemplateItemDto dto);
		partial void OnEntityAssembled(EduPassportTemplateItem entity);


		public override EduPassportTemplateItem Assemble(EduPassportTemplateItem entity, EduPassportTemplateItemDto dto)
		{
			if (entity == null)
			{
				entity = new EduPassportTemplateItem();
			}
			entity.ID = dto.ID;
			entity.TemplateID = dto.TemplateID;
			entity.ItemID = dto.ItemID;
			entity.Seq = dto.Seq;
			entity.Title = dto.Title;
			entity.GroupName = dto.GroupName;
			return entity;
		}
		public override EduPassportTemplateItemDto Assemble(EduPassportTemplateItem entity)
		{
			EduPassportTemplateItemDto dto = new EduPassportTemplateItemDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.TemplateID = entity.TemplateID;
			dto.ItemID = entity.ItemID;
			dto.Seq = entity.Seq;
			dto.Title = entity.Title;
			dto.GroupName = entity.GroupName;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduPassportTemplateAssembler : EduPassportTemplateAssemblerBase, IEduPassportTemplateAssembler
	{
	}


	public partial interface IEduPassportTemplateAssembler : IOpenAccessAssembler<EduPassportTemplateDto, EduPassportTemplate>
	{
	}


	public partial class EduPassportTemplateAssemblerBase : OpenAccessAssembler<EduPassportTemplateDto, EduPassportTemplate>
	{
		partial void OnDTOAssembled(EduPassportTemplateDto dto);
		partial void OnEntityAssembled(EduPassportTemplate entity);


		public override EduPassportTemplate Assemble(EduPassportTemplate entity, EduPassportTemplateDto dto)
		{
			if (entity == null)
			{
				entity = new EduPassportTemplate();
			}
			entity.TemplateID = dto.TemplateID;
			entity.TemplateName = dto.TemplateName;
			entity.Sdate = dto.Sdate;
			entity.Edate = dto.Edate;
			entity.Status = dto.Status;
			entity.Creater = dto.Creater;
			entity.Createdate = dto.Createdate;
			entity.Modifier = dto.Modifier;
			entity.Modifydate = dto.Modifydate;
			entity.TemplateDesc = dto.TemplateDesc;
			entity.AllowAdminConfirm = dto.AllowAdminConfirm;
			return entity;
		}
		public override EduPassportTemplateDto Assemble(EduPassportTemplate entity)
		{
			EduPassportTemplateDto dto = new EduPassportTemplateDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TemplateID = entity.TemplateID;
			dto.TemplateName = entity.TemplateName;
			dto.Sdate = entity.Sdate;
			dto.Edate = entity.Edate;
			dto.Status = entity.Status;
			dto.Creater = entity.Creater;
			dto.Createdate = entity.Createdate;
			dto.Modifier = entity.Modifier;
			dto.Modifydate = entity.Modifydate;
			dto.TemplateDesc = entity.TemplateDesc;
			dto.AllowAdminConfirm = entity.AllowAdminConfirm;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduPassportItemDetAssembler : EduPassportItemDetAssemblerBase, IEduPassportItemDetAssembler
	{
	}


	public partial interface IEduPassportItemDetAssembler : IOpenAccessAssembler<EduPassportItemDetDto, EduPassportItemDet>
	{
	}


	public partial class EduPassportItemDetAssemblerBase : OpenAccessAssembler<EduPassportItemDetDto, EduPassportItemDet>
	{
		partial void OnDTOAssembled(EduPassportItemDetDto dto);
		partial void OnEntityAssembled(EduPassportItemDet entity);


		public override EduPassportItemDet Assemble(EduPassportItemDet entity, EduPassportItemDetDto dto)
		{
			if (entity == null)
			{
				entity = new EduPassportItemDet();
			}
			entity.ID = dto.ID;
			entity.ItemID = dto.ItemID;
			entity.FieldDesc = dto.FieldDesc;
			entity.FieldTarget = dto.FieldTarget;
			entity.Seq = dto.Seq;
			entity.FieldType = dto.FieldType;
			entity.IsNecessary = dto.IsNecessary;
			entity.SelectOptions = dto.SelectOptions;
			return entity;
		}
		public override EduPassportItemDetDto Assemble(EduPassportItemDet entity)
		{
			EduPassportItemDetDto dto = new EduPassportItemDetDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.ItemID = entity.ItemID;
			dto.FieldDesc = entity.FieldDesc;
			dto.FieldTarget = entity.FieldTarget;
			dto.Seq = entity.Seq;
			dto.FieldType = entity.FieldType;
			dto.IsNecessary = entity.IsNecessary;
			dto.SelectOptions = entity.SelectOptions;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduPassportItemTargetAssembler : EduPassportItemTargetAssemblerBase, IEduPassportItemTargetAssembler
	{
	}


	public partial interface IEduPassportItemTargetAssembler : IOpenAccessAssembler<EduPassportItemTargetDto, EduPassportItemTarget>
	{
	}


	public partial class EduPassportItemTargetAssemblerBase : OpenAccessAssembler<EduPassportItemTargetDto, EduPassportItemTarget>
	{
		partial void OnDTOAssembled(EduPassportItemTargetDto dto);
		partial void OnEntityAssembled(EduPassportItemTarget entity);


		public override EduPassportItemTarget Assemble(EduPassportItemTarget entity, EduPassportItemTargetDto dto)
		{
			if (entity == null)
			{
				entity = new EduPassportItemTarget();
			}
			entity.ID = dto.ID;
			entity.ItemID = dto.ItemID;
			entity.TargetType = dto.TargetType;
			entity.TargetID = dto.TargetID;
			return entity;
		}
		public override EduPassportItemTargetDto Assemble(EduPassportItemTarget entity)
		{
			EduPassportItemTargetDto dto = new EduPassportItemTargetDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.ItemID = entity.ItemID;
			dto.TargetType = entity.TargetType;
			dto.TargetID = entity.TargetID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduPassportItemAssembler : EduPassportItemAssemblerBase, IEduPassportItemAssembler
	{
	}


	public partial interface IEduPassportItemAssembler : IOpenAccessAssembler<EduPassportItemDto, EduPassportItem>
	{
	}


	public partial class EduPassportItemAssemblerBase : OpenAccessAssembler<EduPassportItemDto, EduPassportItem>
	{
		partial void OnDTOAssembled(EduPassportItemDto dto);
		partial void OnEntityAssembled(EduPassportItem entity);


		public override EduPassportItem Assemble(EduPassportItem entity, EduPassportItemDto dto)
		{
			if (entity == null)
			{
				entity = new EduPassportItem();
			}
			entity.ItemID = dto.ItemID;
			entity.ItemName = dto.ItemName;
			entity.Creater = dto.Creater;
			entity.Createdate = dto.Createdate;
			entity.Modifier = dto.Modifier;
			entity.Modifydate = dto.Modifydate;
			entity.Remark = dto.Remark;
			entity.Status = dto.Status;
			entity.IsNecessary = dto.IsNecessary;
			entity.ItemDesc = dto.ItemDesc;
			return entity;
		}
		public override EduPassportItemDto Assemble(EduPassportItem entity)
		{
			EduPassportItemDto dto = new EduPassportItemDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ItemID = entity.ItemID;
			dto.ItemName = entity.ItemName;
			dto.Creater = entity.Creater;
			dto.Createdate = entity.Createdate;
			dto.Modifier = entity.Modifier;
			dto.Modifydate = entity.Modifydate;
			dto.Remark = entity.Remark;
			dto.Status = entity.Status;
			dto.IsNecessary = entity.IsNecessary;
			dto.ItemDesc = entity.ItemDesc;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduPassportInstanceAssembler : EduPassportInstanceAssemblerBase, IEduPassportInstanceAssembler
	{
	}


	public partial interface IEduPassportInstanceAssembler : IOpenAccessAssembler<EduPassportInstanceDto, EduPassportInstance>
	{
	}


	public partial class EduPassportInstanceAssemblerBase : OpenAccessAssembler<EduPassportInstanceDto, EduPassportInstance>
	{
		partial void OnDTOAssembled(EduPassportInstanceDto dto);
		partial void OnEntityAssembled(EduPassportInstance entity);


		public override EduPassportInstance Assemble(EduPassportInstance entity, EduPassportInstanceDto dto)
		{
			if (entity == null)
			{
				entity = new EduPassportInstance();
			}
			entity.InstanceID = dto.InstanceID;
			entity.TemplateID = dto.TemplateID;
			entity.TemplateName = dto.TemplateName;
			entity.EmpCode = dto.EmpCode;
			entity.CreateDate = dto.CreateDate;
			entity.JobSerial = dto.JobSerial;
			entity.Status = dto.Status;
			return entity;
		}
		public override EduPassportInstanceDto Assemble(EduPassportInstance entity)
		{
			EduPassportInstanceDto dto = new EduPassportInstanceDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.InstanceID = entity.InstanceID;
			dto.TemplateID = entity.TemplateID;
			dto.TemplateName = entity.TemplateName;
			dto.EmpCode = entity.EmpCode;
			dto.CreateDate = entity.CreateDate;
			dto.JobSerial = entity.JobSerial;
			dto.Status = entity.Status;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduPassportInsItemDetAssembler : EduPassportInsItemDetAssemblerBase, IEduPassportInsItemDetAssembler
	{
	}


	public partial interface IEduPassportInsItemDetAssembler : IOpenAccessAssembler<EduPassportInsItemDetDto, EduPassportInsItemDet>
	{
	}


	public partial class EduPassportInsItemDetAssemblerBase : OpenAccessAssembler<EduPassportInsItemDetDto, EduPassportInsItemDet>
	{
		partial void OnDTOAssembled(EduPassportInsItemDetDto dto);
		partial void OnEntityAssembled(EduPassportInsItemDet entity);


		public override EduPassportInsItemDet Assemble(EduPassportInsItemDet entity, EduPassportInsItemDetDto dto)
		{
			if (entity == null)
			{
				entity = new EduPassportInsItemDet();
			}
			entity.IItemID = dto.IItemID;
			entity.DetID = dto.DetID;
			entity.FieldDesc = dto.FieldDesc;
			entity.FieldTarget = dto.FieldTarget;
			entity.Seq = dto.Seq;
			entity.FieldType = dto.FieldType;
			entity.IsNecessary = dto.IsNecessary;
			entity.FieldValue = dto.FieldValue;
			entity.SelectOptions = dto.SelectOptions;
			entity.IITDetID = dto.IITDetID;
			return entity;
		}
		public override EduPassportInsItemDetDto Assemble(EduPassportInsItemDet entity)
		{
			EduPassportInsItemDetDto dto = new EduPassportInsItemDetDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.IItemID = entity.IItemID;
			dto.DetID = entity.DetID;
			dto.FieldDesc = entity.FieldDesc;
			dto.FieldTarget = entity.FieldTarget;
			dto.Seq = entity.Seq;
			dto.FieldType = entity.FieldType;
			dto.IsNecessary = entity.IsNecessary;
			dto.FieldValue = entity.FieldValue;
			dto.SelectOptions = entity.SelectOptions;
			dto.IITDetID = entity.IITDetID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduPassportInsItemAssembler : EduPassportInsItemAssemblerBase, IEduPassportInsItemAssembler
	{
	}


	public partial interface IEduPassportInsItemAssembler : IOpenAccessAssembler<EduPassportInsItemDto, EduPassportInsItem>
	{
	}


	public partial class EduPassportInsItemAssemblerBase : OpenAccessAssembler<EduPassportInsItemDto, EduPassportInsItem>
	{
		partial void OnDTOAssembled(EduPassportInsItemDto dto);
		partial void OnEntityAssembled(EduPassportInsItem entity);


		public override EduPassportInsItem Assemble(EduPassportInsItem entity, EduPassportInsItemDto dto)
		{
			if (entity == null)
			{
				entity = new EduPassportInsItem();
			}
			entity.IItemID = dto.IItemID;
			entity.InstanceID = dto.InstanceID;
			entity.ItemID = dto.ItemID;
			entity.ItemName = dto.ItemName;
			entity.Seq = dto.Seq;
			entity.Title = dto.Title;
			entity.GroupName = dto.GroupName;
			entity.Status = dto.Status;
			entity.ModifyDate = dto.ModifyDate;
			entity.Modifier = dto.Modifier;
			entity.TTarget = dto.TTarget;
			entity.IsNecessary = dto.IsNecessary;
			entity.AlertDate = dto.AlertDate;
			entity.SubmitDate = dto.SubmitDate;
			return entity;
		}
		public override EduPassportInsItemDto Assemble(EduPassportInsItem entity)
		{
			EduPassportInsItemDto dto = new EduPassportInsItemDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.IItemID = entity.IItemID;
			dto.InstanceID = entity.InstanceID;
			dto.ItemID = entity.ItemID;
			dto.ItemName = entity.ItemName;
			dto.Seq = entity.Seq;
			dto.Title = entity.Title;
			dto.GroupName = entity.GroupName;
			dto.Status = entity.Status;
			dto.ModifyDate = entity.ModifyDate;
			dto.Modifier = entity.Modifier;
			dto.TTarget = entity.TTarget;
			dto.IsNecessary = entity.IsNecessary;
			dto.AlertDate = entity.AlertDate;
			dto.SubmitDate = entity.SubmitDate;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCE_TRANSLOGAssembler : FORM_INSTANCE_TRANSLOGAssemblerBase, IFORM_INSTANCE_TRANSLOGAssembler
	{
	}


	public partial interface IFORM_INSTANCE_TRANSLOGAssembler : IOpenAccessAssembler<FORM_INSTANCE_TRANSLOGDto, FORM_INSTANCE_TRANSLOG>
	{
	}


	public partial class FORM_INSTANCE_TRANSLOGAssemblerBase : OpenAccessAssembler<FORM_INSTANCE_TRANSLOGDto, FORM_INSTANCE_TRANSLOG>
	{
		partial void OnDTOAssembled(FORM_INSTANCE_TRANSLOGDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE_TRANSLOG entity);


		public override FORM_INSTANCE_TRANSLOG Assemble(FORM_INSTANCE_TRANSLOG entity, FORM_INSTANCE_TRANSLOGDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE_TRANSLOG();
			}
			entity.LOG_ID = dto.LOG_ID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.Modifier = dto.Modifier;
			entity.ModifyDate = dto.ModifyDate;
			entity.ModifyType = dto.ModifyType;
			entity.OldValue = dto.OldValue;
			entity.NewValue = dto.NewValue;
			return entity;
		}
		public override FORM_INSTANCE_TRANSLOGDto Assemble(FORM_INSTANCE_TRANSLOG entity)
		{
			FORM_INSTANCE_TRANSLOGDto dto = new FORM_INSTANCE_TRANSLOGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.LOG_ID = entity.LOG_ID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.Modifier = entity.Modifier;
			dto.ModifyDate = entity.ModifyDate;
			dto.ModifyType = entity.ModifyType;
			dto.OldValue = entity.OldValue;
			dto.NewValue = entity.NewValue;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduPassportPRefAssembler : EduPassportPRefAssemblerBase, IEduPassportPRefAssembler
	{
	}


	public partial interface IEduPassportPRefAssembler : IOpenAccessAssembler<EduPassportPRefDto, EduPassportPRef>
	{
	}


	public partial class EduPassportPRefAssemblerBase : OpenAccessAssembler<EduPassportPRefDto, EduPassportPRef>
	{
		partial void OnDTOAssembled(EduPassportPRefDto dto);
		partial void OnEntityAssembled(EduPassportPRef entity);


		public override EduPassportPRef Assemble(EduPassportPRef entity, EduPassportPRefDto dto)
		{
			if (entity == null)
			{
				entity = new EduPassportPRef();
			}
			entity.ID = dto.ID;
			entity.ItemID = dto.ItemID;
			entity.ItemCode = dto.ItemCode;
			return entity;
		}
		public override EduPassportPRefDto Assemble(EduPassportPRef entity)
		{
			EduPassportPRefDto dto = new EduPassportPRefDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.ItemID = entity.ItemID;
			dto.ItemCode = entity.ItemCode;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduPassportInsItemRejectHiAssembler : EduPassportInsItemRejectHiAssemblerBase, IEduPassportInsItemRejectHiAssembler
	{
	}


	public partial interface IEduPassportInsItemRejectHiAssembler : IOpenAccessAssembler<EduPassportInsItemRejectHiDto, EduPassportInsItemRejectHi>
	{
	}


	public partial class EduPassportInsItemRejectHiAssemblerBase : OpenAccessAssembler<EduPassportInsItemRejectHiDto, EduPassportInsItemRejectHi>
	{
		partial void OnDTOAssembled(EduPassportInsItemRejectHiDto dto);
		partial void OnEntityAssembled(EduPassportInsItemRejectHi entity);


		public override EduPassportInsItemRejectHi Assemble(EduPassportInsItemRejectHi entity, EduPassportInsItemRejectHiDto dto)
		{
			if (entity == null)
			{
				entity = new EduPassportInsItemRejectHi();
			}
			entity.RejectID = dto.RejectID;
			entity.IItemID = dto.IItemID;
			entity.RejectTime = dto.RejectTime;
			entity.EmpCode = dto.EmpCode;
			entity.Reason = dto.Reason;
			return entity;
		}
		public override EduPassportInsItemRejectHiDto Assemble(EduPassportInsItemRejectHi entity)
		{
			EduPassportInsItemRejectHiDto dto = new EduPassportInsItemRejectHiDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.RejectID = entity.RejectID;
			dto.IItemID = entity.IItemID;
			dto.RejectTime = entity.RejectTime;
			dto.EmpCode = entity.EmpCode;
			dto.Reason = entity.Reason;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_GROUPAssembler : FORM_TEMPLATE_GROUPAssemblerBase, IFORM_TEMPLATE_GROUPAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_GROUPAssembler : IOpenAccessAssembler<FORM_TEMPLATE_GROUPDto, FORM_TEMPLATE_GROUP>
	{
	}


	public partial class FORM_TEMPLATE_GROUPAssemblerBase : OpenAccessAssembler<FORM_TEMPLATE_GROUPDto, FORM_TEMPLATE_GROUP>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_GROUPDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_GROUP entity);


		public override FORM_TEMPLATE_GROUP Assemble(FORM_TEMPLATE_GROUP entity, FORM_TEMPLATE_GROUPDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_GROUP();
			}
			entity.GROUP_ID = dto.GROUP_ID;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.GROUP_NAME = dto.GROUP_NAME;
			entity.DISPLAY_ORDER = dto.DISPLAY_ORDER;
			entity.TO_EVALTARGET = dto.TO_EVALTARGET;
			return entity;
		}
		public override FORM_TEMPLATE_GROUPDto Assemble(FORM_TEMPLATE_GROUP entity)
		{
			FORM_TEMPLATE_GROUPDto dto = new FORM_TEMPLATE_GROUPDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.GROUP_ID = entity.GROUP_ID;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.GROUP_NAME = entity.GROUP_NAME;
			dto.DISPLAY_ORDER = entity.DISPLAY_ORDER;
			dto.TO_EVALTARGET = entity.TO_EVALTARGET;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class ScoreSettingScoreTypeAssembler : ScoreSettingScoreTypeAssemblerBase, IScoreSettingScoreTypeAssembler
	{
	}


	public partial interface IScoreSettingScoreTypeAssembler : IOpenAccessAssembler<ScoreSettingScoreTypeDto, ScoreSettingScoreType>
	{
	}


	public partial class ScoreSettingScoreTypeAssemblerBase : OpenAccessAssembler<ScoreSettingScoreTypeDto, ScoreSettingScoreType>
	{
		partial void OnDTOAssembled(ScoreSettingScoreTypeDto dto);
		partial void OnEntityAssembled(ScoreSettingScoreType entity);


		public override ScoreSettingScoreType Assemble(ScoreSettingScoreType entity, ScoreSettingScoreTypeDto dto)
		{
			if (entity == null)
			{
				entity = new ScoreSettingScoreType();
			}
			entity.TypeID = dto.TypeID;
			entity.SettingID = dto.SettingID;
			entity.TypeName = dto.TypeName;
			entity.TypePercent = dto.TypePercent;
			return entity;
		}
		public override ScoreSettingScoreTypeDto Assemble(ScoreSettingScoreType entity)
		{
			ScoreSettingScoreTypeDto dto = new ScoreSettingScoreTypeDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TypeID = entity.TypeID;
			dto.SettingID = entity.SettingID;
			dto.TypeName = entity.TypeName;
			dto.TypePercent = entity.TypePercent;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TeachPointRefAssembler : TeachPointRefAssemblerBase, ITeachPointRefAssembler
	{
	}


	public partial interface ITeachPointRefAssembler : IOpenAccessAssembler<TeachPointRefDto, TeachPointRef>
	{
	}


	public partial class TeachPointRefAssemblerBase : OpenAccessAssembler<TeachPointRefDto, TeachPointRef>
	{
		partial void OnDTOAssembled(TeachPointRefDto dto);
		partial void OnEntityAssembled(TeachPointRef entity);


		public override TeachPointRef Assemble(TeachPointRef entity, TeachPointRefDto dto)
		{
			if (entity == null)
			{
				entity = new TeachPointRef();
			}
			entity.ItemID = dto.ItemID;
			entity.RefType = dto.RefType;
			entity.RefID = dto.RefID;
			entity.RefGroup = dto.RefGroup;
			return entity;
		}
		public override TeachPointRefDto Assemble(TeachPointRef entity)
		{
			TeachPointRefDto dto = new TeachPointRefDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ItemID = entity.ItemID;
			dto.RefType = entity.RefType;
			dto.RefID = entity.RefID;
			dto.RefGroup = entity.RefGroup;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TeachPointItemRequireAssembler : TeachPointItemRequireAssemblerBase, ITeachPointItemRequireAssembler
	{
	}


	public partial interface ITeachPointItemRequireAssembler : IOpenAccessAssembler<TeachPointItemRequireDto, TeachPointItemRequire>
	{
	}


	public partial class TeachPointItemRequireAssemblerBase : OpenAccessAssembler<TeachPointItemRequireDto, TeachPointItemRequire>
	{
		partial void OnDTOAssembled(TeachPointItemRequireDto dto);
		partial void OnEntityAssembled(TeachPointItemRequire entity);


		public override TeachPointItemRequire Assemble(TeachPointItemRequire entity, TeachPointItemRequireDto dto)
		{
			if (entity == null)
			{
				entity = new TeachPointItemRequire();
			}
			entity.ItemID = dto.ItemID;
			entity.ReqType = dto.ReqType;
			entity.ReqID = dto.ReqID;
			entity.ReqCount = dto.ReqCount;
			entity.ReqRate = dto.ReqRate;
			return entity;
		}
		public override TeachPointItemRequireDto Assemble(TeachPointItemRequire entity)
		{
			TeachPointItemRequireDto dto = new TeachPointItemRequireDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ItemID = entity.ItemID;
			dto.ReqType = entity.ReqType;
			dto.ReqID = entity.ReqID;
			dto.ReqCount = entity.ReqCount;
			dto.ReqRate = entity.ReqRate;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TeachPointItemAssembler : TeachPointItemAssemblerBase, ITeachPointItemAssembler
	{
	}


	public partial interface ITeachPointItemAssembler : IOpenAccessAssembler<TeachPointItemDto, TeachPointItem>
	{
	}


	public partial class TeachPointItemAssemblerBase : OpenAccessAssembler<TeachPointItemDto, TeachPointItem>
	{
		partial void OnDTOAssembled(TeachPointItemDto dto);
		partial void OnEntityAssembled(TeachPointItem entity);


		public override TeachPointItem Assemble(TeachPointItem entity, TeachPointItemDto dto)
		{
			if (entity == null)
			{
				entity = new TeachPointItem();
			}
			entity.ItemID = dto.ItemID;
			entity.ItemName = dto.ItemName;
			entity.ItemType = dto.ItemType;
			entity.PointUnit = dto.PointUnit;
			entity.EachPoint = dto.EachPoint;
			entity.EachUnit = dto.EachUnit;
			entity.MaxPoint = dto.MaxPoint;
			entity.MaxPointEvalRange = dto.MaxPointEvalRange;
			entity.Remark = dto.Remark;
			entity.TrainingType = dto.TrainingType;
			return entity;
		}
		public override TeachPointItemDto Assemble(TeachPointItem entity)
		{
			TeachPointItemDto dto = new TeachPointItemDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ItemID = entity.ItemID;
			dto.ItemName = entity.ItemName;
			dto.ItemType = entity.ItemType;
			dto.PointUnit = entity.PointUnit;
			dto.EachPoint = entity.EachPoint;
			dto.EachUnit = entity.EachUnit;
			dto.MaxPoint = entity.MaxPoint;
			dto.MaxPointEvalRange = entity.MaxPointEvalRange;
			dto.Remark = entity.Remark;
			dto.TrainingType = entity.TrainingType;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TeachPointEmpItemDatumAssembler : TeachPointEmpItemDatumAssemblerBase, ITeachPointEmpItemDatumAssembler
	{
	}


	public partial interface ITeachPointEmpItemDatumAssembler : IOpenAccessAssembler<TeachPointEmpItemDatumDto, TeachPointEmpItemDatum>
	{
	}


	public partial class TeachPointEmpItemDatumAssemblerBase : OpenAccessAssembler<TeachPointEmpItemDatumDto, TeachPointEmpItemDatum>
	{
		partial void OnDTOAssembled(TeachPointEmpItemDatumDto dto);
		partial void OnEntityAssembled(TeachPointEmpItemDatum entity);


		public override TeachPointEmpItemDatum Assemble(TeachPointEmpItemDatum entity, TeachPointEmpItemDatumDto dto)
		{
			if (entity == null)
			{
				entity = new TeachPointEmpItemDatum();
			}
			entity.ID = dto.ID;
			entity.ItemID = dto.ItemID;
			entity.EmpCode = dto.EmpCode;
			entity.ItemCount = dto.ItemCount;
			entity.OccurDate = dto.OccurDate;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			entity.Status = dto.Status;
			entity.Remark = dto.Remark;
			return entity;
		}
		public override TeachPointEmpItemDatumDto Assemble(TeachPointEmpItemDatum entity)
		{
			TeachPointEmpItemDatumDto dto = new TeachPointEmpItemDatumDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.ItemID = entity.ItemID;
			dto.EmpCode = entity.EmpCode;
			dto.ItemCount = entity.ItemCount;
			dto.OccurDate = entity.OccurDate;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			dto.Status = entity.Status;
			dto.Remark = entity.Remark;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TeachPointCalcTypeRefAssembler : TeachPointCalcTypeRefAssemblerBase, ITeachPointCalcTypeRefAssembler
	{
	}


	public partial interface ITeachPointCalcTypeRefAssembler : IOpenAccessAssembler<TeachPointCalcTypeRefDto, TeachPointCalcTypeRef>
	{
	}


	public partial class TeachPointCalcTypeRefAssemblerBase : OpenAccessAssembler<TeachPointCalcTypeRefDto, TeachPointCalcTypeRef>
	{
		partial void OnDTOAssembled(TeachPointCalcTypeRefDto dto);
		partial void OnEntityAssembled(TeachPointCalcTypeRef entity);


		public override TeachPointCalcTypeRef Assemble(TeachPointCalcTypeRef entity, TeachPointCalcTypeRefDto dto)
		{
			if (entity == null)
			{
				entity = new TeachPointCalcTypeRef();
			}
			entity.TypeID = dto.TypeID;
			entity.ItemID = dto.ItemID;
			return entity;
		}
		public override TeachPointCalcTypeRefDto Assemble(TeachPointCalcTypeRef entity)
		{
			TeachPointCalcTypeRefDto dto = new TeachPointCalcTypeRefDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TypeID = entity.TypeID;
			dto.ItemID = entity.ItemID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TeachPointCalcTypeAssembler : TeachPointCalcTypeAssemblerBase, ITeachPointCalcTypeAssembler
	{
	}


	public partial interface ITeachPointCalcTypeAssembler : IOpenAccessAssembler<TeachPointCalcTypeDto, TeachPointCalcType>
	{
	}


	public partial class TeachPointCalcTypeAssemblerBase : OpenAccessAssembler<TeachPointCalcTypeDto, TeachPointCalcType>
	{
		partial void OnDTOAssembled(TeachPointCalcTypeDto dto);
		partial void OnEntityAssembled(TeachPointCalcType entity);


		public override TeachPointCalcType Assemble(TeachPointCalcType entity, TeachPointCalcTypeDto dto)
		{
			if (entity == null)
			{
				entity = new TeachPointCalcType();
			}
			entity.TypeID = dto.TypeID;
			entity.TypeName = dto.TypeName;
			entity.Status = dto.Status;
			entity.Remark = dto.Remark;
			return entity;
		}
		public override TeachPointCalcTypeDto Assemble(TeachPointCalcType entity)
		{
			TeachPointCalcTypeDto dto = new TeachPointCalcTypeDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TypeID = entity.TypeID;
			dto.TypeName = entity.TypeName;
			dto.Status = entity.Status;
			dto.Remark = entity.Remark;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class MyListDetAssembler : MyListDetAssemblerBase, IMyListDetAssembler
	{
	}


	public partial interface IMyListDetAssembler : IOpenAccessAssembler<MyListDetDto, MyListDet>
	{
	}


	public partial class MyListDetAssemblerBase : OpenAccessAssembler<MyListDetDto, MyListDet>
	{
		partial void OnDTOAssembled(MyListDetDto dto);
		partial void OnEntityAssembled(MyListDet entity);


		public override MyListDet Assemble(MyListDet entity, MyListDetDto dto)
		{
			if (entity == null)
			{
				entity = new MyListDet();
			}
			entity.ListID = dto.ListID;
			entity.EmpCode = dto.EmpCode;
			entity.Remark = dto.Remark;
			return entity;
		}
		public override MyListDetDto Assemble(MyListDet entity)
		{
			MyListDetDto dto = new MyListDetDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ListID = entity.ListID;
			dto.EmpCode = entity.EmpCode;
			dto.Remark = entity.Remark;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class MyListAssembler : MyListAssemblerBase, IMyListAssembler
	{
	}


	public partial interface IMyListAssembler : IOpenAccessAssembler<MyListDto, MyList>
	{
	}


	public partial class MyListAssemblerBase : OpenAccessAssembler<MyListDto, MyList>
	{
		partial void OnDTOAssembled(MyListDto dto);
		partial void OnEntityAssembled(MyList entity);


		public override MyList Assemble(MyList entity, MyListDto dto)
		{
			if (entity == null)
			{
				entity = new MyList();
			}
			entity.ListID = dto.ListID;
			entity.ListName = dto.ListName;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			entity.ModifyDate = dto.ModifyDate;
			entity.IsPublic = dto.IsPublic;
			return entity;
		}
		public override MyListDto Assemble(MyList entity)
		{
			MyListDto dto = new MyListDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ListID = entity.ListID;
			dto.ListName = entity.ListName;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			dto.ModifyDate = entity.ModifyDate;
			dto.IsPublic = entity.IsPublic;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class RecordTemplateAssembler : RecordTemplateAssemblerBase, IRecordTemplateAssembler
	{
	}


	public partial interface IRecordTemplateAssembler : IOpenAccessAssembler<RecordTemplateDto, RecordTemplate>
	{
	}


	public partial class RecordTemplateAssemblerBase : OpenAccessAssembler<RecordTemplateDto, RecordTemplate>
	{
		partial void OnDTOAssembled(RecordTemplateDto dto);
		partial void OnEntityAssembled(RecordTemplate entity);


		public override RecordTemplate Assemble(RecordTemplate entity, RecordTemplateDto dto)
		{
			if (entity == null)
			{
				entity = new RecordTemplate();
			}
			entity.TemplateID = dto.TemplateID;
			entity.TemplateName = dto.TemplateName;
			entity.ClassName = dto.ClassName;
			entity.Status = dto.Status;
			entity.BindAct = dto.BindAct;
			entity.DisplayOrder = dto.DisplayOrder;
			entity.OldVersion = dto.OldVersion;
			return entity;
		}
		public override RecordTemplateDto Assemble(RecordTemplate entity)
		{
			RecordTemplateDto dto = new RecordTemplateDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TemplateID = entity.TemplateID;
			dto.TemplateName = entity.TemplateName;
			dto.ClassName = entity.ClassName;
			dto.Status = entity.Status;
			dto.BindAct = entity.BindAct;
			dto.DisplayOrder = entity.DisplayOrder;
			dto.OldVersion = entity.OldVersion;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class RecordInstanceAssembler : RecordInstanceAssemblerBase, IRecordInstanceAssembler
	{
	}


	public partial interface IRecordInstanceAssembler : IOpenAccessAssembler<RecordInstanceDto, RecordInstance>
	{
	}


	public partial class RecordInstanceAssemblerBase : OpenAccessAssembler<RecordInstanceDto, RecordInstance>
	{
		partial void OnDTOAssembled(RecordInstanceDto dto);
		partial void OnEntityAssembled(RecordInstance entity);


		public override RecordInstance Assemble(RecordInstance entity, RecordInstanceDto dto)
		{
			if (entity == null)
			{
				entity = new RecordInstance();
			}
			entity.InstanceID = dto.InstanceID;
			entity.TemplateID = dto.TemplateID;
			entity.Sdate = dto.Sdate;
			entity.Edate = dto.Edate;
			entity.Title = dto.Title;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			entity.Viewer = dto.Viewer;
			entity.ViewDate = dto.ViewDate;
			entity.Modifier = dto.Modifier;
			entity.ModifyDate = dto.ModifyDate;
			entity.Status = dto.Status;
			entity.HospCode = dto.HospCode;
			entity.DeptCode = dto.DeptCode;
			entity.Recoder = dto.Recoder;
			entity.IsPublic = dto.IsPublic;
			entity.SignMethod = dto.SignMethod;
			return entity;
		}
		public override RecordInstanceDto Assemble(RecordInstance entity)
		{
			RecordInstanceDto dto = new RecordInstanceDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.InstanceID = entity.InstanceID;
			dto.TemplateID = entity.TemplateID;
			dto.Sdate = entity.Sdate;
			dto.Edate = entity.Edate;
			dto.Title = entity.Title;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			dto.Viewer = entity.Viewer;
			dto.ViewDate = entity.ViewDate;
			dto.Modifier = entity.Modifier;
			dto.ModifyDate = entity.ModifyDate;
			dto.Status = entity.Status;
			dto.HospCode = entity.HospCode;
			dto.DeptCode = entity.DeptCode;
			dto.Recoder = entity.Recoder;
			dto.IsPublic = entity.IsPublic;
			dto.SignMethod = entity.SignMethod;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class RecordInsDetAssembler : RecordInsDetAssemblerBase, IRecordInsDetAssembler
	{
	}


	public partial interface IRecordInsDetAssembler : IOpenAccessAssembler<RecordInsDetDto, RecordInsDet>
	{
	}


	public partial class RecordInsDetAssemblerBase : OpenAccessAssembler<RecordInsDetDto, RecordInsDet>
	{
		partial void OnDTOAssembled(RecordInsDetDto dto);
		partial void OnEntityAssembled(RecordInsDet entity);


		public override RecordInsDet Assemble(RecordInsDet entity, RecordInsDetDto dto)
		{
			if (entity == null)
			{
				entity = new RecordInsDet();
			}
			entity.InstanceID = dto.InstanceID;
			entity.ControlID = dto.ControlID;
			entity.ControlValue = dto.ControlValue;
			return entity;
		}
		public override RecordInsDetDto Assemble(RecordInsDet entity)
		{
			RecordInsDetDto dto = new RecordInsDetDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.InstanceID = entity.InstanceID;
			dto.ControlID = entity.ControlID;
			dto.ControlValue = entity.ControlValue;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class RecordInsSignInAssembler : RecordInsSignInAssemblerBase, IRecordInsSignInAssembler
	{
	}


	public partial interface IRecordInsSignInAssembler : IOpenAccessAssembler<RecordInsSignInDto, RecordInsSignIn>
	{
	}


	public partial class RecordInsSignInAssemblerBase : OpenAccessAssembler<RecordInsSignInDto, RecordInsSignIn>
	{
		partial void OnDTOAssembled(RecordInsSignInDto dto);
		partial void OnEntityAssembled(RecordInsSignIn entity);


		public override RecordInsSignIn Assemble(RecordInsSignIn entity, RecordInsSignInDto dto)
		{
			if (entity == null)
			{
				entity = new RecordInsSignIn();
			}
			entity.InstanceID = dto.InstanceID;
			entity.EmpCode = dto.EmpCode;
			entity.SignTime = dto.SignTime;
			entity.SignPath = dto.SignPath;
			entity.TargetJob = dto.TargetJob;
			entity.RoleType = dto.RoleType;
			return entity;
		}
		public override RecordInsSignInDto Assemble(RecordInsSignIn entity)
		{
			RecordInsSignInDto dto = new RecordInsSignInDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.InstanceID = entity.InstanceID;
			dto.EmpCode = entity.EmpCode;
			dto.SignTime = entity.SignTime;
			dto.SignPath = entity.SignPath;
			dto.TargetJob = entity.TargetJob;
			dto.RoleType = entity.RoleType;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class RecordEduActRefAssembler : RecordEduActRefAssemblerBase, IRecordEduActRefAssembler
	{
	}


	public partial interface IRecordEduActRefAssembler : IOpenAccessAssembler<RecordEduActRefDto, RecordEduActRef>
	{
	}


	public partial class RecordEduActRefAssemblerBase : OpenAccessAssembler<RecordEduActRefDto, RecordEduActRef>
	{
		partial void OnDTOAssembled(RecordEduActRefDto dto);
		partial void OnEntityAssembled(RecordEduActRef entity);


		public override RecordEduActRef Assemble(RecordEduActRef entity, RecordEduActRefDto dto)
		{
			if (entity == null)
			{
				entity = new RecordEduActRef();
			}
			entity.InstanceID = dto.InstanceID;
			entity.EduStopActScheduleID = dto.EduStopActScheduleID;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			return entity;
		}
		public override RecordEduActRefDto Assemble(RecordEduActRef entity)
		{
			RecordEduActRefDto dto = new RecordEduActRefDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.InstanceID = entity.InstanceID;
			dto.EduStopActScheduleID = entity.EduStopActScheduleID;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduQuestionAssembler : EduQuestionAssemblerBase, IEduQuestionAssembler
	{
	}


	public partial interface IEduQuestionAssembler : IOpenAccessAssembler<EduQuestionDto, EduQuestion>
	{
	}


	public partial class EduQuestionAssemblerBase : OpenAccessAssembler<EduQuestionDto, EduQuestion>
	{
		partial void OnDTOAssembled(EduQuestionDto dto);
		partial void OnEntityAssembled(EduQuestion entity);


		public override EduQuestion Assemble(EduQuestion entity, EduQuestionDto dto)
		{
			if (entity == null)
			{
				entity = new EduQuestion();
			}
			entity.ID = dto.ID;
			entity.TargetRole = dto.TargetRole;
			entity.QuestionTitle = dto.QuestionTitle;
			entity.QuestionSubject = dto.QuestionSubject;
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.Sdate = dto.Sdate;
			entity.Edate = dto.Edate;
			entity.QGroup = dto.QGroup;
			entity.IsForce = dto.IsForce;
			return entity;
		}
		public override EduQuestionDto Assemble(EduQuestion entity)
		{
			EduQuestionDto dto = new EduQuestionDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.TargetRole = entity.TargetRole;
			dto.QuestionTitle = entity.QuestionTitle;
			dto.QuestionSubject = entity.QuestionSubject;
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.Sdate = entity.Sdate;
			dto.Edate = entity.Edate;
			dto.QGroup = entity.QGroup;
			dto.IsForce = entity.IsForce;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class LoginLogAssembler : LoginLogAssemblerBase, ILoginLogAssembler
	{
	}


	public partial interface ILoginLogAssembler : IOpenAccessAssembler<LoginLogDto, LoginLog>
	{
	}


	public partial class LoginLogAssemblerBase : OpenAccessAssembler<LoginLogDto, LoginLog>
	{
		partial void OnDTOAssembled(LoginLogDto dto);
		partial void OnEntityAssembled(LoginLog entity);


		public override LoginLog Assemble(LoginLog entity, LoginLogDto dto)
		{
			if (entity == null)
			{
				entity = new LoginLog();
			}
			entity.ID = dto.ID;
			entity.EmpCode = dto.EmpCode;
			entity.LoginTime = dto.LoginTime;
			entity.IsSuccess = dto.IsSuccess;
			entity.LoginIP = dto.LoginIP;
			return entity;
		}
		public override LoginLogDto Assemble(LoginLog entity)
		{
			LoginLogDto dto = new LoginLogDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EmpCode = entity.EmpCode;
			dto.LoginTime = entity.LoginTime;
			dto.IsSuccess = entity.IsSuccess;
			dto.LoginIP = entity.LoginIP;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TeachPointJobItemAssembler : TeachPointJobItemAssemblerBase, ITeachPointJobItemAssembler
	{
	}


	public partial interface ITeachPointJobItemAssembler : IOpenAccessAssembler<TeachPointJobItemDto, TeachPointJobItem>
	{
	}


	public partial class TeachPointJobItemAssemblerBase : OpenAccessAssembler<TeachPointJobItemDto, TeachPointJobItem>
	{
		partial void OnDTOAssembled(TeachPointJobItemDto dto);
		partial void OnEntityAssembled(TeachPointJobItem entity);


		public override TeachPointJobItem Assemble(TeachPointJobItem entity, TeachPointJobItemDto dto)
		{
			if (entity == null)
			{
				entity = new TeachPointJobItem();
			}
			entity.ItemID = dto.ItemID;
			entity.JobCode = dto.JobCode;
			return entity;
		}
		public override TeachPointJobItemDto Assemble(TeachPointJobItem entity)
		{
			TeachPointJobItemDto dto = new TeachPointJobItemDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ItemID = entity.ItemID;
			dto.JobCode = entity.JobCode;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TrainingTimeAssembler : TrainingTimeAssemblerBase, ITrainingTimeAssembler
	{
	}


	public partial interface ITrainingTimeAssembler : IOpenAccessAssembler<TrainingTimeDto, TrainingTime>
	{
	}


	public partial class TrainingTimeAssemblerBase : OpenAccessAssembler<TrainingTimeDto, TrainingTime>
	{
		partial void OnDTOAssembled(TrainingTimeDto dto);
		partial void OnEntityAssembled(TrainingTime entity);


		public override TrainingTime Assemble(TrainingTime entity, TrainingTimeDto dto)
		{
			if (entity == null)
			{
				entity = new TrainingTime();
			}
			entity.ID = dto.ID;
			entity.EduYear = dto.EduYear;
			entity.Semester = dto.Semester;
			entity.Hospital = dto.Hospital;
			entity.EmpCode = dto.EmpCode;
			entity.Role = dto.Role;
			entity.TrainingTime1 = dto.TrainingTime1;
			entity.TimeHour = dto.TimeHour;
			entity.ClassName = dto.ClassName;
			entity.ClassType = dto.ClassType;
			entity.Creater = dto.Creater;
			entity.CreateTime = dto.CreateTime;
			entity.Status = dto.Status;
			return entity;
		}
		public override TrainingTimeDto Assemble(TrainingTime entity)
		{
			TrainingTimeDto dto = new TrainingTimeDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EduYear = entity.EduYear;
			dto.Semester = entity.Semester;
			dto.Hospital = entity.Hospital;
			dto.EmpCode = entity.EmpCode;
			dto.Role = entity.Role;
			dto.TrainingTime1 = entity.TrainingTime1;
			dto.TimeHour = entity.TimeHour;
			dto.ClassName = entity.ClassName;
			dto.ClassType = entity.ClassType;
			dto.Creater = entity.Creater;
			dto.CreateTime = entity.CreateTime;
			dto.Status = entity.Status;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduActTypeRoleRefAssembler : EduActTypeRoleRefAssemblerBase, IEduActTypeRoleRefAssembler
	{
	}


	public partial interface IEduActTypeRoleRefAssembler : IOpenAccessAssembler<EduActTypeRoleRefDto, EduActTypeRoleRef>
	{
	}


	public partial class EduActTypeRoleRefAssemblerBase : OpenAccessAssembler<EduActTypeRoleRefDto, EduActTypeRoleRef>
	{
		partial void OnDTOAssembled(EduActTypeRoleRefDto dto);
		partial void OnEntityAssembled(EduActTypeRoleRef entity);


		public override EduActTypeRoleRef Assemble(EduActTypeRoleRef entity, EduActTypeRoleRefDto dto)
		{
			if (entity == null)
			{
				entity = new EduActTypeRoleRef();
			}
			entity.ActType = dto.ActType;
			entity.RoleID = dto.RoleID;
			entity.EnableDate = dto.EnableDate;
			entity.DisableDate = dto.DisableDate;
			entity.Status = dto.Status;
			return entity;
		}
		public override EduActTypeRoleRefDto Assemble(EduActTypeRoleRef entity)
		{
			EduActTypeRoleRefDto dto = new EduActTypeRoleRefDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ActType = entity.ActType;
			dto.RoleID = entity.RoleID;
			dto.EnableDate = entity.EnableDate;
			dto.DisableDate = entity.DisableDate;
			dto.Status = entity.Status;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class OSCECertAssembler : OSCECertAssemblerBase, IOSCECertAssembler
	{
	}


	public partial interface IOSCECertAssembler : IOpenAccessAssembler<OSCECertDto, OSCECert>
	{
	}


	public partial class OSCECertAssemblerBase : OpenAccessAssembler<OSCECertDto, OSCECert>
	{
		partial void OnDTOAssembled(OSCECertDto dto);
		partial void OnEntityAssembled(OSCECert entity);


		public override OSCECert Assemble(OSCECert entity, OSCECertDto dto)
		{
			if (entity == null)
			{
				entity = new OSCECert();
			}
			entity.ID = dto.ID;
			entity.EmpCode = dto.EmpCode;
			entity.Sdate = dto.Sdate;
			entity.Edate = dto.Edate;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			entity.Status = dto.Status;
			entity.Remark = dto.Remark;
			return entity;
		}
		public override OSCECertDto Assemble(OSCECert entity)
		{
			OSCECertDto dto = new OSCECertDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EmpCode = entity.EmpCode;
			dto.Sdate = entity.Sdate;
			dto.Edate = entity.Edate;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			dto.Status = entity.Status;
			dto.Remark = entity.Remark;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class OSCEBlockTimeAssembler : OSCEBlockTimeAssemblerBase, IOSCEBlockTimeAssembler
	{
	}


	public partial interface IOSCEBlockTimeAssembler : IOpenAccessAssembler<OSCEBlockTimeDto, OSCEBlockTime>
	{
	}


	public partial class OSCEBlockTimeAssemblerBase : OpenAccessAssembler<OSCEBlockTimeDto, OSCEBlockTime>
	{
		partial void OnDTOAssembled(OSCEBlockTimeDto dto);
		partial void OnEntityAssembled(OSCEBlockTime entity);


		public override OSCEBlockTime Assemble(OSCEBlockTime entity, OSCEBlockTimeDto dto)
		{
			if (entity == null)
			{
				entity = new OSCEBlockTime();
			}
			entity.ID = dto.ID;
			entity.EmpCode = dto.EmpCode;
			entity.ClassName = dto.ClassName;
			entity.ClassDate = dto.ClassDate;
			entity.TrainingTime = dto.TrainingTime;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			entity.Status = dto.Status;
			return entity;
		}
		public override OSCEBlockTimeDto Assemble(OSCEBlockTime entity)
		{
			OSCEBlockTimeDto dto = new OSCEBlockTimeDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EmpCode = entity.EmpCode;
			dto.ClassName = entity.ClassName;
			dto.ClassDate = entity.ClassDate;
			dto.TrainingTime = entity.TrainingTime;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			dto.Status = entity.Status;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class RecordInstanceRejectLogAssembler : RecordInstanceRejectLogAssemblerBase, IRecordInstanceRejectLogAssembler
	{
	}


	public partial interface IRecordInstanceRejectLogAssembler : IOpenAccessAssembler<RecordInstanceRejectLogDto, RecordInstanceRejectLog>
	{
	}


	public partial class RecordInstanceRejectLogAssemblerBase : OpenAccessAssembler<RecordInstanceRejectLogDto, RecordInstanceRejectLog>
	{
		partial void OnDTOAssembled(RecordInstanceRejectLogDto dto);
		partial void OnEntityAssembled(RecordInstanceRejectLog entity);


		public override RecordInstanceRejectLog Assemble(RecordInstanceRejectLog entity, RecordInstanceRejectLogDto dto)
		{
			if (entity == null)
			{
				entity = new RecordInstanceRejectLog();
			}
			entity.InstanceID = dto.InstanceID;
			entity.EmpCode = dto.EmpCode;
			entity.RejectReason = dto.RejectReason;
			entity.OldStatus = dto.OldStatus;
			entity.NewStatus = dto.NewStatus;
			entity.RejectTime = dto.RejectTime;
			entity.LogID = dto.LogID;
			return entity;
		}
		public override RecordInstanceRejectLogDto Assemble(RecordInstanceRejectLog entity)
		{
			RecordInstanceRejectLogDto dto = new RecordInstanceRejectLogDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.InstanceID = entity.InstanceID;
			dto.EmpCode = entity.EmpCode;
			dto.RejectReason = entity.RejectReason;
			dto.OldStatus = entity.OldStatus;
			dto.NewStatus = entity.NewStatus;
			dto.RejectTime = entity.RejectTime;
			dto.LogID = entity.LogID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class MonthlyTeachPointCalcDatumAssembler : MonthlyTeachPointCalcDatumAssemblerBase, IMonthlyTeachPointCalcDatumAssembler
	{
	}


	public partial interface IMonthlyTeachPointCalcDatumAssembler : IOpenAccessAssembler<MonthlyTeachPointCalcDatumDto, MonthlyTeachPointCalcDatum>
	{
	}


	public partial class MonthlyTeachPointCalcDatumAssemblerBase : OpenAccessAssembler<MonthlyTeachPointCalcDatumDto, MonthlyTeachPointCalcDatum>
	{
		partial void OnDTOAssembled(MonthlyTeachPointCalcDatumDto dto);
		partial void OnEntityAssembled(MonthlyTeachPointCalcDatum entity);


		public override MonthlyTeachPointCalcDatum Assemble(MonthlyTeachPointCalcDatum entity, MonthlyTeachPointCalcDatumDto dto)
		{
			if (entity == null)
			{
				entity = new MonthlyTeachPointCalcDatum();
			}
			entity.CalDate = dto.CalDate;
			entity.EmpCode = dto.EmpCode;
			entity.Sdate = dto.Sdate;
			entity.Edate = dto.Edate;
			entity.IsLatest = dto.IsLatest;
			entity.Param0 = dto.Param0;
			entity.Param1 = dto.Param1;
			entity.Param2 = dto.Param2;
			entity.Param3 = dto.Param3;
			entity.Param4 = dto.Param4;
			entity.Param5 = dto.Param5;
			entity.Param6 = dto.Param6;
			entity.Param7 = dto.Param7;
			entity.Param8 = dto.Param8;
			entity.Param9 = dto.Param9;
			entity.Param10 = dto.Param10;
			entity.Param11 = dto.Param11;
			entity.Param12 = dto.Param12;
			entity.Param13 = dto.Param13;
			return entity;
		}
		public override MonthlyTeachPointCalcDatumDto Assemble(MonthlyTeachPointCalcDatum entity)
		{
			MonthlyTeachPointCalcDatumDto dto = new MonthlyTeachPointCalcDatumDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.CalDate = entity.CalDate;
			dto.EmpCode = entity.EmpCode;
			dto.Sdate = entity.Sdate;
			dto.Edate = entity.Edate;
			dto.IsLatest = entity.IsLatest;
			dto.Param0 = entity.Param0;
			dto.Param1 = entity.Param1;
			dto.Param2 = entity.Param2;
			dto.Param3 = entity.Param3;
			dto.Param4 = entity.Param4;
			dto.Param5 = entity.Param5;
			dto.Param6 = entity.Param6;
			dto.Param7 = entity.Param7;
			dto.Param8 = entity.Param8;
			dto.Param9 = entity.Param9;
			dto.Param10 = entity.Param10;
			dto.Param11 = entity.Param11;
			dto.Param12 = entity.Param12;
			dto.Param13 = entity.Param13;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FormCategoryRefAssembler : FormCategoryRefAssemblerBase, IFormCategoryRefAssembler
	{
	}


	public partial interface IFormCategoryRefAssembler : IOpenAccessAssembler<FormCategoryRefDto, FormCategoryRef>
	{
	}


	public partial class FormCategoryRefAssemblerBase : OpenAccessAssembler<FormCategoryRefDto, FormCategoryRef>
	{
		partial void OnDTOAssembled(FormCategoryRefDto dto);
		partial void OnEntityAssembled(FormCategoryRef entity);


		public override FormCategoryRef Assemble(FormCategoryRef entity, FormCategoryRefDto dto)
		{
			if (entity == null)
			{
				entity = new FormCategoryRef();
			}
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.CategoryID = dto.CategoryID;
			return entity;
		}
		public override FormCategoryRefDto Assemble(FormCategoryRef entity)
		{
			FormCategoryRefDto dto = new FormCategoryRefDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.CategoryID = entity.CategoryID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FormCategoryAssembler : FormCategoryAssemblerBase, IFormCategoryAssembler
	{
	}


	public partial interface IFormCategoryAssembler : IOpenAccessAssembler<FormCategoryDto, FormCategory>
	{
	}


	public partial class FormCategoryAssemblerBase : OpenAccessAssembler<FormCategoryDto, FormCategory>
	{
		partial void OnDTOAssembled(FormCategoryDto dto);
		partial void OnEntityAssembled(FormCategory entity);


		public override FormCategory Assemble(FormCategory entity, FormCategoryDto dto)
		{
			if (entity == null)
			{
				entity = new FormCategory();
			}
			entity.ID = dto.ID;
			entity.CategoryName = dto.CategoryName;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			return entity;
		}
		public override FormCategoryDto Assemble(FormCategory entity)
		{
			FormCategoryDto dto = new FormCategoryDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.CategoryName = entity.CategoryName;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_INSTANCE_RETURN_LOGAssembler : FORM_INSTANCE_RETURN_LOGAssemblerBase, IFORM_INSTANCE_RETURN_LOGAssembler
	{
	}


	public partial interface IFORM_INSTANCE_RETURN_LOGAssembler : IOpenAccessAssembler<FORM_INSTANCE_RETURN_LOGDto, FORM_INSTANCE_RETURN_LOG>
	{
	}


	public partial class FORM_INSTANCE_RETURN_LOGAssemblerBase : OpenAccessAssembler<FORM_INSTANCE_RETURN_LOGDto, FORM_INSTANCE_RETURN_LOG>
	{
		partial void OnDTOAssembled(FORM_INSTANCE_RETURN_LOGDto dto);
		partial void OnEntityAssembled(FORM_INSTANCE_RETURN_LOG entity);


		public override FORM_INSTANCE_RETURN_LOG Assemble(FORM_INSTANCE_RETURN_LOG entity, FORM_INSTANCE_RETURN_LOGDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_INSTANCE_RETURN_LOG();
			}
			entity.LOG_ID = dto.LOG_ID;
			entity.INSTANCE_ID = dto.INSTANCE_ID;
			entity.RETURN_REASON = dto.RETURN_REASON;
			entity.RETURN_TIME = dto.RETURN_TIME;
			entity.RETURN_EMP = dto.RETURN_EMP;
			return entity;
		}
		public override FORM_INSTANCE_RETURN_LOGDto Assemble(FORM_INSTANCE_RETURN_LOG entity)
		{
			FORM_INSTANCE_RETURN_LOGDto dto = new FORM_INSTANCE_RETURN_LOGDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.LOG_ID = entity.LOG_ID;
			dto.INSTANCE_ID = entity.INSTANCE_ID;
			dto.RETURN_REASON = entity.RETURN_REASON;
			dto.RETURN_TIME = entity.RETURN_TIME;
			dto.RETURN_EMP = entity.RETURN_EMP;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduTermFormReqTemplateDetAssembler : EduTermFormReqTemplateDetAssemblerBase, IEduTermFormReqTemplateDetAssembler
	{
	}


	public partial interface IEduTermFormReqTemplateDetAssembler : IOpenAccessAssembler<EduTermFormReqTemplateDetDto, EduTermFormReqTemplateDet>
	{
	}


	public partial class EduTermFormReqTemplateDetAssemblerBase : OpenAccessAssembler<EduTermFormReqTemplateDetDto, EduTermFormReqTemplateDet>
	{
		partial void OnDTOAssembled(EduTermFormReqTemplateDetDto dto);
		partial void OnEntityAssembled(EduTermFormReqTemplateDet entity);


		public override EduTermFormReqTemplateDet Assemble(EduTermFormReqTemplateDet entity, EduTermFormReqTemplateDetDto dto)
		{
			if (entity == null)
			{
				entity = new EduTermFormReqTemplateDet();
			}
			entity.DetID = dto.DetID;
			entity.TemplateID = dto.TemplateID;
			entity.ReqType = dto.ReqType;
			entity.ReqID = dto.ReqID;
			entity.ReqCount = dto.ReqCount;
			entity.NeedPass = dto.NeedPass;
			return entity;
		}
		public override EduTermFormReqTemplateDetDto Assemble(EduTermFormReqTemplateDet entity)
		{
			EduTermFormReqTemplateDetDto dto = new EduTermFormReqTemplateDetDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.DetID = entity.DetID;
			dto.TemplateID = entity.TemplateID;
			dto.ReqType = entity.ReqType;
			dto.ReqID = entity.ReqID;
			dto.ReqCount = entity.ReqCount;
			dto.NeedPass = entity.NeedPass;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduTermFormReqTemplateAssembler : EduTermFormReqTemplateAssemblerBase, IEduTermFormReqTemplateAssembler
	{
	}


	public partial interface IEduTermFormReqTemplateAssembler : IOpenAccessAssembler<EduTermFormReqTemplateDto, EduTermFormReqTemplate>
	{
	}


	public partial class EduTermFormReqTemplateAssemblerBase : OpenAccessAssembler<EduTermFormReqTemplateDto, EduTermFormReqTemplate>
	{
		partial void OnDTOAssembled(EduTermFormReqTemplateDto dto);
		partial void OnEntityAssembled(EduTermFormReqTemplate entity);


		public override EduTermFormReqTemplate Assemble(EduTermFormReqTemplate entity, EduTermFormReqTemplateDto dto)
		{
			if (entity == null)
			{
				entity = new EduTermFormReqTemplate();
			}
			entity.TemplateID = dto.TemplateID;
			entity.TemplateName = dto.TemplateName;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			entity.Modifier = dto.Modifier;
			entity.ModifyDate = dto.ModifyDate;
			return entity;
		}
		public override EduTermFormReqTemplateDto Assemble(EduTermFormReqTemplate entity)
		{
			EduTermFormReqTemplateDto dto = new EduTermFormReqTemplateDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TemplateID = entity.TemplateID;
			dto.TemplateName = entity.TemplateName;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			dto.Modifier = entity.Modifier;
			dto.ModifyDate = entity.ModifyDate;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduTermFormReqAssembler : EduTermFormReqAssemblerBase, IEduTermFormReqAssembler
	{
	}


	public partial interface IEduTermFormReqAssembler : IOpenAccessAssembler<EduTermFormReqDto, EduTermFormReq>
	{
	}


	public partial class EduTermFormReqAssemblerBase : OpenAccessAssembler<EduTermFormReqDto, EduTermFormReq>
	{
		partial void OnDTOAssembled(EduTermFormReqDto dto);
		partial void OnEntityAssembled(EduTermFormReq entity);


		public override EduTermFormReq Assemble(EduTermFormReq entity, EduTermFormReqDto dto)
		{
			if (entity == null)
			{
				entity = new EduTermFormReq();
			}
			entity.ID = dto.ID;
			entity.EduTermID = dto.EduTermID;
			entity.ReqType = dto.ReqType;
			entity.ReqID = dto.ReqID;
			entity.ReqCount = dto.ReqCount;
			entity.CreateDate = dto.CreateDate;
			entity.Creater = dto.Creater;
			entity.NeedPass = dto.NeedPass;
			return entity;
		}
		public override EduTermFormReqDto Assemble(EduTermFormReq entity)
		{
			EduTermFormReqDto dto = new EduTermFormReqDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EduTermID = entity.EduTermID;
			dto.ReqType = entity.ReqType;
			dto.ReqID = entity.ReqID;
			dto.ReqCount = entity.ReqCount;
			dto.CreateDate = entity.CreateDate;
			dto.Creater = entity.Creater;
			dto.NeedPass = entity.NeedPass;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class RecordInsReaderAssembler : RecordInsReaderAssemblerBase, IRecordInsReaderAssembler
	{
	}


	public partial interface IRecordInsReaderAssembler : IOpenAccessAssembler<RecordInsReaderDto, RecordInsReader>
	{
	}


	public partial class RecordInsReaderAssemblerBase : OpenAccessAssembler<RecordInsReaderDto, RecordInsReader>
	{
		partial void OnDTOAssembled(RecordInsReaderDto dto);
		partial void OnEntityAssembled(RecordInsReader entity);


		public override RecordInsReader Assemble(RecordInsReader entity, RecordInsReaderDto dto)
		{
			if (entity == null)
			{
				entity = new RecordInsReader();
			}
			entity.InstanceID = dto.InstanceID;
			entity.Reader = dto.Reader;
			entity.FirstReadTime = dto.FirstReadTime;
			entity.SN = dto.SN;
			return entity;
		}
		public override RecordInsReaderDto Assemble(RecordInsReader entity)
		{
			RecordInsReaderDto dto = new RecordInsReaderDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.InstanceID = entity.InstanceID;
			dto.Reader = entity.Reader;
			dto.FirstReadTime = entity.FirstReadTime;
			dto.SN = entity.SN;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class RecordInsViewerAssembler : RecordInsViewerAssemblerBase, IRecordInsViewerAssembler
	{
	}


	public partial interface IRecordInsViewerAssembler : IOpenAccessAssembler<RecordInsViewerDto, RecordInsViewer>
	{
	}


	public partial class RecordInsViewerAssemblerBase : OpenAccessAssembler<RecordInsViewerDto, RecordInsViewer>
	{
		partial void OnDTOAssembled(RecordInsViewerDto dto);
		partial void OnEntityAssembled(RecordInsViewer entity);


		public override RecordInsViewer Assemble(RecordInsViewer entity, RecordInsViewerDto dto)
		{
			if (entity == null)
			{
				entity = new RecordInsViewer();
			}
			entity.InstanceID = dto.InstanceID;
			entity.ViewOrder = dto.ViewOrder;
			entity.Viewer = dto.Viewer;
			entity.ViewStatus = dto.ViewStatus;
			entity.ViewTime = dto.ViewTime;
			entity.ViewMemo = dto.ViewMemo;
			entity.SN = dto.SN;
			return entity;
		}
		public override RecordInsViewerDto Assemble(RecordInsViewer entity)
		{
			RecordInsViewerDto dto = new RecordInsViewerDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.InstanceID = entity.InstanceID;
			dto.ViewOrder = entity.ViewOrder;
			dto.Viewer = entity.Viewer;
			dto.ViewStatus = entity.ViewStatus;
			dto.ViewTime = entity.ViewTime;
			dto.ViewMemo = entity.ViewMemo;
			dto.SN = entity.SN;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_MenuAssembler : IKASA_MenuAssemblerBase, IIKASA_MenuAssembler
	{
	}


	public partial interface IIKASA_MenuAssembler : IOpenAccessAssembler<IKASA_MenuDto, IKASA_Menu>
	{
	}


	public partial class IKASA_MenuAssemblerBase : OpenAccessAssembler<IKASA_MenuDto, IKASA_Menu>
	{
		partial void OnDTOAssembled(IKASA_MenuDto dto);
		partial void OnEntityAssembled(IKASA_Menu entity);


		public override IKASA_Menu Assemble(IKASA_Menu entity, IKASA_MenuDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_Menu();
			}
			entity.Menuid = dto.Menuid;
			entity.Menutext = dto.Menutext;
			entity.Bgcolor = dto.Bgcolor;
			entity.Fontcolor = dto.Fontcolor;
			entity.Parentmenuid = dto.Parentmenuid;
			entity.Hinttext = dto.Hinttext;
			entity.Remark = dto.Remark;
			entity.Enabledate = dto.Enabledate;
			entity.Disabledate = dto.Disabledate;
			entity.Isshow = dto.Isshow;
			entity.Frameurl = dto.Frameurl;
			entity.Displayorder = dto.Displayorder;
			return entity;
		}
		public override IKASA_MenuDto Assemble(IKASA_Menu entity)
		{
			IKASA_MenuDto dto = new IKASA_MenuDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Menuid = entity.Menuid;
			dto.Menutext = entity.Menutext;
			dto.Bgcolor = entity.Bgcolor;
			dto.Fontcolor = entity.Fontcolor;
			dto.Parentmenuid = entity.Parentmenuid;
			dto.Hinttext = entity.Hinttext;
			dto.Remark = entity.Remark;
			dto.Enabledate = entity.Enabledate;
			dto.Disabledate = entity.Disabledate;
			dto.Isshow = entity.Isshow;
			dto.Frameurl = entity.Frameurl;
			dto.Displayorder = entity.Displayorder;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_MenuParamAssembler : IKASA_MenuParamAssemblerBase, IIKASA_MenuParamAssembler
	{
	}


	public partial interface IIKASA_MenuParamAssembler : IOpenAccessAssembler<IKASA_MenuParamDto, IKASA_MenuParam>
	{
	}


	public partial class IKASA_MenuParamAssemblerBase : OpenAccessAssembler<IKASA_MenuParamDto, IKASA_MenuParam>
	{
		partial void OnDTOAssembled(IKASA_MenuParamDto dto);
		partial void OnEntityAssembled(IKASA_MenuParam entity);


		public override IKASA_MenuParam Assemble(IKASA_MenuParam entity, IKASA_MenuParamDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_MenuParam();
			}
			entity.Menuid = dto.Menuid;
			entity.Paramname = dto.Paramname;
			entity.Paramvalue = dto.Paramvalue;
			return entity;
		}
		public override IKASA_MenuParamDto Assemble(IKASA_MenuParam entity)
		{
			IKASA_MenuParamDto dto = new IKASA_MenuParamDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Menuid = entity.Menuid;
			dto.Paramname = entity.Paramname;
			dto.Paramvalue = entity.Paramvalue;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_OSCEExamStageAssembler : IKASA_OSCEExamStageAssemblerBase, IIKASA_OSCEExamStageAssembler
	{
	}


	public partial interface IIKASA_OSCEExamStageAssembler : IOpenAccessAssembler<IKASA_OSCEExamStageDto, IKASA_OSCEExamStage>
	{
	}


	public partial class IKASA_OSCEExamStageAssemblerBase : OpenAccessAssembler<IKASA_OSCEExamStageDto, IKASA_OSCEExamStage>
	{
		partial void OnDTOAssembled(IKASA_OSCEExamStageDto dto);
		partial void OnEntityAssembled(IKASA_OSCEExamStage entity);


		public override IKASA_OSCEExamStage Assemble(IKASA_OSCEExamStage entity, IKASA_OSCEExamStageDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_OSCEExamStage();
			}
			entity.ExamID = dto.ExamID;
			entity.StageNo = dto.StageNo;
			entity.StageName = dto.StageName;
			entity.PassScore = dto.PassScore;
			return entity;
		}
		public override IKASA_OSCEExamStageDto Assemble(IKASA_OSCEExamStage entity)
		{
			IKASA_OSCEExamStageDto dto = new IKASA_OSCEExamStageDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ExamID = entity.ExamID;
			dto.StageNo = entity.StageNo;
			dto.StageName = entity.StageName;
			dto.PassScore = entity.PassScore;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_OSCEExamScoreAssembler : IKASA_OSCEExamScoreAssemblerBase, IIKASA_OSCEExamScoreAssembler
	{
	}


	public partial interface IIKASA_OSCEExamScoreAssembler : IOpenAccessAssembler<IKASA_OSCEExamScoreDto, IKASA_OSCEExamScore>
	{
	}


	public partial class IKASA_OSCEExamScoreAssemblerBase : OpenAccessAssembler<IKASA_OSCEExamScoreDto, IKASA_OSCEExamScore>
	{
		partial void OnDTOAssembled(IKASA_OSCEExamScoreDto dto);
		partial void OnEntityAssembled(IKASA_OSCEExamScore entity);


		public override IKASA_OSCEExamScore Assemble(IKASA_OSCEExamScore entity, IKASA_OSCEExamScoreDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_OSCEExamScore();
			}
			entity.ExamID = dto.ExamID;
			entity.EmpCode = dto.EmpCode;
			entity.ExamIDNo = dto.ExamIDNo;
			entity.StageNo = dto.StageNo;
			entity.Score = dto.Score;
			return entity;
		}
		public override IKASA_OSCEExamScoreDto Assemble(IKASA_OSCEExamScore entity)
		{
			IKASA_OSCEExamScoreDto dto = new IKASA_OSCEExamScoreDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ExamID = entity.ExamID;
			dto.EmpCode = entity.EmpCode;
			dto.ExamIDNo = entity.ExamIDNo;
			dto.StageNo = entity.StageNo;
			dto.Score = entity.Score;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_OSCEExamAssembler : IKASA_OSCEExamAssemblerBase, IIKASA_OSCEExamAssembler
	{
	}


	public partial interface IIKASA_OSCEExamAssembler : IOpenAccessAssembler<IKASA_OSCEExamDto, IKASA_OSCEExam>
	{
	}


	public partial class IKASA_OSCEExamAssemblerBase : OpenAccessAssembler<IKASA_OSCEExamDto, IKASA_OSCEExam>
	{
		partial void OnDTOAssembled(IKASA_OSCEExamDto dto);
		partial void OnEntityAssembled(IKASA_OSCEExam entity);


		public override IKASA_OSCEExam Assemble(IKASA_OSCEExam entity, IKASA_OSCEExamDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_OSCEExam();
			}
			entity.ExamID = dto.ExamID;
			entity.ExamName = dto.ExamName;
			entity.ExamDate = dto.ExamDate;
			entity.PassScore = dto.PassScore;
			entity.PassStage = dto.PassStage;
			entity.HospCode = dto.HospCode;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			entity.DeleteTime = dto.DeleteTime;
			entity.DeleteFlag = dto.DeleteFlag;
			return entity;
		}
		public override IKASA_OSCEExamDto Assemble(IKASA_OSCEExam entity)
		{
			IKASA_OSCEExamDto dto = new IKASA_OSCEExamDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ExamID = entity.ExamID;
			dto.ExamName = entity.ExamName;
			dto.ExamDate = entity.ExamDate;
			dto.PassScore = entity.PassScore;
			dto.PassStage = entity.PassStage;
			dto.HospCode = entity.HospCode;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			dto.DeleteTime = entity.DeleteTime;
			dto.DeleteFlag = entity.DeleteFlag;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class V_hospAssembler : V_hospAssemblerBase, IV_hospAssembler
	{
	}


	public partial interface IV_hospAssembler : IOpenAccessAssembler<V_hospDto, V_hosp>
	{
	}


	public partial class V_hospAssemblerBase : OpenAccessAssembler<V_hospDto, V_hosp>
	{
		partial void OnDTOAssembled(V_hospDto dto);
		partial void OnEntityAssembled(V_hosp entity);


		public override V_hosp Assemble(V_hosp entity, V_hospDto dto)
		{
			if (entity == null)
			{
				entity = new V_hosp();
			}
			entity.Unitname_all = dto.Unitname_all;
			entity.Unitname = dto.Unitname;
			entity.Unitcode = dto.Unitcode;
			entity.Seq = dto.Seq;
			entity.Ishosp = dto.Ishosp;
			entity.Emp_status = dto.Emp_status;
			entity.Active = dto.Active;
			entity.Hospshortcode = dto.Hospshortcode;
			return entity;
		}
		public override V_hospDto Assemble(V_hosp entity)
		{
			V_hospDto dto = new V_hospDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Unitname_all = entity.Unitname_all;
			dto.Unitname = entity.Unitname;
			dto.Unitcode = entity.Unitcode;
			dto.Seq = entity.Seq;
			dto.Ishosp = entity.Ishosp;
			dto.Emp_status = entity.Emp_status;
			dto.Active = entity.Active;
			dto.Hospshortcode = entity.Hospshortcode;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduScoreAssembler : EduScoreAssemblerBase, IEduScoreAssembler
	{
	}


	public partial interface IEduScoreAssembler : IOpenAccessAssembler<EduScoreDto, EduScore>
	{
	}


	public partial class EduScoreAssemblerBase : OpenAccessAssembler<EduScoreDto, EduScore>
	{
		partial void OnDTOAssembled(EduScoreDto dto);
		partial void OnEntityAssembled(EduScore entity);


		public override EduScore Assemble(EduScore entity, EduScoreDto dto)
		{
			if (entity == null)
			{
				entity = new EduScore();
			}
			entity.Id = dto.Id;
			entity.Empcode = dto.Empcode;
			entity.Membercode = dto.Membercode;
			entity.Deplevel = dto.Deplevel;
			entity.Classname = dto.Classname;
			entity.Uploader = dto.Uploader;
			entity.Uploadtime = dto.Uploadtime;
			entity.Score = dto.Score;
			entity.Status = dto.Status;
			return entity;
		}
		public override EduScoreDto Assemble(EduScore entity)
		{
			EduScoreDto dto = new EduScoreDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.Empcode = entity.Empcode;
			dto.Membercode = entity.Membercode;
			dto.Deplevel = entity.Deplevel;
			dto.Classname = entity.Classname;
			dto.Uploader = entity.Uploader;
			dto.Uploadtime = entity.Uploadtime;
			dto.Score = entity.Score;
			dto.Status = entity.Status;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_IPDDataCountAssembler : IKASA_IPDDataCountAssemblerBase, IIKASA_IPDDataCountAssembler
	{
	}


	public partial interface IIKASA_IPDDataCountAssembler : IOpenAccessAssembler<IKASA_IPDDataCountDto, IKASA_IPDDataCount>
	{
	}


	public partial class IKASA_IPDDataCountAssemblerBase : OpenAccessAssembler<IKASA_IPDDataCountDto, IKASA_IPDDataCount>
	{
		partial void OnDTOAssembled(IKASA_IPDDataCountDto dto);
		partial void OnEntityAssembled(IKASA_IPDDataCount entity);


		public override IKASA_IPDDataCount Assemble(IKASA_IPDDataCount entity, IKASA_IPDDataCountDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_IPDDataCount();
			}
			entity.EmpCode = dto.EmpCode;
			entity.SDATE = dto.SDATE;
			entity.EDATE = dto.EDATE;
			entity.IPDNoteCount = dto.IPDNoteCount;
			entity.PrimaryCareCount = dto.PrimaryCareCount;
			entity.WorkHour = dto.WorkHour;
			return entity;
		}
		public override IKASA_IPDDataCountDto Assemble(IKASA_IPDDataCount entity)
		{
			IKASA_IPDDataCountDto dto = new IKASA_IPDDataCountDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EmpCode = entity.EmpCode;
			dto.SDATE = entity.SDATE;
			dto.EDATE = entity.EDATE;
			dto.IPDNoteCount = entity.IPDNoteCount;
			dto.PrimaryCareCount = entity.PrimaryCareCount;
			dto.WorkHour = entity.WorkHour;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class FORM_TEMPLATE_PERMISSIONAssembler : FORM_TEMPLATE_PERMISSIONAssemblerBase, IFORM_TEMPLATE_PERMISSIONAssembler
	{
	}


	public partial interface IFORM_TEMPLATE_PERMISSIONAssembler : IOpenAccessAssembler<FORM_TEMPLATE_PERMISSIONDto, FORM_TEMPLATE_PERMISSION>
	{
	}


	public partial class FORM_TEMPLATE_PERMISSIONAssemblerBase : OpenAccessAssembler<FORM_TEMPLATE_PERMISSIONDto, FORM_TEMPLATE_PERMISSION>
	{
		partial void OnDTOAssembled(FORM_TEMPLATE_PERMISSIONDto dto);
		partial void OnEntityAssembled(FORM_TEMPLATE_PERMISSION entity);


		public override FORM_TEMPLATE_PERMISSION Assemble(FORM_TEMPLATE_PERMISSION entity, FORM_TEMPLATE_PERMISSIONDto dto)
		{
			if (entity == null)
			{
				entity = new FORM_TEMPLATE_PERMISSION();
			}
			entity.TEMPLATE_ID = dto.TEMPLATE_ID;
			entity.HOSPCODE = dto.HOSPCODE;
			entity.CREATER = dto.CREATER;
			entity.CREATEDATE = dto.CREATEDATE;
			return entity;
		}
		public override FORM_TEMPLATE_PERMISSIONDto Assemble(FORM_TEMPLATE_PERMISSION entity)
		{
			FORM_TEMPLATE_PERMISSIONDto dto = new FORM_TEMPLATE_PERMISSIONDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.TEMPLATE_ID = entity.TEMPLATE_ID;
			dto.HOSPCODE = entity.HOSPCODE;
			dto.CREATER = entity.CREATER;
			dto.CREATEDATE = entity.CREATEDATE;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class AccountAssembler : AccountAssemblerBase, IAccountAssembler
	{
	}


	public partial interface IAccountAssembler : IOpenAccessAssembler<AccountDto, Account>
	{
	}


	public partial class AccountAssemblerBase : OpenAccessAssembler<AccountDto, Account>
	{
		partial void OnDTOAssembled(AccountDto dto);
		partial void OnEntityAssembled(Account entity);


		public override Account Assemble(Account entity, AccountDto dto)
		{
			if (entity == null)
			{
				entity = new Account();
			}
			entity.Empcode = dto.Empcode;
			entity.Pwd = dto.Pwd;
			entity.Empname = dto.Empname;
			entity.Deptcode = dto.Deptcode;
			entity.Hospcode = dto.Hospcode;
			entity.Status = dto.Status;
			entity.Sdate = dto.Sdate;
			entity.Edate = dto.Edate;
			entity.ID = dto.ID;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			return entity;
		}
		public override AccountDto Assemble(Account entity)
		{
			AccountDto dto = new AccountDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Empcode = entity.Empcode;
			dto.Pwd = entity.Pwd;
			dto.Empname = entity.Empname;
			dto.Deptcode = entity.Deptcode;
			dto.Hospcode = entity.Hospcode;
			dto.Status = entity.Status;
			dto.Sdate = entity.Sdate;
			dto.Edate = entity.Edate;
			dto.ID = entity.ID;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_MenuRefAssembler : IKASA_MenuRefAssemblerBase, IIKASA_MenuRefAssembler
	{
	}


	public partial interface IIKASA_MenuRefAssembler : IOpenAccessAssembler<IKASA_MenuRefDto, IKASA_MenuRef>
	{
	}


	public partial class IKASA_MenuRefAssemblerBase : OpenAccessAssembler<IKASA_MenuRefDto, IKASA_MenuRef>
	{
		partial void OnDTOAssembled(IKASA_MenuRefDto dto);
		partial void OnEntityAssembled(IKASA_MenuRef entity);


		public override IKASA_MenuRef Assemble(IKASA_MenuRef entity, IKASA_MenuRefDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_MenuRef();
			}
			entity.Menuid = dto.Menuid;
			entity.Topteamcode = dto.Topteamcode;
			entity.Dept_code = dto.Dept_code;
			entity.Refid = dto.Refid;
			entity.Membertype = dto.Membertype;
			return entity;
		}
		public override IKASA_MenuRefDto Assemble(IKASA_MenuRef entity)
		{
			IKASA_MenuRefDto dto = new IKASA_MenuRefDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Menuid = entity.Menuid;
			dto.Topteamcode = entity.Topteamcode;
			dto.Dept_code = entity.Dept_code;
			dto.Refid = entity.Refid;
			dto.Membertype = entity.Membertype;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_ERCaseAssembler : IKASA_ERCaseAssemblerBase, IIKASA_ERCaseAssembler
	{
	}


	public partial interface IIKASA_ERCaseAssembler : IOpenAccessAssembler<IKASA_ERCaseDto, IKASA_ERCase>
	{
	}


	public partial class IKASA_ERCaseAssemblerBase : OpenAccessAssembler<IKASA_ERCaseDto, IKASA_ERCase>
	{
		partial void OnDTOAssembled(IKASA_ERCaseDto dto);
		partial void OnEntityAssembled(IKASA_ERCase entity);


		public override IKASA_ERCase Assemble(IKASA_ERCase entity, IKASA_ERCaseDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_ERCase();
			}
			entity.ID = dto.ID;
			entity.SOURCE_SYSTEM = dto.SOURCE_SYSTEM;
			entity.SOURCE_ID = dto.SOURCE_ID;
			entity.CHART_NO = dto.CHART_NO;
			entity.ICD_CODE = dto.ICD_CODE;
			entity.DISEASE_CLASS = dto.DISEASE_CLASS;
			entity.DEPT_CODE = dto.DEPT_CODE;
			entity.IN_DATE = dto.IN_DATE;
			entity.PROCEDURE = dto.PROCEDURE;
			entity.STATUS = dto.STATUS;
			entity.SIGN_TEACHER = dto.SIGN_TEACHER;
			entity.SIGN_DATE = dto.SIGN_DATE;
			entity.SIGN_NOTE = dto.SIGN_NOTE;
			entity.EMPCODE = dto.EMPCODE;
			entity.ICD_NAME = dto.ICD_NAME;
			entity.DEPT_NAME = dto.DEPT_NAME;
			entity.EPAID = dto.EPAID;
			entity.DOPSID = dto.DOPSID;
			return entity;
		}
		public override IKASA_ERCaseDto Assemble(IKASA_ERCase entity)
		{
			IKASA_ERCaseDto dto = new IKASA_ERCaseDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.SOURCE_SYSTEM = entity.SOURCE_SYSTEM;
			dto.SOURCE_ID = entity.SOURCE_ID;
			dto.CHART_NO = entity.CHART_NO;
			dto.ICD_CODE = entity.ICD_CODE;
			dto.DISEASE_CLASS = entity.DISEASE_CLASS;
			dto.DEPT_CODE = entity.DEPT_CODE;
			dto.IN_DATE = entity.IN_DATE;
			dto.PROCEDURE = entity.PROCEDURE;
			dto.STATUS = entity.STATUS;
			dto.SIGN_TEACHER = entity.SIGN_TEACHER;
			dto.SIGN_DATE = entity.SIGN_DATE;
			dto.SIGN_NOTE = entity.SIGN_NOTE;
			dto.EMPCODE = entity.EMPCODE;
			dto.ICD_NAME = entity.ICD_NAME;
			dto.DEPT_NAME = entity.DEPT_NAME;
			dto.EPAID = entity.EPAID;
			dto.DOPSID = entity.DOPSID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduSentenceAssembler : EduSentenceAssemblerBase, IEduSentenceAssembler
	{
	}


	public partial interface IEduSentenceAssembler : IOpenAccessAssembler<EduSentenceDto, EduSentence>
	{
	}


	public partial class EduSentenceAssemblerBase : OpenAccessAssembler<EduSentenceDto, EduSentence>
	{
		partial void OnDTOAssembled(EduSentenceDto dto);
		partial void OnEntityAssembled(EduSentence entity);


		public override EduSentence Assemble(EduSentence entity, EduSentenceDto dto)
		{
			if (entity == null)
			{
				entity = new EduSentence();
			}
			entity.ID = dto.ID;
			entity.EmpCode = dto.EmpCode;
			entity.CreateDate = dto.CreateDate;
			entity.ModifyDate = dto.ModifyDate;
			entity.Sentence = dto.Sentence;
			entity.IsPublic = dto.IsPublic;
			return entity;
		}
		public override EduSentenceDto Assemble(EduSentence entity)
		{
			EduSentenceDto dto = new EduSentenceDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EmpCode = entity.EmpCode;
			dto.CreateDate = entity.CreateDate;
			dto.ModifyDate = entity.ModifyDate;
			dto.Sentence = entity.Sentence;
			dto.IsPublic = entity.IsPublic;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_UploadFileAssembler : IKASA_UploadFileAssemblerBase, IIKASA_UploadFileAssembler
	{
	}


	public partial interface IIKASA_UploadFileAssembler : IOpenAccessAssembler<IKASA_UploadFileDto, IKASA_UploadFile>
	{
	}


	public partial class IKASA_UploadFileAssemblerBase : OpenAccessAssembler<IKASA_UploadFileDto, IKASA_UploadFile>
	{
		partial void OnDTOAssembled(IKASA_UploadFileDto dto);
		partial void OnEntityAssembled(IKASA_UploadFile entity);


		public override IKASA_UploadFile Assemble(IKASA_UploadFile entity, IKASA_UploadFileDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_UploadFile();
			}
			entity.ID = dto.ID;
			entity.FileName = dto.FileName;
			entity.DisplayTitle = dto.DisplayTitle;
			entity.Description = dto.Description;
			entity.FilePath = dto.FilePath;
			entity.FileCategory = dto.FileCategory;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			entity.DeleteTime = dto.DeleteTime;
			return entity;
		}
		public override IKASA_UploadFileDto Assemble(IKASA_UploadFile entity)
		{
			IKASA_UploadFileDto dto = new IKASA_UploadFileDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.FileName = entity.FileName;
			dto.DisplayTitle = entity.DisplayTitle;
			dto.Description = entity.Description;
			dto.FilePath = entity.FilePath;
			dto.FileCategory = entity.FileCategory;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			dto.DeleteTime = entity.DeleteTime;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_ActUploadFileAssembler : IKASA_ActUploadFileAssemblerBase, IIKASA_ActUploadFileAssembler
	{
	}


	public partial interface IIKASA_ActUploadFileAssembler : IOpenAccessAssembler<IKASA_ActUploadFileDto, IKASA_ActUploadFile>
	{
	}


	public partial class IKASA_ActUploadFileAssemblerBase : OpenAccessAssembler<IKASA_ActUploadFileDto, IKASA_ActUploadFile>
	{
		partial void OnDTOAssembled(IKASA_ActUploadFileDto dto);
		partial void OnEntityAssembled(IKASA_ActUploadFile entity);


		public override IKASA_ActUploadFile Assemble(IKASA_ActUploadFile entity, IKASA_ActUploadFileDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_ActUploadFile();
			}
			entity.ID = dto.ID;
			entity.FileName = dto.FileName;
			entity.DisplayTitle = dto.DisplayTitle;
			entity.Description = dto.Description;
			entity.FilePath = dto.FilePath;
			entity.FileCategory = dto.FileCategory;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			entity.DeleteTime = dto.DeleteTime;
			entity.ActDate = dto.ActDate;
			return entity;
		}
		public override IKASA_ActUploadFileDto Assemble(IKASA_ActUploadFile entity)
		{
			IKASA_ActUploadFileDto dto = new IKASA_ActUploadFileDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.FileName = entity.FileName;
			dto.DisplayTitle = entity.DisplayTitle;
			dto.Description = entity.Description;
			dto.FilePath = entity.FilePath;
			dto.FileCategory = entity.FileCategory;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			dto.DeleteTime = entity.DeleteTime;
			dto.ActDate = entity.ActDate;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class EduSettingAssembler : EduSettingAssemblerBase, IEduSettingAssembler
	{
	}


	public partial interface IEduSettingAssembler : IOpenAccessAssembler<EduSettingDto, EduSetting>
	{
	}


	public partial class EduSettingAssemblerBase : OpenAccessAssembler<EduSettingDto, EduSetting>
	{
		partial void OnDTOAssembled(EduSettingDto dto);
		partial void OnEntityAssembled(EduSetting entity);


		public override EduSetting Assemble(EduSetting entity, EduSettingDto dto)
		{
			if (entity == null)
			{
				entity = new EduSetting();
			}
			entity.CodeType = dto.CodeType;
			entity.Code = dto.Code;
			entity.Name = dto.Name;
			entity.SettingValue = dto.SettingValue;
			entity.Des = dto.Des;
			return entity;
		}
		public override EduSettingDto Assemble(EduSetting entity)
		{
			EduSettingDto dto = new EduSettingDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.CodeType = entity.CodeType;
			dto.Code = entity.Code;
			dto.Name = entity.Name;
			dto.SettingValue = entity.SettingValue;
			dto.Des = entity.Des;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_ERCase_EvalDetAssembler : IKASA_ERCase_EvalDetAssemblerBase, IIKASA_ERCase_EvalDetAssembler
	{
	}


	public partial interface IIKASA_ERCase_EvalDetAssembler : IOpenAccessAssembler<IKASA_ERCase_EvalDetDto, IKASA_ERCase_EvalDet>
	{
	}


	public partial class IKASA_ERCase_EvalDetAssemblerBase : OpenAccessAssembler<IKASA_ERCase_EvalDetDto, IKASA_ERCase_EvalDet>
	{
		partial void OnDTOAssembled(IKASA_ERCase_EvalDetDto dto);
		partial void OnEntityAssembled(IKASA_ERCase_EvalDet entity);


		public override IKASA_ERCase_EvalDet Assemble(IKASA_ERCase_EvalDet entity, IKASA_ERCase_EvalDetDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_ERCase_EvalDet();
			}
			entity.EvalID = dto.EvalID;
			entity.ControlID = dto.ControlID;
			entity.ControlValue = dto.ControlValue;
			return entity;
		}
		public override IKASA_ERCase_EvalDetDto Assemble(IKASA_ERCase_EvalDet entity)
		{
			IKASA_ERCase_EvalDetDto dto = new IKASA_ERCase_EvalDetDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EvalID = entity.EvalID;
			dto.ControlID = entity.ControlID;
			dto.ControlValue = entity.ControlValue;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_ERCase_EvalAssembler : IKASA_ERCase_EvalAssemblerBase, IIKASA_ERCase_EvalAssembler
	{
	}


	public partial interface IIKASA_ERCase_EvalAssembler : IOpenAccessAssembler<IKASA_ERCase_EvalDto, IKASA_ERCase_Eval>
	{
	}


	public partial class IKASA_ERCase_EvalAssemblerBase : OpenAccessAssembler<IKASA_ERCase_EvalDto, IKASA_ERCase_Eval>
	{
		partial void OnDTOAssembled(IKASA_ERCase_EvalDto dto);
		partial void OnEntityAssembled(IKASA_ERCase_Eval entity);


		public override IKASA_ERCase_Eval Assemble(IKASA_ERCase_Eval entity, IKASA_ERCase_EvalDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_ERCase_Eval();
			}
			entity.ID = dto.ID;
			entity.EvalType = dto.EvalType;
			entity.CreateDate = dto.CreateDate;
			entity.TeacherID = dto.TeacherID;
			entity.Status = dto.Status;
			entity.SubmitTime = dto.SubmitTime;
			entity.CaseID = dto.CaseID;
			return entity;
		}
		public override IKASA_ERCase_EvalDto Assemble(IKASA_ERCase_Eval entity)
		{
			IKASA_ERCase_EvalDto dto = new IKASA_ERCase_EvalDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ID = entity.ID;
			dto.EvalType = entity.EvalType;
			dto.CreateDate = entity.CreateDate;
			dto.TeacherID = entity.TeacherID;
			dto.Status = entity.Status;
			dto.SubmitTime = entity.SubmitTime;
			dto.CaseID = entity.CaseID;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class GoodVSDatumAssembler : GoodVSDatumAssemblerBase, IGoodVSDatumAssembler
	{
	}


	public partial interface IGoodVSDatumAssembler : IOpenAccessAssembler<GoodVSDatumDto, GoodVSDatum>
	{
	}


	public partial class GoodVSDatumAssemblerBase : OpenAccessAssembler<GoodVSDatumDto, GoodVSDatum>
	{
		partial void OnDTOAssembled(GoodVSDatumDto dto);
		partial void OnEntityAssembled(GoodVSDatum entity);


		public override GoodVSDatum Assemble(GoodVSDatum entity, GoodVSDatumDto dto)
		{
			if (entity == null)
			{
				entity = new GoodVSDatum();
			}
			entity.序號 = dto.序號;
			entity.分類 = dto.分類;
			entity.部門名稱 = dto.部門名稱;
			entity.編制單位 = dto.編制單位;
			entity.員工編號 = dto.員工編號;
			entity.員工姓名 = dto.員工姓名;
			entity.總分final = dto.總分final;
			entity.分數轉換 = dto.分數轉換;
			return entity;
		}
		public override GoodVSDatumDto Assemble(GoodVSDatum entity)
		{
			GoodVSDatumDto dto = new GoodVSDatumDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.序號 = entity.序號;
			dto.分類 = entity.分類;
			dto.部門名稱 = entity.部門名稱;
			dto.編制單位 = entity.編制單位;
			dto.員工編號 = entity.員工編號;
			dto.員工姓名 = entity.員工姓名;
			dto.總分final = entity.總分final;
			dto.分數轉換 = entity.分數轉換;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class GoodVSDataDeAssembler : GoodVSDataDeAssemblerBase, IGoodVSDataDeAssembler
	{
	}


	public partial interface IGoodVSDataDeAssembler : IOpenAccessAssembler<GoodVSDataDeDto, GoodVSDataDe>
	{
	}


	public partial class GoodVSDataDeAssemblerBase : OpenAccessAssembler<GoodVSDataDeDto, GoodVSDataDe>
	{
		partial void OnDTOAssembled(GoodVSDataDeDto dto);
		partial void OnEntityAssembled(GoodVSDataDe entity);


		public override GoodVSDataDe Assemble(GoodVSDataDe entity, GoodVSDataDeDto dto)
		{
			if (entity == null)
			{
				entity = new GoodVSDataDe();
			}
			entity.期別 = dto.期別;
			entity.科別 = dto.科別;
			entity.臨床指導老師 = dto.臨床指導老師;
			entity.填寫人數 = dto.填寫人數;
			entity.教師總滿意度 = dto.教師總滿意度;
			entity.教師提供鼓勵支持之學習氣氛 = dto.教師提供鼓勵支持之學習氣氛;
			entity.教師給予清楚合理的學習目標 = dto.教師給予清楚合理的學習目標;
			entity.教師給予明確回饋與改善建議 = dto.教師給予明確回饋與改善建議;
			entity.教師具教學熱忱且願意付出時間從事教學 = dto.教師具教學熱忱且願意付出時間從事教學;
			entity.教師展現臨床醫療專業能力 = dto.教師展現臨床醫療專業能力;
			entity.職編 = dto.職編;
			return entity;
		}
		public override GoodVSDataDeDto Assemble(GoodVSDataDe entity)
		{
			GoodVSDataDeDto dto = new GoodVSDataDeDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.期別 = entity.期別;
			dto.科別 = entity.科別;
			dto.臨床指導老師 = entity.臨床指導老師;
			dto.填寫人數 = entity.填寫人數;
			dto.教師總滿意度 = entity.教師總滿意度;
			dto.教師提供鼓勵支持之學習氣氛 = entity.教師提供鼓勵支持之學習氣氛;
			dto.教師給予清楚合理的學習目標 = entity.教師給予清楚合理的學習目標;
			dto.教師給予明確回饋與改善建議 = entity.教師給予明確回饋與改善建議;
			dto.教師具教學熱忱且願意付出時間從事教學 = entity.教師具教學熱忱且願意付出時間從事教學;
			dto.教師展現臨床醫療專業能力 = entity.教師展現臨床醫療專業能力;
			dto.職編 = entity.職編;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class V_KPINormExtraFieldAssembler : V_KPINormExtraFieldAssemblerBase, IV_KPINormExtraFieldAssembler
	{
	}


	public partial interface IV_KPINormExtraFieldAssembler : IOpenAccessAssembler<V_KPINormExtraFieldDto, V_KPINormExtraField>
	{
	}


	public partial class V_KPINormExtraFieldAssemblerBase : OpenAccessAssembler<V_KPINormExtraFieldDto, V_KPINormExtraField>
	{
		partial void OnDTOAssembled(V_KPINormExtraFieldDto dto);
		partial void OnEntityAssembled(V_KPINormExtraField entity);


		public override V_KPINormExtraField Assemble(V_KPINormExtraField entity, V_KPINormExtraFieldDto dto)
		{
			if (entity == null)
			{
				entity = new V_KPINormExtraField();
			}
			entity.KPIID = dto.KPIID;
			entity.ISNECESSARY = dto.ISNECESSARY;
			entity.FIELDTYPE = dto.FIELDTYPE;
			entity.FIELDNAME = dto.FIELDNAME;
			entity.FIELDDISPLAYTEXT = dto.FIELDDISPLAYTEXT;
			entity.DISPLAYORDER = dto.DISPLAYORDER;
			return entity;
		}
		public override V_KPINormExtraFieldDto Assemble(V_KPINormExtraField entity)
		{
			V_KPINormExtraFieldDto dto = new V_KPINormExtraFieldDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.KPIID = entity.KPIID;
			dto.ISNECESSARY = entity.ISNECESSARY;
			dto.FIELDTYPE = entity.FIELDTYPE;
			dto.FIELDNAME = entity.FIELDNAME;
			dto.FIELDDISPLAYTEXT = entity.FIELDDISPLAYTEXT;
			dto.DISPLAYORDER = entity.DISPLAYORDER;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class V_KPINormAssembler : V_KPINormAssemblerBase, IV_KPINormAssembler
	{
	}


	public partial interface IV_KPINormAssembler : IOpenAccessAssembler<V_KPINormDto, V_KPINorm>
	{
	}


	public partial class V_KPINormAssemblerBase : OpenAccessAssembler<V_KPINormDto, V_KPINorm>
	{
		partial void OnDTOAssembled(V_KPINormDto dto);
		partial void OnEntityAssembled(V_KPINorm entity);


		public override V_KPINorm Assemble(V_KPINorm entity, V_KPINormDto dto)
		{
			if (entity == null)
			{
				entity = new V_KPINorm();
			}
			entity.WithFormTyping = dto.WithFormTyping;
			entity.WithDataImport = dto.WithDataImport;
			entity.UploaderDes = dto.UploaderDes;
			entity.UpdateTime = dto.UpdateTime;
			entity.Status = dto.Status;
			entity.ShowSeqNo = dto.ShowSeqNo;
			entity.RoundCode = dto.RoundCode;
			entity.ParentKPIID = dto.ParentKPIID;
			entity.NormID = dto.NormID;
			entity.Name = dto.Name;
			entity.Modifier = dto.Modifier;
			entity.KPIID = dto.KPIID;
			entity.ForIndivudual = dto.ForIndivudual;
			entity.EachScore = dto.EachScore;
			entity.EachDes = dto.EachDes;
			entity.Des = dto.Des;
			entity.Creator = dto.Creator;
			entity.CeilingScore = dto.CeilingScore;
			return entity;
		}
		public override V_KPINormDto Assemble(V_KPINorm entity)
		{
			V_KPINormDto dto = new V_KPINormDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.WithFormTyping = entity.WithFormTyping;
			dto.WithDataImport = entity.WithDataImport;
			dto.UploaderDes = entity.UploaderDes;
			dto.UpdateTime = entity.UpdateTime;
			dto.Status = entity.Status;
			dto.ShowSeqNo = entity.ShowSeqNo;
			dto.RoundCode = entity.RoundCode;
			dto.ParentKPIID = entity.ParentKPIID;
			dto.NormID = entity.NormID;
			dto.Name = entity.Name;
			dto.Modifier = entity.Modifier;
			dto.KPIID = entity.KPIID;
			dto.ForIndivudual = entity.ForIndivudual;
			dto.EachScore = entity.EachScore;
			dto.EachDes = entity.EachDes;
			dto.Des = entity.Des;
			dto.Creator = entity.Creator;
			dto.CeilingScore = entity.CeilingScore;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class TeachTimeKpiRefAssembler : TeachTimeKpiRefAssemblerBase, ITeachTimeKpiRefAssembler
	{
	}


	public partial interface ITeachTimeKpiRefAssembler : IOpenAccessAssembler<TeachTimeKpiRefDto, TeachTimeKpiRef>
	{
	}


	public partial class TeachTimeKpiRefAssemblerBase : OpenAccessAssembler<TeachTimeKpiRefDto, TeachTimeKpiRef>
	{
		partial void OnDTOAssembled(TeachTimeKpiRefDto dto);
		partial void OnEntityAssembled(TeachTimeKpiRef entity);


		public override TeachTimeKpiRef Assemble(TeachTimeKpiRef entity, TeachTimeKpiRefDto dto)
		{
			if (entity == null)
			{
				entity = new TeachTimeKpiRef();
			}
			entity.KPICode = dto.KPICode;
			entity.TransRate = dto.TransRate;
			entity.EnableDate = dto.EnableDate;
			entity.DisableDate = dto.DisableDate;
			entity.Roletype = dto.Roletype;
			entity.Acttype = dto.Acttype;
			return entity;
		}
		public override TeachTimeKpiRefDto Assemble(TeachTimeKpiRef entity)
		{
			TeachTimeKpiRefDto dto = new TeachTimeKpiRefDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.KPICode = entity.KPICode;
			dto.TransRate = entity.TransRate;
			dto.EnableDate = entity.EnableDate;
			dto.DisableDate = entity.DisableDate;
			dto.Roletype = entity.Roletype;
			dto.Acttype = entity.Acttype;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class V_KPIRoundAssembler : V_KPIRoundAssemblerBase, IV_KPIRoundAssembler
	{
	}


	public partial interface IV_KPIRoundAssembler : IOpenAccessAssembler<V_KPIRoundDto, V_KPIRound>
	{
	}


	public partial class V_KPIRoundAssemblerBase : OpenAccessAssembler<V_KPIRoundDto, V_KPIRound>
	{
		partial void OnDTOAssembled(V_KPIRoundDto dto);
		partial void OnEntityAssembled(V_KPIRound entity);


		public override V_KPIRound Assemble(V_KPIRound entity, V_KPIRoundDto dto)
		{
			if (entity == null)
			{
				entity = new V_KPIRound();
			}
			entity.YearCode = dto.YearCode;
			entity.ViewDetDeadline = dto.ViewDetDeadline;
			entity.UpdateTime = dto.UpdateTime;
			entity.RoundCode = dto.RoundCode;
			entity.Modifier = dto.Modifier;
			entity.HospCode = dto.HospCode;
			entity.Des = dto.Des;
			entity.DeadlineStep2 = dto.DeadlineStep2;
			entity.DeadlineStep1 = dto.DeadlineStep1;
			entity.DateTo = dto.DateTo;
			entity.DateFrom = dto.DateFrom;
			entity.Creator = dto.Creator;
			return entity;
		}
		public override V_KPIRoundDto Assemble(V_KPIRound entity)
		{
			V_KPIRoundDto dto = new V_KPIRoundDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.YearCode = entity.YearCode;
			dto.ViewDetDeadline = entity.ViewDetDeadline;
			dto.UpdateTime = entity.UpdateTime;
			dto.RoundCode = entity.RoundCode;
			dto.Modifier = entity.Modifier;
			dto.HospCode = entity.HospCode;
			dto.Des = entity.Des;
			dto.DeadlineStep2 = entity.DeadlineStep2;
			dto.DeadlineStep1 = entity.DeadlineStep1;
			dto.DateTo = entity.DateTo;
			dto.DateFrom = entity.DateFrom;
			dto.Creator = entity.Creator;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class MedicalTeachPointAssembler : MedicalTeachPointAssemblerBase, IMedicalTeachPointAssembler
	{
	}


	public partial interface IMedicalTeachPointAssembler : IOpenAccessAssembler<MedicalTeachPointDto, MedicalTeachPoint>
	{
	}


	public partial class MedicalTeachPointAssemblerBase : OpenAccessAssembler<MedicalTeachPointDto, MedicalTeachPoint>
	{
		partial void OnDTOAssembled(MedicalTeachPointDto dto);
		partial void OnEntityAssembled(MedicalTeachPoint entity);


		public override MedicalTeachPoint Assemble(MedicalTeachPoint entity, MedicalTeachPointDto dto)
		{
			if (entity == null)
			{
				entity = new MedicalTeachPoint();
			}
			entity.EmpCode = dto.EmpCode;
			entity.DataDate = dto.DataDate;
			entity.DeptCode = dto.DeptCode;
			entity.BaseTeachPoint = dto.BaseTeachPoint;
			entity.ID = dto.ID;
			entity.HospCode = dto.HospCode;
			entity.Creater = dto.Creater;
			entity.CreateTime = dto.CreateTime;
			entity.BaseRatio = dto.BaseRatio;
			entity.TeacherPoint = dto.TeacherPoint;
			entity.STrainPoint = dto.STrainPoint;
			entity.Remark = dto.Remark;
			entity.ReviewStatus = dto.ReviewStatus;
			return entity;
		}
		public override MedicalTeachPointDto Assemble(MedicalTeachPoint entity)
		{
			MedicalTeachPointDto dto = new MedicalTeachPointDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.EmpCode = entity.EmpCode;
			dto.DataDate = entity.DataDate;
			dto.DeptCode = entity.DeptCode;
			dto.BaseTeachPoint = entity.BaseTeachPoint;
			dto.ID = entity.ID;
			dto.HospCode = entity.HospCode;
			dto.Creater = entity.Creater;
			dto.CreateTime = entity.CreateTime;
			dto.BaseRatio = entity.BaseRatio;
			dto.TeacherPoint = entity.TeacherPoint;
			dto.STrainPoint = entity.STrainPoint;
			dto.Remark = entity.Remark;
			dto.ReviewStatus = entity.ReviewStatus;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_ERExamAssembler : IKASA_ERExamAssemblerBase, IIKASA_ERExamAssembler
	{
	}


	public partial interface IIKASA_ERExamAssembler : IOpenAccessAssembler<IKASA_ERExamDto, IKASA_ERExam>
	{
	}


	public partial class IKASA_ERExamAssemblerBase : OpenAccessAssembler<IKASA_ERExamDto, IKASA_ERExam>
	{
		partial void OnDTOAssembled(IKASA_ERExamDto dto);
		partial void OnEntityAssembled(IKASA_ERExam entity);


		public override IKASA_ERExam Assemble(IKASA_ERExam entity, IKASA_ERExamDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_ERExam();
			}
			entity.ExamID = dto.ExamID;
			entity.ExamName = dto.ExamName;
			entity.ExamDate = dto.ExamDate;
			entity.HospCode = dto.HospCode;
			entity.Creater = dto.Creater;
			entity.CreateDate = dto.CreateDate;
			entity.DeleteFlag = dto.DeleteFlag;
			entity.DeleteTime = dto.DeleteTime;
			return entity;
		}
		public override IKASA_ERExamDto Assemble(IKASA_ERExam entity)
		{
			IKASA_ERExamDto dto = new IKASA_ERExamDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ExamID = entity.ExamID;
			dto.ExamName = entity.ExamName;
			dto.ExamDate = entity.ExamDate;
			dto.HospCode = entity.HospCode;
			dto.Creater = entity.Creater;
			dto.CreateDate = entity.CreateDate;
			dto.DeleteFlag = entity.DeleteFlag;
			dto.DeleteTime = entity.DeleteTime;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_ERExamScoreAssembler : IKASA_ERExamScoreAssemblerBase, IIKASA_ERExamScoreAssembler
	{
	}


	public partial interface IIKASA_ERExamScoreAssembler : IOpenAccessAssembler<IKASA_ERExamScoreDto, IKASA_ERExamScore>
	{
	}


	public partial class IKASA_ERExamScoreAssemblerBase : OpenAccessAssembler<IKASA_ERExamScoreDto, IKASA_ERExamScore>
	{
		partial void OnDTOAssembled(IKASA_ERExamScoreDto dto);
		partial void OnEntityAssembled(IKASA_ERExamScore entity);


		public override IKASA_ERExamScore Assemble(IKASA_ERExamScore entity, IKASA_ERExamScoreDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_ERExamScore();
			}
			entity.ExamID = dto.ExamID;
			entity.EmpCode = dto.EmpCode;
			entity.ExamIDNo = dto.ExamIDNo;
			entity.StageNo = dto.StageNo;
			entity.Score = dto.Score;
			return entity;
		}
		public override IKASA_ERExamScoreDto Assemble(IKASA_ERExamScore entity)
		{
			IKASA_ERExamScoreDto dto = new IKASA_ERExamScoreDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ExamID = entity.ExamID;
			dto.EmpCode = entity.EmpCode;
			dto.ExamIDNo = entity.ExamIDNo;
			dto.StageNo = entity.StageNo;
			dto.Score = entity.Score;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


	public partial class IKASA_ERExamStageAssembler : IKASA_ERExamStageAssemblerBase, IIKASA_ERExamStageAssembler
	{
	}


	public partial interface IIKASA_ERExamStageAssembler : IOpenAccessAssembler<IKASA_ERExamStageDto, IKASA_ERExamStage>
	{
	}


	public partial class IKASA_ERExamStageAssemblerBase : OpenAccessAssembler<IKASA_ERExamStageDto, IKASA_ERExamStage>
	{
		partial void OnDTOAssembled(IKASA_ERExamStageDto dto);
		partial void OnEntityAssembled(IKASA_ERExamStage entity);


		public override IKASA_ERExamStage Assemble(IKASA_ERExamStage entity, IKASA_ERExamStageDto dto)
		{
			if (entity == null)
			{
				entity = new IKASA_ERExamStage();
			}
			entity.ExamID = dto.ExamID;
			entity.StageNo = dto.StageNo;
			entity.StageName = dto.StageName;
			entity.PassScore = dto.PassScore;
			return entity;
		}
		public override IKASA_ERExamStageDto Assemble(IKASA_ERExamStage entity)
		{
			IKASA_ERExamStageDto dto = new IKASA_ERExamStageDto ();
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.ExamID = entity.ExamID;
			dto.StageNo = entity.StageNo;
			dto.StageName = entity.StageName;
			dto.PassScore = entity.PassScore;
			this.OnDTOAssembled(dto);
			return dto;
		}
	}


}
#pragma warning restore 1591
