//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:2.0.50727.3615
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data;
    using System.Linq;
    
using System.Collections.Specialized;
using System.Data.SqlClient;
using System.Data.Common;

namespace HtmlFormUtility.Components
{
    public partial class ViewComponent
    {

        DataContextDataContext context = new DataContextDataContext();
        public ViewComponent()
        {
        }

        #region Business Methods

        public virtual List<FORM_TEMPLATE_ELEMENT_READONLY> GetReadOnlySetting(int templateid)
        {
            return context.FORM_TEMPLATE_ELEMENT_READONLies.Where(c => context.FORM_TEMPLATE_ELEMENTS.Count(d => d.TEMPLATE_ID == templateid && d.TEMPLATE_ELEMENT_ID == c.TEMPLATE_ELEMELT_ID) > 0).ToList();
        }

        public virtual FORM_TEMPLATE_ELEMENTS GetTemplateElementByTemplateElementID(string templateelemenetid)
        {
            return context.FORM_TEMPLATE_ELEMENTS.Where(c => c.TEMPLATE_ELEMENT_ID == templateelemenetid).FirstOrDefault();
        }

        public virtual FORM_INSTANCES SelectFormInstance(int instanceId)
        {
            return context.FORM_INSTANCES.Where(c => c.INSTANCE_ID == instanceId).FirstOrDefault();
        }

        public virtual FORM_TEMPLATES SelectFormTemplate(int templateId)
        {
            return context.FORM_TEMPLATES.Where(c => c.TEMPLATE_ID == templateId).FirstOrDefault();
        }

        public virtual List<FORM_TEMPLATE_EXPRESSIONS> ListFormTemplateExpressions(int templateId)
        {
            return context.FORM_TEMPLATE_EXPRESSIONS.Where(c => c.TEMPLATE_ID == templateId).ToList();
        }

        public virtual List<FORM_INSTANCE_ELEMENTS> ListFormInstanceElements(int instanceId)
        {
            return context.FORM_INSTANCE_ELEMENTS.Where(c => c.INSTANCE_ID == instanceId).ToList();
        }

        public virtual List<FORM_TEMPLATES> ListFormTemplates()
        {
            return context.FORM_TEMPLATES.ToList();
        }

        public virtual List<FORM_TEMPLATES> ListFormTemplatesSimple()
        {
            List<FORM_TEMPLATES> result = new List<FORM_TEMPLATES>();
                var list = (from t in context.FORM_TEMPLATES
                                           select new { t.TEMPLATE_ID, t.PARENT_TEMPLATE_ID, t.TEMPLATE_NAME, t.ENABLED }).ToList();
            foreach(var d in list)
            {
                FORM_TEMPLATES t = new FORM_TEMPLATES();
                t.TEMPLATE_ID = d.TEMPLATE_ID;
                t.PARENT_TEMPLATE_ID = d.PARENT_TEMPLATE_ID;
                t.TEMPLATE_NAME = d.TEMPLATE_NAME;
                t.ENABLED = d.ENABLED;
                result.Add(t);

            }
            return result;
        }


        public virtual List<FORM_TEMPLATES> ListFormTemplatesSimple(string hospcode)
        {
            List<FORM_TEMPLATES> result = new List<FORM_TEMPLATES>();
            var list = (from t in context.FORM_TEMPLATES
                        where t.FORM_TEMPLATE_PERMISSION.Count(c => c.HOSPCODE == hospcode) > 0
                        select new { t.TEMPLATE_ID, t.PARENT_TEMPLATE_ID, t.TEMPLATE_NAME, t.ENABLED }).ToList();
            foreach (var d in list)
            {
                FORM_TEMPLATES t = new FORM_TEMPLATES();
                t.TEMPLATE_ID = d.TEMPLATE_ID;
                t.PARENT_TEMPLATE_ID = d.PARENT_TEMPLATE_ID;
                t.TEMPLATE_NAME = d.TEMPLATE_NAME;
                t.ENABLED = d.ENABLED;
                result.Add(t);

            }
            return result;
        }


        public virtual List<FORM_TEMPLATES> ListAllFormTemplatesSimple()
        {
            List<FORM_TEMPLATES> result = new List<FORM_TEMPLATES>();
            var list = (from t in context.FORM_TEMPLATES
                        select new { t.TEMPLATE_ID, t.PARENT_TEMPLATE_ID, t.TEMPLATE_NAME, t.ENABLED }).ToList();
            foreach (var d in list)
            {
                FORM_TEMPLATES t = new FORM_TEMPLATES();
                t.TEMPLATE_ID = d.TEMPLATE_ID;
                t.PARENT_TEMPLATE_ID = d.PARENT_TEMPLATE_ID;
                t.TEMPLATE_NAME = d.TEMPLATE_NAME;
                t.ENABLED = d.ENABLED;
                result.Add(t);

            }
            return result;
        }       


        public virtual List<FORM_TEMPLATES> ListFormTemplatesByCategory(string category)
        {
            return context.FORM_TEMPLATES.Where(c => c.TEMPLATE_CATEGORY == category && c.ENABLED).ToList();
        }

        public static List<FORM_TEMPLATES> StaticListFormTemplatesByCategory(string category)
        {
            DataContextDataContext context = new DataContextDataContext();
            return context.FORM_TEMPLATES.Where(c => c.TEMPLATE_CATEGORY == category && c.ENABLED).ToList();
        }

        public virtual List<FORM_TEMPLATES> ListFormTemplatesByCategory(string category, string hospcode)
        {
            return context.FORM_TEMPLATES.Where(c => c.TEMPLATE_CATEGORY == category && c.ENABLED && c.FORM_TEMPLATE_PERMISSION.Count(d => d.HOSPCODE == hospcode) > 0).ToList();
        }

        public static List<FORM_TEMPLATES> StaticListFormTemplatesByCategory(string category, string hospcode)
        {
            DataContextDataContext context = new DataContextDataContext();
            return context.FORM_TEMPLATES.Where(c => c.TEMPLATE_CATEGORY == category && c.ENABLED && c.FORM_TEMPLATE_PERMISSION.Count(d => d.HOSPCODE == hospcode) > 0).ToList();
        }

        public virtual List<FORM_TEMPLATE_ELEMENTS> ListFormTemplateElement()
        {
            return context.FORM_TEMPLATE_ELEMENTS.ToList();
        }

        public virtual List<FORM_TEMPLATE_ELEMENTS> ListFormTemplateElement(int TemplateId)
        {
            return context.FORM_TEMPLATE_ELEMENTS.Where(c => c.TEMPLATE_ID == TemplateId).ToList();
        }

        public virtual FORM_TEMPLATE_ELEMENTS SelectFormTemplateElementByID(int TemplateId, string id)
        {
            return context.FORM_TEMPLATE_ELEMENTS.Where(c => c.TEMPLATE_ID == TemplateId && c.ID == id).FirstOrDefault();
        }

        public virtual List<FORM_TEMPLATE_IMAGES> ListFormTemplateImage(int templateId)
        {
            return context.FORM_TEMPLATE_IMAGES.Where(c => c.TEMPLATE_ID == templateId).ToList();
        }

        public virtual List<FORM_TEMPLATE_ELEMENTS> GetFormTemplateElementMaxScore(int templateid)
        {
            return context.FORM_TEMPLATE_ELEMENTS.Where(c => c.TEMPLATE_ID == templateid && c.MAXPOINT != null).ToList();
        }

        public virtual List<FORM_TEMPLATE_ELEMENTS> GetFormTemplateElementMinTextCount(int templateid)
        {
            return context.FORM_TEMPLATE_ELEMENTS.Where(c => c.TEMPLATE_ID == templateid && c.MinTextCount != null).ToList();
        }


        public virtual List<FORM_TEMPLATE_ELEMENTS> GetFormTemplateElementMaxTextCount(int templateid)
        {
            return context.FORM_TEMPLATE_ELEMENTS.Where(c => c.TEMPLATE_ID == templateid && c.MaxTextCount != null).ToList();
        }

        public virtual Dictionary<string, DataTable> ListFormTemplateSql(int templateId, string inhospid)
        {
            List<FORM_TEMPLATE_SQL> list = ListFormTemplateSql(templateId);
            Dictionary<string, DataTable> dic = new Dictionary<string, DataTable>();

            foreach (FORM_TEMPLATE_SQL fts in list)
            {
                if (fts.SOURCEREFSTATEMENT.Trim() != "")
                {
                    string _sql = fts.SOURCEREFSTATEMENT;

                    IDbDataAdapter adp = null;
                    if (context.Connection is SqlConnection)
                    {
                        adp = new SqlDataAdapter(_sql, context.Connection as SqlConnection);

                    }

                    OrderedDictionary od = new OrderedDictionary();
                    //if (_sql.ToLower().Contains(":inhospid"))
                    //{
                    //    od["inhospid"] = inhospid;
                    //}
                    DataSet ds = new DataSet();

                    adp.Fill(ds);
                    //IDataReader reader = adp.ExecuteSelectCommandReaderBySql(context.Connection.ConnectionString, _sql, od);
                    dic.Add(fts.KEY, ds.Tables[0]);
                }

            }

            return dic;
        }

        public virtual DataTable ListFormTemplateSqlById(int templateId, string id, string inhospid)
        {
            List<FORM_TEMPLATE_SQL> list = ListFormTemplateSqlById(templateId, id);

            DataTable reader = null;
            foreach (FORM_TEMPLATE_SQL fts in list)
            {
                if (fts.SOURCEREFSTATEMENT.Trim() != "")
                {
                    string _sql = fts.SOURCEREFSTATEMENT;
                    object[] parm = null;

                    IDbDataAdapter adp = null;
                    if (context.Connection is SqlConnection)
                    {
                        adp = new SqlDataAdapter(_sql, context.Connection as SqlConnection);

                    }

                    OrderedDictionary od = new OrderedDictionary();
                    if (_sql.ToLower().Contains(":inhospid"))
                    {
                        od["inhospid"] = inhospid;
                        parm = new object[] { inhospid };
                    }

                    DataSet ds = new DataSet();

                    adp.Fill(ds);

                    reader = ds.Tables[0];

                    //reader = DALAdapter.ExecuteSelectCommandReaderBySql(context.Connection.ConnectionString, _sql, od);
                }
            }

            return reader;
        }

        public virtual DataTable ListFormTemplateSqlById(int templateId, string id, NameValueCollection parms)
        {
            List<FORM_TEMPLATE_SQL> list = ListFormTemplateSqlById(templateId, id);

            DataTable reader = null;

            foreach (FORM_TEMPLATE_SQL fts in list)
            {
                if (fts.SOURCEREFSTATEMENT.Trim() != "")
                {
                    string _sql = fts.SOURCEREFSTATEMENT;

                    IDbDataAdapter adp = null;
                    if (context.Connection is SqlConnection)
                    {
                        adp = new SqlDataAdapter(_sql, context.Connection as SqlConnection);

                    }


                    foreach (string key in parms.Keys)
                    {
                        if (_sql.ToLower().Contains("@" + key.ToLower()))
                        {
                            SqlParameter parm = new SqlParameter("@" + key, parms[key]);
                            adp.SelectCommand.Parameters.Add(parm);
                        }
                    }


                    DataSet ds = new DataSet();

                    adp.Fill(ds);

                    reader = ds.Tables[0];
                }
            }
            return reader;
        }


        /// <summary>
        /// 讀取動態Element資料
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="id"></param>
        /// <param name="direction"></param>
        /// <returns></returns>
        public virtual DataTable ListDynamicElementById(int templateId, string id,Dictionary<string,string> parms, out string direction)
        {
            List<FORM_TEMPLATE_DYNAMIC_ELEMENTS> list = ListFormTemplateDynamicElementById(templateId, id);

            //預設指定垂直顯示 V:垂直  H:水平
            direction = "V";
            DataTable reader = null;
            foreach (FORM_TEMPLATE_DYNAMIC_ELEMENTS fts in list)
            {
                if (fts.SOURCEREFSTATEMENT.Trim() != "")
                {
                    string _sql = fts.SOURCEREFSTATEMENT;

                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = context.Connection as SqlConnection;
                    cmd.CommandText = _sql;
                    foreach (string key in parms.Keys)
                    {
                        cmd.Parameters.AddWithValue(key, parms[key]);
                    }

                    IDbDataAdapter adp = null;
                    if (context.Connection is SqlConnection)
                    {
                        adp = new SqlDataAdapter(cmd);

                    }

                    OrderedDictionary od = new OrderedDictionary();


                    DataSet ds = new DataSet();

                    adp.Fill(ds);

                    reader = ds.Tables[0];

                    direction = fts.DISPLAY_DIRECTION;
                    //reader = DALAdapter.ExecuteSelectCommandReaderBySql(context.Connection.ConnectionString, _sql, od);
                }
            }

            return reader;
        }


        public virtual List<FORM_TEMPLATE_SQL> ListFormTemplateSql(int templateId)
        {
            List<FORM_TEMPLATE_SQL> list = context.FORM_TEMPLATE_SQL.Where(c => c.TEMPLATE_ID == templateId).ToList();
            return list;
        }

        public virtual List<FORM_TEMPLATE_SQL> ListFormTemplateSqlById(int templateId, string id)
        {
            List<FORM_TEMPLATE_SQL> list = context.FORM_TEMPLATE_SQL.Where(c => c.TEMPLATE_ID == templateId && c.KEY == id).ToList();
            return list;
        }

        public virtual List<FORM_TEMPLATE_DYNAMIC_ELEMENTS> ListFormTemplateDynamicElementById(int templateId, string id)
        {
            List<FORM_TEMPLATE_DYNAMIC_ELEMENTS> list = context.FORM_TEMPLATE_DYNAMIC_ELEMENTS.Where(c => c.TEMPLATE_ID == templateId && c.KEY == id).ToList();
            return list;
        }

        public virtual List<FORM_TEMPLATE_LIBRARY> ListPublicFormTemplateLibrary()
        {
            List<FORM_TEMPLATE_LIBRARY> list = context.FORM_TEMPLATE_LIBRARY.Where(c => !c.FORM_TEMPLATE_ID.HasValue).ToList();
            return list;
        }

        public virtual List<FORM_TEMPLATE_LIBRARY> ListFormTemplateLibrary(int templateid, string keyword)
        {
            List<FORM_TEMPLATE_LIBRARY> list = context.FORM_TEMPLATE_LIBRARY.Where(c => c.FORM_TEMPLATE_ID == templateid && (keyword == null || keyword == "" || c.QUESTION_CONTENT.Contains(keyword))).ToList();
            return list;
        }

        public virtual List<FORM_TEMPLATE_LIBRARY_OPTION> ListFormTemplateLibraryOption(int libraryid)
        {
            List<FORM_TEMPLATE_LIBRARY_OPTION> list = context.FORM_TEMPLATE_LIBRARY_OPTION.Where(c => c.LIBRARY_ID == libraryid).OrderBy(c => c.DISPLAY_ORDER).ToList();
            return list;
        }

        public virtual List<FORM_INSTANCES> ListFormInstancesByTemplateId(int templateid)
        {
            List<FORM_INSTANCES> list = context.FORM_INSTANCES.Where(c => c.TEMPLATE_ID == templateid).ToList();

            return list;
        }

        public virtual List<FORM_INSTANCE_ELEMENTS> ListFormInstanceElements(int instanceid, string name)
        {
            List<FORM_INSTANCE_ELEMENTS> list = context.FORM_INSTANCE_ELEMENTS.Where(c => c.INSTANCE_ID == instanceid && c.NAME == name).ToList();

            return list;
        }

        public virtual List<FORM_TEMPLATES> GetFormTemplates(List<int> ids)
        {
            return context.FORM_TEMPLATES.Where(c => ids.Contains(c.TEMPLATE_ID)).ToList();
        }

        public virtual List<FORM_INSTANCES> GetFormInstanceByCreateAndTemplate(string creater, int templateid)
        {
            return context.FORM_INSTANCES.Where(c => c.TEMPLATE_ID == templateid && c.CREATER == creater).ToList();
        }

        public virtual List<FORM_INSTANCES> GetChildFormInstance(int instanceid)
        {
            return context.FORM_INSTANCES.Where(c => c.PARENT_INSTANCE_ID == instanceid).OrderBy(c => c.INSTANCE_ID).ToList();
        }

        public virtual List<FORM_INSTANCES> GetBeforeFormInstance(FORM_INSTANCES instance)
        {
            return context.FORM_INSTANCES.Where(c => c.PARENT_INSTANCE_ID == instance.PARENT_INSTANCE_ID && c.TEMPLATE_ID < instance.TEMPLATE_ID).OrderBy(c => c.TEMPLATE_ID).ToList();
        }

        public virtual List<FORM_INSTANCES> GetAfterFormInstance(FORM_INSTANCES instance)
        {
            return context.FORM_INSTANCES.Where(c => c.PARENT_INSTANCE_ID == instance.PARENT_INSTANCE_ID && c.TEMPLATE_ID > instance.TEMPLATE_ID).OrderBy(c => c.TEMPLATE_ID).ToList();
        }

        public FORM_INSTANCE_TARGETS GetInstanceTarget(int instanceid, string targetid)
        {
            return context.FORM_INSTANCE_TARGETS.Where(c => c.INSTANCE_ID == instanceid && c.TargetID == targetid).FirstOrDefault();
        }

        public List<FORM_INSTANCE_TARGETS> GetInstanceTargetsByTargetID(int instanceid, string targetid)
        {
            return context.FORM_INSTANCE_TARGETS.Where(c => c.INSTANCE_ID == instanceid && c.TargetID == targetid).ToList();
        }

        public List<FORM_INSTANCE_TARGETS> GetInstanceTargets(int instanceid)
        {
            return context.FORM_INSTANCE_TARGETS.Where(c => c.INSTANCE_ID == instanceid).ToList();
        }

        public virtual int CountFormInstanceElements(int instanceid)
        {
            return context.FORM_INSTANCE_ELEMENTS.Count(c => c.INSTANCE_ID == instanceid);
        }

        public virtual FORM_TEMPLATES GetFormTemplateById(int templateid)
        {
            return context.FORM_TEMPLATES.Where(c => c.TEMPLATE_ID == templateid).FirstOrDefault();
        }


        public virtual List<FORM_TEMPLATES> GetFormTemplateByParentId(int templateid)
        {
            return context.FORM_TEMPLATES.Where(c => c.PARENT_TEMPLATE_ID == templateid).ToList();
        }
        public virtual List<FORM_INSTANCES> GetFormInstanceByTargetID(string targetid)
        {
            List<FORM_INSTANCE_TARGETS> targets = context.FORM_INSTANCE_TARGETS.Where(c => 
                ( 
                (c.TargetID == targetid)
                )
                && (c.Status == "0"
                && (
                c.FORM_INSTANCES.expireDate == null
                ||
                (c.FORM_INSTANCES.expireDate != null && c.FORM_INSTANCES.expireDate.Value >= DateTime.Now.Date)))

                ).ToList();

            return context.FORM_INSTANCES.Where(c => targets.Select(d => d.INSTANCE_ID).Contains(c.INSTANCE_ID)).ToList();
        }


        public virtual List<FORM_INSTANCES> GetChoiceFormInstanceByEvalTargetID(List<string> evaltargetid, string empcode)
        {
            List<FORM_INSTANCE_TARGETS> targets = context.FORM_INSTANCE_TARGETS.Where(c =>
                (
                (evaltargetid.Contains( c.FORM_INSTANCES.EvalTargetID))
                && c.TargetID != empcode
                && (c.TargetID == null || c.TargetID == "")
                )
                && c.FORM_INSTANCES.FORM_TEMPLATES.TEMPLATE_REMARK == "C"
                && (c.Status == "0"
                && (
                c.FORM_INSTANCES.expireDate == null
                ||
                (c.FORM_INSTANCES.expireDate != null && c.FORM_INSTANCES.expireDate.Value >= DateTime.Now.Date)))

                ).ToList();

            return context.FORM_INSTANCES.Where(c => targets.Select(d => d.INSTANCE_ID).Contains(c.INSTANCE_ID)).ToList();
        }

        public virtual List<FORM_INSTANCES> GetFormInstanceByEvalTargetId(string evaltargetid)
        {
            return context.FORM_INSTANCES.Where(c => c.EvalTargetID == evaltargetid).ToList();
        }

        public virtual FORM_INSTANCES GetExFormInstance(FORM_INSTANCES instance)
        {
            if (instance.PARENT_INSTANCE_ID != null)
            {
                FORM_INSTANCES exinstance = context.FORM_INSTANCES.Where(c => c.PARENT_INSTANCE_ID == instance.PARENT_INSTANCE_ID && c.INSTANCE_ID < instance.INSTANCE_ID).OrderByDescending(c => c.INSTANCE_ID).FirstOrDefault();
                return exinstance;
            }
            else
            {
                return null;
            }
        }

        public virtual List<FORM_INSTANCES> GetDoneFormInstanceByTargetID(string targetid)
        {
            List<FORM_INSTANCE_TARGETS> targets = context.FORM_INSTANCE_TARGETS.Where(c => c.TargetID == targetid
                &&
                c.FORM_INSTANCES.INSTANCE_CREATE_DATETIME >= DateTime.Now.Date.AddMonths(-4)
                &&
                c.FORM_INSTANCES.INSTANCE_CREATE_DATETIME >= new DateTime(2014, 9, 1)
                && (c.Status != "0"
                ||
                (c.Status == "0" && c.FORM_INSTANCES.expireDate != null && c.FORM_INSTANCES.expireDate.Value < DateTime.Now.Date && c.FORM_INSTANCES.expireDate.Value >= DateTime.Now.Date.AddMonths(-4) && c.FORM_INSTANCES.INSTANCE_CREATE_DATETIME >= new DateTime(2014, 9, 1))
                )
                ).ToList();

            return context.FORM_INSTANCES.Where(c => targets.Select(d => d.INSTANCE_ID).Contains(c.INSTANCE_ID)).ToList();
        }

        public virtual double? GetInstanceScore(int instanceID)
        {
            var elist = from exp in context.FORM_INSTANCE_EXPRESSIONS
                        join tempexp in context.FORM_TEMPLATE_EXPRESSIONS
                        on exp.TEMPLATE_EXPRESSION_ID equals tempexp.TEMPLATE_EXPRESSION_ID
                        where tempexp.ISFINALSCORE && exp.INSTANCE_ID == instanceID
                        select exp.EXPRESSION_VALUE;

            if (elist.Count() > 0)
            {
                return elist.FirstOrDefault();
            }
            else
            {
                return null;
            }

        }


        public virtual List<STATISTIC_DATA_LIST> GetStatisticDataListByInhospid(int templateid
                    , List<string> inhospids
                    )
        {
            List<STATISTIC_DATA_LIST> result = new List<STATISTIC_DATA_LIST>();

            List<int> templateidlist = context.FORM_TEMPLATES.Where(c => c.TEMPLATE_ID == templateid || c.PARENT_TEMPLATE_ID == templateid).Select(c => c.TEMPLATE_ID).ToList();

            List<FORM_TEMPLATE_GROUPS> groups = context.FORM_TEMPLATE_GROUPS.Where(c => templateidlist.Contains(c.TEMPLATE_ID)).OrderBy(c => c.DISPLAY_ORDER).ToList();

            List<FORM_INSTANCES> instances = context.FORM_INSTANCES.Where(c => inhospids.Contains(c.INHOSPID) && templateidlist.Contains(c.TEMPLATE_ID)).ToList();

            List<FORM_TEMPLATE_ELEMENTS> telements = context.FORM_TEMPLATE_ELEMENTS.Where(c => templateidlist.Contains(c.TEMPLATE_ID)).ToList();

            foreach (FORM_INSTANCES instance in instances)
            {
                string statusname = "";

                if (instance.Status == "0")
                {
                    statusname = "未完成";
                }
                else
                {
                    statusname = "已完成";
                }

                STATISTIC_DATA_LIST data = new STATISTIC_DATA_LIST();

                List<FORM_INSTANCE_ELEMENTS> elements = context.FORM_INSTANCE_ELEMENTS.Where(c => c.INSTANCE_ID == instance.INSTANCE_ID).ToList();

                data.InstanceID = instance.INSTANCE_ID;

                data.EvalTargetID = instance.EvalTargetID;

                string targetid = "";
                foreach (string target in instance.FORM_INSTANCE_TARGETS.Select(c => c.TargetID).Distinct())
                {
                    targetid += target + ",";
                }

                if (targetid != "")
                {
                    targetid = targetid.Substring(0, targetid.Length - 1);
                }

                data.TargetID = targetid;
                data.StatusName = statusname;

                foreach (FORM_TEMPLATE_GROUPS group in groups)
                {
                    STATISTIC_GROUP_DATA gdata = new STATISTIC_GROUP_DATA();
                    gdata.GroupName = group.GROUP_NAME;
                    gdata.Value = "";
                    foreach (FORM_TEMPLATE_ELEMENTS tele in telements.Where(c => c.GROUP_ID == group.GROUP_ID))
                    {
                        FORM_INSTANCE_ELEMENTS ele = elements.Where(c => c.ID == tele.ID).FirstOrDefault();
                        if (ele != null)
                        {
                            switch (tele.CONTROL_TYPE)
                            {
                                case "text":
                                case "textarea":
                                case "select":
                                    gdata.Value += ele.ELEMENT_VALUE + ",";
                                    break;
                                case "checkbox":
                                case "radio":
                                    if (ele.ELEMENT_VALUE == "true")
                                    {
                                        gdata.Value += tele.DISPLAY_NAME + ",";
                                    }
                                    break;
                            }
                        }
                    }

                    if (gdata.Value.EndsWith(","))
                    {
                        gdata.Value = gdata.Value.Substring(0, gdata.Value.Length - 1);
                    }

                    data.GroupData.Add(gdata);
                }


                result.Add(data);
            }


            return result;
        }

        public virtual List<FORM_INSTANCES> GetFormInstanceByFtlistids(List<string> ftlistids, int templateid)
        {
            List<int> templateids = context.FORM_TEMPLATES.Where(c => c.TEMPLATE_ID == templateid || c.PARENT_TEMPLATE_ID == templateid).Select(c => c.TEMPLATE_ID).ToList();


            return context.FORM_INSTANCES.Where(c => ftlistids.Contains(c.INSTANCE_REMARK) && templateids.Contains(c.TEMPLATE_ID)).ToList();
        }

        public virtual List<FORM_INSTANCES> GetFormInstanceByInstanceIDs(List<int> instanceids)
        {
            List<int> ids = instanceids;
            var data = from ins in context.FORM_INSTANCES
                       where instanceids.Contains(ins.INSTANCE_ID)
                       select ins;

            return data.ToList();
        }

        public virtual List<FORM_INSTANCES> GetFormInstanceByInhospid(List<string> inhospids,int templateid)
        {
            List<int> templateids = context.FORM_TEMPLATES.Where(c => c.TEMPLATE_ID == templateid || c.PARENT_TEMPLATE_ID == templateid).Select(c => c.TEMPLATE_ID).ToList();


            return context.FORM_INSTANCES.Where(c => inhospids.Contains(c.INHOSPID) && templateids.Contains(c.TEMPLATE_ID)).ToList();
        }


        public virtual List<STATISTIC_DATA_LIST> GetStatisticDataListByInstanceID(int instanceid,bool responseonly)
        {
            List<STATISTIC_DATA_LIST> result = new List<STATISTIC_DATA_LIST>();
            FORM_INSTANCES ins = context.FORM_INSTANCES.Where(c => c.INSTANCE_ID == instanceid).FirstOrDefault();


            List<int> templateids = new List<int>();
            templateids.Add(ins.TEMPLATE_ID);

            foreach (int id in templateids)
            {
                List<FORM_TEMPLATE_GROUPS> groups = context.FORM_TEMPLATE_GROUPS.Where(c => c.TEMPLATE_ID == id && (!responseonly || c.TO_EVALTARGET)).OrderBy(c => c.DISPLAY_ORDER).ToList();

                List<FORM_INSTANCES> instances = new List<FORM_INSTANCES>() { ins };

                List<FORM_TEMPLATE_ELEMENTS> telements = context.FORM_TEMPLATE_ELEMENTS.Where(c => c.TEMPLATE_ID == id).ToList();

                foreach (FORM_INSTANCES instance in instances)
                {
                    string statusname = "";

                    if (instance.Status == "0")
                    {
                        statusname = "未完成";
                    }
                    else
                    {
                        statusname = "已完成";
                    }

                    STATISTIC_DATA_LIST data = new STATISTIC_DATA_LIST();

                    List<FORM_INSTANCE_ELEMENTS> elements = context.FORM_INSTANCE_ELEMENTS.Where(c => c.INSTANCE_ID == instance.INSTANCE_ID).ToList();
                    if (instance.PARENT_INSTANCE_ID != null)
                    {
                        data.InstanceID = instance.PARENT_INSTANCE_ID.Value;
                    }
                    else
                    {
                        data.InstanceID = instance.INSTANCE_ID;
                    }

                    data.CreateDate = instance.INSTANCE_CREATE_DATETIME;

                    data.EvalTargetID = instance.EvalTargetID;
                    data.EduTermID = instance.INHOSPID;

                    string targetid = "";
                    string cstatus = "";
                    foreach (FORM_INSTANCE_TARGETS target in instance.FORM_INSTANCE_TARGETS.Distinct())
                    {
                        string completestatus = "";
                        if (target.Status == "0")
                        {
                            completestatus = "未完成";
                        }
                        else
                        {
                            completestatus = "已完成";
                        }

                        targetid += target.TargetID + ",";
                        cstatus += target.TargetID + "(" + completestatus + ")" + ",";
                    }

                    if (targetid != "")
                    {
                        targetid = targetid.Substring(0, targetid.Length - 1);
                    }

                    data.CompleteStatus = cstatus;
                    data.TargetID = targetid;
                    data.StatusName = statusname;

                    foreach (FORM_TEMPLATE_GROUPS group in groups)
                    {
                        STATISTIC_GROUP_DATA gdata = new STATISTIC_GROUP_DATA();
                        gdata.GroupName = group.GROUP_NAME;
                        gdata.Value = "";
                        foreach (FORM_TEMPLATE_ELEMENTS tele in telements.Where(c => c.GROUP_ID == group.GROUP_ID))
                        {
                            FORM_INSTANCE_ELEMENTS ele = elements.Where(c => c.ID == tele.ID).FirstOrDefault();
                            if (ele != null)
                            {
                                switch (tele.CONTROL_TYPE)
                                {
                                    case "text":
                                    case "textarea":
                                    case "select":
                                        gdata.Value += ele.ELEMENT_VALUE + ",";
                                        break;
                                    case "checkbox":
                                    case "radio":
                                        if (ele.ELEMENT_VALUE == "true")
                                        {
                                            gdata.Value += tele.DISPLAY_NAME + ",";
                                        }
                                        break;
                                }
                            }
                        }

                        if (gdata.Value.EndsWith(","))
                        {
                            gdata.Value = gdata.Value.Substring(0, gdata.Value.Length - 1);
                        }

                        data.GroupData.Add(gdata);
                    }


                    result.Add(data);
                }
            }

            return result;
        }



        public virtual List<STATISTIC_DATA_LIST> GetQuestionStatisticDataList(int templateid,DateTime sdate,DateTime edate)
        {
            List<STATISTIC_DATA_LIST> result = new List<STATISTIC_DATA_LIST>();

            List<int> templateids = new List<int>();
            templateids.Add(templateid);
            templateids.AddRange(context.FORM_TEMPLATES.Where(c => c.PARENT_TEMPLATE_ID == templateid).Select(c => c.TEMPLATE_ID));
            List<FORM_TEMPLATE_ELEMENTS> telements = context.FORM_TEMPLATE_ELEMENTS.Where(c => c.TEMPLATE_ID == templateid).ToList();
            int mainid = templateid;

            foreach (int id in templateids)
            {
                List<FORM_TEMPLATE_LIBRARY> libs = context.FORM_TEMPLATE_LIBRARY.Where(c => c.FORM_TEMPLATE_ID == id).ToList();

                List<FORM_TEMPLATE_GROUPS> groups = context.FORM_TEMPLATE_GROUPS.Where(c => c.TEMPLATE_ID == id).OrderBy(c => c.DISPLAY_ORDER).ToList();

                List<FORM_INSTANCES> instances = context.FORM_INSTANCES.Where(c => c.TEMPLATE_ID == id && c.INSTANCE_CREATE_DATETIME >= sdate && c.INSTANCE_CREATE_DATETIME <= edate).ToList();

                

                foreach (FORM_INSTANCES instance in instances)
                {

                    STATISTIC_DATA_LIST data = new STATISTIC_DATA_LIST();

                    List<FORM_INSTANCE_ELEMENTS> elements = context.FORM_INSTANCE_ELEMENTS.Where(c => c.INSTANCE_ID == instance.INSTANCE_ID).ToList();
                    if (instance.PARENT_INSTANCE_ID != null)
                    {
                        data.InstanceID = instance.PARENT_INSTANCE_ID.Value;
                    }
                    else
                    {
                        data.InstanceID = instance.INSTANCE_ID;
                    }

                    data.CreateDate = instance.INSTANCE_CREATE_DATETIME;

                    data.EvalTargetID = instance.EvalTargetID;
                    data.EduTermID = instance.INHOSPID;

                    data.TargetID = instance.TargetID;

                    if (libs.Count > 0)
                    {

                        foreach (FORM_TEMPLATE_LIBRARY group in libs)
                        {
                            List<FORM_TEMPLATE_LIBRARY_OPTION> options = context.FORM_TEMPLATE_LIBRARY_OPTION.Where(c => c.LIBRARY_ID == group.FORM_TEMPLATE_LIBRARY_ID).ToList();

                            STATISTIC_GROUP_DATA gdata = new STATISTIC_GROUP_DATA();
                            gdata.GroupName = group.QUESTION_CONTENT;
                            gdata.Value = "";
                            foreach (FORM_TEMPLATE_LIBRARY_OPTION tele in options)
                            {
                                FORM_INSTANCE_ELEMENTS ele = elements.Where(c => c.ID == tele.OPTION_TYPE + tele.OPTION_ID.ToString()).FirstOrDefault();
                                if (ele != null)
                                {
                                    switch (tele.OPTION_TYPE)
                                    {
                                        case "text":
                                            gdata.Value += ele.ELEMENT_VALUE + ",";
                                            break;
                                        case "checkbox":
                                        case "radio":
                                            if (ele.ELEMENT_VALUE == "true")
                                            {
                                                if (tele.OPTION_POINTS != null)
                                                {
                                                    gdata.Value += tele.OPTION_POINTS.ToString() + ",";
                                                }
                                                else
                                                {
                                                    gdata.Value += tele.OPTION_TEXT + ",";
                                                }
                                            }
                                            break;
                                    }
                                }
                            }

                            if (gdata.Value.EndsWith(","))
                            {
                                gdata.Value = gdata.Value.Substring(0, gdata.Value.Length - 1);
                            }

                            data.GroupData.Add(gdata);
                        }
                    }

                    if (groups.Count > 0)
                    {

                        foreach (FORM_TEMPLATE_GROUPS group in groups)
                        {
                            STATISTIC_GROUP_DATA gdata = new STATISTIC_GROUP_DATA();
                            gdata.GroupName = group.GROUP_NAME;
                            gdata.Value = "";
                            foreach (FORM_TEMPLATE_ELEMENTS tele in telements.Where(c => c.GROUP_ID == group.GROUP_ID))
                            {
                                FORM_INSTANCE_ELEMENTS ele = elements.Where(c => c.ID == tele.ID).FirstOrDefault();
                                if (ele != null)
                                {
                                    switch (tele.CONTROL_TYPE)
                                    {
                                        case "text":
                                        case "textarea":
                                        case "select":
                                            gdata.Value += ele.ELEMENT_VALUE + ",";
                                            break;
                                        case "checkbox":
                                        case "radio":
                                            if (ele.ELEMENT_VALUE == "true")
                                            {
                                                gdata.Value += tele.DISPLAY_NAME + ",";
                                            }
                                            break;
                                    }
                                }
                            }

                            if (gdata.Value.EndsWith(","))
                            {
                                gdata.Value = gdata.Value.Substring(0, gdata.Value.Length - 1);
                            }

                            data.GroupData.Add(gdata);
                        }


                    }



                    result.Add(data);
                }
            }

            return result;
        }




        public virtual List<STATISTIC_DATA_LIST> GetStatisticDataListByFtlistIDs(int templateid
            , List<string> instance_remark //ftlistid (表單發送id)
            )
        {
            List<STATISTIC_DATA_LIST> result = new List<STATISTIC_DATA_LIST>();

            List<int> templateids = new List<int>();
            templateids.Add(templateid);
            templateids.AddRange(context.FORM_TEMPLATES.Where(c => c.PARENT_TEMPLATE_ID == templateid).Select(c => c.TEMPLATE_ID));

            int mainid = templateid;



            foreach (int id in templateids)
            {

                
                List<FORM_TEMPLATE_GROUPS> groups = context.FORM_TEMPLATE_GROUPS.Where(c => c.TEMPLATE_ID == id).OrderBy(c => c.DISPLAY_ORDER).ToList();
                string remarkstr = string.Join(",", instance_remark);
                var instances = (from ins in context.FORM_INSTANCES
                                 where remarkstr.IndexOf(ins.INSTANCE_REMARK)>=0 && ins.TEMPLATE_ID == id
                                 select new { ins.Status, ins.PARENT_INSTANCE_ID, ins.INSTANCE_ID, ins.INSTANCE_CREATE_DATETIME, ins.EvalTargetID, ins.INHOSPID, ins.FORM_INSTANCE_TARGETS }).ToList();



                List<FORM_TEMPLATE_ELEMENTS> telements = context.FORM_TEMPLATE_ELEMENTS.Where(c => c.TEMPLATE_ID == id).ToList();

                foreach (var instance in instances)
                {
                    string statusname = "";

                    if (instance.Status == "0")
                    {
                        statusname = "未完成";
                    }
                    else
                    {
                        statusname = "已完成";
                    }

                    STATISTIC_DATA_LIST data = new STATISTIC_DATA_LIST();

                    List<FORM_INSTANCE_ELEMENTS> elements = context.FORM_INSTANCE_ELEMENTS.Where(c => c.INSTANCE_ID == instance.INSTANCE_ID).ToList();
                    if (instance.PARENT_INSTANCE_ID != null)
                    {
                        data.InstanceID = instance.PARENT_INSTANCE_ID.Value;
                    }
                    else
                    {
                        data.InstanceID = instance.INSTANCE_ID;
                    }

                    data.CreateDate = instance.INSTANCE_CREATE_DATETIME;

                    data.EvalTargetID = instance.EvalTargetID;
                    data.EduTermID = instance.INHOSPID;

                    string targetid = "";
                    string cstatus = "";
                    foreach (FORM_INSTANCE_TARGETS target in instance.FORM_INSTANCE_TARGETS.Distinct())
                    {
                        string completestatus = "";
                        if (target.Status == "0")
                        {
                            completestatus = "未完成";
                        }
                        else
                        {
                            completestatus = "已完成";
                        }

                        targetid += target.TargetID + ",";
                        cstatus += target.TargetID + "(" + completestatus + ")" + ",";

                    }

                    if (targetid != "")
                    {
                        targetid = targetid.Substring(0, targetid.Length - 1);
                    }

                    data.CompleteStatus = cstatus;
                    data.TargetID = targetid;
                    data.StatusName = statusname;

                    foreach (FORM_TEMPLATE_GROUPS group in groups)
                    {
                        STATISTIC_GROUP_DATA gdata = new STATISTIC_GROUP_DATA();
                        gdata.GroupName = group.GROUP_NAME;
                        gdata.Value = "";
                        foreach (FORM_TEMPLATE_ELEMENTS tele in telements.Where(c => c.GROUP_ID == group.GROUP_ID))
                        {
                            FORM_INSTANCE_ELEMENTS ele = elements.Where(c => c.ID == tele.ID).FirstOrDefault();
                            if (ele != null)
                            {
                                switch (tele.CONTROL_TYPE)
                                {
                                    case "text":
                                    case "textarea":
                                    case "select":
                                        gdata.Value += ele.ELEMENT_VALUE + ",";
                                        break;
                                    case "checkbox":
                                    case "radio":
                                        if (ele.ELEMENT_VALUE == "true")
                                        {
                                            gdata.Value += tele.DISPLAY_NAME + ",";
                                        }
                                        break;
                                }
                            }
                        }

                        if (gdata.Value.EndsWith(","))
                        {
                            gdata.Value = gdata.Value.Substring(0, gdata.Value.Length - 1);
                        }

                        data.GroupData.Add(gdata);
                    }


                    result.Add(data);
                }
            }

            return result;
        }

        public virtual List<STATISTIC_DATA_LIST> GetStatisticDataList(int templateid
            , string instance_remark //ftlistid (表單發送id)
            )
        {
            List<STATISTIC_DATA_LIST> result = new List<STATISTIC_DATA_LIST>();

            List<int> templateids = new List<int>();
            templateids.Add(templateid);
            templateids.AddRange(context.FORM_TEMPLATES.Where(c => c.PARENT_TEMPLATE_ID == templateid).Select(c => c.TEMPLATE_ID));

            int mainid = templateid;

            foreach (int id in templateids)
            {


                List<FORM_TEMPLATE_GROUPS> groups = context.FORM_TEMPLATE_GROUPS.Where(c => c.TEMPLATE_ID == id).OrderBy(c => c.DISPLAY_ORDER).ToList();

                var instances = from ins in context.FORM_INSTANCES
                                where ins.INSTANCE_REMARK == instance_remark && ins.TEMPLATE_ID == id
                                select new { ins.Status, ins.PARENT_INSTANCE_ID, ins.INSTANCE_ID, ins.INSTANCE_CREATE_DATETIME, ins.EvalTargetID, ins.INHOSPID, ins.FORM_INSTANCE_TARGETS };

                

                List<FORM_TEMPLATE_ELEMENTS> telements = context.FORM_TEMPLATE_ELEMENTS.Where(c => c.TEMPLATE_ID == id).ToList();

                foreach (var instance in instances)
                {
                    string statusname = "";

                    if (instance.Status == "0")
                    {
                        statusname = "未完成";
                    }
                    else
                    {
                        statusname = "已完成";
                    }

                    STATISTIC_DATA_LIST data = new STATISTIC_DATA_LIST();

                    List<FORM_INSTANCE_ELEMENTS> elements = context.FORM_INSTANCE_ELEMENTS.Where(c => c.INSTANCE_ID == instance.INSTANCE_ID).ToList();
                    if (instance.PARENT_INSTANCE_ID != null)
                    {
                        data.InstanceID = instance.PARENT_INSTANCE_ID.Value;
                    }
                    else
                    {
                        data.InstanceID = instance.INSTANCE_ID;
                    }

                    data.CreateDate = instance.INSTANCE_CREATE_DATETIME;
                    
                    data.EvalTargetID = instance.EvalTargetID;
                    data.EduTermID = instance.INHOSPID;

                    string targetid = "";
                    string cstatus = "";
                    foreach (FORM_INSTANCE_TARGETS target in instance.FORM_INSTANCE_TARGETS.Distinct())
                    {
                        string completestatus = "";
                        if (target.Status == "0")
                        {
                            completestatus = "未完成";
                        }
                        else
                        {
                            completestatus = "已完成";
                        }

                        targetid += target.TargetID + ",";
                        cstatus += target.TargetID + "(" + completestatus + ")" + ",";
                    }

                    if (targetid != "")
                    {
                        targetid = targetid.Substring(0, targetid.Length - 1);
                    }

                    data.CompleteStatus = cstatus;
                    data.TargetID = targetid;
                    data.StatusName = statusname;

                    foreach (FORM_TEMPLATE_GROUPS group in groups)
                    {
                        STATISTIC_GROUP_DATA gdata = new STATISTIC_GROUP_DATA();
                        gdata.GroupName = group.GROUP_NAME;
                        gdata.Value = "";
                        foreach (FORM_TEMPLATE_ELEMENTS tele in telements.Where(c => c.GROUP_ID == group.GROUP_ID))
                        {
                            FORM_INSTANCE_ELEMENTS ele = elements.Where(c => c.ID == tele.ID).FirstOrDefault();
                            if (ele != null)
                            {
                                switch (tele.CONTROL_TYPE)
                                {
                                    case "text":
                                    case "textarea":
                                    case "select":
                                        gdata.Value += ele.ELEMENT_VALUE + ",";
                                        break;
                                    case "checkbox":
                                    case "radio":
                                        if (ele.ELEMENT_VALUE == "true")
                                        {
                                            gdata.Value += tele.DISPLAY_NAME + ",";
                                        }
                                        break;
                                }
                            }
                        }

                        if (gdata.Value.EndsWith(","))
                        {
                            gdata.Value = gdata.Value.Substring(0, gdata.Value.Length - 1);
                        }

                        data.GroupData.Add(gdata);
                    }


                    result.Add(data);
                }
            }

            return result;
        }


        public virtual List<STATISTIC_LIST> GetStatisticList(int templateid, Dictionary<string, string> displayname)
        {
            List<STATISTIC_LIST> result = new List<STATISTIC_LIST>();
            List< FORM_INSTANCES> inslist = context.FORM_INSTANCES.Where(c=> c.TEMPLATE_ID == templateid).ToList();

            foreach (string id in displayname.Keys)
            {
                List<FORM_INSTANCE_ELEMENTS> eles = context.FORM_INSTANCE_ELEMENTS.Where(c => inslist.Select(x => x.INSTANCE_ID).Contains(c.INSTANCE_ID) && c.ID == id).ToList();

                foreach (FORM_INSTANCE_ELEMENTS element in eles)
                {
                    STATISTIC_LIST item = result.Where(c => c.Name == displayname[id] && c.Id == id).FirstOrDefault();
                    if (item == null)
                    {
                        item = new STATISTIC_LIST();
                        item.Name = displayname[id];
                        item.ControlType = context.FORM_TEMPLATE_ELEMENTS.Where(c => c.TEMPLATE_ID == templateid && c.ID == element.ID).FirstOrDefault().CONTROL_TYPE;
                        item.Id = id;
                        result.Add(item);
                    }

                    FORM_INSTANCES instance = inslist.Where(c => c.INSTANCE_ID == element.INSTANCE_ID).FirstOrDefault();
                    foreach (FORM_INSTANCE_TARGETS target in instance.FORM_INSTANCE_TARGETS)
                    {
                        item.DataList.Add(target.TargetID, element.ELEMENT_VALUE);
                    }
                }
            }

            return result;
        }


        public virtual List<STATISTIC_DATA> GetStatisticData(int templateid, Dictionary<string, string> displayname, ref int count)
        {
            List<STATISTIC_DATA> result = new List<STATISTIC_DATA>();

            List<FORM_INSTANCES> inslist = ListFormInstancesByTemplateId(templateid);
            count = inslist.Count;


            foreach (FORM_INSTANCES ins in inslist)
            {
                List<FORM_INSTANCE_ELEMENTS> elements = ListFormInstanceElements(ins.INSTANCE_ID);

                foreach (string id in displayname.Keys)
                {
                    FORM_INSTANCE_ELEMENTS ele = elements.Where(c => c.ID == id).FirstOrDefault();
                    if (ele != null)
                    {
                        List<FORM_INSTANCE_ELEMENTS> sublist = elements.Where(c => c.NAME == ele.NAME).ToList();

                        if (sublist.Count == 0)
                        {

                        }
                        //radio button
                        else if (sublist.Count > 1)
                        {
                            foreach (FORM_INSTANCE_ELEMENTS subele in sublist)
                            {
                                if (subele.ID == id)
                                {
                                    if (subele.ELEMENT_VALUE == "true")
                                    {

                                        STATISTIC_DATA data = result.Where(c => c.Id == subele.ID).FirstOrDefault();
                                        if (data == null)
                                        {
                                            data = new STATISTIC_DATA();
                                            data.Id = subele.ID;
                                            data.Name = subele.NAME;
                                            data.EleValue = displayname[subele.ID];
                                            result.Add(data);
                                        }
                                        data.Count++;
                                    }
                                }
                            }

                        }
                        //checkbox or text
                        else if (sublist.Count == 1)
                        {
                            FORM_INSTANCE_ELEMENTS iele = sublist.FirstOrDefault();
                            FORM_TEMPLATE_ELEMENTS tele = SelectFormTemplateElementByID(templateid, iele.ID);

                            if ((tele != null && tele.CONTROL_TYPE == "checkbox") || (tele == null && iele.ID.Contains("checkbox")))
                            {
                                if (iele.ELEMENT_VALUE == "true")
                                {
                                    STATISTIC_DATA data = result.Where(c => c.Name == iele.NAME).FirstOrDefault();
                                    if (data == null)
                                    {
                                        data = new STATISTIC_DATA();
                                        data.Id = iele.ID;
                                        data.Name = iele.NAME;
                                        data.EleValue = displayname[iele.ID];
                                        result.Add(data);
                                    }
                                    data.Count++;
                                }
                            }
                            else
                            {
                                if (iele.ELEMENT_VALUE != "")
                                {
                                    STATISTIC_DATA data = result.Where(c => c.Name == iele.NAME && c.EleValue == iele.ELEMENT_VALUE).FirstOrDefault();
                                    if (data == null)
                                    {
                                        data = new STATISTIC_DATA();
                                        data.Id = iele.ID;
                                        data.Name = iele.NAME;
                                        data.EleValue = displayname[iele.ID];
                                        result.Add(data);
                                    }
                                    data.Count++;
                                }

                            }
                        }
                    }
                }

            }


            return result;
        }


        public virtual List<FORM_TEMPLATE_GROUPS> GetTemplateGroups(int templateid)
        {
            return context.FORM_TEMPLATE_GROUPS.Where(c => c.TEMPLATE_ID == templateid).OrderBy(c => c.DISPLAY_ORDER).ToList();
        }

        public virtual List<FORM_TEMPLATE_ELEMENTS> GetGroupElements(int groupid)
        {
            return context.FORM_TEMPLATE_ELEMENTS.Where(c => c.GROUP_ID == groupid).ToList();
        }

        public virtual List<FORM_TEMPLATE_SUBMIT_SQL> GetSubmitSql(int templateid)
        {
            return context.FORM_TEMPLATE_SUBMIT_SQL.Where(c => c.TEMPLATE_ID == templateid).ToList();
        }

        public List<FORM_INSTANCES> GetInstanceByRemark(string remark)
        {
            List<FORM_INSTANCES> list = context.FORM_INSTANCES.Where(c => c.INSTANCE_REMARK == remark && c.FORM_INSTANCE_TARGETS.Count > 0).ToList();

            return list;
        }

        public List<FORM_TEMPLATE_NECESSARY> GetTemplateNecessary(int templateid)
        {
            List<FORM_TEMPLATE_NECESSARY> list = context.FORM_TEMPLATE_NECESSARY.Where(c => c.TEMPLATE_ID == templateid).ToList();
            return list;
        }

        public List<FORM_TEMPLATE_SINGLE> GetTemplateSingle(int templateid)
        {
            List<FORM_TEMPLATE_SINGLE> list = context.FORM_TEMPLATE_SINGLE.Where(c => c.TemplateID == templateid).ToList();
            return list;
        }


        public virtual List<FORM_TEMPLATE_PERMISSION> GetTemplatePermission(int templateid)
        {
            return context.FORM_TEMPLATE_PERMISSION.Where(c => c.TEMPLATE_ID == templateid).ToList();
        }


        #endregion
    }

}